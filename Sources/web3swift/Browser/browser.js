//  Web3Swift.js
//
//  Created by Alex Vlasov.
//  Copyright Â© 2018 Alex Vlasov. All rights reserved.
//
(function(){function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s}return e})()({1:[function(require,module,exports){
  "use strict";
  (function Web3SwiftJS() {
    require("./wk.bridge");
    var ZeroClientProvider = require('web3-provider-engine/zero.js');
    var Web3 = require("web3");
    var getAccountsProxified = function(cb) {
      console.log("JS bridging accounts access");
      if (typeof window !== 'undefined' && window.bridge) {
        window.bridge.post('eth_getAccounts', {}, (function(parameters, error) {
          if (error) {
            cb(error.description, null);
          }
          cb(null, parameters['accounts']);
        }));
      } else {
        console.log("No bridge to native code is found");
        cb(true, null);
      }
    };
    var getCoinbaseProxified = function(cb) {
      console.log("JS bridging coinbase access");
      if (typeof window !== 'undefined' && window.bridge) {
        window.bridge.post('eth_coinbase', {}, (function(parameters, error) {
          if (error) {
            cb(error.description, null);
          }
          cb(null, parameters['coinbase']);
        }));
      } else {
        console.log("No bridge to native code is found");
        cb(true, null);
      }
    };
    var getRPCurl = function(cb) {
      console.log("JS bridging rpc url access");
      if (typeof window !== 'undefined' && window.bridge) {
        window.bridge.post('getRPCurl', {}, (function(parameters, error) {
          if (error) {
            cb(error.description, null);
          }
          cb(null, parameters['rpcURL']);
        }));
      } else {
        console.log("No bridge to native code is found");
        cb(true, null);
      }
    };
    var signTransactionProxified = function(tx, cb) {
      console.log("JS bridging sign transaction access");
      if (typeof window !== 'undefined' && window.bridge) {
        window.bridge.post('eth_signTransaction', {transaction: tx}, (function(parameters, error) {
          if (error) {
            cb(error.description, null);
          }
          cb(null, parameters['signedTransaction']);
        }));
      } else {
        console.log("No bridge to native code is found");
        cb(true, null);
      }
    };
    var signPersonalMessageProxified = function(payload, cb) {
      console.log("JS bridging sign message access");
      if (typeof window !== 'undefined' && window.bridge) {
        window.bridge.post('eth_sign', {payload: payload}, (function(parameters, error) {
          if (error) {
            cb(error.description, null);
          }
          var result = parameters['signedMessage'];
          cb(null, result);
        }));
      } else {
        console.log("No bridge to native code is found");
        cb(true, null);
      }
    };
    getRPCurl(function(err, rpcUrl) {
      if (err) {
        console.log("Can not init web3 and proxy");
        return;
      }
      console.log("Using RPC URL " + rpcUrl);
      var engine = ZeroClientProvider({
        getAccounts: getAccountsProxified,
        signTransaction: signTransactionProxified,
        signMessage: signPersonalMessageProxified,
        signPersonalMessage: signPersonalMessageProxified,
        rpcUrl: rpcUrl
      });
      if (typeof window !== 'undefined') {
        if (window.Web3 === undefined && window.web3 === undefined) {
          console.log("Injecting web3");
          window.Web3 = Web3;
          var web3 = new Web3();
          web3.setProvider(engine);
          window.web3 = web3;
          window.web3.eth.getAccounts((function(e, accs) {
            if (e) {
              console.log(e);
            }
            if (accs.length > 0) {
              window.web3.eth.defaultAccount = accs[0];
            }
          }));
        }
        window.ethereum = engine;
      }
    });
  }());
  
  //# sourceURL=/Users/alexvlasov/Blockchain/web3swift/web3swiftJSProxy/index.js
  },{"./wk.bridge":424,"web3":407,"web3-provider-engine/zero.js":397}],2:[function(require,module,exports){
  module.exports = require('./register')().Promise
  
  },{"./register":4}],3:[function(require,module,exports){
  "use strict"
      // global key for user preferred registration
  var REGISTRATION_KEY = '@@any-promise/REGISTRATION',
      // Prior registration (preferred or detected)
      registered = null
  
  /**
   * Registers the given implementation.  An implementation must
   * be registered prior to any call to `require("any-promise")`,
   * typically on application load.
   *
   * If called with no arguments, will return registration in
   * following priority:
   *
   * For Node.js:
   *
   * 1. Previous registration
   * 2. global.Promise if node.js version >= 0.12
   * 3. Auto detected promise based on first successful require of
   *    known promise libraries. Note this is a last resort, as the
   *    loaded library is non-deterministic. node.js >= 0.12 will
   *    always use global.Promise over this priority list.
   * 4. Throws error.
   *
   * For Browser:
   *
   * 1. Previous registration
   * 2. window.Promise
   * 3. Throws error.
   *
   * Options:
   *
   * Promise: Desired Promise constructor
   * global: Boolean - Should the registration be cached in a global variable to
   * allow cross dependency/bundle registration?  (default true)
   */
  module.exports = function(root, loadImplementation){
    return function register(implementation, opts){
      implementation = implementation || null
      opts = opts || {}
      // global registration unless explicitly  {global: false} in options (default true)
      var registerGlobal = opts.global !== false;
  
      // load any previous global registration
      if(registered === null && registerGlobal){
        registered = root[REGISTRATION_KEY] || null
      }
  
      if(registered !== null
          && implementation !== null
          && registered.implementation !== implementation){
        // Throw error if attempting to redefine implementation
        throw new Error('any-promise already defined as "'+registered.implementation+
          '".  You can only register an implementation before the first '+
          ' call to require("any-promise") and an implementation cannot be changed')
      }
  
      if(registered === null){
        // use provided implementation
        if(implementation !== null && typeof opts.Promise !== 'undefined'){
          registered = {
            Promise: opts.Promise,
            implementation: implementation
          }
        } else {
          // require implementation if implementation is specified but not provided
          registered = loadImplementation(implementation)
        }
  
        if(registerGlobal){
          // register preference globally in case multiple installations
          root[REGISTRATION_KEY] = registered
        }
      }
  
      return registered
    }
  }
  
  },{}],4:[function(require,module,exports){
  "use strict";
  module.exports = require('./loader')(window, loadImplementation)
  
  /**
   * Browser specific loadImplementation.  Always uses `window.Promise`
   *
   * To register a custom implementation, must register with `Promise` option.
   */
  function loadImplementation(){
    if(typeof window.Promise === 'undefined'){
      throw new Error("any-promise browser requires a polyfill or explicit registration"+
        " e.g: require('any-promise/register/bluebird')")
    }
    return {
      Promise: window.Promise,
      implementation: 'window.Promise'
    }
  }
  
  },{"./loader":3}],5:[function(require,module,exports){
  var asn1 = exports;
  
  asn1.bignum = require('bn.js');
  
  asn1.define = require('./asn1/api').define;
  asn1.base = require('./asn1/base');
  asn1.constants = require('./asn1/constants');
  asn1.decoders = require('./asn1/decoders');
  asn1.encoders = require('./asn1/encoders');
  
  },{"./asn1/api":6,"./asn1/base":8,"./asn1/constants":12,"./asn1/decoders":14,"./asn1/encoders":17,"bn.js":53}],6:[function(require,module,exports){
  var asn1 = require('../asn1');
  var inherits = require('inherits');
  
  var api = exports;
  
  api.define = function define(name, body) {
    return new Entity(name, body);
  };
  
  function Entity(name, body) {
    this.name = name;
    this.body = body;
  
    this.decoders = {};
    this.encoders = {};
  };
  
  Entity.prototype._createNamed = function createNamed(base) {
    var named;
    try {
      named = require('vm').runInThisContext(
        '(function ' + this.name + '(entity) {\n' +
        '  this._initNamed(entity);\n' +
        '})'
      );
    } catch (e) {
      named = function (entity) {
        this._initNamed(entity);
      };
    }
    inherits(named, base);
    named.prototype._initNamed = function initnamed(entity) {
      base.call(this, entity);
    };
  
    return new named(this);
  };
  
  Entity.prototype._getDecoder = function _getDecoder(enc) {
    enc = enc || 'der';
    // Lazily create decoder
    if (!this.decoders.hasOwnProperty(enc))
      this.decoders[enc] = this._createNamed(asn1.decoders[enc]);
    return this.decoders[enc];
  };
  
  Entity.prototype.decode = function decode(data, enc, options) {
    return this._getDecoder(enc).decode(data, options);
  };
  
  Entity.prototype._getEncoder = function _getEncoder(enc) {
    enc = enc || 'der';
    // Lazily create encoder
    if (!this.encoders.hasOwnProperty(enc))
      this.encoders[enc] = this._createNamed(asn1.encoders[enc]);
    return this.encoders[enc];
  };
  
  Entity.prototype.encode = function encode(data, enc, /* internal */ reporter) {
    return this._getEncoder(enc).encode(data, reporter);
  };
  
  },{"../asn1":5,"inherits":180,"vm":334}],7:[function(require,module,exports){
  var inherits = require('inherits');
  var Reporter = require('../base').Reporter;
  var Buffer = require('buffer').Buffer;
  
  function DecoderBuffer(base, options) {
    Reporter.call(this, options);
    if (!Buffer.isBuffer(base)) {
      this.error('Input not Buffer');
      return;
    }
  
    this.base = base;
    this.offset = 0;
    this.length = base.length;
  }
  inherits(DecoderBuffer, Reporter);
  exports.DecoderBuffer = DecoderBuffer;
  
  DecoderBuffer.prototype.save = function save() {
    return { offset: this.offset, reporter: Reporter.prototype.save.call(this) };
  };
  
  DecoderBuffer.prototype.restore = function restore(save) {
    // Return skipped data
    var res = new DecoderBuffer(this.base);
    res.offset = save.offset;
    res.length = this.offset;
  
    this.offset = save.offset;
    Reporter.prototype.restore.call(this, save.reporter);
  
    return res;
  };
  
  DecoderBuffer.prototype.isEmpty = function isEmpty() {
    return this.offset === this.length;
  };
  
  DecoderBuffer.prototype.readUInt8 = function readUInt8(fail) {
    if (this.offset + 1 <= this.length)
      return this.base.readUInt8(this.offset++, true);
    else
      return this.error(fail || 'DecoderBuffer overrun');
  }
  
  DecoderBuffer.prototype.skip = function skip(bytes, fail) {
    if (!(this.offset + bytes <= this.length))
      return this.error(fail || 'DecoderBuffer overrun');
  
    var res = new DecoderBuffer(this.base);
  
    // Share reporter state
    res._reporterState = this._reporterState;
  
    res.offset = this.offset;
    res.length = this.offset + bytes;
    this.offset += bytes;
    return res;
  }
  
  DecoderBuffer.prototype.raw = function raw(save) {
    return this.base.slice(save ? save.offset : this.offset, this.length);
  }
  
  function EncoderBuffer(value, reporter) {
    if (Array.isArray(value)) {
      this.length = 0;
      this.value = value.map(function(item) {
        if (!(item instanceof EncoderBuffer))
          item = new EncoderBuffer(item, reporter);
        this.length += item.length;
        return item;
      }, this);
    } else if (typeof value === 'number') {
      if (!(0 <= value && value <= 0xff))
        return reporter.error('non-byte EncoderBuffer value');
      this.value = value;
      this.length = 1;
    } else if (typeof value === 'string') {
      this.value = value;
      this.length = Buffer.byteLength(value);
    } else if (Buffer.isBuffer(value)) {
      this.value = value;
      this.length = value.length;
    } else {
      return reporter.error('Unsupported type: ' + typeof value);
    }
  }
  exports.EncoderBuffer = EncoderBuffer;
  
  EncoderBuffer.prototype.join = function join(out, offset) {
    if (!out)
      out = new Buffer(this.length);
    if (!offset)
      offset = 0;
  
    if (this.length === 0)
      return out;
  
    if (Array.isArray(this.value)) {
      this.value.forEach(function(item) {
        item.join(out, offset);
        offset += item.length;
      });
    } else {
      if (typeof this.value === 'number')
        out[offset] = this.value;
      else if (typeof this.value === 'string')
        out.write(this.value, offset);
      else if (Buffer.isBuffer(this.value))
        this.value.copy(out, offset);
      offset += this.length;
    }
  
    return out;
  };
  
  },{"../base":8,"buffer":84,"inherits":180}],8:[function(require,module,exports){
  var base = exports;
  
  base.Reporter = require('./reporter').Reporter;
  base.DecoderBuffer = require('./buffer').DecoderBuffer;
  base.EncoderBuffer = require('./buffer').EncoderBuffer;
  base.Node = require('./node');
  
  },{"./buffer":7,"./node":9,"./reporter":10}],9:[function(require,module,exports){
  var Reporter = require('../base').Reporter;
  var EncoderBuffer = require('../base').EncoderBuffer;
  var DecoderBuffer = require('../base').DecoderBuffer;
  var assert = require('minimalistic-assert');
  
  // Supported tags
  var tags = [
    'seq', 'seqof', 'set', 'setof', 'objid', 'bool',
    'gentime', 'utctime', 'null_', 'enum', 'int', 'objDesc',
    'bitstr', 'bmpstr', 'charstr', 'genstr', 'graphstr', 'ia5str', 'iso646str',
    'numstr', 'octstr', 'printstr', 't61str', 'unistr', 'utf8str', 'videostr'
  ];
  
  // Public methods list
  var methods = [
    'key', 'obj', 'use', 'optional', 'explicit', 'implicit', 'def', 'choice',
    'any', 'contains'
  ].concat(tags);
  
  // Overridden methods list
  var overridden = [
    '_peekTag', '_decodeTag', '_use',
    '_decodeStr', '_decodeObjid', '_decodeTime',
    '_decodeNull', '_decodeInt', '_decodeBool', '_decodeList',
  
    '_encodeComposite', '_encodeStr', '_encodeObjid', '_encodeTime',
    '_encodeNull', '_encodeInt', '_encodeBool'
  ];
  
  function Node(enc, parent) {
    var state = {};
    this._baseState = state;
  
    state.enc = enc;
  
    state.parent = parent || null;
    state.children = null;
  
    // State
    state.tag = null;
    state.args = null;
    state.reverseArgs = null;
    state.choice = null;
    state.optional = false;
    state.any = false;
    state.obj = false;
    state.use = null;
    state.useDecoder = null;
    state.key = null;
    state['default'] = null;
    state.explicit = null;
    state.implicit = null;
    state.contains = null;
  
    // Should create new instance on each method
    if (!state.parent) {
      state.children = [];
      this._wrap();
    }
  }
  module.exports = Node;
  
  var stateProps = [
    'enc', 'parent', 'children', 'tag', 'args', 'reverseArgs', 'choice',
    'optional', 'any', 'obj', 'use', 'alteredUse', 'key', 'default', 'explicit',
    'implicit', 'contains'
  ];
  
  Node.prototype.clone = function clone() {
    var state = this._baseState;
    var cstate = {};
    stateProps.forEach(function(prop) {
      cstate[prop] = state[prop];
    });
    var res = new this.constructor(cstate.parent);
    res._baseState = cstate;
    return res;
  };
  
  Node.prototype._wrap = function wrap() {
    var state = this._baseState;
    methods.forEach(function(method) {
      this[method] = function _wrappedMethod() {
        var clone = new this.constructor(this);
        state.children.push(clone);
        return clone[method].apply(clone, arguments);
      };
    }, this);
  };
  
  Node.prototype._init = function init(body) {
    var state = this._baseState;
  
    assert(state.parent === null);
    body.call(this);
  
    // Filter children
    state.children = state.children.filter(function(child) {
      return child._baseState.parent === this;
    }, this);
    assert.equal(state.children.length, 1, 'Root node can have only one child');
  };
  
  Node.prototype._useArgs = function useArgs(args) {
    var state = this._baseState;
  
    // Filter children and args
    var children = args.filter(function(arg) {
      return arg instanceof this.constructor;
    }, this);
    args = args.filter(function(arg) {
      return !(arg instanceof this.constructor);
    }, this);
  
    if (children.length !== 0) {
      assert(state.children === null);
      state.children = children;
  
      // Replace parent to maintain backward link
      children.forEach(function(child) {
        child._baseState.parent = this;
      }, this);
    }
    if (args.length !== 0) {
      assert(state.args === null);
      state.args = args;
      state.reverseArgs = args.map(function(arg) {
        if (typeof arg !== 'object' || arg.constructor !== Object)
          return arg;
  
        var res = {};
        Object.keys(arg).forEach(function(key) {
          if (key == (key | 0))
            key |= 0;
          var value = arg[key];
          res[value] = key;
        });
        return res;
      });
    }
  };
  
  //
  // Overridden methods
  //
  
  overridden.forEach(function(method) {
    Node.prototype[method] = function _overridden() {
      var state = this._baseState;
      throw new Error(method + ' not implemented for encoding: ' + state.enc);
    };
  });
  
  //
  // Public methods
  //
  
  tags.forEach(function(tag) {
    Node.prototype[tag] = function _tagMethod() {
      var state = this._baseState;
      var args = Array.prototype.slice.call(arguments);
  
      assert(state.tag === null);
      state.tag = tag;
  
      this._useArgs(args);
  
      return this;
    };
  });
  
  Node.prototype.use = function use(item) {
    assert(item);
    var state = this._baseState;
  
    assert(state.use === null);
    state.use = item;
  
    return this;
  };
  
  Node.prototype.optional = function optional() {
    var state = this._baseState;
  
    state.optional = true;
  
    return this;
  };
  
  Node.prototype.def = function def(val) {
    var state = this._baseState;
  
    assert(state['default'] === null);
    state['default'] = val;
    state.optional = true;
  
    return this;
  };
  
  Node.prototype.explicit = function explicit(num) {
    var state = this._baseState;
  
    assert(state.explicit === null && state.implicit === null);
    state.explicit = num;
  
    return this;
  };
  
  Node.prototype.implicit = function implicit(num) {
    var state = this._baseState;
  
    assert(state.explicit === null && state.implicit === null);
    state.implicit = num;
  
    return this;
  };
  
  Node.prototype.obj = function obj() {
    var state = this._baseState;
    var args = Array.prototype.slice.call(arguments);
  
    state.obj = true;
  
    if (args.length !== 0)
      this._useArgs(args);
  
    return this;
  };
  
  Node.prototype.key = function key(newKey) {
    var state = this._baseState;
  
    assert(state.key === null);
    state.key = newKey;
  
    return this;
  };
  
  Node.prototype.any = function any() {
    var state = this._baseState;
  
    state.any = true;
  
    return this;
  };
  
  Node.prototype.choice = function choice(obj) {
    var state = this._baseState;
  
    assert(state.choice === null);
    state.choice = obj;
    this._useArgs(Object.keys(obj).map(function(key) {
      return obj[key];
    }));
  
    return this;
  };
  
  Node.prototype.contains = function contains(item) {
    var state = this._baseState;
  
    assert(state.use === null);
    state.contains = item;
  
    return this;
  };
  
  //
  // Decoding
  //
  
  Node.prototype._decode = function decode(input, options) {
    var state = this._baseState;
  
    // Decode root node
    if (state.parent === null)
      return input.wrapResult(state.children[0]._decode(input, options));
  
    var result = state['default'];
    var present = true;
  
    var prevKey = null;
    if (state.key !== null)
      prevKey = input.enterKey(state.key);
  
    // Check if tag is there
    if (state.optional) {
      var tag = null;
      if (state.explicit !== null)
        tag = state.explicit;
      else if (state.implicit !== null)
        tag = state.implicit;
      else if (state.tag !== null)
        tag = state.tag;
  
      if (tag === null && !state.any) {
        // Trial and Error
        var save = input.save();
        try {
          if (state.choice === null)
            this._decodeGeneric(state.tag, input, options);
          else
            this._decodeChoice(input, options);
          present = true;
        } catch (e) {
          present = false;
        }
        input.restore(save);
      } else {
        present = this._peekTag(input, tag, state.any);
  
        if (input.isError(present))
          return present;
      }
    }
  
    // Push object on stack
    var prevObj;
    if (state.obj && present)
      prevObj = input.enterObject();
  
    if (present) {
      // Unwrap explicit values
      if (state.explicit !== null) {
        var explicit = this._decodeTag(input, state.explicit);
        if (input.isError(explicit))
          return explicit;
        input = explicit;
      }
  
      var start = input.offset;
  
      // Unwrap implicit and normal values
      if (state.use === null && state.choice === null) {
        if (state.any)
          var save = input.save();
        var body = this._decodeTag(
          input,
          state.implicit !== null ? state.implicit : state.tag,
          state.any
        );
        if (input.isError(body))
          return body;
  
        if (state.any)
          result = input.raw(save);
        else
          input = body;
      }
  
      if (options && options.track && state.tag !== null)
        options.track(input.path(), start, input.length, 'tagged');
  
      if (options && options.track && state.tag !== null)
        options.track(input.path(), input.offset, input.length, 'content');
  
      // Select proper method for tag
      if (state.any)
        result = result;
      else if (state.choice === null)
        result = this._decodeGeneric(state.tag, input, options);
      else
        result = this._decodeChoice(input, options);
  
      if (input.isError(result))
        return result;
  
      // Decode children
      if (!state.any && state.choice === null && state.children !== null) {
        state.children.forEach(function decodeChildren(child) {
          // NOTE: We are ignoring errors here, to let parser continue with other
          // parts of encoded data
          child._decode(input, options);
        });
      }
  
      // Decode contained/encoded by schema, only in bit or octet strings
      if (state.contains && (state.tag === 'octstr' || state.tag === 'bitstr')) {
        var data = new DecoderBuffer(result);
        result = this._getUse(state.contains, input._reporterState.obj)
            ._decode(data, options);
      }
    }
  
    // Pop object
    if (state.obj && present)
      result = input.leaveObject(prevObj);
  
    // Set key
    if (state.key !== null && (result !== null || present === true))
      input.leaveKey(prevKey, state.key, result);
    else if (prevKey !== null)
      input.exitKey(prevKey);
  
    return result;
  };
  
  Node.prototype._decodeGeneric = function decodeGeneric(tag, input, options) {
    var state = this._baseState;
  
    if (tag === 'seq' || tag === 'set')
      return null;
    if (tag === 'seqof' || tag === 'setof')
      return this._decodeList(input, tag, state.args[0], options);
    else if (/str$/.test(tag))
      return this._decodeStr(input, tag, options);
    else if (tag === 'objid' && state.args)
      return this._decodeObjid(input, state.args[0], state.args[1], options);
    else if (tag === 'objid')
      return this._decodeObjid(input, null, null, options);
    else if (tag === 'gentime' || tag === 'utctime')
      return this._decodeTime(input, tag, options);
    else if (tag === 'null_')
      return this._decodeNull(input, options);
    else if (tag === 'bool')
      return this._decodeBool(input, options);
    else if (tag === 'objDesc')
      return this._decodeStr(input, tag, options);
    else if (tag === 'int' || tag === 'enum')
      return this._decodeInt(input, state.args && state.args[0], options);
  
    if (state.use !== null) {
      return this._getUse(state.use, input._reporterState.obj)
          ._decode(input, options);
    } else {
      return input.error('unknown tag: ' + tag);
    }
  };
  
  Node.prototype._getUse = function _getUse(entity, obj) {
  
    var state = this._baseState;
    // Create altered use decoder if implicit is set
    state.useDecoder = this._use(entity, obj);
    assert(state.useDecoder._baseState.parent === null);
    state.useDecoder = state.useDecoder._baseState.children[0];
    if (state.implicit !== state.useDecoder._baseState.implicit) {
      state.useDecoder = state.useDecoder.clone();
      state.useDecoder._baseState.implicit = state.implicit;
    }
    return state.useDecoder;
  };
  
  Node.prototype._decodeChoice = function decodeChoice(input, options) {
    var state = this._baseState;
    var result = null;
    var match = false;
  
    Object.keys(state.choice).some(function(key) {
      var save = input.save();
      var node = state.choice[key];
      try {
        var value = node._decode(input, options);
        if (input.isError(value))
          return false;
  
        result = { type: key, value: value };
        match = true;
      } catch (e) {
        input.restore(save);
        return false;
      }
      return true;
    }, this);
  
    if (!match)
      return input.error('Choice not matched');
  
    return result;
  };
  
  //
  // Encoding
  //
  
  Node.prototype._createEncoderBuffer = function createEncoderBuffer(data) {
    return new EncoderBuffer(data, this.reporter);
  };
  
  Node.prototype._encode = function encode(data, reporter, parent) {
    var state = this._baseState;
    if (state['default'] !== null && state['default'] === data)
      return;
  
    var result = this._encodeValue(data, reporter, parent);
    if (result === undefined)
      return;
  
    if (this._skipDefault(result, reporter, parent))
      return;
  
    return result;
  };
  
  Node.prototype._encodeValue = function encode(data, reporter, parent) {
    var state = this._baseState;
  
    // Decode root node
    if (state.parent === null)
      return state.children[0]._encode(data, reporter || new Reporter());
  
    var result = null;
  
    // Set reporter to share it with a child class
    this.reporter = reporter;
  
    // Check if data is there
    if (state.optional && data === undefined) {
      if (state['default'] !== null)
        data = state['default']
      else
        return;
    }
  
    // Encode children first
    var content = null;
    var primitive = false;
    if (state.any) {
      // Anything that was given is translated to buffer
      result = this._createEncoderBuffer(data);
    } else if (state.choice) {
      result = this._encodeChoice(data, reporter);
    } else if (state.contains) {
      content = this._getUse(state.contains, parent)._encode(data, reporter);
      primitive = true;
    } else if (state.children) {
      content = state.children.map(function(child) {
        if (child._baseState.tag === 'null_')
          return child._encode(null, reporter, data);
  
        if (child._baseState.key === null)
          return reporter.error('Child should have a key');
        var prevKey = reporter.enterKey(child._baseState.key);
  
        if (typeof data !== 'object')
          return reporter.error('Child expected, but input is not object');
  
        var res = child._encode(data[child._baseState.key], reporter, data);
        reporter.leaveKey(prevKey);
  
        return res;
      }, this).filter(function(child) {
        return child;
      });
      content = this._createEncoderBuffer(content);
    } else {
      if (state.tag === 'seqof' || state.tag === 'setof') {
        // TODO(indutny): this should be thrown on DSL level
        if (!(state.args && state.args.length === 1))
          return reporter.error('Too many args for : ' + state.tag);
  
        if (!Array.isArray(data))
          return reporter.error('seqof/setof, but data is not Array');
  
        var child = this.clone();
        child._baseState.implicit = null;
        content = this._createEncoderBuffer(data.map(function(item) {
          var state = this._baseState;
  
          return this._getUse(state.args[0], data)._encode(item, reporter);
        }, child));
      } else if (state.use !== null) {
        result = this._getUse(state.use, parent)._encode(data, reporter);
      } else {
        content = this._encodePrimitive(state.tag, data);
        primitive = true;
      }
    }
  
    // Encode data itself
    var result;
    if (!state.any && state.choice === null) {
      var tag = state.implicit !== null ? state.implicit : state.tag;
      var cls = state.implicit === null ? 'universal' : 'context';
  
      if (tag === null) {
        if (state.use === null)
          reporter.error('Tag could be omitted only for .use()');
      } else {
        if (state.use === null)
          result = this._encodeComposite(tag, primitive, cls, content);
      }
    }
  
    // Wrap in explicit
    if (state.explicit !== null)
      result = this._encodeComposite(state.explicit, false, 'context', result);
  
    return result;
  };
  
  Node.prototype._encodeChoice = function encodeChoice(data, reporter) {
    var state = this._baseState;
  
    var node = state.choice[data.type];
    if (!node) {
      assert(
          false,
          data.type + ' not found in ' +
              JSON.stringify(Object.keys(state.choice)));
    }
    return node._encode(data.value, reporter);
  };
  
  Node.prototype._encodePrimitive = function encodePrimitive(tag, data) {
    var state = this._baseState;
  
    if (/str$/.test(tag))
      return this._encodeStr(data, tag);
    else if (tag === 'objid' && state.args)
      return this._encodeObjid(data, state.reverseArgs[0], state.args[1]);
    else if (tag === 'objid')
      return this._encodeObjid(data, null, null);
    else if (tag === 'gentime' || tag === 'utctime')
      return this._encodeTime(data, tag);
    else if (tag === 'null_')
      return this._encodeNull();
    else if (tag === 'int' || tag === 'enum')
      return this._encodeInt(data, state.args && state.reverseArgs[0]);
    else if (tag === 'bool')
      return this._encodeBool(data);
    else if (tag === 'objDesc')
      return this._encodeStr(data, tag);
    else
      throw new Error('Unsupported tag: ' + tag);
  };
  
  Node.prototype._isNumstr = function isNumstr(str) {
    return /^[0-9 ]*$/.test(str);
  };
  
  Node.prototype._isPrintstr = function isPrintstr(str) {
    return /^[A-Za-z0-9 '\(\)\+,\-\.\/:=\?]*$/.test(str);
  };
  
  },{"../base":8,"minimalistic-assert":234}],10:[function(require,module,exports){
  var inherits = require('inherits');
  
  function Reporter(options) {
    this._reporterState = {
      obj: null,
      path: [],
      options: options || {},
      errors: []
    };
  }
  exports.Reporter = Reporter;
  
  Reporter.prototype.isError = function isError(obj) {
    return obj instanceof ReporterError;
  };
  
  Reporter.prototype.save = function save() {
    var state = this._reporterState;
  
    return { obj: state.obj, pathLen: state.path.length };
  };
  
  Reporter.prototype.restore = function restore(data) {
    var state = this._reporterState;
  
    state.obj = data.obj;
    state.path = state.path.slice(0, data.pathLen);
  };
  
  Reporter.prototype.enterKey = function enterKey(key) {
    return this._reporterState.path.push(key);
  };
  
  Reporter.prototype.exitKey = function exitKey(index) {
    var state = this._reporterState;
  
    state.path = state.path.slice(0, index - 1);
  };
  
  Reporter.prototype.leaveKey = function leaveKey(index, key, value) {
    var state = this._reporterState;
  
    this.exitKey(index);
    if (state.obj !== null)
      state.obj[key] = value;
  };
  
  Reporter.prototype.path = function path() {
    return this._reporterState.path.join('/');
  };
  
  Reporter.prototype.enterObject = function enterObject() {
    var state = this._reporterState;
  
    var prev = state.obj;
    state.obj = {};
    return prev;
  };
  
  Reporter.prototype.leaveObject = function leaveObject(prev) {
    var state = this._reporterState;
  
    var now = state.obj;
    state.obj = prev;
    return now;
  };
  
  Reporter.prototype.error = function error(msg) {
    var err;
    var state = this._reporterState;
  
    var inherited = msg instanceof ReporterError;
    if (inherited) {
      err = msg;
    } else {
      err = new ReporterError(state.path.map(function(elem) {
        return '[' + JSON.stringify(elem) + ']';
      }).join(''), msg.message || msg, msg.stack);
    }
  
    if (!state.options.partial)
      throw err;
  
    if (!inherited)
      state.errors.push(err);
  
    return err;
  };
  
  Reporter.prototype.wrapResult = function wrapResult(result) {
    var state = this._reporterState;
    if (!state.options.partial)
      return result;
  
    return {
      result: this.isError(result) ? null : result,
      errors: state.errors
    };
  };
  
  function ReporterError(path, msg) {
    this.path = path;
    this.rethrow(msg);
  };
  inherits(ReporterError, Error);
  
  ReporterError.prototype.rethrow = function rethrow(msg) {
    this.message = msg + ' at: ' + (this.path || '(shallow)');
    if (Error.captureStackTrace)
      Error.captureStackTrace(this, ReporterError);
  
    if (!this.stack) {
      try {
        // IE only adds stack when thrown
        throw new Error(this.message);
      } catch (e) {
        this.stack = e.stack;
      }
    }
    return this;
  };
  
  },{"inherits":180}],11:[function(require,module,exports){
  var constants = require('../constants');
  
  exports.tagClass = {
    0: 'universal',
    1: 'application',
    2: 'context',
    3: 'private'
  };
  exports.tagClassByName = constants._reverse(exports.tagClass);
  
  exports.tag = {
    0x00: 'end',
    0x01: 'bool',
    0x02: 'int',
    0x03: 'bitstr',
    0x04: 'octstr',
    0x05: 'null_',
    0x06: 'objid',
    0x07: 'objDesc',
    0x08: 'external',
    0x09: 'real',
    0x0a: 'enum',
    0x0b: 'embed',
    0x0c: 'utf8str',
    0x0d: 'relativeOid',
    0x10: 'seq',
    0x11: 'set',
    0x12: 'numstr',
    0x13: 'printstr',
    0x14: 't61str',
    0x15: 'videostr',
    0x16: 'ia5str',
    0x17: 'utctime',
    0x18: 'gentime',
    0x19: 'graphstr',
    0x1a: 'iso646str',
    0x1b: 'genstr',
    0x1c: 'unistr',
    0x1d: 'charstr',
    0x1e: 'bmpstr'
  };
  exports.tagByName = constants._reverse(exports.tag);
  
  },{"../constants":12}],12:[function(require,module,exports){
  var constants = exports;
  
  // Helper
  constants._reverse = function reverse(map) {
    var res = {};
  
    Object.keys(map).forEach(function(key) {
      // Convert key to integer if it is stringified
      if ((key | 0) == key)
        key = key | 0;
  
      var value = map[key];
      res[value] = key;
    });
  
    return res;
  };
  
  constants.der = require('./der');
  
  },{"./der":11}],13:[function(require,module,exports){
  var inherits = require('inherits');
  
  var asn1 = require('../../asn1');
  var base = asn1.base;
  var bignum = asn1.bignum;
  
  // Import DER constants
  var der = asn1.constants.der;
  
  function DERDecoder(entity) {
    this.enc = 'der';
    this.name = entity.name;
    this.entity = entity;
  
    // Construct base tree
    this.tree = new DERNode();
    this.tree._init(entity.body);
  };
  module.exports = DERDecoder;
  
  DERDecoder.prototype.decode = function decode(data, options) {
    if (!(data instanceof base.DecoderBuffer))
      data = new base.DecoderBuffer(data, options);
  
    return this.tree._decode(data, options);
  };
  
  // Tree methods
  
  function DERNode(parent) {
    base.Node.call(this, 'der', parent);
  }
  inherits(DERNode, base.Node);
  
  DERNode.prototype._peekTag = function peekTag(buffer, tag, any) {
    if (buffer.isEmpty())
      return false;
  
    var state = buffer.save();
    var decodedTag = derDecodeTag(buffer, 'Failed to peek tag: "' + tag + '"');
    if (buffer.isError(decodedTag))
      return decodedTag;
  
    buffer.restore(state);
  
    return decodedTag.tag === tag || decodedTag.tagStr === tag ||
      (decodedTag.tagStr + 'of') === tag || any;
  };
  
  DERNode.prototype._decodeTag = function decodeTag(buffer, tag, any) {
    var decodedTag = derDecodeTag(buffer,
                                  'Failed to decode tag of "' + tag + '"');
    if (buffer.isError(decodedTag))
      return decodedTag;
  
    var len = derDecodeLen(buffer,
                           decodedTag.primitive,
                           'Failed to get length of "' + tag + '"');
  
    // Failure
    if (buffer.isError(len))
      return len;
  
    if (!any &&
        decodedTag.tag !== tag &&
        decodedTag.tagStr !== tag &&
        decodedTag.tagStr + 'of' !== tag) {
      return buffer.error('Failed to match tag: "' + tag + '"');
    }
  
    if (decodedTag.primitive || len !== null)
      return buffer.skip(len, 'Failed to match body of: "' + tag + '"');
  
    // Indefinite length... find END tag
    var state = buffer.save();
    var res = this._skipUntilEnd(
        buffer,
        'Failed to skip indefinite length body: "' + this.tag + '"');
    if (buffer.isError(res))
      return res;
  
    len = buffer.offset - state.offset;
    buffer.restore(state);
    return buffer.skip(len, 'Failed to match body of: "' + tag + '"');
  };
  
  DERNode.prototype._skipUntilEnd = function skipUntilEnd(buffer, fail) {
    while (true) {
      var tag = derDecodeTag(buffer, fail);
      if (buffer.isError(tag))
        return tag;
      var len = derDecodeLen(buffer, tag.primitive, fail);
      if (buffer.isError(len))
        return len;
  
      var res;
      if (tag.primitive || len !== null)
        res = buffer.skip(len)
      else
        res = this._skipUntilEnd(buffer, fail);
  
      // Failure
      if (buffer.isError(res))
        return res;
  
      if (tag.tagStr === 'end')
        break;
    }
  };
  
  DERNode.prototype._decodeList = function decodeList(buffer, tag, decoder,
                                                      options) {
    var result = [];
    while (!buffer.isEmpty()) {
      var possibleEnd = this._peekTag(buffer, 'end');
      if (buffer.isError(possibleEnd))
        return possibleEnd;
  
      var res = decoder.decode(buffer, 'der', options);
      if (buffer.isError(res) && possibleEnd)
        break;
      result.push(res);
    }
    return result;
  };
  
  DERNode.prototype._decodeStr = function decodeStr(buffer, tag) {
    if (tag === 'bitstr') {
      var unused = buffer.readUInt8();
      if (buffer.isError(unused))
        return unused;
      return { unused: unused, data: buffer.raw() };
    } else if (tag === 'bmpstr') {
      var raw = buffer.raw();
      if (raw.length % 2 === 1)
        return buffer.error('Decoding of string type: bmpstr length mismatch');
  
      var str = '';
      for (var i = 0; i < raw.length / 2; i++) {
        str += String.fromCharCode(raw.readUInt16BE(i * 2));
      }
      return str;
    } else if (tag === 'numstr') {
      var numstr = buffer.raw().toString('ascii');
      if (!this._isNumstr(numstr)) {
        return buffer.error('Decoding of string type: ' +
                            'numstr unsupported characters');
      }
      return numstr;
    } else if (tag === 'octstr') {
      return buffer.raw();
    } else if (tag === 'objDesc') {
      return buffer.raw();
    } else if (tag === 'printstr') {
      var printstr = buffer.raw().toString('ascii');
      if (!this._isPrintstr(printstr)) {
        return buffer.error('Decoding of string type: ' +
                            'printstr unsupported characters');
      }
      return printstr;
    } else if (/str$/.test(tag)) {
      return buffer.raw().toString();
    } else {
      return buffer.error('Decoding of string type: ' + tag + ' unsupported');
    }
  };
  
  DERNode.prototype._decodeObjid = function decodeObjid(buffer, values, relative) {
    var result;
    var identifiers = [];
    var ident = 0;
    while (!buffer.isEmpty()) {
      var subident = buffer.readUInt8();
      ident <<= 7;
      ident |= subident & 0x7f;
      if ((subident & 0x80) === 0) {
        identifiers.push(ident);
        ident = 0;
      }
    }
    if (subident & 0x80)
      identifiers.push(ident);
  
    var first = (identifiers[0] / 40) | 0;
    var second = identifiers[0] % 40;
  
    if (relative)
      result = identifiers;
    else
      result = [first, second].concat(identifiers.slice(1));
  
    if (values) {
      var tmp = values[result.join(' ')];
      if (tmp === undefined)
        tmp = values[result.join('.')];
      if (tmp !== undefined)
        result = tmp;
    }
  
    return result;
  };
  
  DERNode.prototype._decodeTime = function decodeTime(buffer, tag) {
    var str = buffer.raw().toString();
    if (tag === 'gentime') {
      var year = str.slice(0, 4) | 0;
      var mon = str.slice(4, 6) | 0;
      var day = str.slice(6, 8) | 0;
      var hour = str.slice(8, 10) | 0;
      var min = str.slice(10, 12) | 0;
      var sec = str.slice(12, 14) | 0;
    } else if (tag === 'utctime') {
      var year = str.slice(0, 2) | 0;
      var mon = str.slice(2, 4) | 0;
      var day = str.slice(4, 6) | 0;
      var hour = str.slice(6, 8) | 0;
      var min = str.slice(8, 10) | 0;
      var sec = str.slice(10, 12) | 0;
      if (year < 70)
        year = 2000 + year;
      else
        year = 1900 + year;
    } else {
      return buffer.error('Decoding ' + tag + ' time is not supported yet');
    }
  
    return Date.UTC(year, mon - 1, day, hour, min, sec, 0);
  };
  
  DERNode.prototype._decodeNull = function decodeNull(buffer) {
    return null;
  };
  
  DERNode.prototype._decodeBool = function decodeBool(buffer) {
    var res = buffer.readUInt8();
    if (buffer.isError(res))
      return res;
    else
      return res !== 0;
  };
  
  DERNode.prototype._decodeInt = function decodeInt(buffer, values) {
    // Bigint, return as it is (assume big endian)
    var raw = buffer.raw();
    var res = new bignum(raw);
  
    if (values)
      res = values[res.toString(10)] || res;
  
    return res;
  };
  
  DERNode.prototype._use = function use(entity, obj) {
    if (typeof entity === 'function')
      entity = entity(obj);
    return entity._getDecoder('der').tree;
  };
  
  // Utility methods
  
  function derDecodeTag(buf, fail) {
    var tag = buf.readUInt8(fail);
    if (buf.isError(tag))
      return tag;
  
    var cls = der.tagClass[tag >> 6];
    var primitive = (tag & 0x20) === 0;
  
    // Multi-octet tag - load
    if ((tag & 0x1f) === 0x1f) {
      var oct = tag;
      tag = 0;
      while ((oct & 0x80) === 0x80) {
        oct = buf.readUInt8(fail);
        if (buf.isError(oct))
          return oct;
  
        tag <<= 7;
        tag |= oct & 0x7f;
      }
    } else {
      tag &= 0x1f;
    }
    var tagStr = der.tag[tag];
  
    return {
      cls: cls,
      primitive: primitive,
      tag: tag,
      tagStr: tagStr
    };
  }
  
  function derDecodeLen(buf, primitive, fail) {
    var len = buf.readUInt8(fail);
    if (buf.isError(len))
      return len;
  
    // Indefinite form
    if (!primitive && len === 0x80)
      return null;
  
    // Definite form
    if ((len & 0x80) === 0) {
      // Short form
      return len;
    }
  
    // Long form
    var num = len & 0x7f;
    if (num > 4)
      return buf.error('length octet is too long');
  
    len = 0;
    for (var i = 0; i < num; i++) {
      len <<= 8;
      var j = buf.readUInt8(fail);
      if (buf.isError(j))
        return j;
      len |= j;
    }
  
    return len;
  }
  
  },{"../../asn1":5,"inherits":180}],14:[function(require,module,exports){
  var decoders = exports;
  
  decoders.der = require('./der');
  decoders.pem = require('./pem');
  
  },{"./der":13,"./pem":15}],15:[function(require,module,exports){
  var inherits = require('inherits');
  var Buffer = require('buffer').Buffer;
  
  var DERDecoder = require('./der');
  
  function PEMDecoder(entity) {
    DERDecoder.call(this, entity);
    this.enc = 'pem';
  };
  inherits(PEMDecoder, DERDecoder);
  module.exports = PEMDecoder;
  
  PEMDecoder.prototype.decode = function decode(data, options) {
    var lines = data.toString().split(/[\r\n]+/g);
  
    var label = options.label.toUpperCase();
  
    var re = /^-----(BEGIN|END) ([^-]+)-----$/;
    var start = -1;
    var end = -1;
    for (var i = 0; i < lines.length; i++) {
      var match = lines[i].match(re);
      if (match === null)
        continue;
  
      if (match[2] !== label)
        continue;
  
      if (start === -1) {
        if (match[1] !== 'BEGIN')
          break;
        start = i;
      } else {
        if (match[1] !== 'END')
          break;
        end = i;
        break;
      }
    }
    if (start === -1 || end === -1)
      throw new Error('PEM section not found for: ' + label);
  
    var base64 = lines.slice(start + 1, end).join('');
    // Remove excessive symbols
    base64.replace(/[^a-z0-9\+\/=]+/gi, '');
  
    var input = new Buffer(base64, 'base64');
    return DERDecoder.prototype.decode.call(this, input, options);
  };
  
  },{"./der":13,"buffer":84,"inherits":180}],16:[function(require,module,exports){
  var inherits = require('inherits');
  var Buffer = require('buffer').Buffer;
  
  var asn1 = require('../../asn1');
  var base = asn1.base;
  
  // Import DER constants
  var der = asn1.constants.der;
  
  function DEREncoder(entity) {
    this.enc = 'der';
    this.name = entity.name;
    this.entity = entity;
  
    // Construct base tree
    this.tree = new DERNode();
    this.tree._init(entity.body);
  };
  module.exports = DEREncoder;
  
  DEREncoder.prototype.encode = function encode(data, reporter) {
    return this.tree._encode(data, reporter).join();
  };
  
  // Tree methods
  
  function DERNode(parent) {
    base.Node.call(this, 'der', parent);
  }
  inherits(DERNode, base.Node);
  
  DERNode.prototype._encodeComposite = function encodeComposite(tag,
                                                                primitive,
                                                                cls,
                                                                content) {
    var encodedTag = encodeTag(tag, primitive, cls, this.reporter);
  
    // Short form
    if (content.length < 0x80) {
      var header = new Buffer(2);
      header[0] = encodedTag;
      header[1] = content.length;
      return this._createEncoderBuffer([ header, content ]);
    }
  
    // Long form
    // Count octets required to store length
    var lenOctets = 1;
    for (var i = content.length; i >= 0x100; i >>= 8)
      lenOctets++;
  
    var header = new Buffer(1 + 1 + lenOctets);
    header[0] = encodedTag;
    header[1] = 0x80 | lenOctets;
  
    for (var i = 1 + lenOctets, j = content.length; j > 0; i--, j >>= 8)
      header[i] = j & 0xff;
  
    return this._createEncoderBuffer([ header, content ]);
  };
  
  DERNode.prototype._encodeStr = function encodeStr(str, tag) {
    if (tag === 'bitstr') {
      return this._createEncoderBuffer([ str.unused | 0, str.data ]);
    } else if (tag === 'bmpstr') {
      var buf = new Buffer(str.length * 2);
      for (var i = 0; i < str.length; i++) {
        buf.writeUInt16BE(str.charCodeAt(i), i * 2);
      }
      return this._createEncoderBuffer(buf);
    } else if (tag === 'numstr') {
      if (!this._isNumstr(str)) {
        return this.reporter.error('Encoding of string type: numstr supports ' +
                                   'only digits and space');
      }
      return this._createEncoderBuffer(str);
    } else if (tag === 'printstr') {
      if (!this._isPrintstr(str)) {
        return this.reporter.error('Encoding of string type: printstr supports ' +
                                   'only latin upper and lower case letters, ' +
                                   'digits, space, apostrophe, left and right ' +
                                   'parenthesis, plus sign, comma, hyphen, ' +
                                   'dot, slash, colon, equal sign, ' +
                                   'question mark');
      }
      return this._createEncoderBuffer(str);
    } else if (/str$/.test(tag)) {
      return this._createEncoderBuffer(str);
    } else if (tag === 'objDesc') {
      return this._createEncoderBuffer(str);
    } else {
      return this.reporter.error('Encoding of string type: ' + tag +
                                 ' unsupported');
    }
  };
  
  DERNode.prototype._encodeObjid = function encodeObjid(id, values, relative) {
    if (typeof id === 'string') {
      if (!values)
        return this.reporter.error('string objid given, but no values map found');
      if (!values.hasOwnProperty(id))
        return this.reporter.error('objid not found in values map');
      id = values[id].split(/[\s\.]+/g);
      for (var i = 0; i < id.length; i++)
        id[i] |= 0;
    } else if (Array.isArray(id)) {
      id = id.slice();
      for (var i = 0; i < id.length; i++)
        id[i] |= 0;
    }
  
    if (!Array.isArray(id)) {
      return this.reporter.error('objid() should be either array or string, ' +
                                 'got: ' + JSON.stringify(id));
    }
  
    if (!relative) {
      if (id[1] >= 40)
        return this.reporter.error('Second objid identifier OOB');
      id.splice(0, 2, id[0] * 40 + id[1]);
    }
  
    // Count number of octets
    var size = 0;
    for (var i = 0; i < id.length; i++) {
      var ident = id[i];
      for (size++; ident >= 0x80; ident >>= 7)
        size++;
    }
  
    var objid = new Buffer(size);
    var offset = objid.length - 1;
    for (var i = id.length - 1; i >= 0; i--) {
      var ident = id[i];
      objid[offset--] = ident & 0x7f;
      while ((ident >>= 7) > 0)
        objid[offset--] = 0x80 | (ident & 0x7f);
    }
  
    return this._createEncoderBuffer(objid);
  };
  
  function two(num) {
    if (num < 10)
      return '0' + num;
    else
      return num;
  }
  
  DERNode.prototype._encodeTime = function encodeTime(time, tag) {
    var str;
    var date = new Date(time);
  
    if (tag === 'gentime') {
      str = [
        two(date.getFullYear()),
        two(date.getUTCMonth() + 1),
        two(date.getUTCDate()),
        two(date.getUTCHours()),
        two(date.getUTCMinutes()),
        two(date.getUTCSeconds()),
        'Z'
      ].join('');
    } else if (tag === 'utctime') {
      str = [
        two(date.getFullYear() % 100),
        two(date.getUTCMonth() + 1),
        two(date.getUTCDate()),
        two(date.getUTCHours()),
        two(date.getUTCMinutes()),
        two(date.getUTCSeconds()),
        'Z'
      ].join('');
    } else {
      this.reporter.error('Encoding ' + tag + ' time is not supported yet');
    }
  
    return this._encodeStr(str, 'octstr');
  };
  
  DERNode.prototype._encodeNull = function encodeNull() {
    return this._createEncoderBuffer('');
  };
  
  DERNode.prototype._encodeInt = function encodeInt(num, values) {
    if (typeof num === 'string') {
      if (!values)
        return this.reporter.error('String int or enum given, but no values map');
      if (!values.hasOwnProperty(num)) {
        return this.reporter.error('Values map doesn\'t contain: ' +
                                   JSON.stringify(num));
      }
      num = values[num];
    }
  
    // Bignum, assume big endian
    if (typeof num !== 'number' && !Buffer.isBuffer(num)) {
      var numArray = num.toArray();
      if (!num.sign && numArray[0] & 0x80) {
        numArray.unshift(0);
      }
      num = new Buffer(numArray);
    }
  
    if (Buffer.isBuffer(num)) {
      var size = num.length;
      if (num.length === 0)
        size++;
  
      var out = new Buffer(size);
      num.copy(out);
      if (num.length === 0)
        out[0] = 0
      return this._createEncoderBuffer(out);
    }
  
    if (num < 0x80)
      return this._createEncoderBuffer(num);
  
    if (num < 0x100)
      return this._createEncoderBuffer([0, num]);
  
    var size = 1;
    for (var i = num; i >= 0x100; i >>= 8)
      size++;
  
    var out = new Array(size);
    for (var i = out.length - 1; i >= 0; i--) {
      out[i] = num & 0xff;
      num >>= 8;
    }
    if(out[0] & 0x80) {
      out.unshift(0);
    }
  
    return this._createEncoderBuffer(new Buffer(out));
  };
  
  DERNode.prototype._encodeBool = function encodeBool(value) {
    return this._createEncoderBuffer(value ? 0xff : 0);
  };
  
  DERNode.prototype._use = function use(entity, obj) {
    if (typeof entity === 'function')
      entity = entity(obj);
    return entity._getEncoder('der').tree;
  };
  
  DERNode.prototype._skipDefault = function skipDefault(dataBuffer, reporter, parent) {
    var state = this._baseState;
    var i;
    if (state['default'] === null)
      return false;
  
    var data = dataBuffer.join();
    if (state.defaultBuffer === undefined)
      state.defaultBuffer = this._encodeValue(state['default'], reporter, parent).join();
  
    if (data.length !== state.defaultBuffer.length)
      return false;
  
    for (i=0; i < data.length; i++)
      if (data[i] !== state.defaultBuffer[i])
        return false;
  
    return true;
  };
  
  // Utility methods
  
  function encodeTag(tag, primitive, cls, reporter) {
    var res;
  
    if (tag === 'seqof')
      tag = 'seq';
    else if (tag === 'setof')
      tag = 'set';
  
    if (der.tagByName.hasOwnProperty(tag))
      res = der.tagByName[tag];
    else if (typeof tag === 'number' && (tag | 0) === tag)
      res = tag;
    else
      return reporter.error('Unknown tag: ' + tag);
  
    if (res >= 0x1f)
      return reporter.error('Multi-octet tag encoding unsupported');
  
    if (!primitive)
      res |= 0x20;
  
    res |= (der.tagClassByName[cls || 'universal'] << 6);
  
    return res;
  }
  
  },{"../../asn1":5,"buffer":84,"inherits":180}],17:[function(require,module,exports){
  var encoders = exports;
  
  encoders.der = require('./der');
  encoders.pem = require('./pem');
  
  },{"./der":16,"./pem":18}],18:[function(require,module,exports){
  var inherits = require('inherits');
  
  var DEREncoder = require('./der');
  
  function PEMEncoder(entity) {
    DEREncoder.call(this, entity);
    this.enc = 'pem';
  };
  inherits(PEMEncoder, DEREncoder);
  module.exports = PEMEncoder;
  
  PEMEncoder.prototype.encode = function encode(data, options) {
    var buf = DEREncoder.prototype.encode.call(this, data);
  
    var p = buf.toString('base64');
    var out = [ '-----BEGIN ' + options.label + '-----' ];
    for (var i = 0; i < p.length; i += 64)
      out.push(p.slice(i, i + 64));
    out.push('-----END ' + options.label + '-----');
    return out.join('\n');
  };
  
  },{"./der":16,"inherits":180}],19:[function(require,module,exports){
  (function (global){
  'use strict';
  
  // compare and isBuffer taken from https://github.com/feross/buffer/blob/680e9e5e488f22aac27599a57dc844a6315928dd/index.js
  // original notice:
  
  /*!
   * The buffer module from node.js, for the browser.
   *
   * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
   * @license  MIT
   */
  function compare(a, b) {
    if (a === b) {
      return 0;
    }
  
    var x = a.length;
    var y = b.length;
  
    for (var i = 0, len = Math.min(x, y); i < len; ++i) {
      if (a[i] !== b[i]) {
        x = a[i];
        y = b[i];
        break;
      }
    }
  
    if (x < y) {
      return -1;
    }
    if (y < x) {
      return 1;
    }
    return 0;
  }
  function isBuffer(b) {
    if (global.Buffer && typeof global.Buffer.isBuffer === 'function') {
      return global.Buffer.isBuffer(b);
    }
    return !!(b != null && b._isBuffer);
  }
  
  // based on node assert, original notice:
  
  // http://wiki.commonjs.org/wiki/Unit_Testing/1.0
  //
  // THIS IS NOT TESTED NOR LIKELY TO WORK OUTSIDE V8!
  //
  // Originally from narwhal.js (http://narwhaljs.org)
  // Copyright (c) 2009 Thomas Robinson <280north.com>
  //
  // Permission is hereby granted, free of charge, to any person obtaining a copy
  // of this software and associated documentation files (the 'Software'), to
  // deal in the Software without restriction, including without limitation the
  // rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
  // sell copies of the Software, and to permit persons to whom the Software is
  // furnished to do so, subject to the following conditions:
  //
  // The above copyright notice and this permission notice shall be included in
  // all copies or substantial portions of the Software.
  //
  // THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  // IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  // FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  // AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
  // ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
  // WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  
  var util = require('util/');
  var hasOwn = Object.prototype.hasOwnProperty;
  var pSlice = Array.prototype.slice;
  var functionsHaveNames = (function () {
    return function foo() {}.name === 'foo';
  }());
  function pToString (obj) {
    return Object.prototype.toString.call(obj);
  }
  function isView(arrbuf) {
    if (isBuffer(arrbuf)) {
      return false;
    }
    if (typeof global.ArrayBuffer !== 'function') {
      return false;
    }
    if (typeof ArrayBuffer.isView === 'function') {
      return ArrayBuffer.isView(arrbuf);
    }
    if (!arrbuf) {
      return false;
    }
    if (arrbuf instanceof DataView) {
      return true;
    }
    if (arrbuf.buffer && arrbuf.buffer instanceof ArrayBuffer) {
      return true;
    }
    return false;
  }
  // 1. The assert module provides functions that throw
  // AssertionError's when particular conditions are not met. The
  // assert module must conform to the following interface.
  
  var assert = module.exports = ok;
  
  // 2. The AssertionError is defined in assert.
  // new assert.AssertionError({ message: message,
  //                             actual: actual,
  //                             expected: expected })
  
  var regex = /\s*function\s+([^\(\s]*)\s*/;
  // based on https://github.com/ljharb/function.prototype.name/blob/adeeeec8bfcc6068b187d7d9fb3d5bb1d3a30899/implementation.js
  function getName(func) {
    if (!util.isFunction(func)) {
      return;
    }
    if (functionsHaveNames) {
      return func.name;
    }
    var str = func.toString();
    var match = str.match(regex);
    return match && match[1];
  }
  assert.AssertionError = function AssertionError(options) {
    this.name = 'AssertionError';
    this.actual = options.actual;
    this.expected = options.expected;
    this.operator = options.operator;
    if (options.message) {
      this.message = options.message;
      this.generatedMessage = false;
    } else {
      this.message = getMessage(this);
      this.generatedMessage = true;
    }
    var stackStartFunction = options.stackStartFunction || fail;
    if (Error.captureStackTrace) {
      Error.captureStackTrace(this, stackStartFunction);
    } else {
      // non v8 browsers so we can have a stacktrace
      var err = new Error();
      if (err.stack) {
        var out = err.stack;
  
        // try to strip useless frames
        var fn_name = getName(stackStartFunction);
        var idx = out.indexOf('\n' + fn_name);
        if (idx >= 0) {
          // once we have located the function frame
          // we need to strip out everything before it (and its line)
          var next_line = out.indexOf('\n', idx + 1);
          out = out.substring(next_line + 1);
        }
  
        this.stack = out;
      }
    }
  };
  
  // assert.AssertionError instanceof Error
  util.inherits(assert.AssertionError, Error);
  
  function truncate(s, n) {
    if (typeof s === 'string') {
      return s.length < n ? s : s.slice(0, n);
    } else {
      return s;
    }
  }
  function inspect(something) {
    if (functionsHaveNames || !util.isFunction(something)) {
      return util.inspect(something);
    }
    var rawname = getName(something);
    var name = rawname ? ': ' + rawname : '';
    return '[Function' +  name + ']';
  }
  function getMessage(self) {
    return truncate(inspect(self.actual), 128) + ' ' +
           self.operator + ' ' +
           truncate(inspect(self.expected), 128);
  }
  
  // At present only the three keys mentioned above are used and
  // understood by the spec. Implementations or sub modules can pass
  // other keys to the AssertionError's constructor - they will be
  // ignored.
  
  // 3. All of the following functions must throw an AssertionError
  // when a corresponding condition is not met, with a message that
  // may be undefined if not provided.  All assertion methods provide
  // both the actual and expected values to the assertion error for
  // display purposes.
  
  function fail(actual, expected, message, operator, stackStartFunction) {
    throw new assert.AssertionError({
      message: message,
      actual: actual,
      expected: expected,
      operator: operator,
      stackStartFunction: stackStartFunction
    });
  }
  
  // EXTENSION! allows for well behaved errors defined elsewhere.
  assert.fail = fail;
  
  // 4. Pure assertion tests whether a value is truthy, as determined
  // by !!guard.
  // assert.ok(guard, message_opt);
  // This statement is equivalent to assert.equal(true, !!guard,
  // message_opt);. To test strictly for the value true, use
  // assert.strictEqual(true, guard, message_opt);.
  
  function ok(value, message) {
    if (!value) fail(value, true, message, '==', assert.ok);
  }
  assert.ok = ok;
  
  // 5. The equality assertion tests shallow, coercive equality with
  // ==.
  // assert.equal(actual, expected, message_opt);
  
  assert.equal = function equal(actual, expected, message) {
    if (actual != expected) fail(actual, expected, message, '==', assert.equal);
  };
  
  // 6. The non-equality assertion tests for whether two objects are not equal
  // with != assert.notEqual(actual, expected, message_opt);
  
  assert.notEqual = function notEqual(actual, expected, message) {
    if (actual == expected) {
      fail(actual, expected, message, '!=', assert.notEqual);
    }
  };
  
  // 7. The equivalence assertion tests a deep equality relation.
  // assert.deepEqual(actual, expected, message_opt);
  
  assert.deepEqual = function deepEqual(actual, expected, message) {
    if (!_deepEqual(actual, expected, false)) {
      fail(actual, expected, message, 'deepEqual', assert.deepEqual);
    }
  };
  
  assert.deepStrictEqual = function deepStrictEqual(actual, expected, message) {
    if (!_deepEqual(actual, expected, true)) {
      fail(actual, expected, message, 'deepStrictEqual', assert.deepStrictEqual);
    }
  };
  
  function _deepEqual(actual, expected, strict, memos) {
    // 7.1. All identical values are equivalent, as determined by ===.
    if (actual === expected) {
      return true;
    } else if (isBuffer(actual) && isBuffer(expected)) {
      return compare(actual, expected) === 0;
  
    // 7.2. If the expected value is a Date object, the actual value is
    // equivalent if it is also a Date object that refers to the same time.
    } else if (util.isDate(actual) && util.isDate(expected)) {
      return actual.getTime() === expected.getTime();
  
    // 7.3 If the expected value is a RegExp object, the actual value is
    // equivalent if it is also a RegExp object with the same source and
    // properties (`global`, `multiline`, `lastIndex`, `ignoreCase`).
    } else if (util.isRegExp(actual) && util.isRegExp(expected)) {
      return actual.source === expected.source &&
             actual.global === expected.global &&
             actual.multiline === expected.multiline &&
             actual.lastIndex === expected.lastIndex &&
             actual.ignoreCase === expected.ignoreCase;
  
    // 7.4. Other pairs that do not both pass typeof value == 'object',
    // equivalence is determined by ==.
    } else if ((actual === null || typeof actual !== 'object') &&
               (expected === null || typeof expected !== 'object')) {
      return strict ? actual === expected : actual == expected;
  
    // If both values are instances of typed arrays, wrap their underlying
    // ArrayBuffers in a Buffer each to increase performance
    // This optimization requires the arrays to have the same type as checked by
    // Object.prototype.toString (aka pToString). Never perform binary
    // comparisons for Float*Arrays, though, since e.g. +0 === -0 but their
    // bit patterns are not identical.
    } else if (isView(actual) && isView(expected) &&
               pToString(actual) === pToString(expected) &&
               !(actual instanceof Float32Array ||
                 actual instanceof Float64Array)) {
      return compare(new Uint8Array(actual.buffer),
                     new Uint8Array(expected.buffer)) === 0;
  
    // 7.5 For all other Object pairs, including Array objects, equivalence is
    // determined by having the same number of owned properties (as verified
    // with Object.prototype.hasOwnProperty.call), the same set of keys
    // (although not necessarily the same order), equivalent values for every
    // corresponding key, and an identical 'prototype' property. Note: this
    // accounts for both named and indexed properties on Arrays.
    } else if (isBuffer(actual) !== isBuffer(expected)) {
      return false;
    } else {
      memos = memos || {actual: [], expected: []};
  
      var actualIndex = memos.actual.indexOf(actual);
      if (actualIndex !== -1) {
        if (actualIndex === memos.expected.indexOf(expected)) {
          return true;
        }
      }
  
      memos.actual.push(actual);
      memos.expected.push(expected);
  
      return objEquiv(actual, expected, strict, memos);
    }
  }
  
  function isArguments(object) {
    return Object.prototype.toString.call(object) == '[object Arguments]';
  }
  
  function objEquiv(a, b, strict, actualVisitedObjects) {
    if (a === null || a === undefined || b === null || b === undefined)
      return false;
    // if one is a primitive, the other must be same
    if (util.isPrimitive(a) || util.isPrimitive(b))
      return a === b;
    if (strict && Object.getPrototypeOf(a) !== Object.getPrototypeOf(b))
      return false;
    var aIsArgs = isArguments(a);
    var bIsArgs = isArguments(b);
    if ((aIsArgs && !bIsArgs) || (!aIsArgs && bIsArgs))
      return false;
    if (aIsArgs) {
      a = pSlice.call(a);
      b = pSlice.call(b);
      return _deepEqual(a, b, strict);
    }
    var ka = objectKeys(a);
    var kb = objectKeys(b);
    var key, i;
    // having the same number of owned properties (keys incorporates
    // hasOwnProperty)
    if (ka.length !== kb.length)
      return false;
    //the same set of keys (although not necessarily the same order),
    ka.sort();
    kb.sort();
    //~~~cheap key test
    for (i = ka.length - 1; i >= 0; i--) {
      if (ka[i] !== kb[i])
        return false;
    }
    //equivalent values for every corresponding key, and
    //~~~possibly expensive deep test
    for (i = ka.length - 1; i >= 0; i--) {
      key = ka[i];
      if (!_deepEqual(a[key], b[key], strict, actualVisitedObjects))
        return false;
    }
    return true;
  }
  
  // 8. The non-equivalence assertion tests for any deep inequality.
  // assert.notDeepEqual(actual, expected, message_opt);
  
  assert.notDeepEqual = function notDeepEqual(actual, expected, message) {
    if (_deepEqual(actual, expected, false)) {
      fail(actual, expected, message, 'notDeepEqual', assert.notDeepEqual);
    }
  };
  
  assert.notDeepStrictEqual = notDeepStrictEqual;
  function notDeepStrictEqual(actual, expected, message) {
    if (_deepEqual(actual, expected, true)) {
      fail(actual, expected, message, 'notDeepStrictEqual', notDeepStrictEqual);
    }
  }
  
  
  // 9. The strict equality assertion tests strict equality, as determined by ===.
  // assert.strictEqual(actual, expected, message_opt);
  
  assert.strictEqual = function strictEqual(actual, expected, message) {
    if (actual !== expected) {
      fail(actual, expected, message, '===', assert.strictEqual);
    }
  };
  
  // 10. The strict non-equality assertion tests for strict inequality, as
  // determined by !==.  assert.notStrictEqual(actual, expected, message_opt);
  
  assert.notStrictEqual = function notStrictEqual(actual, expected, message) {
    if (actual === expected) {
      fail(actual, expected, message, '!==', assert.notStrictEqual);
    }
  };
  
  function expectedException(actual, expected) {
    if (!actual || !expected) {
      return false;
    }
  
    if (Object.prototype.toString.call(expected) == '[object RegExp]') {
      return expected.test(actual);
    }
  
    try {
      if (actual instanceof expected) {
        return true;
      }
    } catch (e) {
      // Ignore.  The instanceof check doesn't work for arrow functions.
    }
  
    if (Error.isPrototypeOf(expected)) {
      return false;
    }
  
    return expected.call({}, actual) === true;
  }
  
  function _tryBlock(block) {
    var error;
    try {
      block();
    } catch (e) {
      error = e;
    }
    return error;
  }
  
  function _throws(shouldThrow, block, expected, message) {
    var actual;
  
    if (typeof block !== 'function') {
      throw new TypeError('"block" argument must be a function');
    }
  
    if (typeof expected === 'string') {
      message = expected;
      expected = null;
    }
  
    actual = _tryBlock(block);
  
    message = (expected && expected.name ? ' (' + expected.name + ').' : '.') +
              (message ? ' ' + message : '.');
  
    if (shouldThrow && !actual) {
      fail(actual, expected, 'Missing expected exception' + message);
    }
  
    var userProvidedMessage = typeof message === 'string';
    var isUnwantedException = !shouldThrow && util.isError(actual);
    var isUnexpectedException = !shouldThrow && actual && !expected;
  
    if ((isUnwantedException &&
        userProvidedMessage &&
        expectedException(actual, expected)) ||
        isUnexpectedException) {
      fail(actual, expected, 'Got unwanted exception' + message);
    }
  
    if ((shouldThrow && actual && expected &&
        !expectedException(actual, expected)) || (!shouldThrow && actual)) {
      throw actual;
    }
  }
  
  // 11. Expected to throw an error:
  // assert.throws(block, Error_opt, message_opt);
  
  assert.throws = function(block, /*optional*/error, /*optional*/message) {
    _throws(true, block, error, message);
  };
  
  // EXTENSION! This is annoying to write outside this module.
  assert.doesNotThrow = function(block, /*optional*/error, /*optional*/message) {
    _throws(false, block, error, message);
  };
  
  assert.ifError = function(err) { if (err) throw err; };
  
  var objectKeys = Object.keys || function (obj) {
    var keys = [];
    for (var key in obj) {
      if (hasOwn.call(obj, key)) keys.push(key);
    }
    return keys;
  };
  
  }).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
  },{"util/":333}],20:[function(require,module,exports){
  'use strict';
  
  Object.defineProperty(exports, "__esModule", {
      value: true
  });
  exports.default = asyncify;
  
  var _isObject = require('lodash/isObject');
  
  var _isObject2 = _interopRequireDefault(_isObject);
  
  var _initialParams = require('./internal/initialParams');
  
  var _initialParams2 = _interopRequireDefault(_initialParams);
  
  var _setImmediate = require('./internal/setImmediate');
  
  var _setImmediate2 = _interopRequireDefault(_setImmediate);
  
  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
  
  /**
   * Take a sync function and make it async, passing its return value to a
   * callback. This is useful for plugging sync functions into a waterfall,
   * series, or other async functions. Any arguments passed to the generated
   * function will be passed to the wrapped function (except for the final
   * callback argument). Errors thrown will be passed to the callback.
   *
   * If the function passed to `asyncify` returns a Promise, that promises's
   * resolved/rejected state will be used to call the callback, rather than simply
   * the synchronous return value.
   *
   * This also means you can asyncify ES2017 `async` functions.
   *
   * @name asyncify
   * @static
   * @memberOf module:Utils
   * @method
   * @alias wrapSync
   * @category Util
   * @param {Function} func - The synchronous function, or Promise-returning
   * function to convert to an {@link AsyncFunction}.
   * @returns {AsyncFunction} An asynchronous wrapper of the `func`. To be
   * invoked with `(args..., callback)`.
   * @example
   *
   * // passing a regular synchronous function
   * async.waterfall([
   *     async.apply(fs.readFile, filename, "utf8"),
   *     async.asyncify(JSON.parse),
   *     function (data, next) {
   *         // data is the result of parsing the text.
   *         // If there was a parsing error, it would have been caught.
   *     }
   * ], callback);
   *
   * // passing a function returning a promise
   * async.waterfall([
   *     async.apply(fs.readFile, filename, "utf8"),
   *     async.asyncify(function (contents) {
   *         return db.model.create(contents);
   *     }),
   *     function (model, next) {
   *         // `model` is the instantiated model object.
   *         // If there was an error, this function would be skipped.
   *     }
   * ], callback);
   *
   * // es2017 example, though `asyncify` is not needed if your JS environment
   * // supports async functions out of the box
   * var q = async.queue(async.asyncify(async function(file) {
   *     var intermediateStep = await processFile(file);
   *     return await somePromise(intermediateStep)
   * }));
   *
   * q.push(files);
   */
  function asyncify(func) {
      return (0, _initialParams2.default)(function (args, callback) {
          var result;
          try {
              result = func.apply(this, args);
          } catch (e) {
              return callback(e);
          }
          // if result is Promise object
          if ((0, _isObject2.default)(result) && typeof result.then === 'function') {
              result.then(function (value) {
                  invokeCallback(callback, null, value);
              }, function (err) {
                  invokeCallback(callback, err.message ? err : new Error(err));
              });
          } else {
              callback(null, result);
          }
      });
  }
  
  function invokeCallback(callback, error, value) {
      try {
          callback(error, value);
      } catch (e) {
          (0, _setImmediate2.default)(rethrow, e);
      }
  }
  
  function rethrow(error) {
      throw error;
  }
  module.exports = exports['default'];
  },{"./internal/initialParams":31,"./internal/setImmediate":37,"lodash/isObject":225}],21:[function(require,module,exports){
  (function (process,global){
  (function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
    typeof define === 'function' && define.amd ? define(['exports'], factory) :
    (factory((global.async = global.async || {})));
  }(this, (function (exports) { 'use strict';
  
  function slice(arrayLike, start) {
      start = start|0;
      var newLen = Math.max(arrayLike.length - start, 0);
      var newArr = Array(newLen);
      for(var idx = 0; idx < newLen; idx++)  {
          newArr[idx] = arrayLike[start + idx];
      }
      return newArr;
  }
  
  /**
   * Creates a continuation function with some arguments already applied.
   *
   * Useful as a shorthand when combined with other control flow functions. Any
   * arguments passed to the returned function are added to the arguments
   * originally passed to apply.
   *
   * @name apply
   * @static
   * @memberOf module:Utils
   * @method
   * @category Util
   * @param {Function} fn - The function you want to eventually apply all
   * arguments to. Invokes with (arguments...).
   * @param {...*} arguments... - Any number of arguments to automatically apply
   * when the continuation is called.
   * @returns {Function} the partially-applied function
   * @example
   *
   * // using apply
   * async.parallel([
   *     async.apply(fs.writeFile, 'testfile1', 'test1'),
   *     async.apply(fs.writeFile, 'testfile2', 'test2')
   * ]);
   *
   *
   * // the same process without using apply
   * async.parallel([
   *     function(callback) {
   *         fs.writeFile('testfile1', 'test1', callback);
   *     },
   *     function(callback) {
   *         fs.writeFile('testfile2', 'test2', callback);
   *     }
   * ]);
   *
   * // It's possible to pass any number of additional arguments when calling the
   * // continuation:
   *
   * node> var fn = async.apply(sys.puts, 'one');
   * node> fn('two', 'three');
   * one
   * two
   * three
   */
  var apply = function(fn/*, ...args*/) {
      var args = slice(arguments, 1);
      return function(/*callArgs*/) {
          var callArgs = slice(arguments);
          return fn.apply(null, args.concat(callArgs));
      };
  };
  
  var initialParams = function (fn) {
      return function (/*...args, callback*/) {
          var args = slice(arguments);
          var callback = args.pop();
          fn.call(this, args, callback);
      };
  };
  
  /**
   * Checks if `value` is the
   * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
   * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is an object, else `false`.
   * @example
   *
   * _.isObject({});
   * // => true
   *
   * _.isObject([1, 2, 3]);
   * // => true
   *
   * _.isObject(_.noop);
   * // => true
   *
   * _.isObject(null);
   * // => false
   */
  function isObject(value) {
    var type = typeof value;
    return value != null && (type == 'object' || type == 'function');
  }
  
  var hasSetImmediate = typeof setImmediate === 'function' && setImmediate;
  var hasNextTick = typeof process === 'object' && typeof process.nextTick === 'function';
  
  function fallback(fn) {
      setTimeout(fn, 0);
  }
  
  function wrap(defer) {
      return function (fn/*, ...args*/) {
          var args = slice(arguments, 1);
          defer(function () {
              fn.apply(null, args);
          });
      };
  }
  
  var _defer;
  
  if (hasSetImmediate) {
      _defer = setImmediate;
  } else if (hasNextTick) {
      _defer = process.nextTick;
  } else {
      _defer = fallback;
  }
  
  var setImmediate$1 = wrap(_defer);
  
  /**
   * Take a sync function and make it async, passing its return value to a
   * callback. This is useful for plugging sync functions into a waterfall,
   * series, or other async functions. Any arguments passed to the generated
   * function will be passed to the wrapped function (except for the final
   * callback argument). Errors thrown will be passed to the callback.
   *
   * If the function passed to `asyncify` returns a Promise, that promises's
   * resolved/rejected state will be used to call the callback, rather than simply
   * the synchronous return value.
   *
   * This also means you can asyncify ES2017 `async` functions.
   *
   * @name asyncify
   * @static
   * @memberOf module:Utils
   * @method
   * @alias wrapSync
   * @category Util
   * @param {Function} func - The synchronous function, or Promise-returning
   * function to convert to an {@link AsyncFunction}.
   * @returns {AsyncFunction} An asynchronous wrapper of the `func`. To be
   * invoked with `(args..., callback)`.
   * @example
   *
   * // passing a regular synchronous function
   * async.waterfall([
   *     async.apply(fs.readFile, filename, "utf8"),
   *     async.asyncify(JSON.parse),
   *     function (data, next) {
   *         // data is the result of parsing the text.
   *         // If there was a parsing error, it would have been caught.
   *     }
   * ], callback);
   *
   * // passing a function returning a promise
   * async.waterfall([
   *     async.apply(fs.readFile, filename, "utf8"),
   *     async.asyncify(function (contents) {
   *         return db.model.create(contents);
   *     }),
   *     function (model, next) {
   *         // `model` is the instantiated model object.
   *         // If there was an error, this function would be skipped.
   *     }
   * ], callback);
   *
   * // es2017 example, though `asyncify` is not needed if your JS environment
   * // supports async functions out of the box
   * var q = async.queue(async.asyncify(async function(file) {
   *     var intermediateStep = await processFile(file);
   *     return await somePromise(intermediateStep)
   * }));
   *
   * q.push(files);
   */
  function asyncify(func) {
      return initialParams(function (args, callback) {
          var result;
          try {
              result = func.apply(this, args);
          } catch (e) {
              return callback(e);
          }
          // if result is Promise object
          if (isObject(result) && typeof result.then === 'function') {
              result.then(function(value) {
                  invokeCallback(callback, null, value);
              }, function(err) {
                  invokeCallback(callback, err.message ? err : new Error(err));
              });
          } else {
              callback(null, result);
          }
      });
  }
  
  function invokeCallback(callback, error, value) {
      try {
          callback(error, value);
      } catch (e) {
          setImmediate$1(rethrow, e);
      }
  }
  
  function rethrow(error) {
      throw error;
  }
  
  var supportsSymbol = typeof Symbol === 'function';
  
  function isAsync(fn) {
      return supportsSymbol && fn[Symbol.toStringTag] === 'AsyncFunction';
  }
  
  function wrapAsync(asyncFn) {
      return isAsync(asyncFn) ? asyncify(asyncFn) : asyncFn;
  }
  
  function applyEach$1(eachfn) {
      return function(fns/*, ...args*/) {
          var args = slice(arguments, 1);
          var go = initialParams(function(args, callback) {
              var that = this;
              return eachfn(fns, function (fn, cb) {
                  wrapAsync(fn).apply(that, args.concat(cb));
              }, callback);
          });
          if (args.length) {
              return go.apply(this, args);
          }
          else {
              return go;
          }
      };
  }
  
  /** Detect free variable `global` from Node.js. */
  var freeGlobal = typeof global == 'object' && global && global.Object === Object && global;
  
  /** Detect free variable `self`. */
  var freeSelf = typeof self == 'object' && self && self.Object === Object && self;
  
  /** Used as a reference to the global object. */
  var root = freeGlobal || freeSelf || Function('return this')();
  
  /** Built-in value references. */
  var Symbol$1 = root.Symbol;
  
  /** Used for built-in method references. */
  var objectProto = Object.prototype;
  
  /** Used to check objects for own properties. */
  var hasOwnProperty = objectProto.hasOwnProperty;
  
  /**
   * Used to resolve the
   * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
   * of values.
   */
  var nativeObjectToString = objectProto.toString;
  
  /** Built-in value references. */
  var symToStringTag$1 = Symbol$1 ? Symbol$1.toStringTag : undefined;
  
  /**
   * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
   *
   * @private
   * @param {*} value The value to query.
   * @returns {string} Returns the raw `toStringTag`.
   */
  function getRawTag(value) {
    var isOwn = hasOwnProperty.call(value, symToStringTag$1),
        tag = value[symToStringTag$1];
  
    try {
      value[symToStringTag$1] = undefined;
      var unmasked = true;
    } catch (e) {}
  
    var result = nativeObjectToString.call(value);
    if (unmasked) {
      if (isOwn) {
        value[symToStringTag$1] = tag;
      } else {
        delete value[symToStringTag$1];
      }
    }
    return result;
  }
  
  /** Used for built-in method references. */
  var objectProto$1 = Object.prototype;
  
  /**
   * Used to resolve the
   * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
   * of values.
   */
  var nativeObjectToString$1 = objectProto$1.toString;
  
  /**
   * Converts `value` to a string using `Object.prototype.toString`.
   *
   * @private
   * @param {*} value The value to convert.
   * @returns {string} Returns the converted string.
   */
  function objectToString(value) {
    return nativeObjectToString$1.call(value);
  }
  
  /** `Object#toString` result references. */
  var nullTag = '[object Null]';
  var undefinedTag = '[object Undefined]';
  
  /** Built-in value references. */
  var symToStringTag = Symbol$1 ? Symbol$1.toStringTag : undefined;
  
  /**
   * The base implementation of `getTag` without fallbacks for buggy environments.
   *
   * @private
   * @param {*} value The value to query.
   * @returns {string} Returns the `toStringTag`.
   */
  function baseGetTag(value) {
    if (value == null) {
      return value === undefined ? undefinedTag : nullTag;
    }
    return (symToStringTag && symToStringTag in Object(value))
      ? getRawTag(value)
      : objectToString(value);
  }
  
  /** `Object#toString` result references. */
  var asyncTag = '[object AsyncFunction]';
  var funcTag = '[object Function]';
  var genTag = '[object GeneratorFunction]';
  var proxyTag = '[object Proxy]';
  
  /**
   * Checks if `value` is classified as a `Function` object.
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a function, else `false`.
   * @example
   *
   * _.isFunction(_);
   * // => true
   *
   * _.isFunction(/abc/);
   * // => false
   */
  function isFunction(value) {
    if (!isObject(value)) {
      return false;
    }
    // The use of `Object#toString` avoids issues with the `typeof` operator
    // in Safari 9 which returns 'object' for typed arrays and other constructors.
    var tag = baseGetTag(value);
    return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
  }
  
  /** Used as references for various `Number` constants. */
  var MAX_SAFE_INTEGER = 9007199254740991;
  
  /**
   * Checks if `value` is a valid array-like length.
   *
   * **Note:** This method is loosely based on
   * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
   * @example
   *
   * _.isLength(3);
   * // => true
   *
   * _.isLength(Number.MIN_VALUE);
   * // => false
   *
   * _.isLength(Infinity);
   * // => false
   *
   * _.isLength('3');
   * // => false
   */
  function isLength(value) {
    return typeof value == 'number' &&
      value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
  }
  
  /**
   * Checks if `value` is array-like. A value is considered array-like if it's
   * not a function and has a `value.length` that's an integer greater than or
   * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
   * @example
   *
   * _.isArrayLike([1, 2, 3]);
   * // => true
   *
   * _.isArrayLike(document.body.children);
   * // => true
   *
   * _.isArrayLike('abc');
   * // => true
   *
   * _.isArrayLike(_.noop);
   * // => false
   */
  function isArrayLike(value) {
    return value != null && isLength(value.length) && !isFunction(value);
  }
  
  // A temporary value used to identify if the loop should be broken.
  // See #1064, #1293
  var breakLoop = {};
  
  /**
   * This method returns `undefined`.
   *
   * @static
   * @memberOf _
   * @since 2.3.0
   * @category Util
   * @example
   *
   * _.times(2, _.noop);
   * // => [undefined, undefined]
   */
  function noop() {
    // No operation performed.
  }
  
  function once(fn) {
      return function () {
          if (fn === null) return;
          var callFn = fn;
          fn = null;
          callFn.apply(this, arguments);
      };
  }
  
  var iteratorSymbol = typeof Symbol === 'function' && Symbol.iterator;
  
  var getIterator = function (coll) {
      return iteratorSymbol && coll[iteratorSymbol] && coll[iteratorSymbol]();
  };
  
  /**
   * The base implementation of `_.times` without support for iteratee shorthands
   * or max array length checks.
   *
   * @private
   * @param {number} n The number of times to invoke `iteratee`.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns the array of results.
   */
  function baseTimes(n, iteratee) {
    var index = -1,
        result = Array(n);
  
    while (++index < n) {
      result[index] = iteratee(index);
    }
    return result;
  }
  
  /**
   * Checks if `value` is object-like. A value is object-like if it's not `null`
   * and has a `typeof` result of "object".
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
   * @example
   *
   * _.isObjectLike({});
   * // => true
   *
   * _.isObjectLike([1, 2, 3]);
   * // => true
   *
   * _.isObjectLike(_.noop);
   * // => false
   *
   * _.isObjectLike(null);
   * // => false
   */
  function isObjectLike(value) {
    return value != null && typeof value == 'object';
  }
  
  /** `Object#toString` result references. */
  var argsTag = '[object Arguments]';
  
  /**
   * The base implementation of `_.isArguments`.
   *
   * @private
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is an `arguments` object,
   */
  function baseIsArguments(value) {
    return isObjectLike(value) && baseGetTag(value) == argsTag;
  }
  
  /** Used for built-in method references. */
  var objectProto$3 = Object.prototype;
  
  /** Used to check objects for own properties. */
  var hasOwnProperty$2 = objectProto$3.hasOwnProperty;
  
  /** Built-in value references. */
  var propertyIsEnumerable = objectProto$3.propertyIsEnumerable;
  
  /**
   * Checks if `value` is likely an `arguments` object.
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is an `arguments` object,
   *  else `false`.
   * @example
   *
   * _.isArguments(function() { return arguments; }());
   * // => true
   *
   * _.isArguments([1, 2, 3]);
   * // => false
   */
  var isArguments = baseIsArguments(function() { return arguments; }()) ? baseIsArguments : function(value) {
    return isObjectLike(value) && hasOwnProperty$2.call(value, 'callee') &&
      !propertyIsEnumerable.call(value, 'callee');
  };
  
  /**
   * Checks if `value` is classified as an `Array` object.
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is an array, else `false`.
   * @example
   *
   * _.isArray([1, 2, 3]);
   * // => true
   *
   * _.isArray(document.body.children);
   * // => false
   *
   * _.isArray('abc');
   * // => false
   *
   * _.isArray(_.noop);
   * // => false
   */
  var isArray = Array.isArray;
  
  /**
   * This method returns `false`.
   *
   * @static
   * @memberOf _
   * @since 4.13.0
   * @category Util
   * @returns {boolean} Returns `false`.
   * @example
   *
   * _.times(2, _.stubFalse);
   * // => [false, false]
   */
  function stubFalse() {
    return false;
  }
  
  /** Detect free variable `exports`. */
  var freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;
  
  /** Detect free variable `module`. */
  var freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;
  
  /** Detect the popular CommonJS extension `module.exports`. */
  var moduleExports = freeModule && freeModule.exports === freeExports;
  
  /** Built-in value references. */
  var Buffer = moduleExports ? root.Buffer : undefined;
  
  /* Built-in method references for those with the same name as other `lodash` methods. */
  var nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined;
  
  /**
   * Checks if `value` is a buffer.
   *
   * @static
   * @memberOf _
   * @since 4.3.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.
   * @example
   *
   * _.isBuffer(new Buffer(2));
   * // => true
   *
   * _.isBuffer(new Uint8Array(2));
   * // => false
   */
  var isBuffer = nativeIsBuffer || stubFalse;
  
  /** Used as references for various `Number` constants. */
  var MAX_SAFE_INTEGER$1 = 9007199254740991;
  
  /** Used to detect unsigned integer values. */
  var reIsUint = /^(?:0|[1-9]\d*)$/;
  
  /**
   * Checks if `value` is a valid array-like index.
   *
   * @private
   * @param {*} value The value to check.
   * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
   * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
   */
  function isIndex(value, length) {
    length = length == null ? MAX_SAFE_INTEGER$1 : length;
    return !!length &&
      (typeof value == 'number' || reIsUint.test(value)) &&
      (value > -1 && value % 1 == 0 && value < length);
  }
  
  /** `Object#toString` result references. */
  var argsTag$1 = '[object Arguments]';
  var arrayTag = '[object Array]';
  var boolTag = '[object Boolean]';
  var dateTag = '[object Date]';
  var errorTag = '[object Error]';
  var funcTag$1 = '[object Function]';
  var mapTag = '[object Map]';
  var numberTag = '[object Number]';
  var objectTag = '[object Object]';
  var regexpTag = '[object RegExp]';
  var setTag = '[object Set]';
  var stringTag = '[object String]';
  var weakMapTag = '[object WeakMap]';
  
  var arrayBufferTag = '[object ArrayBuffer]';
  var dataViewTag = '[object DataView]';
  var float32Tag = '[object Float32Array]';
  var float64Tag = '[object Float64Array]';
  var int8Tag = '[object Int8Array]';
  var int16Tag = '[object Int16Array]';
  var int32Tag = '[object Int32Array]';
  var uint8Tag = '[object Uint8Array]';
  var uint8ClampedTag = '[object Uint8ClampedArray]';
  var uint16Tag = '[object Uint16Array]';
  var uint32Tag = '[object Uint32Array]';
  
  /** Used to identify `toStringTag` values of typed arrays. */
  var typedArrayTags = {};
  typedArrayTags[float32Tag] = typedArrayTags[float64Tag] =
  typedArrayTags[int8Tag] = typedArrayTags[int16Tag] =
  typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =
  typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =
  typedArrayTags[uint32Tag] = true;
  typedArrayTags[argsTag$1] = typedArrayTags[arrayTag] =
  typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =
  typedArrayTags[dataViewTag] = typedArrayTags[dateTag] =
  typedArrayTags[errorTag] = typedArrayTags[funcTag$1] =
  typedArrayTags[mapTag] = typedArrayTags[numberTag] =
  typedArrayTags[objectTag] = typedArrayTags[regexpTag] =
  typedArrayTags[setTag] = typedArrayTags[stringTag] =
  typedArrayTags[weakMapTag] = false;
  
  /**
   * The base implementation of `_.isTypedArray` without Node.js optimizations.
   *
   * @private
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
   */
  function baseIsTypedArray(value) {
    return isObjectLike(value) &&
      isLength(value.length) && !!typedArrayTags[baseGetTag(value)];
  }
  
  /**
   * The base implementation of `_.unary` without support for storing metadata.
   *
   * @private
   * @param {Function} func The function to cap arguments for.
   * @returns {Function} Returns the new capped function.
   */
  function baseUnary(func) {
    return function(value) {
      return func(value);
    };
  }
  
  /** Detect free variable `exports`. */
  var freeExports$1 = typeof exports == 'object' && exports && !exports.nodeType && exports;
  
  /** Detect free variable `module`. */
  var freeModule$1 = freeExports$1 && typeof module == 'object' && module && !module.nodeType && module;
  
  /** Detect the popular CommonJS extension `module.exports`. */
  var moduleExports$1 = freeModule$1 && freeModule$1.exports === freeExports$1;
  
  /** Detect free variable `process` from Node.js. */
  var freeProcess = moduleExports$1 && freeGlobal.process;
  
  /** Used to access faster Node.js helpers. */
  var nodeUtil = (function() {
    try {
      return freeProcess && freeProcess.binding && freeProcess.binding('util');
    } catch (e) {}
  }());
  
  /* Node.js helper references. */
  var nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;
  
  /**
   * Checks if `value` is classified as a typed array.
   *
   * @static
   * @memberOf _
   * @since 3.0.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
   * @example
   *
   * _.isTypedArray(new Uint8Array);
   * // => true
   *
   * _.isTypedArray([]);
   * // => false
   */
  var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;
  
  /** Used for built-in method references. */
  var objectProto$2 = Object.prototype;
  
  /** Used to check objects for own properties. */
  var hasOwnProperty$1 = objectProto$2.hasOwnProperty;
  
  /**
   * Creates an array of the enumerable property names of the array-like `value`.
   *
   * @private
   * @param {*} value The value to query.
   * @param {boolean} inherited Specify returning inherited property names.
   * @returns {Array} Returns the array of property names.
   */
  function arrayLikeKeys(value, inherited) {
    var isArr = isArray(value),
        isArg = !isArr && isArguments(value),
        isBuff = !isArr && !isArg && isBuffer(value),
        isType = !isArr && !isArg && !isBuff && isTypedArray(value),
        skipIndexes = isArr || isArg || isBuff || isType,
        result = skipIndexes ? baseTimes(value.length, String) : [],
        length = result.length;
  
    for (var key in value) {
      if ((inherited || hasOwnProperty$1.call(value, key)) &&
          !(skipIndexes && (
             // Safari 9 has enumerable `arguments.length` in strict mode.
             key == 'length' ||
             // Node.js 0.10 has enumerable non-index properties on buffers.
             (isBuff && (key == 'offset' || key == 'parent')) ||
             // PhantomJS 2 has enumerable non-index properties on typed arrays.
             (isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset')) ||
             // Skip index properties.
             isIndex(key, length)
          ))) {
        result.push(key);
      }
    }
    return result;
  }
  
  /** Used for built-in method references. */
  var objectProto$5 = Object.prototype;
  
  /**
   * Checks if `value` is likely a prototype object.
   *
   * @private
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
   */
  function isPrototype(value) {
    var Ctor = value && value.constructor,
        proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto$5;
  
    return value === proto;
  }
  
  /**
   * Creates a unary function that invokes `func` with its argument transformed.
   *
   * @private
   * @param {Function} func The function to wrap.
   * @param {Function} transform The argument transform.
   * @returns {Function} Returns the new function.
   */
  function overArg(func, transform) {
    return function(arg) {
      return func(transform(arg));
    };
  }
  
  /* Built-in method references for those with the same name as other `lodash` methods. */
  var nativeKeys = overArg(Object.keys, Object);
  
  /** Used for built-in method references. */
  var objectProto$4 = Object.prototype;
  
  /** Used to check objects for own properties. */
  var hasOwnProperty$3 = objectProto$4.hasOwnProperty;
  
  /**
   * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.
   *
   * @private
   * @param {Object} object The object to query.
   * @returns {Array} Returns the array of property names.
   */
  function baseKeys(object) {
    if (!isPrototype(object)) {
      return nativeKeys(object);
    }
    var result = [];
    for (var key in Object(object)) {
      if (hasOwnProperty$3.call(object, key) && key != 'constructor') {
        result.push(key);
      }
    }
    return result;
  }
  
  /**
   * Creates an array of the own enumerable property names of `object`.
   *
   * **Note:** Non-object values are coerced to objects. See the
   * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
   * for more details.
   *
   * @static
   * @since 0.1.0
   * @memberOf _
   * @category Object
   * @param {Object} object The object to query.
   * @returns {Array} Returns the array of property names.
   * @example
   *
   * function Foo() {
   *   this.a = 1;
   *   this.b = 2;
   * }
   *
   * Foo.prototype.c = 3;
   *
   * _.keys(new Foo);
   * // => ['a', 'b'] (iteration order is not guaranteed)
   *
   * _.keys('hi');
   * // => ['0', '1']
   */
  function keys(object) {
    return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
  }
  
  function createArrayIterator(coll) {
      var i = -1;
      var len = coll.length;
      return function next() {
          return ++i < len ? {value: coll[i], key: i} : null;
      }
  }
  
  function createES2015Iterator(iterator) {
      var i = -1;
      return function next() {
          var item = iterator.next();
          if (item.done)
              return null;
          i++;
          return {value: item.value, key: i};
      }
  }
  
  function createObjectIterator(obj) {
      var okeys = keys(obj);
      var i = -1;
      var len = okeys.length;
      return function next() {
          var key = okeys[++i];
          return i < len ? {value: obj[key], key: key} : null;
      };
  }
  
  function iterator(coll) {
      if (isArrayLike(coll)) {
          return createArrayIterator(coll);
      }
  
      var iterator = getIterator(coll);
      return iterator ? createES2015Iterator(iterator) : createObjectIterator(coll);
  }
  
  function onlyOnce(fn) {
      return function() {
          if (fn === null) throw new Error("Callback was already called.");
          var callFn = fn;
          fn = null;
          callFn.apply(this, arguments);
      };
  }
  
  function _eachOfLimit(limit) {
      return function (obj, iteratee, callback) {
          callback = once(callback || noop);
          if (limit <= 0 || !obj) {
              return callback(null);
          }
          var nextElem = iterator(obj);
          var done = false;
          var running = 0;
  
          function iterateeCallback(err, value) {
              running -= 1;
              if (err) {
                  done = true;
                  callback(err);
              }
              else if (value === breakLoop || (done && running <= 0)) {
                  done = true;
                  return callback(null);
              }
              else {
                  replenish();
              }
          }
  
          function replenish () {
              while (running < limit && !done) {
                  var elem = nextElem();
                  if (elem === null) {
                      done = true;
                      if (running <= 0) {
                          callback(null);
                      }
                      return;
                  }
                  running += 1;
                  iteratee(elem.value, elem.key, onlyOnce(iterateeCallback));
              }
          }
  
          replenish();
      };
  }
  
  /**
   * The same as [`eachOf`]{@link module:Collections.eachOf} but runs a maximum of `limit` async operations at a
   * time.
   *
   * @name eachOfLimit
   * @static
   * @memberOf module:Collections
   * @method
   * @see [async.eachOf]{@link module:Collections.eachOf}
   * @alias forEachOfLimit
   * @category Collection
   * @param {Array|Iterable|Object} coll - A collection to iterate over.
   * @param {number} limit - The maximum number of async operations at a time.
   * @param {AsyncFunction} iteratee - An async function to apply to each
   * item in `coll`. The `key` is the item's key, or index in the case of an
   * array.
   * Invoked with (item, key, callback).
   * @param {Function} [callback] - A callback which is called when all
   * `iteratee` functions have finished, or an error occurs. Invoked with (err).
   */
  function eachOfLimit(coll, limit, iteratee, callback) {
      _eachOfLimit(limit)(coll, wrapAsync(iteratee), callback);
  }
  
  function doLimit(fn, limit) {
      return function (iterable, iteratee, callback) {
          return fn(iterable, limit, iteratee, callback);
      };
  }
  
  // eachOf implementation optimized for array-likes
  function eachOfArrayLike(coll, iteratee, callback) {
      callback = once(callback || noop);
      var index = 0,
          completed = 0,
          length = coll.length;
      if (length === 0) {
          callback(null);
      }
  
      function iteratorCallback(err, value) {
          if (err) {
              callback(err);
          } else if ((++completed === length) || value === breakLoop) {
              callback(null);
          }
      }
  
      for (; index < length; index++) {
          iteratee(coll[index], index, onlyOnce(iteratorCallback));
      }
  }
  
  // a generic version of eachOf which can handle array, object, and iterator cases.
  var eachOfGeneric = doLimit(eachOfLimit, Infinity);
  
  /**
   * Like [`each`]{@link module:Collections.each}, except that it passes the key (or index) as the second argument
   * to the iteratee.
   *
   * @name eachOf
   * @static
   * @memberOf module:Collections
   * @method
   * @alias forEachOf
   * @category Collection
   * @see [async.each]{@link module:Collections.each}
   * @param {Array|Iterable|Object} coll - A collection to iterate over.
   * @param {AsyncFunction} iteratee - A function to apply to each
   * item in `coll`.
   * The `key` is the item's key, or index in the case of an array.
   * Invoked with (item, key, callback).
   * @param {Function} [callback] - A callback which is called when all
   * `iteratee` functions have finished, or an error occurs. Invoked with (err).
   * @example
   *
   * var obj = {dev: "/dev.json", test: "/test.json", prod: "/prod.json"};
   * var configs = {};
   *
   * async.forEachOf(obj, function (value, key, callback) {
   *     fs.readFile(__dirname + value, "utf8", function (err, data) {
   *         if (err) return callback(err);
   *         try {
   *             configs[key] = JSON.parse(data);
   *         } catch (e) {
   *             return callback(e);
   *         }
   *         callback();
   *     });
   * }, function (err) {
   *     if (err) console.error(err.message);
   *     // configs is now a map of JSON data
   *     doSomethingWith(configs);
   * });
   */
  var eachOf = function(coll, iteratee, callback) {
      var eachOfImplementation = isArrayLike(coll) ? eachOfArrayLike : eachOfGeneric;
      eachOfImplementation(coll, wrapAsync(iteratee), callback);
  };
  
  function doParallel(fn) {
      return function (obj, iteratee, callback) {
          return fn(eachOf, obj, wrapAsync(iteratee), callback);
      };
  }
  
  function _asyncMap(eachfn, arr, iteratee, callback) {
      callback = callback || noop;
      arr = arr || [];
      var results = [];
      var counter = 0;
      var _iteratee = wrapAsync(iteratee);
  
      eachfn(arr, function (value, _, callback) {
          var index = counter++;
          _iteratee(value, function (err, v) {
              results[index] = v;
              callback(err);
          });
      }, function (err) {
          callback(err, results);
      });
  }
  
  /**
   * Produces a new collection of values by mapping each value in `coll` through
   * the `iteratee` function. The `iteratee` is called with an item from `coll`
   * and a callback for when it has finished processing. Each of these callback
   * takes 2 arguments: an `error`, and the transformed item from `coll`. If
   * `iteratee` passes an error to its callback, the main `callback` (for the
   * `map` function) is immediately called with the error.
   *
   * Note, that since this function applies the `iteratee` to each item in
   * parallel, there is no guarantee that the `iteratee` functions will complete
   * in order. However, the results array will be in the same order as the
   * original `coll`.
   *
   * If `map` is passed an Object, the results will be an Array.  The results
   * will roughly be in the order of the original Objects' keys (but this can
   * vary across JavaScript engines).
   *
   * @name map
   * @static
   * @memberOf module:Collections
   * @method
   * @category Collection
   * @param {Array|Iterable|Object} coll - A collection to iterate over.
   * @param {AsyncFunction} iteratee - An async function to apply to each item in
   * `coll`.
   * The iteratee should complete with the transformed item.
   * Invoked with (item, callback).
   * @param {Function} [callback] - A callback which is called when all `iteratee`
   * functions have finished, or an error occurs. Results is an Array of the
   * transformed items from the `coll`. Invoked with (err, results).
   * @example
   *
   * async.map(['file1','file2','file3'], fs.stat, function(err, results) {
   *     // results is now an array of stats for each file
   * });
   */
  var map = doParallel(_asyncMap);
  
  /**
   * Applies the provided arguments to each function in the array, calling
   * `callback` after all functions have completed. If you only provide the first
   * argument, `fns`, then it will return a function which lets you pass in the
   * arguments as if it were a single function call. If more arguments are
   * provided, `callback` is required while `args` is still optional.
   *
   * @name applyEach
   * @static
   * @memberOf module:ControlFlow
   * @method
   * @category Control Flow
   * @param {Array|Iterable|Object} fns - A collection of {@link AsyncFunction}s
   * to all call with the same arguments
   * @param {...*} [args] - any number of separate arguments to pass to the
   * function.
   * @param {Function} [callback] - the final argument should be the callback,
   * called when all functions have completed processing.
   * @returns {Function} - If only the first argument, `fns`, is provided, it will
   * return a function which lets you pass in the arguments as if it were a single
   * function call. The signature is `(..args, callback)`. If invoked with any
   * arguments, `callback` is required.
   * @example
   *
   * async.applyEach([enableSearch, updateSchema], 'bucket', callback);
   *
   * // partial application example:
   * async.each(
   *     buckets,
   *     async.applyEach([enableSearch, updateSchema]),
   *     callback
   * );
   */
  var applyEach = applyEach$1(map);
  
  function doParallelLimit(fn) {
      return function (obj, limit, iteratee, callback) {
          return fn(_eachOfLimit(limit), obj, wrapAsync(iteratee), callback);
      };
  }
  
  /**
   * The same as [`map`]{@link module:Collections.map} but runs a maximum of `limit` async operations at a time.
   *
   * @name mapLimit
   * @static
   * @memberOf module:Collections
   * @method
   * @see [async.map]{@link module:Collections.map}
   * @category Collection
   * @param {Array|Iterable|Object} coll - A collection to iterate over.
   * @param {number} limit - The maximum number of async operations at a time.
   * @param {AsyncFunction} iteratee - An async function to apply to each item in
   * `coll`.
   * The iteratee should complete with the transformed item.
   * Invoked with (item, callback).
   * @param {Function} [callback] - A callback which is called when all `iteratee`
   * functions have finished, or an error occurs. Results is an array of the
   * transformed items from the `coll`. Invoked with (err, results).
   */
  var mapLimit = doParallelLimit(_asyncMap);
  
  /**
   * The same as [`map`]{@link module:Collections.map} but runs only a single async operation at a time.
   *
   * @name mapSeries
   * @static
   * @memberOf module:Collections
   * @method
   * @see [async.map]{@link module:Collections.map}
   * @category Collection
   * @param {Array|Iterable|Object} coll - A collection to iterate over.
   * @param {AsyncFunction} iteratee - An async function to apply to each item in
   * `coll`.
   * The iteratee should complete with the transformed item.
   * Invoked with (item, callback).
   * @param {Function} [callback] - A callback which is called when all `iteratee`
   * functions have finished, or an error occurs. Results is an array of the
   * transformed items from the `coll`. Invoked with (err, results).
   */
  var mapSeries = doLimit(mapLimit, 1);
  
  /**
   * The same as [`applyEach`]{@link module:ControlFlow.applyEach} but runs only a single async operation at a time.
   *
   * @name applyEachSeries
   * @static
   * @memberOf module:ControlFlow
   * @method
   * @see [async.applyEach]{@link module:ControlFlow.applyEach}
   * @category Control Flow
   * @param {Array|Iterable|Object} fns - A collection of {@link AsyncFunction}s to all
   * call with the same arguments
   * @param {...*} [args] - any number of separate arguments to pass to the
   * function.
   * @param {Function} [callback] - the final argument should be the callback,
   * called when all functions have completed processing.
   * @returns {Function} - If only the first argument is provided, it will return
   * a function which lets you pass in the arguments as if it were a single
   * function call.
   */
  var applyEachSeries = applyEach$1(mapSeries);
  
  /**
   * A specialized version of `_.forEach` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns `array`.
   */
  function arrayEach(array, iteratee) {
    var index = -1,
        length = array == null ? 0 : array.length;
  
    while (++index < length) {
      if (iteratee(array[index], index, array) === false) {
        break;
      }
    }
    return array;
  }
  
  /**
   * Creates a base function for methods like `_.forIn` and `_.forOwn`.
   *
   * @private
   * @param {boolean} [fromRight] Specify iterating from right to left.
   * @returns {Function} Returns the new base function.
   */
  function createBaseFor(fromRight) {
    return function(object, iteratee, keysFunc) {
      var index = -1,
          iterable = Object(object),
          props = keysFunc(object),
          length = props.length;
  
      while (length--) {
        var key = props[fromRight ? length : ++index];
        if (iteratee(iterable[key], key, iterable) === false) {
          break;
        }
      }
      return object;
    };
  }
  
  /**
   * The base implementation of `baseForOwn` which iterates over `object`
   * properties returned by `keysFunc` and invokes `iteratee` for each property.
   * Iteratee functions may exit iteration early by explicitly returning `false`.
   *
   * @private
   * @param {Object} object The object to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @param {Function} keysFunc The function to get the keys of `object`.
   * @returns {Object} Returns `object`.
   */
  var baseFor = createBaseFor();
  
  /**
   * The base implementation of `_.forOwn` without support for iteratee shorthands.
   *
   * @private
   * @param {Object} object The object to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Object} Returns `object`.
   */
  function baseForOwn(object, iteratee) {
    return object && baseFor(object, iteratee, keys);
  }
  
  /**
   * The base implementation of `_.findIndex` and `_.findLastIndex` without
   * support for iteratee shorthands.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {Function} predicate The function invoked per iteration.
   * @param {number} fromIndex The index to search from.
   * @param {boolean} [fromRight] Specify iterating from right to left.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function baseFindIndex(array, predicate, fromIndex, fromRight) {
    var length = array.length,
        index = fromIndex + (fromRight ? 1 : -1);
  
    while ((fromRight ? index-- : ++index < length)) {
      if (predicate(array[index], index, array)) {
        return index;
      }
    }
    return -1;
  }
  
  /**
   * The base implementation of `_.isNaN` without support for number objects.
   *
   * @private
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
   */
  function baseIsNaN(value) {
    return value !== value;
  }
  
  /**
   * A specialized version of `_.indexOf` which performs strict equality
   * comparisons of values, i.e. `===`.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} value The value to search for.
   * @param {number} fromIndex The index to search from.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function strictIndexOf(array, value, fromIndex) {
    var index = fromIndex - 1,
        length = array.length;
  
    while (++index < length) {
      if (array[index] === value) {
        return index;
      }
    }
    return -1;
  }
  
  /**
   * The base implementation of `_.indexOf` without `fromIndex` bounds checks.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} value The value to search for.
   * @param {number} fromIndex The index to search from.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function baseIndexOf(array, value, fromIndex) {
    return value === value
      ? strictIndexOf(array, value, fromIndex)
      : baseFindIndex(array, baseIsNaN, fromIndex);
  }
  
  /**
   * Determines the best order for running the {@link AsyncFunction}s in `tasks`, based on
   * their requirements. Each function can optionally depend on other functions
   * being completed first, and each function is run as soon as its requirements
   * are satisfied.
   *
   * If any of the {@link AsyncFunction}s pass an error to their callback, the `auto` sequence
   * will stop. Further tasks will not execute (so any other functions depending
   * on it will not run), and the main `callback` is immediately called with the
   * error.
   *
   * {@link AsyncFunction}s also receive an object containing the results of functions which
   * have completed so far as the first argument, if they have dependencies. If a
   * task function has no dependencies, it will only be passed a callback.
   *
   * @name auto
   * @static
   * @memberOf module:ControlFlow
   * @method
   * @category Control Flow
   * @param {Object} tasks - An object. Each of its properties is either a
   * function or an array of requirements, with the {@link AsyncFunction} itself the last item
   * in the array. The object's key of a property serves as the name of the task
   * defined by that property, i.e. can be used when specifying requirements for
   * other tasks. The function receives one or two arguments:
   * * a `results` object, containing the results of the previously executed
   *   functions, only passed if the task has any dependencies,
   * * a `callback(err, result)` function, which must be called when finished,
   *   passing an `error` (which can be `null`) and the result of the function's
   *   execution.
   * @param {number} [concurrency=Infinity] - An optional `integer` for
   * determining the maximum number of tasks that can be run in parallel. By
   * default, as many as possible.
   * @param {Function} [callback] - An optional callback which is called when all
   * the tasks have been completed. It receives the `err` argument if any `tasks`
   * pass an error to their callback. Results are always returned; however, if an
   * error occurs, no further `tasks` will be performed, and the results object
   * will only contain partial results. Invoked with (err, results).
   * @returns undefined
   * @example
   *
   * async.auto({
   *     // this function will just be passed a callback
   *     readData: async.apply(fs.readFile, 'data.txt', 'utf-8'),
   *     showData: ['readData', function(results, cb) {
   *         // results.readData is the file's contents
   *         // ...
   *     }]
   * }, callback);
   *
   * async.auto({
   *     get_data: function(callback) {
   *         console.log('in get_data');
   *         // async code to get some data
   *         callback(null, 'data', 'converted to array');
   *     },
   *     make_folder: function(callback) {
   *         console.log('in make_folder');
   *         // async code to create a directory to store a file in
   *         // this is run at the same time as getting the data
   *         callback(null, 'folder');
   *     },
   *     write_file: ['get_data', 'make_folder', function(results, callback) {
   *         console.log('in write_file', JSON.stringify(results));
   *         // once there is some data and the directory exists,
   *         // write the data to a file in the directory
   *         callback(null, 'filename');
   *     }],
   *     email_link: ['write_file', function(results, callback) {
   *         console.log('in email_link', JSON.stringify(results));
   *         // once the file is written let's email a link to it...
   *         // results.write_file contains the filename returned by write_file.
   *         callback(null, {'file':results.write_file, 'email':'user@example.com'});
   *     }]
   * }, function(err, results) {
   *     console.log('err = ', err);
   *     console.log('results = ', results);
   * });
   */
  var auto = function (tasks, concurrency, callback) {
      if (typeof concurrency === 'function') {
          // concurrency is optional, shift the args.
          callback = concurrency;
          concurrency = null;
      }
      callback = once(callback || noop);
      var keys$$1 = keys(tasks);
      var numTasks = keys$$1.length;
      if (!numTasks) {
          return callback(null);
      }
      if (!concurrency) {
          concurrency = numTasks;
      }
  
      var results = {};
      var runningTasks = 0;
      var hasError = false;
  
      var listeners = Object.create(null);
  
      var readyTasks = [];
  
      // for cycle detection:
      var readyToCheck = []; // tasks that have been identified as reachable
      // without the possibility of returning to an ancestor task
      var uncheckedDependencies = {};
  
      baseForOwn(tasks, function (task, key) {
          if (!isArray(task)) {
              // no dependencies
              enqueueTask(key, [task]);
              readyToCheck.push(key);
              return;
          }
  
          var dependencies = task.slice(0, task.length - 1);
          var remainingDependencies = dependencies.length;
          if (remainingDependencies === 0) {
              enqueueTask(key, task);
              readyToCheck.push(key);
              return;
          }
          uncheckedDependencies[key] = remainingDependencies;
  
          arrayEach(dependencies, function (dependencyName) {
              if (!tasks[dependencyName]) {
                  throw new Error('async.auto task `' + key +
                      '` has a non-existent dependency `' +
                      dependencyName + '` in ' +
                      dependencies.join(', '));
              }
              addListener(dependencyName, function () {
                  remainingDependencies--;
                  if (remainingDependencies === 0) {
                      enqueueTask(key, task);
                  }
              });
          });
      });
  
      checkForDeadlocks();
      processQueue();
  
      function enqueueTask(key, task) {
          readyTasks.push(function () {
              runTask(key, task);
          });
      }
  
      function processQueue() {
          if (readyTasks.length === 0 && runningTasks === 0) {
              return callback(null, results);
          }
          while(readyTasks.length && runningTasks < concurrency) {
              var run = readyTasks.shift();
              run();
          }
  
      }
  
      function addListener(taskName, fn) {
          var taskListeners = listeners[taskName];
          if (!taskListeners) {
              taskListeners = listeners[taskName] = [];
          }
  
          taskListeners.push(fn);
      }
  
      function taskComplete(taskName) {
          var taskListeners = listeners[taskName] || [];
          arrayEach(taskListeners, function (fn) {
              fn();
          });
          processQueue();
      }
  
  
      function runTask(key, task) {
          if (hasError) return;
  
          var taskCallback = onlyOnce(function(err, result) {
              runningTasks--;
              if (arguments.length > 2) {
                  result = slice(arguments, 1);
              }
              if (err) {
                  var safeResults = {};
                  baseForOwn(results, function(val, rkey) {
                      safeResults[rkey] = val;
                  });
                  safeResults[key] = result;
                  hasError = true;
                  listeners = Object.create(null);
  
                  callback(err, safeResults);
              } else {
                  results[key] = result;
                  taskComplete(key);
              }
          });
  
          runningTasks++;
          var taskFn = wrapAsync(task[task.length - 1]);
          if (task.length > 1) {
              taskFn(results, taskCallback);
          } else {
              taskFn(taskCallback);
          }
      }
  
      function checkForDeadlocks() {
          // Kahn's algorithm
          // https://en.wikipedia.org/wiki/Topological_sorting#Kahn.27s_algorithm
          // http://connalle.blogspot.com/2013/10/topological-sortingkahn-algorithm.html
          var currentTask;
          var counter = 0;
          while (readyToCheck.length) {
              currentTask = readyToCheck.pop();
              counter++;
              arrayEach(getDependents(currentTask), function (dependent) {
                  if (--uncheckedDependencies[dependent] === 0) {
                      readyToCheck.push(dependent);
                  }
              });
          }
  
          if (counter !== numTasks) {
              throw new Error(
                  'async.auto cannot execute tasks due to a recursive dependency'
              );
          }
      }
  
      function getDependents(taskName) {
          var result = [];
          baseForOwn(tasks, function (task, key) {
              if (isArray(task) && baseIndexOf(task, taskName, 0) >= 0) {
                  result.push(key);
              }
          });
          return result;
      }
  };
  
  /**
   * A specialized version of `_.map` for arrays without support for iteratee
   * shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns the new mapped array.
   */
  function arrayMap(array, iteratee) {
    var index = -1,
        length = array == null ? 0 : array.length,
        result = Array(length);
  
    while (++index < length) {
      result[index] = iteratee(array[index], index, array);
    }
    return result;
  }
  
  /** `Object#toString` result references. */
  var symbolTag = '[object Symbol]';
  
  /**
   * Checks if `value` is classified as a `Symbol` primitive or object.
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
   * @example
   *
   * _.isSymbol(Symbol.iterator);
   * // => true
   *
   * _.isSymbol('abc');
   * // => false
   */
  function isSymbol(value) {
    return typeof value == 'symbol' ||
      (isObjectLike(value) && baseGetTag(value) == symbolTag);
  }
  
  /** Used as references for various `Number` constants. */
  var INFINITY = 1 / 0;
  
  /** Used to convert symbols to primitives and strings. */
  var symbolProto = Symbol$1 ? Symbol$1.prototype : undefined;
  var symbolToString = symbolProto ? symbolProto.toString : undefined;
  
  /**
   * The base implementation of `_.toString` which doesn't convert nullish
   * values to empty strings.
   *
   * @private
   * @param {*} value The value to process.
   * @returns {string} Returns the string.
   */
  function baseToString(value) {
    // Exit early for strings to avoid a performance hit in some environments.
    if (typeof value == 'string') {
      return value;
    }
    if (isArray(value)) {
      // Recursively convert values (susceptible to call stack limits).
      return arrayMap(value, baseToString) + '';
    }
    if (isSymbol(value)) {
      return symbolToString ? symbolToString.call(value) : '';
    }
    var result = (value + '');
    return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
  }
  
  /**
   * The base implementation of `_.slice` without an iteratee call guard.
   *
   * @private
   * @param {Array} array The array to slice.
   * @param {number} [start=0] The start position.
   * @param {number} [end=array.length] The end position.
   * @returns {Array} Returns the slice of `array`.
   */
  function baseSlice(array, start, end) {
    var index = -1,
        length = array.length;
  
    if (start < 0) {
      start = -start > length ? 0 : (length + start);
    }
    end = end > length ? length : end;
    if (end < 0) {
      end += length;
    }
    length = start > end ? 0 : ((end - start) >>> 0);
    start >>>= 0;
  
    var result = Array(length);
    while (++index < length) {
      result[index] = array[index + start];
    }
    return result;
  }
  
  /**
   * Casts `array` to a slice if it's needed.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {number} start The start position.
   * @param {number} [end=array.length] The end position.
   * @returns {Array} Returns the cast slice.
   */
  function castSlice(array, start, end) {
    var length = array.length;
    end = end === undefined ? length : end;
    return (!start && end >= length) ? array : baseSlice(array, start, end);
  }
  
  /**
   * Used by `_.trim` and `_.trimEnd` to get the index of the last string symbol
   * that is not found in the character symbols.
   *
   * @private
   * @param {Array} strSymbols The string symbols to inspect.
   * @param {Array} chrSymbols The character symbols to find.
   * @returns {number} Returns the index of the last unmatched string symbol.
   */
  function charsEndIndex(strSymbols, chrSymbols) {
    var index = strSymbols.length;
  
    while (index-- && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {}
    return index;
  }
  
  /**
   * Used by `_.trim` and `_.trimStart` to get the index of the first string symbol
   * that is not found in the character symbols.
   *
   * @private
   * @param {Array} strSymbols The string symbols to inspect.
   * @param {Array} chrSymbols The character symbols to find.
   * @returns {number} Returns the index of the first unmatched string symbol.
   */
  function charsStartIndex(strSymbols, chrSymbols) {
    var index = -1,
        length = strSymbols.length;
  
    while (++index < length && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {}
    return index;
  }
  
  /**
   * Converts an ASCII `string` to an array.
   *
   * @private
   * @param {string} string The string to convert.
   * @returns {Array} Returns the converted array.
   */
  function asciiToArray(string) {
    return string.split('');
  }
  
  /** Used to compose unicode character classes. */
  var rsAstralRange = '\\ud800-\\udfff';
  var rsComboMarksRange = '\\u0300-\\u036f';
  var reComboHalfMarksRange = '\\ufe20-\\ufe2f';
  var rsComboSymbolsRange = '\\u20d0-\\u20ff';
  var rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange;
  var rsVarRange = '\\ufe0e\\ufe0f';
  
  /** Used to compose unicode capture groups. */
  var rsZWJ = '\\u200d';
  
  /** Used to detect strings with [zero-width joiners or code points from the astral planes](http://eev.ee/blog/2015/09/12/dark-corners-of-unicode/). */
  var reHasUnicode = RegExp('[' + rsZWJ + rsAstralRange  + rsComboRange + rsVarRange + ']');
  
  /**
   * Checks if `string` contains Unicode symbols.
   *
   * @private
   * @param {string} string The string to inspect.
   * @returns {boolean} Returns `true` if a symbol is found, else `false`.
   */
  function hasUnicode(string) {
    return reHasUnicode.test(string);
  }
  
  /** Used to compose unicode character classes. */
  var rsAstralRange$1 = '\\ud800-\\udfff';
  var rsComboMarksRange$1 = '\\u0300-\\u036f';
  var reComboHalfMarksRange$1 = '\\ufe20-\\ufe2f';
  var rsComboSymbolsRange$1 = '\\u20d0-\\u20ff';
  var rsComboRange$1 = rsComboMarksRange$1 + reComboHalfMarksRange$1 + rsComboSymbolsRange$1;
  var rsVarRange$1 = '\\ufe0e\\ufe0f';
  
  /** Used to compose unicode capture groups. */
  var rsAstral = '[' + rsAstralRange$1 + ']';
  var rsCombo = '[' + rsComboRange$1 + ']';
  var rsFitz = '\\ud83c[\\udffb-\\udfff]';
  var rsModifier = '(?:' + rsCombo + '|' + rsFitz + ')';
  var rsNonAstral = '[^' + rsAstralRange$1 + ']';
  var rsRegional = '(?:\\ud83c[\\udde6-\\uddff]){2}';
  var rsSurrPair = '[\\ud800-\\udbff][\\udc00-\\udfff]';
  var rsZWJ$1 = '\\u200d';
  
  /** Used to compose unicode regexes. */
  var reOptMod = rsModifier + '?';
  var rsOptVar = '[' + rsVarRange$1 + ']?';
  var rsOptJoin = '(?:' + rsZWJ$1 + '(?:' + [rsNonAstral, rsRegional, rsSurrPair].join('|') + ')' + rsOptVar + reOptMod + ')*';
  var rsSeq = rsOptVar + reOptMod + rsOptJoin;
  var rsSymbol = '(?:' + [rsNonAstral + rsCombo + '?', rsCombo, rsRegional, rsSurrPair, rsAstral].join('|') + ')';
  
  /** Used to match [string symbols](https://mathiasbynens.be/notes/javascript-unicode). */
  var reUnicode = RegExp(rsFitz + '(?=' + rsFitz + ')|' + rsSymbol + rsSeq, 'g');
  
  /**
   * Converts a Unicode `string` to an array.
   *
   * @private
   * @param {string} string The string to convert.
   * @returns {Array} Returns the converted array.
   */
  function unicodeToArray(string) {
    return string.match(reUnicode) || [];
  }
  
  /**
   * Converts `string` to an array.
   *
   * @private
   * @param {string} string The string to convert.
   * @returns {Array} Returns the converted array.
   */
  function stringToArray(string) {
    return hasUnicode(string)
      ? unicodeToArray(string)
      : asciiToArray(string);
  }
  
  /**
   * Converts `value` to a string. An empty string is returned for `null`
   * and `undefined` values. The sign of `-0` is preserved.
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category Lang
   * @param {*} value The value to convert.
   * @returns {string} Returns the converted string.
   * @example
   *
   * _.toString(null);
   * // => ''
   *
   * _.toString(-0);
   * // => '-0'
   *
   * _.toString([1, 2, 3]);
   * // => '1,2,3'
   */
  function toString(value) {
    return value == null ? '' : baseToString(value);
  }
  
  /** Used to match leading and trailing whitespace. */
  var reTrim = /^\s+|\s+$/g;
  
  /**
   * Removes leading and trailing whitespace or specified characters from `string`.
   *
   * @static
   * @memberOf _
   * @since 3.0.0
   * @category String
   * @param {string} [string=''] The string to trim.
   * @param {string} [chars=whitespace] The characters to trim.
   * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
   * @returns {string} Returns the trimmed string.
   * @example
   *
   * _.trim('  abc  ');
   * // => 'abc'
   *
   * _.trim('-_-abc-_-', '_-');
   * // => 'abc'
   *
   * _.map(['  foo  ', '  bar  '], _.trim);
   * // => ['foo', 'bar']
   */
  function trim(string, chars, guard) {
    string = toString(string);
    if (string && (guard || chars === undefined)) {
      return string.replace(reTrim, '');
    }
    if (!string || !(chars = baseToString(chars))) {
      return string;
    }
    var strSymbols = stringToArray(string),
        chrSymbols = stringToArray(chars),
        start = charsStartIndex(strSymbols, chrSymbols),
        end = charsEndIndex(strSymbols, chrSymbols) + 1;
  
    return castSlice(strSymbols, start, end).join('');
  }
  
  var FN_ARGS = /^(?:async\s+)?(function)?\s*[^\(]*\(\s*([^\)]*)\)/m;
  var FN_ARG_SPLIT = /,/;
  var FN_ARG = /(=.+)?(\s*)$/;
  var STRIP_COMMENTS = /((\/\/.*$)|(\/\*[\s\S]*?\*\/))/mg;
  
  function parseParams(func) {
      func = func.toString().replace(STRIP_COMMENTS, '');
      func = func.match(FN_ARGS)[2].replace(' ', '');
      func = func ? func.split(FN_ARG_SPLIT) : [];
      func = func.map(function (arg){
          return trim(arg.replace(FN_ARG, ''));
      });
      return func;
  }
  
  /**
   * A dependency-injected version of the [async.auto]{@link module:ControlFlow.auto} function. Dependent
   * tasks are specified as parameters to the function, after the usual callback
   * parameter, with the parameter names matching the names of the tasks it
   * depends on. This can provide even more readable task graphs which can be
   * easier to maintain.
   *
   * If a final callback is specified, the task results are similarly injected,
   * specified as named parameters after the initial error parameter.
   *
   * The autoInject function is purely syntactic sugar and its semantics are
   * otherwise equivalent to [async.auto]{@link module:ControlFlow.auto}.
   *
   * @name autoInject
   * @static
   * @memberOf module:ControlFlow
   * @method
   * @see [async.auto]{@link module:ControlFlow.auto}
   * @category Control Flow
   * @param {Object} tasks - An object, each of whose properties is an {@link AsyncFunction} of
   * the form 'func([dependencies...], callback). The object's key of a property
   * serves as the name of the task defined by that property, i.e. can be used
   * when specifying requirements for other tasks.
   * * The `callback` parameter is a `callback(err, result)` which must be called
   *   when finished, passing an `error` (which can be `null`) and the result of
   *   the function's execution. The remaining parameters name other tasks on
   *   which the task is dependent, and the results from those tasks are the
   *   arguments of those parameters.
   * @param {Function} [callback] - An optional callback which is called when all
   * the tasks have been completed. It receives the `err` argument if any `tasks`
   * pass an error to their callback, and a `results` object with any completed
   * task results, similar to `auto`.
   * @example
   *
   * //  The example from `auto` can be rewritten as follows:
   * async.autoInject({
   *     get_data: function(callback) {
   *         // async code to get some data
   *         callback(null, 'data', 'converted to array');
   *     },
   *     make_folder: function(callback) {
   *         // async code to create a directory to store a file in
   *         // this is run at the same time as getting the data
   *         callback(null, 'folder');
   *     },
   *     write_file: function(get_data, make_folder, callback) {
   *         // once there is some data and the directory exists,
   *         // write the data to a file in the directory
   *         callback(null, 'filename');
   *     },
   *     email_link: function(write_file, callback) {
   *         // once the file is written let's email a link to it...
   *         // write_file contains the filename returned by write_file.
   *         callback(null, {'file':write_file, 'email':'user@example.com'});
   *     }
   * }, function(err, results) {
   *     console.log('err = ', err);
   *     console.log('email_link = ', results.email_link);
   * });
   *
   * // If you are using a JS minifier that mangles parameter names, `autoInject`
   * // will not work with plain functions, since the parameter names will be
   * // collapsed to a single letter identifier.  To work around this, you can
   * // explicitly specify the names of the parameters your task function needs
   * // in an array, similar to Angular.js dependency injection.
   *
   * // This still has an advantage over plain `auto`, since the results a task
   * // depends on are still spread into arguments.
   * async.autoInject({
   *     //...
   *     write_file: ['get_data', 'make_folder', function(get_data, make_folder, callback) {
   *         callback(null, 'filename');
   *     }],
   *     email_link: ['write_file', function(write_file, callback) {
   *         callback(null, {'file':write_file, 'email':'user@example.com'});
   *     }]
   *     //...
   * }, function(err, results) {
   *     console.log('err = ', err);
   *     console.log('email_link = ', results.email_link);
   * });
   */
  function autoInject(tasks, callback) {
      var newTasks = {};
  
      baseForOwn(tasks, function (taskFn, key) {
          var params;
          var fnIsAsync = isAsync(taskFn);
          var hasNoDeps =
              (!fnIsAsync && taskFn.length === 1) ||
              (fnIsAsync && taskFn.length === 0);
  
          if (isArray(taskFn)) {
              params = taskFn.slice(0, -1);
              taskFn = taskFn[taskFn.length - 1];
  
              newTasks[key] = params.concat(params.length > 0 ? newTask : taskFn);
          } else if (hasNoDeps) {
              // no dependencies, use the function as-is
              newTasks[key] = taskFn;
          } else {
              params = parseParams(taskFn);
              if (taskFn.length === 0 && !fnIsAsync && params.length === 0) {
                  throw new Error("autoInject task functions require explicit parameters.");
              }
  
              // remove callback param
              if (!fnIsAsync) params.pop();
  
              newTasks[key] = params.concat(newTask);
          }
  
          function newTask(results, taskCb) {
              var newArgs = arrayMap(params, function (name) {
                  return results[name];
              });
              newArgs.push(taskCb);
              wrapAsync(taskFn).apply(null, newArgs);
          }
      });
  
      auto(newTasks, callback);
  }
  
  // Simple doubly linked list (https://en.wikipedia.org/wiki/Doubly_linked_list) implementation
  // used for queues. This implementation assumes that the node provided by the user can be modified
  // to adjust the next and last properties. We implement only the minimal functionality
  // for queue support.
  function DLL() {
      this.head = this.tail = null;
      this.length = 0;
  }
  
  function setInitial(dll, node) {
      dll.length = 1;
      dll.head = dll.tail = node;
  }
  
  DLL.prototype.removeLink = function(node) {
      if (node.prev) node.prev.next = node.next;
      else this.head = node.next;
      if (node.next) node.next.prev = node.prev;
      else this.tail = node.prev;
  
      node.prev = node.next = null;
      this.length -= 1;
      return node;
  };
  
  DLL.prototype.empty = function () {
      while(this.head) this.shift();
      return this;
  };
  
  DLL.prototype.insertAfter = function(node, newNode) {
      newNode.prev = node;
      newNode.next = node.next;
      if (node.next) node.next.prev = newNode;
      else this.tail = newNode;
      node.next = newNode;
      this.length += 1;
  };
  
  DLL.prototype.insertBefore = function(node, newNode) {
      newNode.prev = node.prev;
      newNode.next = node;
      if (node.prev) node.prev.next = newNode;
      else this.head = newNode;
      node.prev = newNode;
      this.length += 1;
  };
  
  DLL.prototype.unshift = function(node) {
      if (this.head) this.insertBefore(this.head, node);
      else setInitial(this, node);
  };
  
  DLL.prototype.push = function(node) {
      if (this.tail) this.insertAfter(this.tail, node);
      else setInitial(this, node);
  };
  
  DLL.prototype.shift = function() {
      return this.head && this.removeLink(this.head);
  };
  
  DLL.prototype.pop = function() {
      return this.tail && this.removeLink(this.tail);
  };
  
  DLL.prototype.toArray = function () {
      var arr = Array(this.length);
      var curr = this.head;
      for(var idx = 0; idx < this.length; idx++) {
          arr[idx] = curr.data;
          curr = curr.next;
      }
      return arr;
  };
  
  DLL.prototype.remove = function (testFn) {
      var curr = this.head;
      while(!!curr) {
          var next = curr.next;
          if (testFn(curr)) {
              this.removeLink(curr);
          }
          curr = next;
      }
      return this;
  };
  
  function queue(worker, concurrency, payload) {
      if (concurrency == null) {
          concurrency = 1;
      }
      else if(concurrency === 0) {
          throw new Error('Concurrency must not be zero');
      }
  
      var _worker = wrapAsync(worker);
      var numRunning = 0;
      var workersList = [];
  
      var processingScheduled = false;
      function _insert(data, insertAtFront, callback) {
          if (callback != null && typeof callback !== 'function') {
              throw new Error('task callback must be a function');
          }
          q.started = true;
          if (!isArray(data)) {
              data = [data];
          }
          if (data.length === 0 && q.idle()) {
              // call drain immediately if there are no tasks
              return setImmediate$1(function() {
                  q.drain();
              });
          }
  
          for (var i = 0, l = data.length; i < l; i++) {
              var item = {
                  data: data[i],
                  callback: callback || noop
              };
  
              if (insertAtFront) {
                  q._tasks.unshift(item);
              } else {
                  q._tasks.push(item);
              }
          }
  
          if (!processingScheduled) {
              processingScheduled = true;
              setImmediate$1(function() {
                  processingScheduled = false;
                  q.process();
              });
          }
      }
  
      function _next(tasks) {
          return function(err){
              numRunning -= 1;
  
              for (var i = 0, l = tasks.length; i < l; i++) {
                  var task = tasks[i];
  
                  var index = baseIndexOf(workersList, task, 0);
                  if (index === 0) {
                      workersList.shift();
                  } else if (index > 0) {
                      workersList.splice(index, 1);
                  }
  
                  task.callback.apply(task, arguments);
  
                  if (err != null) {
                      q.error(err, task.data);
                  }
              }
  
              if (numRunning <= (q.concurrency - q.buffer) ) {
                  q.unsaturated();
              }
  
              if (q.idle()) {
                  q.drain();
              }
              q.process();
          };
      }
  
      var isProcessing = false;
      var q = {
          _tasks: new DLL(),
          concurrency: concurrency,
          payload: payload,
          saturated: noop,
          unsaturated:noop,
          buffer: concurrency / 4,
          empty: noop,
          drain: noop,
          error: noop,
          started: false,
          paused: false,
          push: function (data, callback) {
              _insert(data, false, callback);
          },
          kill: function () {
              q.drain = noop;
              q._tasks.empty();
          },
          unshift: function (data, callback) {
              _insert(data, true, callback);
          },
          remove: function (testFn) {
              q._tasks.remove(testFn);
          },
          process: function () {
              // Avoid trying to start too many processing operations. This can occur
              // when callbacks resolve synchronously (#1267).
              if (isProcessing) {
                  return;
              }
              isProcessing = true;
              while(!q.paused && numRunning < q.concurrency && q._tasks.length){
                  var tasks = [], data = [];
                  var l = q._tasks.length;
                  if (q.payload) l = Math.min(l, q.payload);
                  for (var i = 0; i < l; i++) {
                      var node = q._tasks.shift();
                      tasks.push(node);
                      workersList.push(node);
                      data.push(node.data);
                  }
  
                  numRunning += 1;
  
                  if (q._tasks.length === 0) {
                      q.empty();
                  }
  
                  if (numRunning === q.concurrency) {
                      q.saturated();
                  }
  
                  var cb = onlyOnce(_next(tasks));
                  _worker(data, cb);
              }
              isProcessing = false;
          },
          length: function () {
              return q._tasks.length;
          },
          running: function () {
              return numRunning;
          },
          workersList: function () {
              return workersList;
          },
          idle: function() {
              return q._tasks.length + numRunning === 0;
          },
          pause: function () {
              q.paused = true;
          },
          resume: function () {
              if (q.paused === false) { return; }
              q.paused = false;
              setImmediate$1(q.process);
          }
      };
      return q;
  }
  
  /**
   * A cargo of tasks for the worker function to complete. Cargo inherits all of
   * the same methods and event callbacks as [`queue`]{@link module:ControlFlow.queue}.
   * @typedef {Object} CargoObject
   * @memberOf module:ControlFlow
   * @property {Function} length - A function returning the number of items
   * waiting to be processed. Invoke like `cargo.length()`.
   * @property {number} payload - An `integer` for determining how many tasks
   * should be process per round. This property can be changed after a `cargo` is
   * created to alter the payload on-the-fly.
   * @property {Function} push - Adds `task` to the `queue`. The callback is
   * called once the `worker` has finished processing the task. Instead of a
   * single task, an array of `tasks` can be submitted. The respective callback is
   * used for every task in the list. Invoke like `cargo.push(task, [callback])`.
   * @property {Function} saturated - A callback that is called when the
   * `queue.length()` hits the concurrency and further tasks will be queued.
   * @property {Function} empty - A callback that is called when the last item
   * from the `queue` is given to a `worker`.
   * @property {Function} drain - A callback that is called when the last item
   * from the `queue` has returned from the `worker`.
   * @property {Function} idle - a function returning false if there are items
   * waiting or being processed, or true if not. Invoke like `cargo.idle()`.
   * @property {Function} pause - a function that pauses the processing of tasks
   * until `resume()` is called. Invoke like `cargo.pause()`.
   * @property {Function} resume - a function that resumes the processing of
   * queued tasks when the queue is paused. Invoke like `cargo.resume()`.
   * @property {Function} kill - a function that removes the `drain` callback and
   * empties remaining tasks from the queue forcing it to go idle. Invoke like `cargo.kill()`.
   */
  
  /**
   * Creates a `cargo` object with the specified payload. Tasks added to the
   * cargo will be processed altogether (up to the `payload` limit). If the
   * `worker` is in progress, the task is queued until it becomes available. Once
   * the `worker` has completed some tasks, each callback of those tasks is
   * called. Check out [these](https://camo.githubusercontent.com/6bbd36f4cf5b35a0f11a96dcd2e97711ffc2fb37/68747470733a2f2f662e636c6f75642e6769746875622e636f6d2f6173736574732f313637363837312f36383130382f62626330636662302d356632392d313165322d393734662d3333393763363464633835382e676966) [animations](https://camo.githubusercontent.com/f4810e00e1c5f5f8addbe3e9f49064fd5d102699/68747470733a2f2f662e636c6f75642e6769746875622e636f6d2f6173736574732f313637363837312f36383130312f38346339323036362d356632392d313165322d383134662d3964336430323431336266642e676966)
   * for how `cargo` and `queue` work.
   *
   * While [`queue`]{@link module:ControlFlow.queue} passes only one task to one of a group of workers
   * at a time, cargo passes an array of tasks to a single worker, repeating
   * when the worker is finished.
   *
   * @name cargo
   * @static
   * @memberOf module:ControlFlow
   * @method
   * @see [async.queue]{@link module:ControlFlow.queue}
   * @category Control Flow
   * @param {AsyncFunction} worker - An asynchronous function for processing an array
   * of queued tasks. Invoked with `(tasks, callback)`.
   * @param {number} [payload=Infinity] - An optional `integer` for determining
   * how many tasks should be processed per round; if omitted, the default is
   * unlimited.
   * @returns {module:ControlFlow.CargoObject} A cargo object to manage the tasks. Callbacks can
   * attached as certain properties to listen for specific events during the
   * lifecycle of the cargo and inner queue.
   * @example
   *
   * // create a cargo object with payload 2
   * var cargo = async.cargo(function(tasks, callback) {
   *     for (var i=0; i<tasks.length; i++) {
   *         console.log('hello ' + tasks[i].name);
   *     }
   *     callback();
   * }, 2);
   *
   * // add some items
   * cargo.push({name: 'foo'}, function(err) {
   *     console.log('finished processing foo');
   * });
   * cargo.push({name: 'bar'}, function(err) {
   *     console.log('finished processing bar');
   * });
   * cargo.push({name: 'baz'}, function(err) {
   *     console.log('finished processing baz');
   * });
   */
  function cargo(worker, payload) {
      return queue(worker, 1, payload);
  }
  
  /**
   * The same as [`eachOf`]{@link module:Collections.eachOf} but runs only a single async operation at a time.
   *
   * @name eachOfSeries
   * @static
   * @memberOf module:Collections
   * @method
   * @see [async.eachOf]{@link module:Collections.eachOf}
   * @alias forEachOfSeries
   * @category Collection
   * @param {Array|Iterable|Object} coll - A collection to iterate over.
   * @param {AsyncFunction} iteratee - An async function to apply to each item in
   * `coll`.
   * Invoked with (item, key, callback).
   * @param {Function} [callback] - A callback which is called when all `iteratee`
   * functions have finished, or an error occurs. Invoked with (err).
   */
  var eachOfSeries = doLimit(eachOfLimit, 1);
  
  /**
   * Reduces `coll` into a single value using an async `iteratee` to return each
   * successive step. `memo` is the initial state of the reduction. This function
   * only operates in series.
   *
   * For performance reasons, it may make sense to split a call to this function
   * into a parallel map, and then use the normal `Array.prototype.reduce` on the
   * results. This function is for situations where each step in the reduction
   * needs to be async; if you can get the data before reducing it, then it's
   * probably a good idea to do so.
   *
   * @name reduce
   * @static
   * @memberOf module:Collections
   * @method
   * @alias inject
   * @alias foldl
   * @category Collection
   * @param {Array|Iterable|Object} coll - A collection to iterate over.
   * @param {*} memo - The initial state of the reduction.
   * @param {AsyncFunction} iteratee - A function applied to each item in the
   * array to produce the next step in the reduction.
   * The `iteratee` should complete with the next state of the reduction.
   * If the iteratee complete with an error, the reduction is stopped and the
   * main `callback` is immediately called with the error.
   * Invoked with (memo, item, callback).
   * @param {Function} [callback] - A callback which is called after all the
   * `iteratee` functions have finished. Result is the reduced value. Invoked with
   * (err, result).
   * @example
   *
   * async.reduce([1,2,3], 0, function(memo, item, callback) {
   *     // pointless async:
   *     process.nextTick(function() {
   *         callback(null, memo + item)
   *     });
   * }, function(err, result) {
   *     // result is now equal to the last value of memo, which is 6
   * });
   */
  function reduce(coll, memo, iteratee, callback) {
      callback = once(callback || noop);
      var _iteratee = wrapAsync(iteratee);
      eachOfSeries(coll, function(x, i, callback) {
          _iteratee(memo, x, function(err, v) {
              memo = v;
              callback(err);
          });
      }, function(err) {
          callback(err, memo);
      });
  }
  
  /**
   * Version of the compose function that is more natural to read. Each function
   * consumes the return value of the previous function. It is the equivalent of
   * [compose]{@link module:ControlFlow.compose} with the arguments reversed.
   *
   * Each function is executed with the `this` binding of the composed function.
   *
   * @name seq
   * @static
   * @memberOf module:ControlFlow
   * @method
   * @see [async.compose]{@link module:ControlFlow.compose}
   * @category Control Flow
   * @param {...AsyncFunction} functions - the asynchronous functions to compose
   * @returns {Function} a function that composes the `functions` in order
   * @example
   *
   * // Requires lodash (or underscore), express3 and dresende's orm2.
   * // Part of an app, that fetches cats of the logged user.
   * // This example uses `seq` function to avoid overnesting and error
   * // handling clutter.
   * app.get('/cats', function(request, response) {
   *     var User = request.models.User;
   *     async.seq(
   *         _.bind(User.get, User),  // 'User.get' has signature (id, callback(err, data))
   *         function(user, fn) {
   *             user.getCats(fn);      // 'getCats' has signature (callback(err, data))
   *         }
   *     )(req.session.user_id, function (err, cats) {
   *         if (err) {
   *             console.error(err);
   *             response.json({ status: 'error', message: err.message });
   *         } else {
   *             response.json({ status: 'ok', message: 'Cats found', data: cats });
   *         }
   *     });
   * });
   */
  function seq(/*...functions*/) {
      var _functions = arrayMap(arguments, wrapAsync);
      return function(/*...args*/) {
          var args = slice(arguments);
          var that = this;
  
          var cb = args[args.length - 1];
          if (typeof cb == 'function') {
              args.pop();
          } else {
              cb = noop;
          }
  
          reduce(_functions, args, function(newargs, fn, cb) {
              fn.apply(that, newargs.concat(function(err/*, ...nextargs*/) {
                  var nextargs = slice(arguments, 1);
                  cb(err, nextargs);
              }));
          },
          function(err, results) {
              cb.apply(that, [err].concat(results));
          });
      };
  }
  
  /**
   * Creates a function which is a composition of the passed asynchronous
   * functions. Each function consumes the return value of the function that
   * follows. Composing functions `f()`, `g()`, and `h()` would produce the result
   * of `f(g(h()))`, only this version uses callbacks to obtain the return values.
   *
   * Each function is executed with the `this` binding of the composed function.
   *
   * @name compose
   * @static
   * @memberOf module:ControlFlow
   * @method
   * @category Control Flow
   * @param {...AsyncFunction} functions - the asynchronous functions to compose
   * @returns {Function} an asynchronous function that is the composed
   * asynchronous `functions`
   * @example
   *
   * function add1(n, callback) {
   *     setTimeout(function () {
   *         callback(null, n + 1);
   *     }, 10);
   * }
   *
   * function mul3(n, callback) {
   *     setTimeout(function () {
   *         callback(null, n * 3);
   *     }, 10);
   * }
   *
   * var add1mul3 = async.compose(mul3, add1);
   * add1mul3(4, function (err, result) {
   *     // result now equals 15
   * });
   */
  var compose = function(/*...args*/) {
      return seq.apply(null, slice(arguments).reverse());
  };
  
  var _concat = Array.prototype.concat;
  
  /**
   * The same as [`concat`]{@link module:Collections.concat} but runs a maximum of `limit` async operations at a time.
   *
   * @name concatLimit
   * @static
   * @memberOf module:Collections
   * @method
   * @see [async.concat]{@link module:Collections.concat}
   * @category Collection
   * @param {Array|Iterable|Object} coll - A collection to iterate over.
   * @param {number} limit - The maximum number of async operations at a time.
   * @param {AsyncFunction} iteratee - A function to apply to each item in `coll`,
   * which should use an array as its result. Invoked with (item, callback).
   * @param {Function} [callback] - A callback which is called after all the
   * `iteratee` functions have finished, or an error occurs. Results is an array
   * containing the concatenated results of the `iteratee` function. Invoked with
   * (err, results).
   */
  var concatLimit = function(coll, limit, iteratee, callback) {
      callback = callback || noop;
      var _iteratee = wrapAsync(iteratee);
      mapLimit(coll, limit, function(val, callback) {
          _iteratee(val, function(err /*, ...args*/) {
              if (err) return callback(err);
              return callback(null, slice(arguments, 1));
          });
      }, function(err, mapResults) {
          var result = [];
          for (var i = 0; i < mapResults.length; i++) {
              if (mapResults[i]) {
                  result = _concat.apply(result, mapResults[i]);
              }
          }
  
          return callback(err, result);
      });
  };
  
  /**
   * Applies `iteratee` to each item in `coll`, concatenating the results. Returns
   * the concatenated list. The `iteratee`s are called in parallel, and the
   * results are concatenated as they return. There is no guarantee that the
   * results array will be returned in the original order of `coll` passed to the
   * `iteratee` function.
   *
   * @name concat
   * @static
   * @memberOf module:Collections
   * @method
   * @category Collection
   * @param {Array|Iterable|Object} coll - A collection to iterate over.
   * @param {AsyncFunction} iteratee - A function to apply to each item in `coll`,
   * which should use an array as its result. Invoked with (item, callback).
   * @param {Function} [callback(err)] - A callback which is called after all the
   * `iteratee` functions have finished, or an error occurs. Results is an array
   * containing the concatenated results of the `iteratee` function. Invoked with
   * (err, results).
   * @example
   *
   * async.concat(['dir1','dir2','dir3'], fs.readdir, function(err, files) {
   *     // files is now a list of filenames that exist in the 3 directories
   * });
   */
  var concat = doLimit(concatLimit, Infinity);
  
  /**
   * The same as [`concat`]{@link module:Collections.concat} but runs only a single async operation at a time.
   *
   * @name concatSeries
   * @static
   * @memberOf module:Collections
   * @method
   * @see [async.concat]{@link module:Collections.concat}
   * @category Collection
   * @param {Array|Iterable|Object} coll - A collection to iterate over.
   * @param {AsyncFunction} iteratee - A function to apply to each item in `coll`.
   * The iteratee should complete with an array an array of results.
   * Invoked with (item, callback).
   * @param {Function} [callback(err)] - A callback which is called after all the
   * `iteratee` functions have finished, or an error occurs. Results is an array
   * containing the concatenated results of the `iteratee` function. Invoked with
   * (err, results).
   */
  var concatSeries = doLimit(concatLimit, 1);
  
  /**
   * Returns a function that when called, calls-back with the values provided.
   * Useful as the first function in a [`waterfall`]{@link module:ControlFlow.waterfall}, or for plugging values in to
   * [`auto`]{@link module:ControlFlow.auto}.
   *
   * @name constant
   * @static
   * @memberOf module:Utils
   * @method
   * @category Util
   * @param {...*} arguments... - Any number of arguments to automatically invoke
   * callback with.
   * @returns {AsyncFunction} Returns a function that when invoked, automatically
   * invokes the callback with the previous given arguments.
   * @example
   *
   * async.waterfall([
   *     async.constant(42),
   *     function (value, next) {
   *         // value === 42
   *     },
   *     //...
   * ], callback);
   *
   * async.waterfall([
   *     async.constant(filename, "utf8"),
   *     fs.readFile,
   *     function (fileData, next) {
   *         //...
   *     }
   *     //...
   * ], callback);
   *
   * async.auto({
   *     hostname: async.constant("https://server.net/"),
   *     port: findFreePort,
   *     launchServer: ["hostname", "port", function (options, cb) {
   *         startServer(options, cb);
   *     }],
   *     //...
   * }, callback);
   */
  var constant = function(/*...values*/) {
      var values = slice(arguments);
      var args = [null].concat(values);
      return function (/*...ignoredArgs, callback*/) {
          var callback = arguments[arguments.length - 1];
          return callback.apply(this, args);
      };
  };
  
  /**
   * This method returns the first argument it receives.
   *
   * @static
   * @since 0.1.0
   * @memberOf _
   * @category Util
   * @param {*} value Any value.
   * @returns {*} Returns `value`.
   * @example
   *
   * var object = { 'a': 1 };
   *
   * console.log(_.identity(object) === object);
   * // => true
   */
  function identity(value) {
    return value;
  }
  
  function _createTester(check, getResult) {
      return function(eachfn, arr, iteratee, cb) {
          cb = cb || noop;
          var testPassed = false;
          var testResult;
          eachfn(arr, function(value, _, callback) {
              iteratee(value, function(err, result) {
                  if (err) {
                      callback(err);
                  } else if (check(result) && !testResult) {
                      testPassed = true;
                      testResult = getResult(true, value);
                      callback(null, breakLoop);
                  } else {
                      callback();
                  }
              });
          }, function(err) {
              if (err) {
                  cb(err);
              } else {
                  cb(null, testPassed ? testResult : getResult(false));
              }
          });
      };
  }
  
  function _findGetResult(v, x) {
      return x;
  }
  
  /**
   * Returns the first value in `coll` that passes an async truth test. The
   * `iteratee` is applied in parallel, meaning the first iteratee to return
   * `true` will fire the detect `callback` with that result. That means the
   * result might not be the first item in the original `coll` (in terms of order)
   * that passes the test.
  
   * If order within the original `coll` is important, then look at
   * [`detectSeries`]{@link module:Collections.detectSeries}.
   *
   * @name detect
   * @static
   * @memberOf module:Collections
   * @method
   * @alias find
   * @category Collections
   * @param {Array|Iterable|Object} coll - A collection to iterate over.
   * @param {AsyncFunction} iteratee - A truth test to apply to each item in `coll`.
   * The iteratee must complete with a boolean value as its result.
   * Invoked with (item, callback).
   * @param {Function} [callback] - A callback which is called as soon as any
   * iteratee returns `true`, or after all the `iteratee` functions have finished.
   * Result will be the first item in the array that passes the truth test
   * (iteratee) or the value `undefined` if none passed. Invoked with
   * (err, result).
   * @example
   *
   * async.detect(['file1','file2','file3'], function(filePath, callback) {
   *     fs.access(filePath, function(err) {
   *         callback(null, !err)
   *     });
   * }, function(err, result) {
   *     // result now equals the first file in the list that exists
   * });
   */
  var detect = doParallel(_createTester(identity, _findGetResult));
  
  /**
   * The same as [`detect`]{@link module:Collections.detect} but runs a maximum of `limit` async operations at a
   * time.
   *
   * @name detectLimit
   * @static
   * @memberOf module:Collections
   * @method
   * @see [async.detect]{@link module:Collections.detect}
   * @alias findLimit
   * @category Collections
   * @param {Array|Iterable|Object} coll - A collection to iterate over.
   * @param {number} limit - The maximum number of async operations at a time.
   * @param {AsyncFunction} iteratee - A truth test to apply to each item in `coll`.
   * The iteratee must complete with a boolean value as its result.
   * Invoked with (item, callback).
   * @param {Function} [callback] - A callback which is called as soon as any
   * iteratee returns `true`, or after all the `iteratee` functions have finished.
   * Result will be the first item in the array that passes the truth test
   * (iteratee) or the value `undefined` if none passed. Invoked with
   * (err, result).
   */
  var detectLimit = doParallelLimit(_createTester(identity, _findGetResult));
  
  /**
   * The same as [`detect`]{@link module:Collections.detect} but runs only a single async operation at a time.
   *
   * @name detectSeries
   * @static
   * @memberOf module:Collections
   * @method
   * @see [async.detect]{@link module:Collections.detect}
   * @alias findSeries
   * @category Collections
   * @param {Array|Iterable|Object} coll - A collection to iterate over.
   * @param {AsyncFunction} iteratee - A truth test to apply to each item in `coll`.
   * The iteratee must complete with a boolean value as its result.
   * Invoked with (item, callback).
   * @param {Function} [callback] - A callback which is called as soon as any
   * iteratee returns `true`, or after all the `iteratee` functions have finished.
   * Result will be the first item in the array that passes the truth test
   * (iteratee) or the value `undefined` if none passed. Invoked with
   * (err, result).
   */
  var detectSeries = doLimit(detectLimit, 1);
  
  function consoleFunc(name) {
      return function (fn/*, ...args*/) {
          var args = slice(arguments, 1);
          args.push(function (err/*, ...args*/) {
              var args = slice(arguments, 1);
              if (typeof console === 'object') {
                  if (err) {
                      if (console.error) {
                          console.error(err);
                      }
                  } else if (console[name]) {
                      arrayEach(args, function (x) {
                          console[name](x);
                      });
                  }
              }
          });
          wrapAsync(fn).apply(null, args);
      };
  }
  
  /**
   * Logs the result of an [`async` function]{@link AsyncFunction} to the
   * `console` using `console.dir` to display the properties of the resulting object.
   * Only works in Node.js or in browsers that support `console.dir` and
   * `console.error` (such as FF and Chrome).
   * If multiple arguments are returned from the async function,
   * `console.dir` is called on each argument in order.
   *
   * @name dir
   * @static
   * @memberOf module:Utils
   * @method
   * @category Util
   * @param {AsyncFunction} function - The function you want to eventually apply
   * all arguments to.
   * @param {...*} arguments... - Any number of arguments to apply to the function.
   * @example
   *
   * // in a module
   * var hello = function(name, callback) {
   *     setTimeout(function() {
   *         callback(null, {hello: name});
   *     }, 1000);
   * };
   *
   * // in the node repl
   * node> async.dir(hello, 'world');
   * {hello: 'world'}
   */
  var dir = consoleFunc('dir');
  
  /**
   * The post-check version of [`during`]{@link module:ControlFlow.during}. To reflect the difference in
   * the order of operations, the arguments `test` and `fn` are switched.
   *
   * Also a version of [`doWhilst`]{@link module:ControlFlow.doWhilst} with asynchronous `test` function.
   * @name doDuring
   * @static
   * @memberOf module:ControlFlow
   * @method
   * @see [async.during]{@link module:ControlFlow.during}
   * @category Control Flow
   * @param {AsyncFunction} fn - An async function which is called each time
   * `test` passes. Invoked with (callback).
   * @param {AsyncFunction} test - asynchronous truth test to perform before each
   * execution of `fn`. Invoked with (...args, callback), where `...args` are the
   * non-error args from the previous callback of `fn`.
   * @param {Function} [callback] - A callback which is called after the test
   * function has failed and repeated execution of `fn` has stopped. `callback`
   * will be passed an error if one occurred, otherwise `null`.
   */
  function doDuring(fn, test, callback) {
      callback = onlyOnce(callback || noop);
      var _fn = wrapAsync(fn);
      var _test = wrapAsync(test);
  
      function next(err/*, ...args*/) {
          if (err) return callback(err);
          var args = slice(arguments, 1);
          args.push(check);
          _test.apply(this, args);
      }
  
      function check(err, truth) {
          if (err) return callback(err);
          if (!truth) return callback(null);
          _fn(next);
      }
  
      check(null, true);
  
  }
  
  /**
   * The post-check version of [`whilst`]{@link module:ControlFlow.whilst}. To reflect the difference in
   * the order of operations, the arguments `test` and `iteratee` are switched.
   *
   * `doWhilst` is to `whilst` as `do while` is to `while` in plain JavaScript.
   *
   * @name doWhilst
   * @static
   * @memberOf module:ControlFlow
   * @method
   * @see [async.whilst]{@link module:ControlFlow.whilst}
   * @category Control Flow
   * @param {AsyncFunction} iteratee - A function which is called each time `test`
   * passes. Invoked with (callback).
   * @param {Function} test - synchronous truth test to perform after each
   * execution of `iteratee`. Invoked with any non-error callback results of
   * `iteratee`.
   * @param {Function} [callback] - A callback which is called after the test
   * function has failed and repeated execution of `iteratee` has stopped.
   * `callback` will be passed an error and any arguments passed to the final
   * `iteratee`'s callback. Invoked with (err, [results]);
   */
  function doWhilst(iteratee, test, callback) {
      callback = onlyOnce(callback || noop);
      var _iteratee = wrapAsync(iteratee);
      var next = function(err/*, ...args*/) {
          if (err) return callback(err);
          var args = slice(arguments, 1);
          if (test.apply(this, args)) return _iteratee(next);
          callback.apply(null, [null].concat(args));
      };
      _iteratee(next);
  }
  
  /**
   * Like ['doWhilst']{@link module:ControlFlow.doWhilst}, except the `test` is inverted. Note the
   * argument ordering differs from `until`.
   *
   * @name doUntil
   * @static
   * @memberOf module:ControlFlow
   * @method
   * @see [async.doWhilst]{@link module:ControlFlow.doWhilst}
   * @category Control Flow
   * @param {AsyncFunction} iteratee - An async function which is called each time
   * `test` fails. Invoked with (callback).
   * @param {Function} test - synchronous truth test to perform after each
   * execution of `iteratee`. Invoked with any non-error callback results of
   * `iteratee`.
   * @param {Function} [callback] - A callback which is called after the test
   * function has passed and repeated execution of `iteratee` has stopped. `callback`
   * will be passed an error and any arguments passed to the final `iteratee`'s
   * callback. Invoked with (err, [results]);
   */
  function doUntil(iteratee, test, callback) {
      doWhilst(iteratee, function() {
          return !test.apply(this, arguments);
      }, callback);
  }
  
  /**
   * Like [`whilst`]{@link module:ControlFlow.whilst}, except the `test` is an asynchronous function that
   * is passed a callback in the form of `function (err, truth)`. If error is
   * passed to `test` or `fn`, the main callback is immediately called with the
   * value of the error.
   *
   * @name during
   * @static
   * @memberOf module:ControlFlow
   * @method
   * @see [async.whilst]{@link module:ControlFlow.whilst}
   * @category Control Flow
   * @param {AsyncFunction} test - asynchronous truth test to perform before each
   * execution of `fn`. Invoked with (callback).
   * @param {AsyncFunction} fn - An async function which is called each time
   * `test` passes. Invoked with (callback).
   * @param {Function} [callback] - A callback which is called after the test
   * function has failed and repeated execution of `fn` has stopped. `callback`
   * will be passed an error, if one occurred, otherwise `null`.
   * @example
   *
   * var count = 0;
   *
   * async.during(
   *     function (callback) {
   *         return callback(null, count < 5);
   *     },
   *     function (callback) {
   *         count++;
   *         setTimeout(callback, 1000);
   *     },
   *     function (err) {
   *         // 5 seconds have passed
   *     }
   * );
   */
  function during(test, fn, callback) {
      callback = onlyOnce(callback || noop);
      var _fn = wrapAsync(fn);
      var _test = wrapAsync(test);
  
      function next(err) {
          if (err) return callback(err);
          _test(check);
      }
  
      function check(err, truth) {
          if (err) return callback(err);
          if (!truth) return callback(null);
          _fn(next);
      }
  
      _test(check);
  }
  
  function _withoutIndex(iteratee) {
      return function (value, index, callback) {
          return iteratee(value, callback);
      };
  }
  
  /**
   * Applies the function `iteratee` to each item in `coll`, in parallel.
   * The `iteratee` is called with an item from the list, and a callback for when
   * it has finished. If the `iteratee` passes an error to its `callback`, the
   * main `callback` (for the `each` function) is immediately called with the
   * error.
   *
   * Note, that since this function applies `iteratee` to each item in parallel,
   * there is no guarantee that the iteratee functions will complete in order.
   *
   * @name each
   * @static
   * @memberOf module:Collections
   * @method
   * @alias forEach
   * @category Collection
   * @param {Array|Iterable|Object} coll - A collection to iterate over.
   * @param {AsyncFunction} iteratee - An async function to apply to
   * each item in `coll`. Invoked with (item, callback).
   * The array index is not passed to the iteratee.
   * If you need the index, use `eachOf`.
   * @param {Function} [callback] - A callback which is called when all
   * `iteratee` functions have finished, or an error occurs. Invoked with (err).
   * @example
   *
   * // assuming openFiles is an array of file names and saveFile is a function
   * // to save the modified contents of that file:
   *
   * async.each(openFiles, saveFile, function(err){
   *   // if any of the saves produced an error, err would equal that error
   * });
   *
   * // assuming openFiles is an array of file names
   * async.each(openFiles, function(file, callback) {
   *
   *     // Perform operation on file here.
   *     console.log('Processing file ' + file);
   *
   *     if( file.length > 32 ) {
   *       console.log('This file name is too long');
   *       callback('File name too long');
   *     } else {
   *       // Do work to process file here
   *       console.log('File processed');
   *       callback();
   *     }
   * }, function(err) {
   *     // if any of the file processing produced an error, err would equal that error
   *     if( err ) {
   *       // One of the iterations produced an error.
   *       // All processing will now stop.
   *       console.log('A file failed to process');
   *     } else {
   *       console.log('All files have been processed successfully');
   *     }
   * });
   */
  function eachLimit(coll, iteratee, callback) {
      eachOf(coll, _withoutIndex(wrapAsync(iteratee)), callback);
  }
  
  /**
   * The same as [`each`]{@link module:Collections.each} but runs a maximum of `limit` async operations at a time.
   *
   * @name eachLimit
   * @static
   * @memberOf module:Collections
   * @method
   * @see [async.each]{@link module:Collections.each}
   * @alias forEachLimit
   * @category Collection
   * @param {Array|Iterable|Object} coll - A collection to iterate over.
   * @param {number} limit - The maximum number of async operations at a time.
   * @param {AsyncFunction} iteratee - An async function to apply to each item in
   * `coll`.
   * The array index is not passed to the iteratee.
   * If you need the index, use `eachOfLimit`.
   * Invoked with (item, callback).
   * @param {Function} [callback] - A callback which is called when all
   * `iteratee` functions have finished, or an error occurs. Invoked with (err).
   */
  function eachLimit$1(coll, limit, iteratee, callback) {
      _eachOfLimit(limit)(coll, _withoutIndex(wrapAsync(iteratee)), callback);
  }
  
  /**
   * The same as [`each`]{@link module:Collections.each} but runs only a single async operation at a time.
   *
   * @name eachSeries
   * @static
   * @memberOf module:Collections
   * @method
   * @see [async.each]{@link module:Collections.each}
   * @alias forEachSeries
   * @category Collection
   * @param {Array|Iterable|Object} coll - A collection to iterate over.
   * @param {AsyncFunction} iteratee - An async function to apply to each
   * item in `coll`.
   * The array index is not passed to the iteratee.
   * If you need the index, use `eachOfSeries`.
   * Invoked with (item, callback).
   * @param {Function} [callback] - A callback which is called when all
   * `iteratee` functions have finished, or an error occurs. Invoked with (err).
   */
  var eachSeries = doLimit(eachLimit$1, 1);
  
  /**
   * Wrap an async function and ensure it calls its callback on a later tick of
   * the event loop.  If the function already calls its callback on a next tick,
   * no extra deferral is added. This is useful for preventing stack overflows
   * (`RangeError: Maximum call stack size exceeded`) and generally keeping
   * [Zalgo](http://blog.izs.me/post/59142742143/designing-apis-for-asynchrony)
   * contained. ES2017 `async` functions are returned as-is -- they are immune
   * to Zalgo's corrupting influences, as they always resolve on a later tick.
   *
   * @name ensureAsync
   * @static
   * @memberOf module:Utils
   * @method
   * @category Util
   * @param {AsyncFunction} fn - an async function, one that expects a node-style
   * callback as its last argument.
   * @returns {AsyncFunction} Returns a wrapped function with the exact same call
   * signature as the function passed in.
   * @example
   *
   * function sometimesAsync(arg, callback) {
   *     if (cache[arg]) {
   *         return callback(null, cache[arg]); // this would be synchronous!!
   *     } else {
   *         doSomeIO(arg, callback); // this IO would be asynchronous
   *     }
   * }
   *
   * // this has a risk of stack overflows if many results are cached in a row
   * async.mapSeries(args, sometimesAsync, done);
   *
   * // this will defer sometimesAsync's callback if necessary,
   * // preventing stack overflows
   * async.mapSeries(args, async.ensureAsync(sometimesAsync), done);
   */
  function ensureAsync(fn) {
      if (isAsync(fn)) return fn;
      return initialParams(function (args, callback) {
          var sync = true;
          args.push(function () {
              var innerArgs = arguments;
              if (sync) {
                  setImmediate$1(function () {
                      callback.apply(null, innerArgs);
                  });
              } else {
                  callback.apply(null, innerArgs);
              }
          });
          fn.apply(this, args);
          sync = false;
      });
  }
  
  function notId(v) {
      return !v;
  }
  
  /**
   * Returns `true` if every element in `coll` satisfies an async test. If any
   * iteratee call returns `false`, the main `callback` is immediately called.
   *
   * @name every
   * @static
   * @memberOf module:Collections
   * @method
   * @alias all
   * @category Collection
   * @param {Array|Iterable|Object} coll - A collection to iterate over.
   * @param {AsyncFunction} iteratee - An async truth test to apply to each item
   * in the collection in parallel.
   * The iteratee must complete with a boolean result value.
   * Invoked with (item, callback).
   * @param {Function} [callback] - A callback which is called after all the
   * `iteratee` functions have finished. Result will be either `true` or `false`
   * depending on the values of the async tests. Invoked with (err, result).
   * @example
   *
   * async.every(['file1','file2','file3'], function(filePath, callback) {
   *     fs.access(filePath, function(err) {
   *         callback(null, !err)
   *     });
   * }, function(err, result) {
   *     // if result is true then every file exists
   * });
   */
  var every = doParallel(_createTester(notId, notId));
  
  /**
   * The same as [`every`]{@link module:Collections.every} but runs a maximum of `limit` async operations at a time.
   *
   * @name everyLimit
   * @static
   * @memberOf module:Collections
   * @method
   * @see [async.every]{@link module:Collections.every}
   * @alias allLimit
   * @category Collection
   * @param {Array|Iterable|Object} coll - A collection to iterate over.
   * @param {number} limit - The maximum number of async operations at a time.
   * @param {AsyncFunction} iteratee - An async truth test to apply to each item
   * in the collection in parallel.
   * The iteratee must complete with a boolean result value.
   * Invoked with (item, callback).
   * @param {Function} [callback] - A callback which is called after all the
   * `iteratee` functions have finished. Result will be either `true` or `false`
   * depending on the values of the async tests. Invoked with (err, result).
   */
  var everyLimit = doParallelLimit(_createTester(notId, notId));
  
  /**
   * The same as [`every`]{@link module:Collections.every} but runs only a single async operation at a time.
   *
   * @name everySeries
   * @static
   * @memberOf module:Collections
   * @method
   * @see [async.every]{@link module:Collections.every}
   * @alias allSeries
   * @category Collection
   * @param {Array|Iterable|Object} coll - A collection to iterate over.
   * @param {AsyncFunction} iteratee - An async truth test to apply to each item
   * in the collection in series.
   * The iteratee must complete with a boolean result value.
   * Invoked with (item, callback).
   * @param {Function} [callback] - A callback which is called after all the
   * `iteratee` functions have finished. Result will be either `true` or `false`
   * depending on the values of the async tests. Invoked with (err, result).
   */
  var everySeries = doLimit(everyLimit, 1);
  
  /**
   * The base implementation of `_.property` without support for deep paths.
   *
   * @private
   * @param {string} key The key of the property to get.
   * @returns {Function} Returns the new accessor function.
   */
  function baseProperty(key) {
    return function(object) {
      return object == null ? undefined : object[key];
    };
  }
  
  function filterArray(eachfn, arr, iteratee, callback) {
      var truthValues = new Array(arr.length);
      eachfn(arr, function (x, index, callback) {
          iteratee(x, function (err, v) {
              truthValues[index] = !!v;
              callback(err);
          });
      }, function (err) {
          if (err) return callback(err);
          var results = [];
          for (var i = 0; i < arr.length; i++) {
              if (truthValues[i]) results.push(arr[i]);
          }
          callback(null, results);
      });
  }
  
  function filterGeneric(eachfn, coll, iteratee, callback) {
      var results = [];
      eachfn(coll, function (x, index, callback) {
          iteratee(x, function (err, v) {
              if (err) {
                  callback(err);
              } else {
                  if (v) {
                      results.push({index: index, value: x});
                  }
                  callback();
              }
          });
      }, function (err) {
          if (err) {
              callback(err);
          } else {
              callback(null, arrayMap(results.sort(function (a, b) {
                  return a.index - b.index;
              }), baseProperty('value')));
          }
      });
  }
  
  function _filter(eachfn, coll, iteratee, callback) {
      var filter = isArrayLike(coll) ? filterArray : filterGeneric;
      filter(eachfn, coll, wrapAsync(iteratee), callback || noop);
  }
  
  /**
   * Returns a new array of all the values in `coll` which pass an async truth
   * test. This operation is performed in parallel, but the results array will be
   * in the same order as the original.
   *
   * @name filter
   * @static
   * @memberOf module:Collections
   * @method
   * @alias select
   * @category Collection
   * @param {Array|Iterable|Object} coll - A collection to iterate over.
   * @param {Function} iteratee - A truth test to apply to each item in `coll`.
   * The `iteratee` is passed a `callback(err, truthValue)`, which must be called
   * with a boolean argument once it has completed. Invoked with (item, callback).
   * @param {Function} [callback] - A callback which is called after all the
   * `iteratee` functions have finished. Invoked with (err, results).
   * @example
   *
   * async.filter(['file1','file2','file3'], function(filePath, callback) {
   *     fs.access(filePath, function(err) {
   *         callback(null, !err)
   *     });
   * }, function(err, results) {
   *     // results now equals an array of the existing files
   * });
   */
  var filter = doParallel(_filter);
  
  /**
   * The same as [`filter`]{@link module:Collections.filter} but runs a maximum of `limit` async operations at a
   * time.
   *
   * @name filterLimit
   * @static
   * @memberOf module:Collections
   * @method
   * @see [async.filter]{@link module:Collections.filter}
   * @alias selectLimit
   * @category Collection
   * @param {Array|Iterable|Object} coll - A collection to iterate over.
   * @param {number} limit - The maximum number of async operations at a time.
   * @param {Function} iteratee - A truth test to apply to each item in `coll`.
   * The `iteratee` is passed a `callback(err, truthValue)`, which must be called
   * with a boolean argument once it has completed. Invoked with (item, callback).
   * @param {Function} [callback] - A callback which is called after all the
   * `iteratee` functions have finished. Invoked with (err, results).
   */
  var filterLimit = doParallelLimit(_filter);
  
  /**
   * The same as [`filter`]{@link module:Collections.filter} but runs only a single async operation at a time.
   *
   * @name filterSeries
   * @static
   * @memberOf module:Collections
   * @method
   * @see [async.filter]{@link module:Collections.filter}
   * @alias selectSeries
   * @category Collection
   * @param {Array|Iterable|Object} coll - A collection to iterate over.
   * @param {Function} iteratee - A truth test to apply to each item in `coll`.
   * The `iteratee` is passed a `callback(err, truthValue)`, which must be called
   * with a boolean argument once it has completed. Invoked with (item, callback).
   * @param {Function} [callback] - A callback which is called after all the
   * `iteratee` functions have finished. Invoked with (err, results)
   */
  var filterSeries = doLimit(filterLimit, 1);
  
  /**
   * Calls the asynchronous function `fn` with a callback parameter that allows it
   * to call itself again, in series, indefinitely.
  
   * If an error is passed to the callback then `errback` is called with the
   * error, and execution stops, otherwise it will never be called.
   *
   * @name forever
   * @static
   * @memberOf module:ControlFlow
   * @method
   * @category Control Flow
   * @param {AsyncFunction} fn - an async function to call repeatedly.
   * Invoked with (next).
   * @param {Function} [errback] - when `fn` passes an error to it's callback,
   * this function will be called, and execution stops. Invoked with (err).
   * @example
   *
   * async.forever(
   *     function(next) {
   *         // next is suitable for passing to things that need a callback(err [, whatever]);
   *         // it will result in this function being called again.
   *     },
   *     function(err) {
   *         // if next is called with a value in its first parameter, it will appear
   *         // in here as 'err', and execution will stop.
   *     }
   * );
   */
  function forever(fn, errback) {
      var done = onlyOnce(errback || noop);
      var task = wrapAsync(ensureAsync(fn));
  
      function next(err) {
          if (err) return done(err);
          task(next);
      }
      next();
  }
  
  /**
   * The same as [`groupBy`]{@link module:Collections.groupBy} but runs a maximum of `limit` async operations at a time.
   *
   * @name groupByLimit
   * @static
   * @memberOf module:Collections
   * @method
   * @see [async.groupBy]{@link module:Collections.groupBy}
   * @category Collection
   * @param {Array|Iterable|Object} coll - A collection to iterate over.
   * @param {number} limit - The maximum number of async operations at a time.
   * @param {AsyncFunction} iteratee - An async function to apply to each item in
   * `coll`.
   * The iteratee should complete with a `key` to group the value under.
   * Invoked with (value, callback).
   * @param {Function} [callback] - A callback which is called when all `iteratee`
   * functions have finished, or an error occurs. Result is an `Object` whoses
   * properties are arrays of values which returned the corresponding key.
   */
  var groupByLimit = function(coll, limit, iteratee, callback) {
      callback = callback || noop;
      var _iteratee = wrapAsync(iteratee);
      mapLimit(coll, limit, function(val, callback) {
          _iteratee(val, function(err, key) {
              if (err) return callback(err);
              return callback(null, {key: key, val: val});
          });
      }, function(err, mapResults) {
          var result = {};
          // from MDN, handle object having an `hasOwnProperty` prop
          var hasOwnProperty = Object.prototype.hasOwnProperty;
  
          for (var i = 0; i < mapResults.length; i++) {
              if (mapResults[i]) {
                  var key = mapResults[i].key;
                  var val = mapResults[i].val;
  
                  if (hasOwnProperty.call(result, key)) {
                      result[key].push(val);
                  } else {
                      result[key] = [val];
                  }
              }
          }
  
          return callback(err, result);
      });
  };
  
  /**
   * Returns a new object, where each value corresponds to an array of items, from
   * `coll`, that returned the corresponding key. That is, the keys of the object
   * correspond to the values passed to the `iteratee` callback.
   *
   * Note: Since this function applies the `iteratee` to each item in parallel,
   * there is no guarantee that the `iteratee` functions will complete in order.
   * However, the values for each key in the `result` will be in the same order as
   * the original `coll`. For Objects, the values will roughly be in the order of
   * the original Objects' keys (but this can vary across JavaScript engines).
   *
   * @name groupBy
   * @static
   * @memberOf module:Collections
   * @method
   * @category Collection
   * @param {Array|Iterable|Object} coll - A collection to iterate over.
   * @param {AsyncFunction} iteratee - An async function to apply to each item in
   * `coll`.
   * The iteratee should complete with a `key` to group the value under.
   * Invoked with (value, callback).
   * @param {Function} [callback] - A callback which is called when all `iteratee`
   * functions have finished, or an error occurs. Result is an `Object` whoses
   * properties are arrays of values which returned the corresponding key.
   * @example
   *
   * async.groupBy(['userId1', 'userId2', 'userId3'], function(userId, callback) {
   *     db.findById(userId, function(err, user) {
   *         if (err) return callback(err);
   *         return callback(null, user.age);
   *     });
   * }, function(err, result) {
   *     // result is object containing the userIds grouped by age
   *     // e.g. { 30: ['userId1', 'userId3'], 42: ['userId2']};
   * });
   */
  var groupBy = doLimit(groupByLimit, Infinity);
  
  /**
   * The same as [`groupBy`]{@link module:Collections.groupBy} but runs only a single async operation at a time.
   *
   * @name groupBySeries
   * @static
   * @memberOf module:Collections
   * @method
   * @see [async.groupBy]{@link module:Collections.groupBy}
   * @category Collection
   * @param {Array|Iterable|Object} coll - A collection to iterate over.
   * @param {number} limit - The maximum number of async operations at a time.
   * @param {AsyncFunction} iteratee - An async function to apply to each item in
   * `coll`.
   * The iteratee should complete with a `key` to group the value under.
   * Invoked with (value, callback).
   * @param {Function} [callback] - A callback which is called when all `iteratee`
   * functions have finished, or an error occurs. Result is an `Object` whoses
   * properties are arrays of values which returned the corresponding key.
   */
  var groupBySeries = doLimit(groupByLimit, 1);
  
  /**
   * Logs the result of an `async` function to the `console`. Only works in
   * Node.js or in browsers that support `console.log` and `console.error` (such
   * as FF and Chrome). If multiple arguments are returned from the async
   * function, `console.log` is called on each argument in order.
   *
   * @name log
   * @static
   * @memberOf module:Utils
   * @method
   * @category Util
   * @param {AsyncFunction} function - The function you want to eventually apply
   * all arguments to.
   * @param {...*} arguments... - Any number of arguments to apply to the function.
   * @example
   *
   * // in a module
   * var hello = function(name, callback) {
   *     setTimeout(function() {
   *         callback(null, 'hello ' + name);
   *     }, 1000);
   * };
   *
   * // in the node repl
   * node> async.log(hello, 'world');
   * 'hello world'
   */
  var log = consoleFunc('log');
  
  /**
   * The same as [`mapValues`]{@link module:Collections.mapValues} but runs a maximum of `limit` async operations at a
   * time.
   *
   * @name mapValuesLimit
   * @static
   * @memberOf module:Collections
   * @method
   * @see [async.mapValues]{@link module:Collections.mapValues}
   * @category Collection
   * @param {Object} obj - A collection to iterate over.
   * @param {number} limit - The maximum number of async operations at a time.
   * @param {AsyncFunction} iteratee - A function to apply to each value and key
   * in `coll`.
   * The iteratee should complete with the transformed value as its result.
   * Invoked with (value, key, callback).
   * @param {Function} [callback] - A callback which is called when all `iteratee`
   * functions have finished, or an error occurs. `result` is a new object consisting
   * of each key from `obj`, with each transformed value on the right-hand side.
   * Invoked with (err, result).
   */
  function mapValuesLimit(obj, limit, iteratee, callback) {
      callback = once(callback || noop);
      var newObj = {};
      var _iteratee = wrapAsync(iteratee);
      eachOfLimit(obj, limit, function(val, key, next) {
          _iteratee(val, key, function (err, result) {
              if (err) return next(err);
              newObj[key] = result;
              next();
          });
      }, function (err) {
          callback(err, newObj);
      });
  }
  
  /**
   * A relative of [`map`]{@link module:Collections.map}, designed for use with objects.
   *
   * Produces a new Object by mapping each value of `obj` through the `iteratee`
   * function. The `iteratee` is called each `value` and `key` from `obj` and a
   * callback for when it has finished processing. Each of these callbacks takes
   * two arguments: an `error`, and the transformed item from `obj`. If `iteratee`
   * passes an error to its callback, the main `callback` (for the `mapValues`
   * function) is immediately called with the error.
   *
   * Note, the order of the keys in the result is not guaranteed.  The keys will
   * be roughly in the order they complete, (but this is very engine-specific)
   *
   * @name mapValues
   * @static
   * @memberOf module:Collections
   * @method
   * @category Collection
   * @param {Object} obj - A collection to iterate over.
   * @param {AsyncFunction} iteratee - A function to apply to each value and key
   * in `coll`.
   * The iteratee should complete with the transformed value as its result.
   * Invoked with (value, key, callback).
   * @param {Function} [callback] - A callback which is called when all `iteratee`
   * functions have finished, or an error occurs. `result` is a new object consisting
   * of each key from `obj`, with each transformed value on the right-hand side.
   * Invoked with (err, result).
   * @example
   *
   * async.mapValues({
   *     f1: 'file1',
   *     f2: 'file2',
   *     f3: 'file3'
   * }, function (file, key, callback) {
   *   fs.stat(file, callback);
   * }, function(err, result) {
   *     // result is now a map of stats for each file, e.g.
   *     // {
   *     //     f1: [stats for file1],
   *     //     f2: [stats for file2],
   *     //     f3: [stats for file3]
   *     // }
   * });
   */
  
  var mapValues = doLimit(mapValuesLimit, Infinity);
  
  /**
   * The same as [`mapValues`]{@link module:Collections.mapValues} but runs only a single async operation at a time.
   *
   * @name mapValuesSeries
   * @static
   * @memberOf module:Collections
   * @method
   * @see [async.mapValues]{@link module:Collections.mapValues}
   * @category Collection
   * @param {Object} obj - A collection to iterate over.
   * @param {AsyncFunction} iteratee - A function to apply to each value and key
   * in `coll`.
   * The iteratee should complete with the transformed value as its result.
   * Invoked with (value, key, callback).
   * @param {Function} [callback] - A callback which is called when all `iteratee`
   * functions have finished, or an error occurs. `result` is a new object consisting
   * of each key from `obj`, with each transformed value on the right-hand side.
   * Invoked with (err, result).
   */
  var mapValuesSeries = doLimit(mapValuesLimit, 1);
  
  function has(obj, key) {
      return key in obj;
  }
  
  /**
   * Caches the results of an async function. When creating a hash to store
   * function results against, the callback is omitted from the hash and an
   * optional hash function can be used.
   *
   * If no hash function is specified, the first argument is used as a hash key,
   * which may work reasonably if it is a string or a data type that converts to a
   * distinct string. Note that objects and arrays will not behave reasonably.
   * Neither will cases where the other arguments are significant. In such cases,
   * specify your own hash function.
   *
   * The cache of results is exposed as the `memo` property of the function
   * returned by `memoize`.
   *
   * @name memoize
   * @static
   * @memberOf module:Utils
   * @method
   * @category Util
   * @param {AsyncFunction} fn - The async function to proxy and cache results from.
   * @param {Function} hasher - An optional function for generating a custom hash
   * for storing results. It has all the arguments applied to it apart from the
   * callback, and must be synchronous.
   * @returns {AsyncFunction} a memoized version of `fn`
   * @example
   *
   * var slow_fn = function(name, callback) {
   *     // do something
   *     callback(null, result);
   * };
   * var fn = async.memoize(slow_fn);
   *
   * // fn can now be used as if it were slow_fn
   * fn('some name', function() {
   *     // callback
   * });
   */
  function memoize(fn, hasher) {
      var memo = Object.create(null);
      var queues = Object.create(null);
      hasher = hasher || identity;
      var _fn = wrapAsync(fn);
      var memoized = initialParams(function memoized(args, callback) {
          var key = hasher.apply(null, args);
          if (has(memo, key)) {
              setImmediate$1(function() {
                  callback.apply(null, memo[key]);
              });
          } else if (has(queues, key)) {
              queues[key].push(callback);
          } else {
              queues[key] = [callback];
              _fn.apply(null, args.concat(function(/*args*/) {
                  var args = slice(arguments);
                  memo[key] = args;
                  var q = queues[key];
                  delete queues[key];
                  for (var i = 0, l = q.length; i < l; i++) {
                      q[i].apply(null, args);
                  }
              }));
          }
      });
      memoized.memo = memo;
      memoized.unmemoized = fn;
      return memoized;
  }
  
  /**
   * Calls `callback` on a later loop around the event loop. In Node.js this just
   * calls `process.nextTicl`.  In the browser it will use `setImmediate` if
   * available, otherwise `setTimeout(callback, 0)`, which means other higher
   * priority events may precede the execution of `callback`.
   *
   * This is used internally for browser-compatibility purposes.
   *
   * @name nextTick
   * @static
   * @memberOf module:Utils
   * @method
   * @see [async.setImmediate]{@link module:Utils.setImmediate}
   * @category Util
   * @param {Function} callback - The function to call on a later loop around
   * the event loop. Invoked with (args...).
   * @param {...*} args... - any number of additional arguments to pass to the
   * callback on the next tick.
   * @example
   *
   * var call_order = [];
   * async.nextTick(function() {
   *     call_order.push('two');
   *     // call_order now equals ['one','two']
   * });
   * call_order.push('one');
   *
   * async.setImmediate(function (a, b, c) {
   *     // a, b, and c equal 1, 2, and 3
   * }, 1, 2, 3);
   */
  var _defer$1;
  
  if (hasNextTick) {
      _defer$1 = process.nextTick;
  } else if (hasSetImmediate) {
      _defer$1 = setImmediate;
  } else {
      _defer$1 = fallback;
  }
  
  var nextTick = wrap(_defer$1);
  
  function _parallel(eachfn, tasks, callback) {
      callback = callback || noop;
      var results = isArrayLike(tasks) ? [] : {};
  
      eachfn(tasks, function (task, key, callback) {
          wrapAsync(task)(function (err, result) {
              if (arguments.length > 2) {
                  result = slice(arguments, 1);
              }
              results[key] = result;
              callback(err);
          });
      }, function (err) {
          callback(err, results);
      });
  }
  
  /**
   * Run the `tasks` collection of functions in parallel, without waiting until
   * the previous function has completed. If any of the functions pass an error to
   * its callback, the main `callback` is immediately called with the value of the
   * error. Once the `tasks` have completed, the results are passed to the final
   * `callback` as an array.
   *
   * **Note:** `parallel` is about kicking-off I/O tasks in parallel, not about
   * parallel execution of code.  If your tasks do not use any timers or perform
   * any I/O, they will actually be executed in series.  Any synchronous setup
   * sections for each task will happen one after the other.  JavaScript remains
   * single-threaded.
   *
   * **Hint:** Use [`reflect`]{@link module:Utils.reflect} to continue the
   * execution of other tasks when a task fails.
   *
   * It is also possible to use an object instead of an array. Each property will
   * be run as a function and the results will be passed to the final `callback`
   * as an object instead of an array. This can be a more readable way of handling
   * results from {@link async.parallel}.
   *
   * @name parallel
   * @static
   * @memberOf module:ControlFlow
   * @method
   * @category Control Flow
   * @param {Array|Iterable|Object} tasks - A collection of
   * [async functions]{@link AsyncFunction} to run.
   * Each async function can complete with any number of optional `result` values.
   * @param {Function} [callback] - An optional callback to run once all the
   * functions have completed successfully. This function gets a results array
   * (or object) containing all the result arguments passed to the task callbacks.
   * Invoked with (err, results).
   *
   * @example
   * async.parallel([
   *     function(callback) {
   *         setTimeout(function() {
   *             callback(null, 'one');
   *         }, 200);
   *     },
   *     function(callback) {
   *         setTimeout(function() {
   *             callback(null, 'two');
   *         }, 100);
   *     }
   * ],
   * // optional callback
   * function(err, results) {
   *     // the results array will equal ['one','two'] even though
   *     // the second function had a shorter timeout.
   * });
   *
   * // an example using an object instead of an array
   * async.parallel({
   *     one: function(callback) {
   *         setTimeout(function() {
   *             callback(null, 1);
   *         }, 200);
   *     },
   *     two: function(callback) {
   *         setTimeout(function() {
   *             callback(null, 2);
   *         }, 100);
   *     }
   * }, function(err, results) {
   *     // results is now equals to: {one: 1, two: 2}
   * });
   */
  function parallelLimit(tasks, callback) {
      _parallel(eachOf, tasks, callback);
  }
  
  /**
   * The same as [`parallel`]{@link module:ControlFlow.parallel} but runs a maximum of `limit` async operations at a
   * time.
   *
   * @name parallelLimit
   * @static
   * @memberOf module:ControlFlow
   * @method
   * @see [async.parallel]{@link module:ControlFlow.parallel}
   * @category Control Flow
   * @param {Array|Iterable|Object} tasks - A collection of
   * [async functions]{@link AsyncFunction} to run.
   * Each async function can complete with any number of optional `result` values.
   * @param {number} limit - The maximum number of async operations at a time.
   * @param {Function} [callback] - An optional callback to run once all the
   * functions have completed successfully. This function gets a results array
   * (or object) containing all the result arguments passed to the task callbacks.
   * Invoked with (err, results).
   */
  function parallelLimit$1(tasks, limit, callback) {
      _parallel(_eachOfLimit(limit), tasks, callback);
  }
  
  /**
   * A queue of tasks for the worker function to complete.
   * @typedef {Object} QueueObject
   * @memberOf module:ControlFlow
   * @property {Function} length - a function returning the number of items
   * waiting to be processed. Invoke with `queue.length()`.
   * @property {boolean} started - a boolean indicating whether or not any
   * items have been pushed and processed by the queue.
   * @property {Function} running - a function returning the number of items
   * currently being processed. Invoke with `queue.running()`.
   * @property {Function} workersList - a function returning the array of items
   * currently being processed. Invoke with `queue.workersList()`.
   * @property {Function} idle - a function returning false if there are items
   * waiting or being processed, or true if not. Invoke with `queue.idle()`.
   * @property {number} concurrency - an integer for determining how many `worker`
   * functions should be run in parallel. This property can be changed after a
   * `queue` is created to alter the concurrency on-the-fly.
   * @property {Function} push - add a new task to the `queue`. Calls `callback`
   * once the `worker` has finished processing the task. Instead of a single task,
   * a `tasks` array can be submitted. The respective callback is used for every
   * task in the list. Invoke with `queue.push(task, [callback])`,
   * @property {Function} unshift - add a new task to the front of the `queue`.
   * Invoke with `queue.unshift(task, [callback])`.
   * @property {Function} remove - remove items from the queue that match a test
   * function.  The test function will be passed an object with a `data` property,
   * and a `priority` property, if this is a
   * [priorityQueue]{@link module:ControlFlow.priorityQueue} object.
   * Invoked with `queue.remove(testFn)`, where `testFn` is of the form
   * `function ({data, priority}) {}` and returns a Boolean.
   * @property {Function} saturated - a callback that is called when the number of
   * running workers hits the `concurrency` limit, and further tasks will be
   * queued.
   * @property {Function} unsaturated - a callback that is called when the number
   * of running workers is less than the `concurrency` & `buffer` limits, and
   * further tasks will not be queued.
   * @property {number} buffer - A minimum threshold buffer in order to say that
   * the `queue` is `unsaturated`.
   * @property {Function} empty - a callback that is called when the last item
   * from the `queue` is given to a `worker`.
   * @property {Function} drain - a callback that is called when the last item
   * from the `queue` has returned from the `worker`.
   * @property {Function} error - a callback that is called when a task errors.
   * Has the signature `function(error, task)`.
   * @property {boolean} paused - a boolean for determining whether the queue is
   * in a paused state.
   * @property {Function} pause - a function that pauses the processing of tasks
   * until `resume()` is called. Invoke with `queue.pause()`.
   * @property {Function} resume - a function that resumes the processing of
   * queued tasks when the queue is paused. Invoke with `queue.resume()`.
   * @property {Function} kill - a function that removes the `drain` callback and
   * empties remaining tasks from the queue forcing it to go idle. No more tasks
   * should be pushed to the queue after calling this function. Invoke with `queue.kill()`.
   */
  
  /**
   * Creates a `queue` object with the specified `concurrency`. Tasks added to the
   * `queue` are processed in parallel (up to the `concurrency` limit). If all
   * `worker`s are in progress, the task is queued until one becomes available.
   * Once a `worker` completes a `task`, that `task`'s callback is called.
   *
   * @name queue
   * @static
   * @memberOf module:ControlFlow
   * @method
   * @category Control Flow
   * @param {AsyncFunction} worker - An async function for processing a queued task.
   * If you want to handle errors from an individual task, pass a callback to
   * `q.push()`. Invoked with (task, callback).
   * @param {number} [concurrency=1] - An `integer` for determining how many
   * `worker` functions should be run in parallel.  If omitted, the concurrency
   * defaults to `1`.  If the concurrency is `0`, an error is thrown.
   * @returns {module:ControlFlow.QueueObject} A queue object to manage the tasks. Callbacks can
   * attached as certain properties to listen for specific events during the
   * lifecycle of the queue.
   * @example
   *
   * // create a queue object with concurrency 2
   * var q = async.queue(function(task, callback) {
   *     console.log('hello ' + task.name);
   *     callback();
   * }, 2);
   *
   * // assign a callback
   * q.drain = function() {
   *     console.log('all items have been processed');
   * };
   *
   * // add some items to the queue
   * q.push({name: 'foo'}, function(err) {
   *     console.log('finished processing foo');
   * });
   * q.push({name: 'bar'}, function (err) {
   *     console.log('finished processing bar');
   * });
   *
   * // add some items to the queue (batch-wise)
   * q.push([{name: 'baz'},{name: 'bay'},{name: 'bax'}], function(err) {
   *     console.log('finished processing item');
   * });
   *
   * // add some items to the front of the queue
   * q.unshift({name: 'bar'}, function (err) {
   *     console.log('finished processing bar');
   * });
   */
  var queue$1 = function (worker, concurrency) {
      var _worker = wrapAsync(worker);
      return queue(function (items, cb) {
          _worker(items[0], cb);
      }, concurrency, 1);
  };
  
  /**
   * The same as [async.queue]{@link module:ControlFlow.queue} only tasks are assigned a priority and
   * completed in ascending priority order.
   *
   * @name priorityQueue
   * @static
   * @memberOf module:ControlFlow
   * @method
   * @see [async.queue]{@link module:ControlFlow.queue}
   * @category Control Flow
   * @param {AsyncFunction} worker - An async function for processing a queued task.
   * If you want to handle errors from an individual task, pass a callback to
   * `q.push()`.
   * Invoked with (task, callback).
   * @param {number} concurrency - An `integer` for determining how many `worker`
   * functions should be run in parallel.  If omitted, the concurrency defaults to
   * `1`.  If the concurrency is `0`, an error is thrown.
   * @returns {module:ControlFlow.QueueObject} A priorityQueue object to manage the tasks. There are two
   * differences between `queue` and `priorityQueue` objects:
   * * `push(task, priority, [callback])` - `priority` should be a number. If an
   *   array of `tasks` is given, all tasks will be assigned the same priority.
   * * The `unshift` method was removed.
   */
  var priorityQueue = function(worker, concurrency) {
      // Start with a normal queue
      var q = queue$1(worker, concurrency);
  
      // Override push to accept second parameter representing priority
      q.push = function(data, priority, callback) {
          if (callback == null) callback = noop;
          if (typeof callback !== 'function') {
              throw new Error('task callback must be a function');
          }
          q.started = true;
          if (!isArray(data)) {
              data = [data];
          }
          if (data.length === 0) {
              // call drain immediately if there are no tasks
              return setImmediate$1(function() {
                  q.drain();
              });
          }
  
          priority = priority || 0;
          var nextNode = q._tasks.head;
          while (nextNode && priority >= nextNode.priority) {
              nextNode = nextNode.next;
          }
  
          for (var i = 0, l = data.length; i < l; i++) {
              var item = {
                  data: data[i],
                  priority: priority,
                  callback: callback
              };
  
              if (nextNode) {
                  q._tasks.insertBefore(nextNode, item);
              } else {
                  q._tasks.push(item);
              }
          }
          setImmediate$1(q.process);
      };
  
      // Remove unshift function
      delete q.unshift;
  
      return q;
  };
  
  /**
   * Runs the `tasks` array of functions in parallel, without waiting until the
   * previous function has completed. Once any of the `tasks` complete or pass an
   * error to its callback, the main `callback` is immediately called. It's
   * equivalent to `Promise.race()`.
   *
   * @name race
   * @static
   * @memberOf module:ControlFlow
   * @method
   * @category Control Flow
   * @param {Array} tasks - An array containing [async functions]{@link AsyncFunction}
   * to run. Each function can complete with an optional `result` value.
   * @param {Function} callback - A callback to run once any of the functions have
   * completed. This function gets an error or result from the first function that
   * completed. Invoked with (err, result).
   * @returns undefined
   * @example
   *
   * async.race([
   *     function(callback) {
   *         setTimeout(function() {
   *             callback(null, 'one');
   *         }, 200);
   *     },
   *     function(callback) {
   *         setTimeout(function() {
   *             callback(null, 'two');
   *         }, 100);
   *     }
   * ],
   * // main callback
   * function(err, result) {
   *     // the result will be equal to 'two' as it finishes earlier
   * });
   */
  function race(tasks, callback) {
      callback = once(callback || noop);
      if (!isArray(tasks)) return callback(new TypeError('First argument to race must be an array of functions'));
      if (!tasks.length) return callback();
      for (var i = 0, l = tasks.length; i < l; i++) {
          wrapAsync(tasks[i])(callback);
      }
  }
  
  /**
   * Same as [`reduce`]{@link module:Collections.reduce}, only operates on `array` in reverse order.
   *
   * @name reduceRight
   * @static
   * @memberOf module:Collections
   * @method
   * @see [async.reduce]{@link module:Collections.reduce}
   * @alias foldr
   * @category Collection
   * @param {Array} array - A collection to iterate over.
   * @param {*} memo - The initial state of the reduction.
   * @param {AsyncFunction} iteratee - A function applied to each item in the
   * array to produce the next step in the reduction.
   * The `iteratee` should complete with the next state of the reduction.
   * If the iteratee complete with an error, the reduction is stopped and the
   * main `callback` is immediately called with the error.
   * Invoked with (memo, item, callback).
   * @param {Function} [callback] - A callback which is called after all the
   * `iteratee` functions have finished. Result is the reduced value. Invoked with
   * (err, result).
   */
  function reduceRight (array, memo, iteratee, callback) {
      var reversed = slice(array).reverse();
      reduce(reversed, memo, iteratee, callback);
  }
  
  /**
   * Wraps the async function in another function that always completes with a
   * result object, even when it errors.
   *
   * The result object has either the property `error` or `value`.
   *
   * @name reflect
   * @static
   * @memberOf module:Utils
   * @method
   * @category Util
   * @param {AsyncFunction} fn - The async function you want to wrap
   * @returns {Function} - A function that always passes null to it's callback as
   * the error. The second argument to the callback will be an `object` with
   * either an `error` or a `value` property.
   * @example
   *
   * async.parallel([
   *     async.reflect(function(callback) {
   *         // do some stuff ...
   *         callback(null, 'one');
   *     }),
   *     async.reflect(function(callback) {
   *         // do some more stuff but error ...
   *         callback('bad stuff happened');
   *     }),
   *     async.reflect(function(callback) {
   *         // do some more stuff ...
   *         callback(null, 'two');
   *     })
   * ],
   * // optional callback
   * function(err, results) {
   *     // values
   *     // results[0].value = 'one'
   *     // results[1].error = 'bad stuff happened'
   *     // results[2].value = 'two'
   * });
   */
  function reflect(fn) {
      var _fn = wrapAsync(fn);
      return initialParams(function reflectOn(args, reflectCallback) {
          args.push(function callback(error, cbArg) {
              if (error) {
                  reflectCallback(null, { error: error });
              } else {
                  var value;
                  if (arguments.length <= 2) {
                      value = cbArg;
                  } else {
                      value = slice(arguments, 1);
                  }
                  reflectCallback(null, { value: value });
              }
          });
  
          return _fn.apply(this, args);
      });
  }
  
  /**
   * A helper function that wraps an array or an object of functions with `reflect`.
   *
   * @name reflectAll
   * @static
   * @memberOf module:Utils
   * @method
   * @see [async.reflect]{@link module:Utils.reflect}
   * @category Util
   * @param {Array|Object|Iterable} tasks - The collection of
   * [async functions]{@link AsyncFunction} to wrap in `async.reflect`.
   * @returns {Array} Returns an array of async functions, each wrapped in
   * `async.reflect`
   * @example
   *
   * let tasks = [
   *     function(callback) {
   *         setTimeout(function() {
   *             callback(null, 'one');
   *         }, 200);
   *     },
   *     function(callback) {
   *         // do some more stuff but error ...
   *         callback(new Error('bad stuff happened'));
   *     },
   *     function(callback) {
   *         setTimeout(function() {
   *             callback(null, 'two');
   *         }, 100);
   *     }
   * ];
   *
   * async.parallel(async.reflectAll(tasks),
   * // optional callback
   * function(err, results) {
   *     // values
   *     // results[0].value = 'one'
   *     // results[1].error = Error('bad stuff happened')
   *     // results[2].value = 'two'
   * });
   *
   * // an example using an object instead of an array
   * let tasks = {
   *     one: function(callback) {
   *         setTimeout(function() {
   *             callback(null, 'one');
   *         }, 200);
   *     },
   *     two: function(callback) {
   *         callback('two');
   *     },
   *     three: function(callback) {
   *         setTimeout(function() {
   *             callback(null, 'three');
   *         }, 100);
   *     }
   * };
   *
   * async.parallel(async.reflectAll(tasks),
   * // optional callback
   * function(err, results) {
   *     // values
   *     // results.one.value = 'one'
   *     // results.two.error = 'two'
   *     // results.three.value = 'three'
   * });
   */
  function reflectAll(tasks) {
      var results;
      if (isArray(tasks)) {
          results = arrayMap(tasks, reflect);
      } else {
          results = {};
          baseForOwn(tasks, function(task, key) {
              results[key] = reflect.call(this, task);
          });
      }
      return results;
  }
  
  function reject$1(eachfn, arr, iteratee, callback) {
      _filter(eachfn, arr, function(value, cb) {
          iteratee(value, function(err, v) {
              cb(err, !v);
          });
      }, callback);
  }
  
  /**
   * The opposite of [`filter`]{@link module:Collections.filter}. Removes values that pass an `async` truth test.
   *
   * @name reject
   * @static
   * @memberOf module:Collections
   * @method
   * @see [async.filter]{@link module:Collections.filter}
   * @category Collection
   * @param {Array|Iterable|Object} coll - A collection to iterate over.
   * @param {Function} iteratee - An async truth test to apply to each item in
   * `coll`.
   * The should complete with a boolean value as its `result`.
   * Invoked with (item, callback).
   * @param {Function} [callback] - A callback which is called after all the
   * `iteratee` functions have finished. Invoked with (err, results).
   * @example
   *
   * async.reject(['file1','file2','file3'], function(filePath, callback) {
   *     fs.access(filePath, function(err) {
   *         callback(null, !err)
   *     });
   * }, function(err, results) {
   *     // results now equals an array of missing files
   *     createFiles(results);
   * });
   */
  var reject = doParallel(reject$1);
  
  /**
   * The same as [`reject`]{@link module:Collections.reject} but runs a maximum of `limit` async operations at a
   * time.
   *
   * @name rejectLimit
   * @static
   * @memberOf module:Collections
   * @method
   * @see [async.reject]{@link module:Collections.reject}
   * @category Collection
   * @param {Array|Iterable|Object} coll - A collection to iterate over.
   * @param {number} limit - The maximum number of async operations at a time.
   * @param {Function} iteratee - An async truth test to apply to each item in
   * `coll`.
   * The should complete with a boolean value as its `result`.
   * Invoked with (item, callback).
   * @param {Function} [callback] - A callback which is called after all the
   * `iteratee` functions have finished. Invoked with (err, results).
   */
  var rejectLimit = doParallelLimit(reject$1);
  
  /**
   * The same as [`reject`]{@link module:Collections.reject} but runs only a single async operation at a time.
   *
   * @name rejectSeries
   * @static
   * @memberOf module:Collections
   * @method
   * @see [async.reject]{@link module:Collections.reject}
   * @category Collection
   * @param {Array|Iterable|Object} coll - A collection to iterate over.
   * @param {Function} iteratee - An async truth test to apply to each item in
   * `coll`.
   * The should complete with a boolean value as its `result`.
   * Invoked with (item, callback).
   * @param {Function} [callback] - A callback which is called after all the
   * `iteratee` functions have finished. Invoked with (err, results).
   */
  var rejectSeries = doLimit(rejectLimit, 1);
  
  /**
   * Creates a function that returns `value`.
   *
   * @static
   * @memberOf _
   * @since 2.4.0
   * @category Util
   * @param {*} value The value to return from the new function.
   * @returns {Function} Returns the new constant function.
   * @example
   *
   * var objects = _.times(2, _.constant({ 'a': 1 }));
   *
   * console.log(objects);
   * // => [{ 'a': 1 }, { 'a': 1 }]
   *
   * console.log(objects[0] === objects[1]);
   * // => true
   */
  function constant$1(value) {
    return function() {
      return value;
    };
  }
  
  /**
   * Attempts to get a successful response from `task` no more than `times` times
   * before returning an error. If the task is successful, the `callback` will be
   * passed the result of the successful task. If all attempts fail, the callback
   * will be passed the error and result (if any) of the final attempt.
   *
   * @name retry
   * @static
   * @memberOf module:ControlFlow
   * @method
   * @category Control Flow
   * @see [async.retryable]{@link module:ControlFlow.retryable}
   * @param {Object|number} [opts = {times: 5, interval: 0}| 5] - Can be either an
   * object with `times` and `interval` or a number.
   * * `times` - The number of attempts to make before giving up.  The default
   *   is `5`.
   * * `interval` - The time to wait between retries, in milliseconds.  The
   *   default is `0`. The interval may also be specified as a function of the
   *   retry count (see example).
   * * `errorFilter` - An optional synchronous function that is invoked on
   *   erroneous result. If it returns `true` the retry attempts will continue;
   *   if the function returns `false` the retry flow is aborted with the current
   *   attempt's error and result being returned to the final callback.
   *   Invoked with (err).
   * * If `opts` is a number, the number specifies the number of times to retry,
   *   with the default interval of `0`.
   * @param {AsyncFunction} task - An async function to retry.
   * Invoked with (callback).
   * @param {Function} [callback] - An optional callback which is called when the
   * task has succeeded, or after the final failed attempt. It receives the `err`
   * and `result` arguments of the last attempt at completing the `task`. Invoked
   * with (err, results).
   *
   * @example
   *
   * // The `retry` function can be used as a stand-alone control flow by passing
   * // a callback, as shown below:
   *
   * // try calling apiMethod 3 times
   * async.retry(3, apiMethod, function(err, result) {
   *     // do something with the result
   * });
   *
   * // try calling apiMethod 3 times, waiting 200 ms between each retry
   * async.retry({times: 3, interval: 200}, apiMethod, function(err, result) {
   *     // do something with the result
   * });
   *
   * // try calling apiMethod 10 times with exponential backoff
   * // (i.e. intervals of 100, 200, 400, 800, 1600, ... milliseconds)
   * async.retry({
   *   times: 10,
   *   interval: function(retryCount) {
   *     return 50 * Math.pow(2, retryCount);
   *   }
   * }, apiMethod, function(err, result) {
   *     // do something with the result
   * });
   *
   * // try calling apiMethod the default 5 times no delay between each retry
   * async.retry(apiMethod, function(err, result) {
   *     // do something with the result
   * });
   *
   * // try calling apiMethod only when error condition satisfies, all other
   * // errors will abort the retry control flow and return to final callback
   * async.retry({
   *   errorFilter: function(err) {
   *     return err.message === 'Temporary error'; // only retry on a specific error
   *   }
   * }, apiMethod, function(err, result) {
   *     // do something with the result
   * });
   *
   * // to retry individual methods that are not as reliable within other
   * // control flow functions, use the `retryable` wrapper:
   * async.auto({
   *     users: api.getUsers.bind(api),
   *     payments: async.retryable(3, api.getPayments.bind(api))
   * }, function(err, results) {
   *     // do something with the results
   * });
   *
   */
  function retry(opts, task, callback) {
      var DEFAULT_TIMES = 5;
      var DEFAULT_INTERVAL = 0;
  
      var options = {
          times: DEFAULT_TIMES,
          intervalFunc: constant$1(DEFAULT_INTERVAL)
      };
  
      function parseTimes(acc, t) {
          if (typeof t === 'object') {
              acc.times = +t.times || DEFAULT_TIMES;
  
              acc.intervalFunc = typeof t.interval === 'function' ?
                  t.interval :
                  constant$1(+t.interval || DEFAULT_INTERVAL);
  
              acc.errorFilter = t.errorFilter;
          } else if (typeof t === 'number' || typeof t === 'string') {
              acc.times = +t || DEFAULT_TIMES;
          } else {
              throw new Error("Invalid arguments for async.retry");
          }
      }
  
      if (arguments.length < 3 && typeof opts === 'function') {
          callback = task || noop;
          task = opts;
      } else {
          parseTimes(options, opts);
          callback = callback || noop;
      }
  
      if (typeof task !== 'function') {
          throw new Error("Invalid arguments for async.retry");
      }
  
      var _task = wrapAsync(task);
  
      var attempt = 1;
      function retryAttempt() {
          _task(function(err) {
              if (err && attempt++ < options.times &&
                  (typeof options.errorFilter != 'function' ||
                      options.errorFilter(err))) {
                  setTimeout(retryAttempt, options.intervalFunc(attempt));
              } else {
                  callback.apply(null, arguments);
              }
          });
      }
  
      retryAttempt();
  }
  
  /**
   * A close relative of [`retry`]{@link module:ControlFlow.retry}.  This method
   * wraps a task and makes it retryable, rather than immediately calling it
   * with retries.
   *
   * @name retryable
   * @static
   * @memberOf module:ControlFlow
   * @method
   * @see [async.retry]{@link module:ControlFlow.retry}
   * @category Control Flow
   * @param {Object|number} [opts = {times: 5, interval: 0}| 5] - optional
   * options, exactly the same as from `retry`
   * @param {AsyncFunction} task - the asynchronous function to wrap.
   * This function will be passed any arguments passed to the returned wrapper.
   * Invoked with (...args, callback).
   * @returns {AsyncFunction} The wrapped function, which when invoked, will
   * retry on an error, based on the parameters specified in `opts`.
   * This function will accept the same parameters as `task`.
   * @example
   *
   * async.auto({
   *     dep1: async.retryable(3, getFromFlakyService),
   *     process: ["dep1", async.retryable(3, function (results, cb) {
   *         maybeProcessData(results.dep1, cb);
   *     })]
   * }, callback);
   */
  var retryable = function (opts, task) {
      if (!task) {
          task = opts;
          opts = null;
      }
      var _task = wrapAsync(task);
      return initialParams(function (args, callback) {
          function taskFn(cb) {
              _task.apply(null, args.concat(cb));
          }
  
          if (opts) retry(opts, taskFn, callback);
          else retry(taskFn, callback);
  
      });
  };
  
  /**
   * Run the functions in the `tasks` collection in series, each one running once
   * the previous function has completed. If any functions in the series pass an
   * error to its callback, no more functions are run, and `callback` is
   * immediately called with the value of the error. Otherwise, `callback`
   * receives an array of results when `tasks` have completed.
   *
   * It is also possible to use an object instead of an array. Each property will
   * be run as a function, and the results will be passed to the final `callback`
   * as an object instead of an array. This can be a more readable way of handling
   *  results from {@link async.series}.
   *
   * **Note** that while many implementations preserve the order of object
   * properties, the [ECMAScript Language Specification](http://www.ecma-international.org/ecma-262/5.1/#sec-8.6)
   * explicitly states that
   *
   * > The mechanics and order of enumerating the properties is not specified.
   *
   * So if you rely on the order in which your series of functions are executed,
   * and want this to work on all platforms, consider using an array.
   *
   * @name series
   * @static
   * @memberOf module:ControlFlow
   * @method
   * @category Control Flow
   * @param {Array|Iterable|Object} tasks - A collection containing
   * [async functions]{@link AsyncFunction} to run in series.
   * Each function can complete with any number of optional `result` values.
   * @param {Function} [callback] - An optional callback to run once all the
   * functions have completed. This function gets a results array (or object)
   * containing all the result arguments passed to the `task` callbacks. Invoked
   * with (err, result).
   * @example
   * async.series([
   *     function(callback) {
   *         // do some stuff ...
   *         callback(null, 'one');
   *     },
   *     function(callback) {
   *         // do some more stuff ...
   *         callback(null, 'two');
   *     }
   * ],
   * // optional callback
   * function(err, results) {
   *     // results is now equal to ['one', 'two']
   * });
   *
   * async.series({
   *     one: function(callback) {
   *         setTimeout(function() {
   *             callback(null, 1);
   *         }, 200);
   *     },
   *     two: function(callback){
   *         setTimeout(function() {
   *             callback(null, 2);
   *         }, 100);
   *     }
   * }, function(err, results) {
   *     // results is now equal to: {one: 1, two: 2}
   * });
   */
  function series(tasks, callback) {
      _parallel(eachOfSeries, tasks, callback);
  }
  
  /**
   * Returns `true` if at least one element in the `coll` satisfies an async test.
   * If any iteratee call returns `true`, the main `callback` is immediately
   * called.
   *
   * @name some
   * @static
   * @memberOf module:Collections
   * @method
   * @alias any
   * @category Collection
   * @param {Array|Iterable|Object} coll - A collection to iterate over.
   * @param {AsyncFunction} iteratee - An async truth test to apply to each item
   * in the collections in parallel.
   * The iteratee should complete with a boolean `result` value.
   * Invoked with (item, callback).
   * @param {Function} [callback] - A callback which is called as soon as any
   * iteratee returns `true`, or after all the iteratee functions have finished.
   * Result will be either `true` or `false` depending on the values of the async
   * tests. Invoked with (err, result).
   * @example
   *
   * async.some(['file1','file2','file3'], function(filePath, callback) {
   *     fs.access(filePath, function(err) {
   *         callback(null, !err)
   *     });
   * }, function(err, result) {
   *     // if result is true then at least one of the files exists
   * });
   */
  var some = doParallel(_createTester(Boolean, identity));
  
  /**
   * The same as [`some`]{@link module:Collections.some} but runs a maximum of `limit` async operations at a time.
   *
   * @name someLimit
   * @static
   * @memberOf module:Collections
   * @method
   * @see [async.some]{@link module:Collections.some}
   * @alias anyLimit
   * @category Collection
   * @param {Array|Iterable|Object} coll - A collection to iterate over.
   * @param {number} limit - The maximum number of async operations at a time.
   * @param {AsyncFunction} iteratee - An async truth test to apply to each item
   * in the collections in parallel.
   * The iteratee should complete with a boolean `result` value.
   * Invoked with (item, callback).
   * @param {Function} [callback] - A callback which is called as soon as any
   * iteratee returns `true`, or after all the iteratee functions have finished.
   * Result will be either `true` or `false` depending on the values of the async
   * tests. Invoked with (err, result).
   */
  var someLimit = doParallelLimit(_createTester(Boolean, identity));
  
  /**
   * The same as [`some`]{@link module:Collections.some} but runs only a single async operation at a time.
   *
   * @name someSeries
   * @static
   * @memberOf module:Collections
   * @method
   * @see [async.some]{@link module:Collections.some}
   * @alias anySeries
   * @category Collection
   * @param {Array|Iterable|Object} coll - A collection to iterate over.
   * @param {AsyncFunction} iteratee - An async truth test to apply to each item
   * in the collections in series.
   * The iteratee should complete with a boolean `result` value.
   * Invoked with (item, callback).
   * @param {Function} [callback] - A callback which is called as soon as any
   * iteratee returns `true`, or after all the iteratee functions have finished.
   * Result will be either `true` or `false` depending on the values of the async
   * tests. Invoked with (err, result).
   */
  var someSeries = doLimit(someLimit, 1);
  
  /**
   * Sorts a list by the results of running each `coll` value through an async
   * `iteratee`.
   *
   * @name sortBy
   * @static
   * @memberOf module:Collections
   * @method
   * @category Collection
   * @param {Array|Iterable|Object} coll - A collection to iterate over.
   * @param {AsyncFunction} iteratee - An async function to apply to each item in
   * `coll`.
   * The iteratee should complete with a value to use as the sort criteria as
   * its `result`.
   * Invoked with (item, callback).
   * @param {Function} callback - A callback which is called after all the
   * `iteratee` functions have finished, or an error occurs. Results is the items
   * from the original `coll` sorted by the values returned by the `iteratee`
   * calls. Invoked with (err, results).
   * @example
   *
   * async.sortBy(['file1','file2','file3'], function(file, callback) {
   *     fs.stat(file, function(err, stats) {
   *         callback(err, stats.mtime);
   *     });
   * }, function(err, results) {
   *     // results is now the original array of files sorted by
   *     // modified date
   * });
   *
   * // By modifying the callback parameter the
   * // sorting order can be influenced:
   *
   * // ascending order
   * async.sortBy([1,9,3,5], function(x, callback) {
   *     callback(null, x);
   * }, function(err,result) {
   *     // result callback
   * });
   *
   * // descending order
   * async.sortBy([1,9,3,5], function(x, callback) {
   *     callback(null, x*-1);    //<- x*-1 instead of x, turns the order around
   * }, function(err,result) {
   *     // result callback
   * });
   */
  function sortBy (coll, iteratee, callback) {
      var _iteratee = wrapAsync(iteratee);
      map(coll, function (x, callback) {
          _iteratee(x, function (err, criteria) {
              if (err) return callback(err);
              callback(null, {value: x, criteria: criteria});
          });
      }, function (err, results) {
          if (err) return callback(err);
          callback(null, arrayMap(results.sort(comparator), baseProperty('value')));
      });
  
      function comparator(left, right) {
          var a = left.criteria, b = right.criteria;
          return a < b ? -1 : a > b ? 1 : 0;
      }
  }
  
  /**
   * Sets a time limit on an asynchronous function. If the function does not call
   * its callback within the specified milliseconds, it will be called with a
   * timeout error. The code property for the error object will be `'ETIMEDOUT'`.
   *
   * @name timeout
   * @static
   * @memberOf module:Utils
   * @method
   * @category Util
   * @param {AsyncFunction} asyncFn - The async function to limit in time.
   * @param {number} milliseconds - The specified time limit.
   * @param {*} [info] - Any variable you want attached (`string`, `object`, etc)
   * to timeout Error for more information..
   * @returns {AsyncFunction} Returns a wrapped function that can be used with any
   * of the control flow functions.
   * Invoke this function with the same parameters as you would `asyncFunc`.
   * @example
   *
   * function myFunction(foo, callback) {
   *     doAsyncTask(foo, function(err, data) {
   *         // handle errors
   *         if (err) return callback(err);
   *
   *         // do some stuff ...
   *
   *         // return processed data
   *         return callback(null, data);
   *     });
   * }
   *
   * var wrapped = async.timeout(myFunction, 1000);
   *
   * // call `wrapped` as you would `myFunction`
   * wrapped({ bar: 'bar' }, function(err, data) {
   *     // if `myFunction` takes < 1000 ms to execute, `err`
   *     // and `data` will have their expected values
   *
   *     // else `err` will be an Error with the code 'ETIMEDOUT'
   * });
   */
  function timeout(asyncFn, milliseconds, info) {
      var fn = wrapAsync(asyncFn);
  
      return initialParams(function (args, callback) {
          var timedOut = false;
          var timer;
  
          function timeoutCallback() {
              var name = asyncFn.name || 'anonymous';
              var error  = new Error('Callback function "' + name + '" timed out.');
              error.code = 'ETIMEDOUT';
              if (info) {
                  error.info = info;
              }
              timedOut = true;
              callback(error);
          }
  
          args.push(function () {
              if (!timedOut) {
                  callback.apply(null, arguments);
                  clearTimeout(timer);
              }
          });
  
          // setup timer and call original function
          timer = setTimeout(timeoutCallback, milliseconds);
          fn.apply(null, args);
      });
  }
  
  /* Built-in method references for those with the same name as other `lodash` methods. */
  var nativeCeil = Math.ceil;
  var nativeMax = Math.max;
  
  /**
   * The base implementation of `_.range` and `_.rangeRight` which doesn't
   * coerce arguments.
   *
   * @private
   * @param {number} start The start of the range.
   * @param {number} end The end of the range.
   * @param {number} step The value to increment or decrement by.
   * @param {boolean} [fromRight] Specify iterating from right to left.
   * @returns {Array} Returns the range of numbers.
   */
  function baseRange(start, end, step, fromRight) {
    var index = -1,
        length = nativeMax(nativeCeil((end - start) / (step || 1)), 0),
        result = Array(length);
  
    while (length--) {
      result[fromRight ? length : ++index] = start;
      start += step;
    }
    return result;
  }
  
  /**
   * The same as [times]{@link module:ControlFlow.times} but runs a maximum of `limit` async operations at a
   * time.
   *
   * @name timesLimit
   * @static
   * @memberOf module:ControlFlow
   * @method
   * @see [async.times]{@link module:ControlFlow.times}
   * @category Control Flow
   * @param {number} count - The number of times to run the function.
   * @param {number} limit - The maximum number of async operations at a time.
   * @param {AsyncFunction} iteratee - The async function to call `n` times.
   * Invoked with the iteration index and a callback: (n, next).
   * @param {Function} callback - see [async.map]{@link module:Collections.map}.
   */
  function timeLimit(count, limit, iteratee, callback) {
      var _iteratee = wrapAsync(iteratee);
      mapLimit(baseRange(0, count, 1), limit, _iteratee, callback);
  }
  
  /**
   * Calls the `iteratee` function `n` times, and accumulates results in the same
   * manner you would use with [map]{@link module:Collections.map}.
   *
   * @name times
   * @static
   * @memberOf module:ControlFlow
   * @method
   * @see [async.map]{@link module:Collections.map}
   * @category Control Flow
   * @param {number} n - The number of times to run the function.
   * @param {AsyncFunction} iteratee - The async function to call `n` times.
   * Invoked with the iteration index and a callback: (n, next).
   * @param {Function} callback - see {@link module:Collections.map}.
   * @example
   *
   * // Pretend this is some complicated async factory
   * var createUser = function(id, callback) {
   *     callback(null, {
   *         id: 'user' + id
   *     });
   * };
   *
   * // generate 5 users
   * async.times(5, function(n, next) {
   *     createUser(n, function(err, user) {
   *         next(err, user);
   *     });
   * }, function(err, users) {
   *     // we should now have 5 users
   * });
   */
  var times = doLimit(timeLimit, Infinity);
  
  /**
   * The same as [times]{@link module:ControlFlow.times} but runs only a single async operation at a time.
   *
   * @name timesSeries
   * @static
   * @memberOf module:ControlFlow
   * @method
   * @see [async.times]{@link module:ControlFlow.times}
   * @category Control Flow
   * @param {number} n - The number of times to run the function.
   * @param {AsyncFunction} iteratee - The async function to call `n` times.
   * Invoked with the iteration index and a callback: (n, next).
   * @param {Function} callback - see {@link module:Collections.map}.
   */
  var timesSeries = doLimit(timeLimit, 1);
  
  /**
   * A relative of `reduce`.  Takes an Object or Array, and iterates over each
   * element in series, each step potentially mutating an `accumulator` value.
   * The type of the accumulator defaults to the type of collection passed in.
   *
   * @name transform
   * @static
   * @memberOf module:Collections
   * @method
   * @category Collection
   * @param {Array|Iterable|Object} coll - A collection to iterate over.
   * @param {*} [accumulator] - The initial state of the transform.  If omitted,
   * it will default to an empty Object or Array, depending on the type of `coll`
   * @param {AsyncFunction} iteratee - A function applied to each item in the
   * collection that potentially modifies the accumulator.
   * Invoked with (accumulator, item, key, callback).
   * @param {Function} [callback] - A callback which is called after all the
   * `iteratee` functions have finished. Result is the transformed accumulator.
   * Invoked with (err, result).
   * @example
   *
   * async.transform([1,2,3], function(acc, item, index, callback) {
   *     // pointless async:
   *     process.nextTick(function() {
   *         acc.push(item * 2)
   *         callback(null)
   *     });
   * }, function(err, result) {
   *     // result is now equal to [2, 4, 6]
   * });
   *
   * @example
   *
   * async.transform({a: 1, b: 2, c: 3}, function (obj, val, key, callback) {
   *     setImmediate(function () {
   *         obj[key] = val * 2;
   *         callback();
   *     })
   * }, function (err, result) {
   *     // result is equal to {a: 2, b: 4, c: 6}
   * })
   */
  function transform (coll, accumulator, iteratee, callback) {
      if (arguments.length <= 3) {
          callback = iteratee;
          iteratee = accumulator;
          accumulator = isArray(coll) ? [] : {};
      }
      callback = once(callback || noop);
      var _iteratee = wrapAsync(iteratee);
  
      eachOf(coll, function(v, k, cb) {
          _iteratee(accumulator, v, k, cb);
      }, function(err) {
          callback(err, accumulator);
      });
  }
  
  /**
   * It runs each task in series but stops whenever any of the functions were
   * successful. If one of the tasks were successful, the `callback` will be
   * passed the result of the successful task. If all tasks fail, the callback
   * will be passed the error and result (if any) of the final attempt.
   *
   * @name tryEach
   * @static
   * @memberOf module:ControlFlow
   * @method
   * @category Control Flow
   * @param {Array|Iterable|Object} tasks - A collection containing functions to
   * run, each function is passed a `callback(err, result)` it must call on
   * completion with an error `err` (which can be `null`) and an optional `result`
   * value.
   * @param {Function} [callback] - An optional callback which is called when one
   * of the tasks has succeeded, or all have failed. It receives the `err` and
   * `result` arguments of the last attempt at completing the `task`. Invoked with
   * (err, results).
   * @example
   * async.tryEach([
   *     function getDataFromFirstWebsite(callback) {
   *         // Try getting the data from the first website
   *         callback(err, data);
   *     },
   *     function getDataFromSecondWebsite(callback) {
   *         // First website failed,
   *         // Try getting the data from the backup website
   *         callback(err, data);
   *     }
   * ],
   * // optional callback
   * function(err, results) {
   *     Now do something with the data.
   * });
   *
   */
  function tryEach(tasks, callback) {
      var error = null;
      var result;
      callback = callback || noop;
      eachSeries(tasks, function(task, callback) {
          wrapAsync(task)(function (err, res/*, ...args*/) {
              if (arguments.length > 2) {
                  result = slice(arguments, 1);
              } else {
                  result = res;
              }
              error = err;
              callback(!err);
          });
      }, function () {
          callback(error, result);
      });
  }
  
  /**
   * Undoes a [memoize]{@link module:Utils.memoize}d function, reverting it to the original,
   * unmemoized form. Handy for testing.
   *
   * @name unmemoize
   * @static
   * @memberOf module:Utils
   * @method
   * @see [async.memoize]{@link module:Utils.memoize}
   * @category Util
   * @param {AsyncFunction} fn - the memoized function
   * @returns {AsyncFunction} a function that calls the original unmemoized function
   */
  function unmemoize(fn) {
      return function () {
          return (fn.unmemoized || fn).apply(null, arguments);
      };
  }
  
  /**
   * Repeatedly call `iteratee`, while `test` returns `true`. Calls `callback` when
   * stopped, or an error occurs.
   *
   * @name whilst
   * @static
   * @memberOf module:ControlFlow
   * @method
   * @category Control Flow
   * @param {Function} test - synchronous truth test to perform before each
   * execution of `iteratee`. Invoked with ().
   * @param {AsyncFunction} iteratee - An async function which is called each time
   * `test` passes. Invoked with (callback).
   * @param {Function} [callback] - A callback which is called after the test
   * function has failed and repeated execution of `iteratee` has stopped. `callback`
   * will be passed an error and any arguments passed to the final `iteratee`'s
   * callback. Invoked with (err, [results]);
   * @returns undefined
   * @example
   *
   * var count = 0;
   * async.whilst(
   *     function() { return count < 5; },
   *     function(callback) {
   *         count++;
   *         setTimeout(function() {
   *             callback(null, count);
   *         }, 1000);
   *     },
   *     function (err, n) {
   *         // 5 seconds have passed, n = 5
   *     }
   * );
   */
  function whilst(test, iteratee, callback) {
      callback = onlyOnce(callback || noop);
      var _iteratee = wrapAsync(iteratee);
      if (!test()) return callback(null);
      var next = function(err/*, ...args*/) {
          if (err) return callback(err);
          if (test()) return _iteratee(next);
          var args = slice(arguments, 1);
          callback.apply(null, [null].concat(args));
      };
      _iteratee(next);
  }
  
  /**
   * Repeatedly call `iteratee` until `test` returns `true`. Calls `callback` when
   * stopped, or an error occurs. `callback` will be passed an error and any
   * arguments passed to the final `iteratee`'s callback.
   *
   * The inverse of [whilst]{@link module:ControlFlow.whilst}.
   *
   * @name until
   * @static
   * @memberOf module:ControlFlow
   * @method
   * @see [async.whilst]{@link module:ControlFlow.whilst}
   * @category Control Flow
   * @param {Function} test - synchronous truth test to perform before each
   * execution of `iteratee`. Invoked with ().
   * @param {AsyncFunction} iteratee - An async function which is called each time
   * `test` fails. Invoked with (callback).
   * @param {Function} [callback] - A callback which is called after the test
   * function has passed and repeated execution of `iteratee` has stopped. `callback`
   * will be passed an error and any arguments passed to the final `iteratee`'s
   * callback. Invoked with (err, [results]);
   */
  function until(test, iteratee, callback) {
      whilst(function() {
          return !test.apply(this, arguments);
      }, iteratee, callback);
  }
  
  /**
   * Runs the `tasks` array of functions in series, each passing their results to
   * the next in the array. However, if any of the `tasks` pass an error to their
   * own callback, the next function is not executed, and the main `callback` is
   * immediately called with the error.
   *
   * @name waterfall
   * @static
   * @memberOf module:ControlFlow
   * @method
   * @category Control Flow
   * @param {Array} tasks - An array of [async functions]{@link AsyncFunction}
   * to run.
   * Each function should complete with any number of `result` values.
   * The `result` values will be passed as arguments, in order, to the next task.
   * @param {Function} [callback] - An optional callback to run once all the
   * functions have completed. This will be passed the results of the last task's
   * callback. Invoked with (err, [results]).
   * @returns undefined
   * @example
   *
   * async.waterfall([
   *     function(callback) {
   *         callback(null, 'one', 'two');
   *     },
   *     function(arg1, arg2, callback) {
   *         // arg1 now equals 'one' and arg2 now equals 'two'
   *         callback(null, 'three');
   *     },
   *     function(arg1, callback) {
   *         // arg1 now equals 'three'
   *         callback(null, 'done');
   *     }
   * ], function (err, result) {
   *     // result now equals 'done'
   * });
   *
   * // Or, with named functions:
   * async.waterfall([
   *     myFirstFunction,
   *     mySecondFunction,
   *     myLastFunction,
   * ], function (err, result) {
   *     // result now equals 'done'
   * });
   * function myFirstFunction(callback) {
   *     callback(null, 'one', 'two');
   * }
   * function mySecondFunction(arg1, arg2, callback) {
   *     // arg1 now equals 'one' and arg2 now equals 'two'
   *     callback(null, 'three');
   * }
   * function myLastFunction(arg1, callback) {
   *     // arg1 now equals 'three'
   *     callback(null, 'done');
   * }
   */
  var waterfall = function(tasks, callback) {
      callback = once(callback || noop);
      if (!isArray(tasks)) return callback(new Error('First argument to waterfall must be an array of functions'));
      if (!tasks.length) return callback();
      var taskIndex = 0;
  
      function nextTask(args) {
          var task = wrapAsync(tasks[taskIndex++]);
          args.push(onlyOnce(next));
          task.apply(null, args);
      }
  
      function next(err/*, ...args*/) {
          if (err || taskIndex === tasks.length) {
              return callback.apply(null, arguments);
          }
          nextTask(slice(arguments, 1));
      }
  
      nextTask([]);
  };
  
  /**
   * An "async function" in the context of Async is an asynchronous function with
   * a variable number of parameters, with the final parameter being a callback.
   * (`function (arg1, arg2, ..., callback) {}`)
   * The final callback is of the form `callback(err, results...)`, which must be
   * called once the function is completed.  The callback should be called with a
   * Error as its first argument to signal that an error occurred.
   * Otherwise, if no error occurred, it should be called with `null` as the first
   * argument, and any additional `result` arguments that may apply, to signal
   * successful completion.
   * The callback must be called exactly once, ideally on a later tick of the
   * JavaScript event loop.
   *
   * This type of function is also referred to as a "Node-style async function",
   * or a "continuation passing-style function" (CPS). Most of the methods of this
   * library are themselves CPS/Node-style async functions, or functions that
   * return CPS/Node-style async functions.
   *
   * Wherever we accept a Node-style async function, we also directly accept an
   * [ES2017 `async` function]{@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function}.
   * In this case, the `async` function will not be passed a final callback
   * argument, and any thrown error will be used as the `err` argument of the
   * implicit callback, and the return value will be used as the `result` value.
   * (i.e. a `rejected` of the returned Promise becomes the `err` callback
   * argument, and a `resolved` value becomes the `result`.)
   *
   * Note, due to JavaScript limitations, we can only detect native `async`
   * functions and not transpilied implementations.
   * Your environment must have `async`/`await` support for this to work.
   * (e.g. Node > v7.6, or a recent version of a modern browser).
   * If you are using `async` functions through a transpiler (e.g. Babel), you
   * must still wrap the function with [asyncify]{@link module:Utils.asyncify},
   * because the `async function` will be compiled to an ordinary function that
   * returns a promise.
   *
   * @typedef {Function} AsyncFunction
   * @static
   */
  
  /**
   * Async is a utility module which provides straight-forward, powerful functions
   * for working with asynchronous JavaScript. Although originally designed for
   * use with [Node.js](http://nodejs.org) and installable via
   * `npm install --save async`, it can also be used directly in the browser.
   * @module async
   * @see AsyncFunction
   */
  
  
  /**
   * A collection of `async` functions for manipulating collections, such as
   * arrays and objects.
   * @module Collections
   */
  
  /**
   * A collection of `async` functions for controlling the flow through a script.
   * @module ControlFlow
   */
  
  /**
   * A collection of `async` utility functions.
   * @module Utils
   */
  
  var index = {
      apply: apply,
      applyEach: applyEach,
      applyEachSeries: applyEachSeries,
      asyncify: asyncify,
      auto: auto,
      autoInject: autoInject,
      cargo: cargo,
      compose: compose,
      concat: concat,
      concatLimit: concatLimit,
      concatSeries: concatSeries,
      constant: constant,
      detect: detect,
      detectLimit: detectLimit,
      detectSeries: detectSeries,
      dir: dir,
      doDuring: doDuring,
      doUntil: doUntil,
      doWhilst: doWhilst,
      during: during,
      each: eachLimit,
      eachLimit: eachLimit$1,
      eachOf: eachOf,
      eachOfLimit: eachOfLimit,
      eachOfSeries: eachOfSeries,
      eachSeries: eachSeries,
      ensureAsync: ensureAsync,
      every: every,
      everyLimit: everyLimit,
      everySeries: everySeries,
      filter: filter,
      filterLimit: filterLimit,
      filterSeries: filterSeries,
      forever: forever,
      groupBy: groupBy,
      groupByLimit: groupByLimit,
      groupBySeries: groupBySeries,
      log: log,
      map: map,
      mapLimit: mapLimit,
      mapSeries: mapSeries,
      mapValues: mapValues,
      mapValuesLimit: mapValuesLimit,
      mapValuesSeries: mapValuesSeries,
      memoize: memoize,
      nextTick: nextTick,
      parallel: parallelLimit,
      parallelLimit: parallelLimit$1,
      priorityQueue: priorityQueue,
      queue: queue$1,
      race: race,
      reduce: reduce,
      reduceRight: reduceRight,
      reflect: reflect,
      reflectAll: reflectAll,
      reject: reject,
      rejectLimit: rejectLimit,
      rejectSeries: rejectSeries,
      retry: retry,
      retryable: retryable,
      seq: seq,
      series: series,
      setImmediate: setImmediate$1,
      some: some,
      someLimit: someLimit,
      someSeries: someSeries,
      sortBy: sortBy,
      timeout: timeout,
      times: times,
      timesLimit: timeLimit,
      timesSeries: timesSeries,
      transform: transform,
      tryEach: tryEach,
      unmemoize: unmemoize,
      until: until,
      waterfall: waterfall,
      whilst: whilst,
  
      // aliases
      all: every,
      allLimit: everyLimit,
      allSeries: everySeries,
      any: some,
      anyLimit: someLimit,
      anySeries: someSeries,
      find: detect,
      findLimit: detectLimit,
      findSeries: detectSeries,
      forEach: eachLimit,
      forEachSeries: eachSeries,
      forEachLimit: eachLimit$1,
      forEachOf: eachOf,
      forEachOfSeries: eachOfSeries,
      forEachOfLimit: eachOfLimit,
      inject: reduce,
      foldl: reduce,
      foldr: reduceRight,
      select: filter,
      selectLimit: filterLimit,
      selectSeries: filterSeries,
      wrapSync: asyncify
  };
  
  exports['default'] = index;
  exports.apply = apply;
  exports.applyEach = applyEach;
  exports.applyEachSeries = applyEachSeries;
  exports.asyncify = asyncify;
  exports.auto = auto;
  exports.autoInject = autoInject;
  exports.cargo = cargo;
  exports.compose = compose;
  exports.concat = concat;
  exports.concatLimit = concatLimit;
  exports.concatSeries = concatSeries;
  exports.constant = constant;
  exports.detect = detect;
  exports.detectLimit = detectLimit;
  exports.detectSeries = detectSeries;
  exports.dir = dir;
  exports.doDuring = doDuring;
  exports.doUntil = doUntil;
  exports.doWhilst = doWhilst;
  exports.during = during;
  exports.each = eachLimit;
  exports.eachLimit = eachLimit$1;
  exports.eachOf = eachOf;
  exports.eachOfLimit = eachOfLimit;
  exports.eachOfSeries = eachOfSeries;
  exports.eachSeries = eachSeries;
  exports.ensureAsync = ensureAsync;
  exports.every = every;
  exports.everyLimit = everyLimit;
  exports.everySeries = everySeries;
  exports.filter = filter;
  exports.filterLimit = filterLimit;
  exports.filterSeries = filterSeries;
  exports.forever = forever;
  exports.groupBy = groupBy;
  exports.groupByLimit = groupByLimit;
  exports.groupBySeries = groupBySeries;
  exports.log = log;
  exports.map = map;
  exports.mapLimit = mapLimit;
  exports.mapSeries = mapSeries;
  exports.mapValues = mapValues;
  exports.mapValuesLimit = mapValuesLimit;
  exports.mapValuesSeries = mapValuesSeries;
  exports.memoize = memoize;
  exports.nextTick = nextTick;
  exports.parallel = parallelLimit;
  exports.parallelLimit = parallelLimit$1;
  exports.priorityQueue = priorityQueue;
  exports.queue = queue$1;
  exports.race = race;
  exports.reduce = reduce;
  exports.reduceRight = reduceRight;
  exports.reflect = reflect;
  exports.reflectAll = reflectAll;
  exports.reject = reject;
  exports.rejectLimit = rejectLimit;
  exports.rejectSeries = rejectSeries;
  exports.retry = retry;
  exports.retryable = retryable;
  exports.seq = seq;
  exports.series = series;
  exports.setImmediate = setImmediate$1;
  exports.some = some;
  exports.someLimit = someLimit;
  exports.someSeries = someSeries;
  exports.sortBy = sortBy;
  exports.timeout = timeout;
  exports.times = times;
  exports.timesLimit = timeLimit;
  exports.timesSeries = timesSeries;
  exports.transform = transform;
  exports.tryEach = tryEach;
  exports.unmemoize = unmemoize;
  exports.until = until;
  exports.waterfall = waterfall;
  exports.whilst = whilst;
  exports.all = every;
  exports.allLimit = everyLimit;
  exports.allSeries = everySeries;
  exports.any = some;
  exports.anyLimit = someLimit;
  exports.anySeries = someSeries;
  exports.find = detect;
  exports.findLimit = detectLimit;
  exports.findSeries = detectSeries;
  exports.forEach = eachLimit;
  exports.forEachSeries = eachSeries;
  exports.forEachLimit = eachLimit$1;
  exports.forEachOf = eachOf;
  exports.forEachOfSeries = eachOfSeries;
  exports.forEachOfLimit = eachOfLimit;
  exports.inject = reduce;
  exports.foldl = reduce;
  exports.foldr = reduceRight;
  exports.select = filter;
  exports.selectLimit = filterLimit;
  exports.selectSeries = filterSeries;
  exports.wrapSync = asyncify;
  
  Object.defineProperty(exports, '__esModule', { value: true });
  
  })));
  
  }).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
  },{"_process":257}],22:[function(require,module,exports){
  'use strict';
  
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = eachLimit;
  
  var _eachOfLimit = require('./internal/eachOfLimit');
  
  var _eachOfLimit2 = _interopRequireDefault(_eachOfLimit);
  
  var _withoutIndex = require('./internal/withoutIndex');
  
  var _withoutIndex2 = _interopRequireDefault(_withoutIndex);
  
  var _wrapAsync = require('./internal/wrapAsync');
  
  var _wrapAsync2 = _interopRequireDefault(_wrapAsync);
  
  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
  
  /**
   * The same as [`each`]{@link module:Collections.each} but runs a maximum of `limit` async operations at a time.
   *
   * @name eachLimit
   * @static
   * @memberOf module:Collections
   * @method
   * @see [async.each]{@link module:Collections.each}
   * @alias forEachLimit
   * @category Collection
   * @param {Array|Iterable|Object} coll - A collection to iterate over.
   * @param {number} limit - The maximum number of async operations at a time.
   * @param {AsyncFunction} iteratee - An async function to apply to each item in
   * `coll`.
   * The array index is not passed to the iteratee.
   * If you need the index, use `eachOfLimit`.
   * Invoked with (item, callback).
   * @param {Function} [callback] - A callback which is called when all
   * `iteratee` functions have finished, or an error occurs. Invoked with (err).
   */
  function eachLimit(coll, limit, iteratee, callback) {
    (0, _eachOfLimit2.default)(limit)(coll, (0, _withoutIndex2.default)((0, _wrapAsync2.default)(iteratee)), callback);
  }
  module.exports = exports['default'];
  },{"./internal/eachOfLimit":29,"./internal/withoutIndex":39,"./internal/wrapAsync":40}],23:[function(require,module,exports){
  'use strict';
  
  Object.defineProperty(exports, "__esModule", {
      value: true
  });
  
  exports.default = function (coll, iteratee, callback) {
      var eachOfImplementation = (0, _isArrayLike2.default)(coll) ? eachOfArrayLike : eachOfGeneric;
      eachOfImplementation(coll, (0, _wrapAsync2.default)(iteratee), callback);
  };
  
  var _isArrayLike = require('lodash/isArrayLike');
  
  var _isArrayLike2 = _interopRequireDefault(_isArrayLike);
  
  var _breakLoop = require('./internal/breakLoop');
  
  var _breakLoop2 = _interopRequireDefault(_breakLoop);
  
  var _eachOfLimit = require('./eachOfLimit');
  
  var _eachOfLimit2 = _interopRequireDefault(_eachOfLimit);
  
  var _doLimit = require('./internal/doLimit');
  
  var _doLimit2 = _interopRequireDefault(_doLimit);
  
  var _noop = require('lodash/noop');
  
  var _noop2 = _interopRequireDefault(_noop);
  
  var _once = require('./internal/once');
  
  var _once2 = _interopRequireDefault(_once);
  
  var _onlyOnce = require('./internal/onlyOnce');
  
  var _onlyOnce2 = _interopRequireDefault(_onlyOnce);
  
  var _wrapAsync = require('./internal/wrapAsync');
  
  var _wrapAsync2 = _interopRequireDefault(_wrapAsync);
  
  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
  
  // eachOf implementation optimized for array-likes
  function eachOfArrayLike(coll, iteratee, callback) {
      callback = (0, _once2.default)(callback || _noop2.default);
      var index = 0,
          completed = 0,
          length = coll.length;
      if (length === 0) {
          callback(null);
      }
  
      function iteratorCallback(err, value) {
          if (err) {
              callback(err);
          } else if (++completed === length || value === _breakLoop2.default) {
              callback(null);
          }
      }
  
      for (; index < length; index++) {
          iteratee(coll[index], index, (0, _onlyOnce2.default)(iteratorCallback));
      }
  }
  
  // a generic version of eachOf which can handle array, object, and iterator cases.
  var eachOfGeneric = (0, _doLimit2.default)(_eachOfLimit2.default, Infinity);
  
  /**
   * Like [`each`]{@link module:Collections.each}, except that it passes the key (or index) as the second argument
   * to the iteratee.
   *
   * @name eachOf
   * @static
   * @memberOf module:Collections
   * @method
   * @alias forEachOf
   * @category Collection
   * @see [async.each]{@link module:Collections.each}
   * @param {Array|Iterable|Object} coll - A collection to iterate over.
   * @param {AsyncFunction} iteratee - A function to apply to each
   * item in `coll`.
   * The `key` is the item's key, or index in the case of an array.
   * Invoked with (item, key, callback).
   * @param {Function} [callback] - A callback which is called when all
   * `iteratee` functions have finished, or an error occurs. Invoked with (err).
   * @example
   *
   * var obj = {dev: "/dev.json", test: "/test.json", prod: "/prod.json"};
   * var configs = {};
   *
   * async.forEachOf(obj, function (value, key, callback) {
   *     fs.readFile(__dirname + value, "utf8", function (err, data) {
   *         if (err) return callback(err);
   *         try {
   *             configs[key] = JSON.parse(data);
   *         } catch (e) {
   *             return callback(e);
   *         }
   *         callback();
   *     });
   * }, function (err) {
   *     if (err) console.error(err.message);
   *     // configs is now a map of JSON data
   *     doSomethingWith(configs);
   * });
   */
  module.exports = exports['default'];
  },{"./eachOfLimit":24,"./internal/breakLoop":26,"./internal/doLimit":27,"./internal/once":34,"./internal/onlyOnce":35,"./internal/wrapAsync":40,"lodash/isArrayLike":221,"lodash/noop":229}],24:[function(require,module,exports){
  'use strict';
  
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = eachOfLimit;
  
  var _eachOfLimit2 = require('./internal/eachOfLimit');
  
  var _eachOfLimit3 = _interopRequireDefault(_eachOfLimit2);
  
  var _wrapAsync = require('./internal/wrapAsync');
  
  var _wrapAsync2 = _interopRequireDefault(_wrapAsync);
  
  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
  
  /**
   * The same as [`eachOf`]{@link module:Collections.eachOf} but runs a maximum of `limit` async operations at a
   * time.
   *
   * @name eachOfLimit
   * @static
   * @memberOf module:Collections
   * @method
   * @see [async.eachOf]{@link module:Collections.eachOf}
   * @alias forEachOfLimit
   * @category Collection
   * @param {Array|Iterable|Object} coll - A collection to iterate over.
   * @param {number} limit - The maximum number of async operations at a time.
   * @param {AsyncFunction} iteratee - An async function to apply to each
   * item in `coll`. The `key` is the item's key, or index in the case of an
   * array.
   * Invoked with (item, key, callback).
   * @param {Function} [callback] - A callback which is called when all
   * `iteratee` functions have finished, or an error occurs. Invoked with (err).
   */
  function eachOfLimit(coll, limit, iteratee, callback) {
    (0, _eachOfLimit3.default)(limit)(coll, (0, _wrapAsync2.default)(iteratee), callback);
  }
  module.exports = exports['default'];
  },{"./internal/eachOfLimit":29,"./internal/wrapAsync":40}],25:[function(require,module,exports){
  'use strict';
  
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  
  var _eachLimit = require('./eachLimit');
  
  var _eachLimit2 = _interopRequireDefault(_eachLimit);
  
  var _doLimit = require('./internal/doLimit');
  
  var _doLimit2 = _interopRequireDefault(_doLimit);
  
  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
  
  /**
   * The same as [`each`]{@link module:Collections.each} but runs only a single async operation at a time.
   *
   * @name eachSeries
   * @static
   * @memberOf module:Collections
   * @method
   * @see [async.each]{@link module:Collections.each}
   * @alias forEachSeries
   * @category Collection
   * @param {Array|Iterable|Object} coll - A collection to iterate over.
   * @param {AsyncFunction} iteratee - An async function to apply to each
   * item in `coll`.
   * The array index is not passed to the iteratee.
   * If you need the index, use `eachOfSeries`.
   * Invoked with (item, callback).
   * @param {Function} [callback] - A callback which is called when all
   * `iteratee` functions have finished, or an error occurs. Invoked with (err).
   */
  exports.default = (0, _doLimit2.default)(_eachLimit2.default, 1);
  module.exports = exports['default'];
  },{"./eachLimit":22,"./internal/doLimit":27}],26:[function(require,module,exports){
  "use strict";
  
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  // A temporary value used to identify if the loop should be broken.
  // See #1064, #1293
  exports.default = {};
  module.exports = exports["default"];
  },{}],27:[function(require,module,exports){
  "use strict";
  
  Object.defineProperty(exports, "__esModule", {
      value: true
  });
  exports.default = doLimit;
  function doLimit(fn, limit) {
      return function (iterable, iteratee, callback) {
          return fn(iterable, limit, iteratee, callback);
      };
  }
  module.exports = exports["default"];
  },{}],28:[function(require,module,exports){
  'use strict';
  
  Object.defineProperty(exports, "__esModule", {
      value: true
  });
  exports.default = doParallel;
  
  var _eachOf = require('../eachOf');
  
  var _eachOf2 = _interopRequireDefault(_eachOf);
  
  var _wrapAsync = require('./wrapAsync');
  
  var _wrapAsync2 = _interopRequireDefault(_wrapAsync);
  
  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
  
  function doParallel(fn) {
      return function (obj, iteratee, callback) {
          return fn(_eachOf2.default, obj, (0, _wrapAsync2.default)(iteratee), callback);
      };
  }
  module.exports = exports['default'];
  },{"../eachOf":23,"./wrapAsync":40}],29:[function(require,module,exports){
  'use strict';
  
  Object.defineProperty(exports, "__esModule", {
      value: true
  });
  exports.default = _eachOfLimit;
  
  var _noop = require('lodash/noop');
  
  var _noop2 = _interopRequireDefault(_noop);
  
  var _once = require('./once');
  
  var _once2 = _interopRequireDefault(_once);
  
  var _iterator = require('./iterator');
  
  var _iterator2 = _interopRequireDefault(_iterator);
  
  var _onlyOnce = require('./onlyOnce');
  
  var _onlyOnce2 = _interopRequireDefault(_onlyOnce);
  
  var _breakLoop = require('./breakLoop');
  
  var _breakLoop2 = _interopRequireDefault(_breakLoop);
  
  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
  
  function _eachOfLimit(limit) {
      return function (obj, iteratee, callback) {
          callback = (0, _once2.default)(callback || _noop2.default);
          if (limit <= 0 || !obj) {
              return callback(null);
          }
          var nextElem = (0, _iterator2.default)(obj);
          var done = false;
          var running = 0;
  
          function iterateeCallback(err, value) {
              running -= 1;
              if (err) {
                  done = true;
                  callback(err);
              } else if (value === _breakLoop2.default || done && running <= 0) {
                  done = true;
                  return callback(null);
              } else {
                  replenish();
              }
          }
  
          function replenish() {
              while (running < limit && !done) {
                  var elem = nextElem();
                  if (elem === null) {
                      done = true;
                      if (running <= 0) {
                          callback(null);
                      }
                      return;
                  }
                  running += 1;
                  iteratee(elem.value, elem.key, (0, _onlyOnce2.default)(iterateeCallback));
              }
          }
  
          replenish();
      };
  }
  module.exports = exports['default'];
  },{"./breakLoop":26,"./iterator":32,"./once":34,"./onlyOnce":35,"lodash/noop":229}],30:[function(require,module,exports){
  'use strict';
  
  Object.defineProperty(exports, "__esModule", {
      value: true
  });
  
  exports.default = function (coll) {
      return iteratorSymbol && coll[iteratorSymbol] && coll[iteratorSymbol]();
  };
  
  var iteratorSymbol = typeof Symbol === 'function' && Symbol.iterator;
  
  module.exports = exports['default'];
  },{}],31:[function(require,module,exports){
  'use strict';
  
  Object.defineProperty(exports, "__esModule", {
      value: true
  });
  
  exports.default = function (fn) {
      return function () /*...args, callback*/{
          var args = (0, _slice2.default)(arguments);
          var callback = args.pop();
          fn.call(this, args, callback);
      };
  };
  
  var _slice = require('./slice');
  
  var _slice2 = _interopRequireDefault(_slice);
  
  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
  
  module.exports = exports['default'];
  },{"./slice":38}],32:[function(require,module,exports){
  'use strict';
  
  Object.defineProperty(exports, "__esModule", {
      value: true
  });
  exports.default = iterator;
  
  var _isArrayLike = require('lodash/isArrayLike');
  
  var _isArrayLike2 = _interopRequireDefault(_isArrayLike);
  
  var _getIterator = require('./getIterator');
  
  var _getIterator2 = _interopRequireDefault(_getIterator);
  
  var _keys = require('lodash/keys');
  
  var _keys2 = _interopRequireDefault(_keys);
  
  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
  
  function createArrayIterator(coll) {
      var i = -1;
      var len = coll.length;
      return function next() {
          return ++i < len ? { value: coll[i], key: i } : null;
      };
  }
  
  function createES2015Iterator(iterator) {
      var i = -1;
      return function next() {
          var item = iterator.next();
          if (item.done) return null;
          i++;
          return { value: item.value, key: i };
      };
  }
  
  function createObjectIterator(obj) {
      var okeys = (0, _keys2.default)(obj);
      var i = -1;
      var len = okeys.length;
      return function next() {
          var key = okeys[++i];
          return i < len ? { value: obj[key], key: key } : null;
      };
  }
  
  function iterator(coll) {
      if ((0, _isArrayLike2.default)(coll)) {
          return createArrayIterator(coll);
      }
  
      var iterator = (0, _getIterator2.default)(coll);
      return iterator ? createES2015Iterator(iterator) : createObjectIterator(coll);
  }
  module.exports = exports['default'];
  },{"./getIterator":30,"lodash/isArrayLike":221,"lodash/keys":228}],33:[function(require,module,exports){
  'use strict';
  
  Object.defineProperty(exports, "__esModule", {
      value: true
  });
  exports.default = _asyncMap;
  
  var _noop = require('lodash/noop');
  
  var _noop2 = _interopRequireDefault(_noop);
  
  var _wrapAsync = require('./wrapAsync');
  
  var _wrapAsync2 = _interopRequireDefault(_wrapAsync);
  
  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
  
  function _asyncMap(eachfn, arr, iteratee, callback) {
      callback = callback || _noop2.default;
      arr = arr || [];
      var results = [];
      var counter = 0;
      var _iteratee = (0, _wrapAsync2.default)(iteratee);
  
      eachfn(arr, function (value, _, callback) {
          var index = counter++;
          _iteratee(value, function (err, v) {
              results[index] = v;
              callback(err);
          });
      }, function (err) {
          callback(err, results);
      });
  }
  module.exports = exports['default'];
  },{"./wrapAsync":40,"lodash/noop":229}],34:[function(require,module,exports){
  "use strict";
  
  Object.defineProperty(exports, "__esModule", {
      value: true
  });
  exports.default = once;
  function once(fn) {
      return function () {
          if (fn === null) return;
          var callFn = fn;
          fn = null;
          callFn.apply(this, arguments);
      };
  }
  module.exports = exports["default"];
  },{}],35:[function(require,module,exports){
  "use strict";
  
  Object.defineProperty(exports, "__esModule", {
      value: true
  });
  exports.default = onlyOnce;
  function onlyOnce(fn) {
      return function () {
          if (fn === null) throw new Error("Callback was already called.");
          var callFn = fn;
          fn = null;
          callFn.apply(this, arguments);
      };
  }
  module.exports = exports["default"];
  },{}],36:[function(require,module,exports){
  'use strict';
  
  Object.defineProperty(exports, "__esModule", {
      value: true
  });
  exports.default = _parallel;
  
  var _noop = require('lodash/noop');
  
  var _noop2 = _interopRequireDefault(_noop);
  
  var _isArrayLike = require('lodash/isArrayLike');
  
  var _isArrayLike2 = _interopRequireDefault(_isArrayLike);
  
  var _slice = require('./slice');
  
  var _slice2 = _interopRequireDefault(_slice);
  
  var _wrapAsync = require('./wrapAsync');
  
  var _wrapAsync2 = _interopRequireDefault(_wrapAsync);
  
  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
  
  function _parallel(eachfn, tasks, callback) {
      callback = callback || _noop2.default;
      var results = (0, _isArrayLike2.default)(tasks) ? [] : {};
  
      eachfn(tasks, function (task, key, callback) {
          (0, _wrapAsync2.default)(task)(function (err, result) {
              if (arguments.length > 2) {
                  result = (0, _slice2.default)(arguments, 1);
              }
              results[key] = result;
              callback(err);
          });
      }, function (err) {
          callback(err, results);
      });
  }
  module.exports = exports['default'];
  },{"./slice":38,"./wrapAsync":40,"lodash/isArrayLike":221,"lodash/noop":229}],37:[function(require,module,exports){
  (function (process){
  'use strict';
  
  Object.defineProperty(exports, "__esModule", {
      value: true
  });
  exports.hasNextTick = exports.hasSetImmediate = undefined;
  exports.fallback = fallback;
  exports.wrap = wrap;
  
  var _slice = require('./slice');
  
  var _slice2 = _interopRequireDefault(_slice);
  
  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
  
  var hasSetImmediate = exports.hasSetImmediate = typeof setImmediate === 'function' && setImmediate;
  var hasNextTick = exports.hasNextTick = typeof process === 'object' && typeof process.nextTick === 'function';
  
  function fallback(fn) {
      setTimeout(fn, 0);
  }
  
  function wrap(defer) {
      return function (fn /*, ...args*/) {
          var args = (0, _slice2.default)(arguments, 1);
          defer(function () {
              fn.apply(null, args);
          });
      };
  }
  
  var _defer;
  
  if (hasSetImmediate) {
      _defer = setImmediate;
  } else if (hasNextTick) {
      _defer = process.nextTick;
  } else {
      _defer = fallback;
  }
  
  exports.default = wrap(_defer);
  }).call(this,require('_process'))
  },{"./slice":38,"_process":257}],38:[function(require,module,exports){
  "use strict";
  
  Object.defineProperty(exports, "__esModule", {
      value: true
  });
  exports.default = slice;
  function slice(arrayLike, start) {
      start = start | 0;
      var newLen = Math.max(arrayLike.length - start, 0);
      var newArr = Array(newLen);
      for (var idx = 0; idx < newLen; idx++) {
          newArr[idx] = arrayLike[start + idx];
      }
      return newArr;
  }
  module.exports = exports["default"];
  },{}],39:[function(require,module,exports){
  "use strict";
  
  Object.defineProperty(exports, "__esModule", {
      value: true
  });
  exports.default = _withoutIndex;
  function _withoutIndex(iteratee) {
      return function (value, index, callback) {
          return iteratee(value, callback);
      };
  }
  module.exports = exports["default"];
  },{}],40:[function(require,module,exports){
  'use strict';
  
  Object.defineProperty(exports, "__esModule", {
      value: true
  });
  exports.isAsync = undefined;
  
  var _asyncify = require('../asyncify');
  
  var _asyncify2 = _interopRequireDefault(_asyncify);
  
  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
  
  var supportsSymbol = typeof Symbol === 'function';
  
  function isAsync(fn) {
      return supportsSymbol && fn[Symbol.toStringTag] === 'AsyncFunction';
  }
  
  function wrapAsync(asyncFn) {
      return isAsync(asyncFn) ? (0, _asyncify2.default)(asyncFn) : asyncFn;
  }
  
  exports.default = wrapAsync;
  exports.isAsync = isAsync;
  },{"../asyncify":20}],41:[function(require,module,exports){
  'use strict';
  
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  
  var _doParallel = require('./internal/doParallel');
  
  var _doParallel2 = _interopRequireDefault(_doParallel);
  
  var _map = require('./internal/map');
  
  var _map2 = _interopRequireDefault(_map);
  
  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
  
  /**
   * Produces a new collection of values by mapping each value in `coll` through
   * the `iteratee` function. The `iteratee` is called with an item from `coll`
   * and a callback for when it has finished processing. Each of these callback
   * takes 2 arguments: an `error`, and the transformed item from `coll`. If
   * `iteratee` passes an error to its callback, the main `callback` (for the
   * `map` function) is immediately called with the error.
   *
   * Note, that since this function applies the `iteratee` to each item in
   * parallel, there is no guarantee that the `iteratee` functions will complete
   * in order. However, the results array will be in the same order as the
   * original `coll`.
   *
   * If `map` is passed an Object, the results will be an Array.  The results
   * will roughly be in the order of the original Objects' keys (but this can
   * vary across JavaScript engines).
   *
   * @name map
   * @static
   * @memberOf module:Collections
   * @method
   * @category Collection
   * @param {Array|Iterable|Object} coll - A collection to iterate over.
   * @param {AsyncFunction} iteratee - An async function to apply to each item in
   * `coll`.
   * The iteratee should complete with the transformed item.
   * Invoked with (item, callback).
   * @param {Function} [callback] - A callback which is called when all `iteratee`
   * functions have finished, or an error occurs. Results is an Array of the
   * transformed items from the `coll`. Invoked with (err, results).
   * @example
   *
   * async.map(['file1','file2','file3'], fs.stat, function(err, results) {
   *     // results is now an array of stats for each file
   * });
   */
  exports.default = (0, _doParallel2.default)(_map2.default);
  module.exports = exports['default'];
  },{"./internal/doParallel":28,"./internal/map":33}],42:[function(require,module,exports){
  'use strict';
  
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = parallelLimit;
  
  var _eachOf = require('./eachOf');
  
  var _eachOf2 = _interopRequireDefault(_eachOf);
  
  var _parallel = require('./internal/parallel');
  
  var _parallel2 = _interopRequireDefault(_parallel);
  
  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
  
  /**
   * Run the `tasks` collection of functions in parallel, without waiting until
   * the previous function has completed. If any of the functions pass an error to
   * its callback, the main `callback` is immediately called with the value of the
   * error. Once the `tasks` have completed, the results are passed to the final
   * `callback` as an array.
   *
   * **Note:** `parallel` is about kicking-off I/O tasks in parallel, not about
   * parallel execution of code.  If your tasks do not use any timers or perform
   * any I/O, they will actually be executed in series.  Any synchronous setup
   * sections for each task will happen one after the other.  JavaScript remains
   * single-threaded.
   *
   * **Hint:** Use [`reflect`]{@link module:Utils.reflect} to continue the
   * execution of other tasks when a task fails.
   *
   * It is also possible to use an object instead of an array. Each property will
   * be run as a function and the results will be passed to the final `callback`
   * as an object instead of an array. This can be a more readable way of handling
   * results from {@link async.parallel}.
   *
   * @name parallel
   * @static
   * @memberOf module:ControlFlow
   * @method
   * @category Control Flow
   * @param {Array|Iterable|Object} tasks - A collection of
   * [async functions]{@link AsyncFunction} to run.
   * Each async function can complete with any number of optional `result` values.
   * @param {Function} [callback] - An optional callback to run once all the
   * functions have completed successfully. This function gets a results array
   * (or object) containing all the result arguments passed to the task callbacks.
   * Invoked with (err, results).
   *
   * @example
   * async.parallel([
   *     function(callback) {
   *         setTimeout(function() {
   *             callback(null, 'one');
   *         }, 200);
   *     },
   *     function(callback) {
   *         setTimeout(function() {
   *             callback(null, 'two');
   *         }, 100);
   *     }
   * ],
   * // optional callback
   * function(err, results) {
   *     // the results array will equal ['one','two'] even though
   *     // the second function had a shorter timeout.
   * });
   *
   * // an example using an object instead of an array
   * async.parallel({
   *     one: function(callback) {
   *         setTimeout(function() {
   *             callback(null, 1);
   *         }, 200);
   *     },
   *     two: function(callback) {
   *         setTimeout(function() {
   *             callback(null, 2);
   *         }, 100);
   *     }
   * }, function(err, results) {
   *     // results is now equals to: {one: 1, two: 2}
   * });
   */
  function parallelLimit(tasks, callback) {
    (0, _parallel2.default)(_eachOf2.default, tasks, callback);
  }
  module.exports = exports['default'];
  },{"./eachOf":23,"./internal/parallel":36}],43:[function(require,module,exports){
  'use strict';
  
  Object.defineProperty(exports, "__esModule", {
      value: true
  });
  exports.default = retry;
  
  var _noop = require('lodash/noop');
  
  var _noop2 = _interopRequireDefault(_noop);
  
  var _constant = require('lodash/constant');
  
  var _constant2 = _interopRequireDefault(_constant);
  
  var _wrapAsync = require('./internal/wrapAsync');
  
  var _wrapAsync2 = _interopRequireDefault(_wrapAsync);
  
  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
  
  /**
   * Attempts to get a successful response from `task` no more than `times` times
   * before returning an error. If the task is successful, the `callback` will be
   * passed the result of the successful task. If all attempts fail, the callback
   * will be passed the error and result (if any) of the final attempt.
   *
   * @name retry
   * @static
   * @memberOf module:ControlFlow
   * @method
   * @category Control Flow
   * @see [async.retryable]{@link module:ControlFlow.retryable}
   * @param {Object|number} [opts = {times: 5, interval: 0}| 5] - Can be either an
   * object with `times` and `interval` or a number.
   * * `times` - The number of attempts to make before giving up.  The default
   *   is `5`.
   * * `interval` - The time to wait between retries, in milliseconds.  The
   *   default is `0`. The interval may also be specified as a function of the
   *   retry count (see example).
   * * `errorFilter` - An optional synchronous function that is invoked on
   *   erroneous result. If it returns `true` the retry attempts will continue;
   *   if the function returns `false` the retry flow is aborted with the current
   *   attempt's error and result being returned to the final callback.
   *   Invoked with (err).
   * * If `opts` is a number, the number specifies the number of times to retry,
   *   with the default interval of `0`.
   * @param {AsyncFunction} task - An async function to retry.
   * Invoked with (callback).
   * @param {Function} [callback] - An optional callback which is called when the
   * task has succeeded, or after the final failed attempt. It receives the `err`
   * and `result` arguments of the last attempt at completing the `task`. Invoked
   * with (err, results).
   *
   * @example
   *
   * // The `retry` function can be used as a stand-alone control flow by passing
   * // a callback, as shown below:
   *
   * // try calling apiMethod 3 times
   * async.retry(3, apiMethod, function(err, result) {
   *     // do something with the result
   * });
   *
   * // try calling apiMethod 3 times, waiting 200 ms between each retry
   * async.retry({times: 3, interval: 200}, apiMethod, function(err, result) {
   *     // do something with the result
   * });
   *
   * // try calling apiMethod 10 times with exponential backoff
   * // (i.e. intervals of 100, 200, 400, 800, 1600, ... milliseconds)
   * async.retry({
   *   times: 10,
   *   interval: function(retryCount) {
   *     return 50 * Math.pow(2, retryCount);
   *   }
   * }, apiMethod, function(err, result) {
   *     // do something with the result
   * });
   *
   * // try calling apiMethod the default 5 times no delay between each retry
   * async.retry(apiMethod, function(err, result) {
   *     // do something with the result
   * });
   *
   * // try calling apiMethod only when error condition satisfies, all other
   * // errors will abort the retry control flow and return to final callback
   * async.retry({
   *   errorFilter: function(err) {
   *     return err.message === 'Temporary error'; // only retry on a specific error
   *   }
   * }, apiMethod, function(err, result) {
   *     // do something with the result
   * });
   *
   * // to retry individual methods that are not as reliable within other
   * // control flow functions, use the `retryable` wrapper:
   * async.auto({
   *     users: api.getUsers.bind(api),
   *     payments: async.retryable(3, api.getPayments.bind(api))
   * }, function(err, results) {
   *     // do something with the results
   * });
   *
   */
  function retry(opts, task, callback) {
      var DEFAULT_TIMES = 5;
      var DEFAULT_INTERVAL = 0;
  
      var options = {
          times: DEFAULT_TIMES,
          intervalFunc: (0, _constant2.default)(DEFAULT_INTERVAL)
      };
  
      function parseTimes(acc, t) {
          if (typeof t === 'object') {
              acc.times = +t.times || DEFAULT_TIMES;
  
              acc.intervalFunc = typeof t.interval === 'function' ? t.interval : (0, _constant2.default)(+t.interval || DEFAULT_INTERVAL);
  
              acc.errorFilter = t.errorFilter;
          } else if (typeof t === 'number' || typeof t === 'string') {
              acc.times = +t || DEFAULT_TIMES;
          } else {
              throw new Error("Invalid arguments for async.retry");
          }
      }
  
      if (arguments.length < 3 && typeof opts === 'function') {
          callback = task || _noop2.default;
          task = opts;
      } else {
          parseTimes(options, opts);
          callback = callback || _noop2.default;
      }
  
      if (typeof task !== 'function') {
          throw new Error("Invalid arguments for async.retry");
      }
  
      var _task = (0, _wrapAsync2.default)(task);
  
      var attempt = 1;
      function retryAttempt() {
          _task(function (err) {
              if (err && attempt++ < options.times && (typeof options.errorFilter != 'function' || options.errorFilter(err))) {
                  setTimeout(retryAttempt, options.intervalFunc(attempt));
              } else {
                  callback.apply(null, arguments);
              }
          });
      }
  
      retryAttempt();
  }
  module.exports = exports['default'];
  },{"./internal/wrapAsync":40,"lodash/constant":218,"lodash/noop":229}],44:[function(require,module,exports){
  'use strict';
  
  Object.defineProperty(exports, "__esModule", {
      value: true
  });
  
  exports.default = function (tasks, callback) {
      callback = (0, _once2.default)(callback || _noop2.default);
      if (!(0, _isArray2.default)(tasks)) return callback(new Error('First argument to waterfall must be an array of functions'));
      if (!tasks.length) return callback();
      var taskIndex = 0;
  
      function nextTask(args) {
          var task = (0, _wrapAsync2.default)(tasks[taskIndex++]);
          args.push((0, _onlyOnce2.default)(next));
          task.apply(null, args);
      }
  
      function next(err /*, ...args*/) {
          if (err || taskIndex === tasks.length) {
              return callback.apply(null, arguments);
          }
          nextTask((0, _slice2.default)(arguments, 1));
      }
  
      nextTask([]);
  };
  
  var _isArray = require('lodash/isArray');
  
  var _isArray2 = _interopRequireDefault(_isArray);
  
  var _noop = require('lodash/noop');
  
  var _noop2 = _interopRequireDefault(_noop);
  
  var _once = require('./internal/once');
  
  var _once2 = _interopRequireDefault(_once);
  
  var _slice = require('./internal/slice');
  
  var _slice2 = _interopRequireDefault(_slice);
  
  var _onlyOnce = require('./internal/onlyOnce');
  
  var _onlyOnce2 = _interopRequireDefault(_onlyOnce);
  
  var _wrapAsync = require('./internal/wrapAsync');
  
  var _wrapAsync2 = _interopRequireDefault(_wrapAsync);
  
  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
  
  module.exports = exports['default'];
  
  /**
   * Runs the `tasks` array of functions in series, each passing their results to
   * the next in the array. However, if any of the `tasks` pass an error to their
   * own callback, the next function is not executed, and the main `callback` is
   * immediately called with the error.
   *
   * @name waterfall
   * @static
   * @memberOf module:ControlFlow
   * @method
   * @category Control Flow
   * @param {Array} tasks - An array of [async functions]{@link AsyncFunction}
   * to run.
   * Each function should complete with any number of `result` values.
   * The `result` values will be passed as arguments, in order, to the next task.
   * @param {Function} [callback] - An optional callback to run once all the
   * functions have completed. This will be passed the results of the last task's
   * callback. Invoked with (err, [results]).
   * @returns undefined
   * @example
   *
   * async.waterfall([
   *     function(callback) {
   *         callback(null, 'one', 'two');
   *     },
   *     function(arg1, arg2, callback) {
   *         // arg1 now equals 'one' and arg2 now equals 'two'
   *         callback(null, 'three');
   *     },
   *     function(arg1, callback) {
   *         // arg1 now equals 'three'
   *         callback(null, 'done');
   *     }
   * ], function (err, result) {
   *     // result now equals 'done'
   * });
   *
   * // Or, with named functions:
   * async.waterfall([
   *     myFirstFunction,
   *     mySecondFunction,
   *     myLastFunction,
   * ], function (err, result) {
   *     // result now equals 'done'
   * });
   * function myFirstFunction(callback) {
   *     callback(null, 'one', 'two');
   * }
   * function mySecondFunction(arg1, arg2, callback) {
   *     // arg1 now equals 'one' and arg2 now equals 'two'
   *     callback(null, 'three');
   * }
   * function myLastFunction(arg1, callback) {
   *     // arg1 now equals 'three'
   *     callback(null, 'done');
   * }
   */
  },{"./internal/once":34,"./internal/onlyOnce":35,"./internal/slice":38,"./internal/wrapAsync":40,"lodash/isArray":220,"lodash/noop":229}],45:[function(require,module,exports){
  //      Copyright (c) 2012 Mathieu Turcotte
  //      Licensed under the MIT license.
  
  var Backoff = require('./lib/backoff');
  var ExponentialBackoffStrategy = require('./lib/strategy/exponential');
  var FibonacciBackoffStrategy = require('./lib/strategy/fibonacci');
  var FunctionCall = require('./lib/function_call.js');
  
  module.exports.Backoff = Backoff;
  module.exports.FunctionCall = FunctionCall;
  module.exports.FibonacciStrategy = FibonacciBackoffStrategy;
  module.exports.ExponentialStrategy = ExponentialBackoffStrategy;
  
  // Constructs a Fibonacci backoff.
  module.exports.fibonacci = function(options) {
      return new Backoff(new FibonacciBackoffStrategy(options));
  };
  
  // Constructs an exponential backoff.
  module.exports.exponential = function(options) {
      return new Backoff(new ExponentialBackoffStrategy(options));
  };
  
  // Constructs a FunctionCall for the given function and arguments.
  module.exports.call = function(fn, vargs, callback) {
      var args = Array.prototype.slice.call(arguments);
      fn = args[0];
      vargs = args.slice(1, args.length - 1);
      callback = args[args.length - 1];
      return new FunctionCall(fn, vargs, callback);
  };
  
  },{"./lib/backoff":46,"./lib/function_call.js":47,"./lib/strategy/exponential":48,"./lib/strategy/fibonacci":49}],46:[function(require,module,exports){
  //      Copyright (c) 2012 Mathieu Turcotte
  //      Licensed under the MIT license.
  
  var events = require('events');
  var precond = require('precond');
  var util = require('util');
  
  // A class to hold the state of a backoff operation. Accepts a backoff strategy
  // to generate the backoff delays.
  function Backoff(backoffStrategy) {
      events.EventEmitter.call(this);
  
      this.backoffStrategy_ = backoffStrategy;
      this.maxNumberOfRetry_ = -1;
      this.backoffNumber_ = 0;
      this.backoffDelay_ = 0;
      this.timeoutID_ = -1;
  
      this.handlers = {
          backoff: this.onBackoff_.bind(this)
      };
  }
  util.inherits(Backoff, events.EventEmitter);
  
  // Sets a limit, greater than 0, on the maximum number of backoffs. A 'fail'
  // event will be emitted when the limit is reached.
  Backoff.prototype.failAfter = function(maxNumberOfRetry) {
      precond.checkArgument(maxNumberOfRetry > 0,
          'Expected a maximum number of retry greater than 0 but got %s.',
          maxNumberOfRetry);
  
      this.maxNumberOfRetry_ = maxNumberOfRetry;
  };
  
  // Starts a backoff operation. Accepts an optional parameter to let the
  // listeners know why the backoff operation was started.
  Backoff.prototype.backoff = function(err) {
      precond.checkState(this.timeoutID_ === -1, 'Backoff in progress.');
  
      if (this.backoffNumber_ === this.maxNumberOfRetry_) {
          this.emit('fail', err);
          this.reset();
      } else {
          this.backoffDelay_ = this.backoffStrategy_.next();
          this.timeoutID_ = setTimeout(this.handlers.backoff, this.backoffDelay_);
          this.emit('backoff', this.backoffNumber_, this.backoffDelay_, err);
      }
  };
  
  // Handles the backoff timeout completion.
  Backoff.prototype.onBackoff_ = function() {
      this.timeoutID_ = -1;
      this.emit('ready', this.backoffNumber_, this.backoffDelay_);
      this.backoffNumber_++;
  };
  
  // Stops any backoff operation and resets the backoff delay to its initial value.
  Backoff.prototype.reset = function() {
      this.backoffNumber_ = 0;
      this.backoffStrategy_.reset();
      clearTimeout(this.timeoutID_);
      this.timeoutID_ = -1;
  };
  
  module.exports = Backoff;
  
  },{"events":157,"precond":253,"util":333}],47:[function(require,module,exports){
  //      Copyright (c) 2012 Mathieu Turcotte
  //      Licensed under the MIT license.
  
  var events = require('events');
  var precond = require('precond');
  var util = require('util');
  
  var Backoff = require('./backoff');
  var FibonacciBackoffStrategy = require('./strategy/fibonacci');
  
  // Wraps a function to be called in a backoff loop.
  function FunctionCall(fn, args, callback) {
      events.EventEmitter.call(this);
  
      precond.checkIsFunction(fn, 'Expected fn to be a function.');
      precond.checkIsArray(args, 'Expected args to be an array.');
      precond.checkIsFunction(callback, 'Expected callback to be a function.');
  
      this.function_ = fn;
      this.arguments_ = args;
      this.callback_ = callback;
      this.lastResult_ = [];
      this.numRetries_ = 0;
  
      this.backoff_ = null;
      this.strategy_ = null;
      this.failAfter_ = -1;
      this.retryPredicate_ = FunctionCall.DEFAULT_RETRY_PREDICATE_;
  
      this.state_ = FunctionCall.State_.PENDING;
  }
  util.inherits(FunctionCall, events.EventEmitter);
  
  // States in which the call can be.
  FunctionCall.State_ = {
      // Call isn't started yet.
      PENDING: 0,
      // Call is in progress.
      RUNNING: 1,
      // Call completed successfully which means that either the wrapped function
      // returned successfully or the maximal number of backoffs was reached.
      COMPLETED: 2,
      // The call was aborted.
      ABORTED: 3
  };
  
  // The default retry predicate which considers any error as retriable.
  FunctionCall.DEFAULT_RETRY_PREDICATE_ = function(err) {
    return true;
  };
  
  // Checks whether the call is pending.
  FunctionCall.prototype.isPending = function() {
      return this.state_ == FunctionCall.State_.PENDING;
  };
  
  // Checks whether the call is in progress.
  FunctionCall.prototype.isRunning = function() {
      return this.state_ == FunctionCall.State_.RUNNING;
  };
  
  // Checks whether the call is completed.
  FunctionCall.prototype.isCompleted = function() {
      return this.state_ == FunctionCall.State_.COMPLETED;
  };
  
  // Checks whether the call is aborted.
  FunctionCall.prototype.isAborted = function() {
      return this.state_ == FunctionCall.State_.ABORTED;
  };
  
  // Sets the backoff strategy to use. Can only be called before the call is
  // started otherwise an exception will be thrown.
  FunctionCall.prototype.setStrategy = function(strategy) {
      precond.checkState(this.isPending(), 'FunctionCall in progress.');
      this.strategy_ = strategy;
      return this; // Return this for chaining.
  };
  
  // Sets the predicate which will be used to determine whether the errors
  // returned from the wrapped function should be retried or not, e.g. a
  // network error would be retriable while a type error would stop the
  // function call.
  FunctionCall.prototype.retryIf = function(retryPredicate) {
      precond.checkState(this.isPending(), 'FunctionCall in progress.');
      this.retryPredicate_ = retryPredicate;
      return this;
  };
  
  // Returns all intermediary results returned by the wrapped function since
  // the initial call.
  FunctionCall.prototype.getLastResult = function() {
      return this.lastResult_.concat();
  };
  
  // Returns the number of times the wrapped function call was retried.
  FunctionCall.prototype.getNumRetries = function() {
      return this.numRetries_;
  };
  
  // Sets the backoff limit.
  FunctionCall.prototype.failAfter = function(maxNumberOfRetry) {
      precond.checkState(this.isPending(), 'FunctionCall in progress.');
      this.failAfter_ = maxNumberOfRetry;
      return this; // Return this for chaining.
  };
  
  // Aborts the call.
  FunctionCall.prototype.abort = function() {
      if (this.isCompleted() || this.isAborted()) {
        return;
      }
  
      if (this.isRunning()) {
          this.backoff_.reset();
      }
  
      this.state_ = FunctionCall.State_.ABORTED;
      this.lastResult_ = [new Error('Backoff aborted.')];
      this.emit('abort');
      this.doCallback_();
  };
  
  // Initiates the call to the wrapped function. Accepts an optional factory
  // function used to create the backoff instance; used when testing.
  FunctionCall.prototype.start = function(backoffFactory) {
      precond.checkState(!this.isAborted(), 'FunctionCall is aborted.');
      precond.checkState(this.isPending(), 'FunctionCall already started.');
  
      var strategy = this.strategy_ || new FibonacciBackoffStrategy();
  
      this.backoff_ = backoffFactory ?
          backoffFactory(strategy) :
          new Backoff(strategy);
  
      this.backoff_.on('ready', this.doCall_.bind(this, true /* isRetry */));
      this.backoff_.on('fail', this.doCallback_.bind(this));
      this.backoff_.on('backoff', this.handleBackoff_.bind(this));
  
      if (this.failAfter_ > 0) {
          this.backoff_.failAfter(this.failAfter_);
      }
  
      this.state_ = FunctionCall.State_.RUNNING;
      this.doCall_(false /* isRetry */);
  };
  
  // Calls the wrapped function.
  FunctionCall.prototype.doCall_ = function(isRetry) {
      if (isRetry) {
          this.numRetries_++;
      }
      var eventArgs = ['call'].concat(this.arguments_);
      events.EventEmitter.prototype.emit.apply(this, eventArgs);
      var callback = this.handleFunctionCallback_.bind(this);
      this.function_.apply(null, this.arguments_.concat(callback));
  };
  
  // Calls the wrapped function's callback with the last result returned by the
  // wrapped function.
  FunctionCall.prototype.doCallback_ = function() {
      this.callback_.apply(null, this.lastResult_);
  };
  
  // Handles wrapped function's completion. This method acts as a replacement
  // for the original callback function.
  FunctionCall.prototype.handleFunctionCallback_ = function() {
      if (this.isAborted()) {
          return;
      }
  
      var args = Array.prototype.slice.call(arguments);
      this.lastResult_ = args; // Save last callback arguments.
      events.EventEmitter.prototype.emit.apply(this, ['callback'].concat(args));
  
      var err = args[0];
      if (err && this.retryPredicate_(err)) {
          this.backoff_.backoff(err);
      } else {
          this.state_ = FunctionCall.State_.COMPLETED;
          this.doCallback_();
      }
  };
  
  // Handles the backoff event by reemitting it.
  FunctionCall.prototype.handleBackoff_ = function(number, delay, err) {
      this.emit('backoff', number, delay, err);
  };
  
  module.exports = FunctionCall;
  
  },{"./backoff":46,"./strategy/fibonacci":49,"events":157,"precond":253,"util":333}],48:[function(require,module,exports){
  //      Copyright (c) 2012 Mathieu Turcotte
  //      Licensed under the MIT license.
  
  var util = require('util');
  var precond = require('precond');
  
  var BackoffStrategy = require('./strategy');
  
  // Exponential backoff strategy.
  function ExponentialBackoffStrategy(options) {
      BackoffStrategy.call(this, options);
      this.backoffDelay_ = 0;
      this.nextBackoffDelay_ = this.getInitialDelay();
      this.factor_ = ExponentialBackoffStrategy.DEFAULT_FACTOR;
  
      if (options && options.factor !== undefined) {
          precond.checkArgument(options.factor > 1,
              'Exponential factor should be greater than 1 but got %s.',
              options.factor);
          this.factor_ = options.factor;
      }
  }
  util.inherits(ExponentialBackoffStrategy, BackoffStrategy);
  
  // Default multiplication factor used to compute the next backoff delay from
  // the current one. The value can be overridden by passing a custom factor as
  // part of the options.
  ExponentialBackoffStrategy.DEFAULT_FACTOR = 2;
  
  ExponentialBackoffStrategy.prototype.next_ = function() {
      this.backoffDelay_ = Math.min(this.nextBackoffDelay_, this.getMaxDelay());
      this.nextBackoffDelay_ = this.backoffDelay_ * this.factor_;
      return this.backoffDelay_;
  };
  
  ExponentialBackoffStrategy.prototype.reset_ = function() {
      this.backoffDelay_ = 0;
      this.nextBackoffDelay_ = this.getInitialDelay();
  };
  
  module.exports = ExponentialBackoffStrategy;
  
  },{"./strategy":50,"precond":253,"util":333}],49:[function(require,module,exports){
  //      Copyright (c) 2012 Mathieu Turcotte
  //      Licensed under the MIT license.
  
  var util = require('util');
  
  var BackoffStrategy = require('./strategy');
  
  // Fibonacci backoff strategy.
  function FibonacciBackoffStrategy(options) {
      BackoffStrategy.call(this, options);
      this.backoffDelay_ = 0;
      this.nextBackoffDelay_ = this.getInitialDelay();
  }
  util.inherits(FibonacciBackoffStrategy, BackoffStrategy);
  
  FibonacciBackoffStrategy.prototype.next_ = function() {
      var backoffDelay = Math.min(this.nextBackoffDelay_, this.getMaxDelay());
      this.nextBackoffDelay_ += this.backoffDelay_;
      this.backoffDelay_ = backoffDelay;
      return backoffDelay;
  };
  
  FibonacciBackoffStrategy.prototype.reset_ = function() {
      this.nextBackoffDelay_ = this.getInitialDelay();
      this.backoffDelay_ = 0;
  };
  
  module.exports = FibonacciBackoffStrategy;
  
  },{"./strategy":50,"util":333}],50:[function(require,module,exports){
  //      Copyright (c) 2012 Mathieu Turcotte
  //      Licensed under the MIT license.
  
  var events = require('events');
  var util = require('util');
  
  function isDef(value) {
      return value !== undefined && value !== null;
  }
  
  // Abstract class defining the skeleton for the backoff strategies. Accepts an
  // object holding the options for the backoff strategy:
  //
  //  * `randomisationFactor`: The randomisation factor which must be between 0
  //     and 1 where 1 equates to a randomization factor of 100% and 0 to no
  //     randomization.
  //  * `initialDelay`: The backoff initial delay in milliseconds.
  //  * `maxDelay`: The backoff maximal delay in milliseconds.
  function BackoffStrategy(options) {
      options = options || {};
  
      if (isDef(options.initialDelay) && options.initialDelay < 1) {
          throw new Error('The initial timeout must be greater than 0.');
      } else if (isDef(options.maxDelay) && options.maxDelay < 1) {
          throw new Error('The maximal timeout must be greater than 0.');
      }
  
      this.initialDelay_ = options.initialDelay || 100;
      this.maxDelay_ = options.maxDelay || 10000;
  
      if (this.maxDelay_ <= this.initialDelay_) {
          throw new Error('The maximal backoff delay must be ' +
                          'greater than the initial backoff delay.');
      }
  
      if (isDef(options.randomisationFactor) &&
          (options.randomisationFactor < 0 || options.randomisationFactor > 1)) {
          throw new Error('The randomisation factor must be between 0 and 1.');
      }
  
      this.randomisationFactor_ = options.randomisationFactor || 0;
  }
  
  // Gets the maximal backoff delay.
  BackoffStrategy.prototype.getMaxDelay = function() {
      return this.maxDelay_;
  };
  
  // Gets the initial backoff delay.
  BackoffStrategy.prototype.getInitialDelay = function() {
      return this.initialDelay_;
  };
  
  // Template method that computes and returns the next backoff delay in
  // milliseconds.
  BackoffStrategy.prototype.next = function() {
      var backoffDelay = this.next_();
      var randomisationMultiple = 1 + Math.random() * this.randomisationFactor_;
      var randomizedDelay = Math.round(backoffDelay * randomisationMultiple);
      return randomizedDelay;
  };
  
  // Computes and returns the next backoff delay. Intended to be overridden by
  // subclasses.
  BackoffStrategy.prototype.next_ = function() {
      throw new Error('BackoffStrategy.next_() unimplemented.');
  };
  
  // Template method that resets the backoff delay to its initial value.
  BackoffStrategy.prototype.reset = function() {
      this.reset_();
  };
  
  // Resets the backoff delay to its initial value. Intended to be overridden by
  // subclasses.
  BackoffStrategy.prototype.reset_ = function() {
      throw new Error('BackoffStrategy.reset_() unimplemented.');
  };
  
  module.exports = BackoffStrategy;
  
  },{"events":157,"util":333}],51:[function(require,module,exports){
  'use strict'
  
  exports.byteLength = byteLength
  exports.toByteArray = toByteArray
  exports.fromByteArray = fromByteArray
  
  var lookup = []
  var revLookup = []
  var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array
  
  var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'
  for (var i = 0, len = code.length; i < len; ++i) {
    lookup[i] = code[i]
    revLookup[code.charCodeAt(i)] = i
  }
  
  revLookup['-'.charCodeAt(0)] = 62
  revLookup['_'.charCodeAt(0)] = 63
  
  function placeHoldersCount (b64) {
    var len = b64.length
    if (len % 4 > 0) {
      throw new Error('Invalid string. Length must be a multiple of 4')
    }
  
    // the number of equal signs (place holders)
    // if there are two placeholders, than the two characters before it
    // represent one byte
    // if there is only one, then the three characters before it represent 2 bytes
    // this is just a cheap hack to not do indexOf twice
    return b64[len - 2] === '=' ? 2 : b64[len - 1] === '=' ? 1 : 0
  }
  
  function byteLength (b64) {
    // base64 is 4/3 + up to two characters of the original data
    return (b64.length * 3 / 4) - placeHoldersCount(b64)
  }
  
  function toByteArray (b64) {
    var i, l, tmp, placeHolders, arr
    var len = b64.length
    placeHolders = placeHoldersCount(b64)
  
    arr = new Arr((len * 3 / 4) - placeHolders)
  
    // if there are placeholders, only get up to the last complete 4 chars
    l = placeHolders > 0 ? len - 4 : len
  
    var L = 0
  
    for (i = 0; i < l; i += 4) {
      tmp = (revLookup[b64.charCodeAt(i)] << 18) | (revLookup[b64.charCodeAt(i + 1)] << 12) | (revLookup[b64.charCodeAt(i + 2)] << 6) | revLookup[b64.charCodeAt(i + 3)]
      arr[L++] = (tmp >> 16) & 0xFF
      arr[L++] = (tmp >> 8) & 0xFF
      arr[L++] = tmp & 0xFF
    }
  
    if (placeHolders === 2) {
      tmp = (revLookup[b64.charCodeAt(i)] << 2) | (revLookup[b64.charCodeAt(i + 1)] >> 4)
      arr[L++] = tmp & 0xFF
    } else if (placeHolders === 1) {
      tmp = (revLookup[b64.charCodeAt(i)] << 10) | (revLookup[b64.charCodeAt(i + 1)] << 4) | (revLookup[b64.charCodeAt(i + 2)] >> 2)
      arr[L++] = (tmp >> 8) & 0xFF
      arr[L++] = tmp & 0xFF
    }
  
    return arr
  }
  
  function tripletToBase64 (num) {
    return lookup[num >> 18 & 0x3F] + lookup[num >> 12 & 0x3F] + lookup[num >> 6 & 0x3F] + lookup[num & 0x3F]
  }
  
  function encodeChunk (uint8, start, end) {
    var tmp
    var output = []
    for (var i = start; i < end; i += 3) {
      tmp = (uint8[i] << 16) + (uint8[i + 1] << 8) + (uint8[i + 2])
      output.push(tripletToBase64(tmp))
    }
    return output.join('')
  }
  
  function fromByteArray (uint8) {
    var tmp
    var len = uint8.length
    var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes
    var output = ''
    var parts = []
    var maxChunkLength = 16383 // must be multiple of 3
  
    // go through the array every three bytes, we'll deal with trailing stuff later
    for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
      parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)))
    }
  
    // pad the end with zeros, but make sure to not forget the extra bytes
    if (extraBytes === 1) {
      tmp = uint8[len - 1]
      output += lookup[tmp >> 2]
      output += lookup[(tmp << 4) & 0x3F]
      output += '=='
    } else if (extraBytes === 2) {
      tmp = (uint8[len - 2] << 8) + (uint8[len - 1])
      output += lookup[tmp >> 10]
      output += lookup[(tmp >> 4) & 0x3F]
      output += lookup[(tmp << 2) & 0x3F]
      output += '='
    }
  
    parts.push(output)
  
    return parts.join('')
  }
  
  },{}],52:[function(require,module,exports){
  // Reference https://github.com/bitcoin/bips/blob/master/bip-0066.mediawiki
  // Format: 0x30 [total-length] 0x02 [R-length] [R] 0x02 [S-length] [S]
  // NOTE: SIGHASH byte ignored AND restricted, truncate before use
  
  var Buffer = require('safe-buffer').Buffer
  
  function check (buffer) {
    if (buffer.length < 8) return false
    if (buffer.length > 72) return false
    if (buffer[0] !== 0x30) return false
    if (buffer[1] !== buffer.length - 2) return false
    if (buffer[2] !== 0x02) return false
  
    var lenR = buffer[3]
    if (lenR === 0) return false
    if (5 + lenR >= buffer.length) return false
    if (buffer[4 + lenR] !== 0x02) return false
  
    var lenS = buffer[5 + lenR]
    if (lenS === 0) return false
    if ((6 + lenR + lenS) !== buffer.length) return false
  
    if (buffer[4] & 0x80) return false
    if (lenR > 1 && (buffer[4] === 0x00) && !(buffer[5] & 0x80)) return false
  
    if (buffer[lenR + 6] & 0x80) return false
    if (lenS > 1 && (buffer[lenR + 6] === 0x00) && !(buffer[lenR + 7] & 0x80)) return false
    return true
  }
  
  function decode (buffer) {
    if (buffer.length < 8) throw new Error('DER sequence length is too short')
    if (buffer.length > 72) throw new Error('DER sequence length is too long')
    if (buffer[0] !== 0x30) throw new Error('Expected DER sequence')
    if (buffer[1] !== buffer.length - 2) throw new Error('DER sequence length is invalid')
    if (buffer[2] !== 0x02) throw new Error('Expected DER integer')
  
    var lenR = buffer[3]
    if (lenR === 0) throw new Error('R length is zero')
    if (5 + lenR >= buffer.length) throw new Error('R length is too long')
    if (buffer[4 + lenR] !== 0x02) throw new Error('Expected DER integer (2)')
  
    var lenS = buffer[5 + lenR]
    if (lenS === 0) throw new Error('S length is zero')
    if ((6 + lenR + lenS) !== buffer.length) throw new Error('S length is invalid')
  
    if (buffer[4] & 0x80) throw new Error('R value is negative')
    if (lenR > 1 && (buffer[4] === 0x00) && !(buffer[5] & 0x80)) throw new Error('R value excessively padded')
  
    if (buffer[lenR + 6] & 0x80) throw new Error('S value is negative')
    if (lenS > 1 && (buffer[lenR + 6] === 0x00) && !(buffer[lenR + 7] & 0x80)) throw new Error('S value excessively padded')
  
    // non-BIP66 - extract R, S values
    return {
      r: buffer.slice(4, 4 + lenR),
      s: buffer.slice(6 + lenR)
    }
  }
  
  /*
   * Expects r and s to be positive DER integers.
   *
   * The DER format uses the most significant bit as a sign bit (& 0x80).
   * If the significant bit is set AND the integer is positive, a 0x00 is prepended.
   *
   * Examples:
   *
   *      0 =>     0x00
   *      1 =>     0x01
   *     -1 =>     0xff
   *    127 =>     0x7f
   *   -127 =>     0x81
   *    128 =>   0x0080
   *   -128 =>     0x80
   *    255 =>   0x00ff
   *   -255 =>   0xff01
   *  16300 =>   0x3fac
   * -16300 =>   0xc054
   *  62300 => 0x00f35c
   * -62300 => 0xff0ca4
  */
  function encode (r, s) {
    var lenR = r.length
    var lenS = s.length
    if (lenR === 0) throw new Error('R length is zero')
    if (lenS === 0) throw new Error('S length is zero')
    if (lenR > 33) throw new Error('R length is too long')
    if (lenS > 33) throw new Error('S length is too long')
    if (r[0] & 0x80) throw new Error('R value is negative')
    if (s[0] & 0x80) throw new Error('S value is negative')
    if (lenR > 1 && (r[0] === 0x00) && !(r[1] & 0x80)) throw new Error('R value excessively padded')
    if (lenS > 1 && (s[0] === 0x00) && !(s[1] & 0x80)) throw new Error('S value excessively padded')
  
    var signature = Buffer.allocUnsafe(6 + lenR + lenS)
  
    // 0x30 [total-length] 0x02 [R-length] [R] 0x02 [S-length] [S]
    signature[0] = 0x30
    signature[1] = signature.length - 2
    signature[2] = 0x02
    signature[3] = r.length
    r.copy(signature, 4)
    signature[4 + lenR] = 0x02
    signature[5 + lenR] = s.length
    s.copy(signature, 6 + lenR)
  
    return signature
  }
  
  module.exports = {
    check: check,
    decode: decode,
    encode: encode
  }
  
  },{"safe-buffer":290}],53:[function(require,module,exports){
  (function (module, exports) {
    'use strict';
  
    // Utils
    function assert (val, msg) {
      if (!val) throw new Error(msg || 'Assertion failed');
    }
  
    // Could use `inherits` module, but don't want to move from single file
    // architecture yet.
    function inherits (ctor, superCtor) {
      ctor.super_ = superCtor;
      var TempCtor = function () {};
      TempCtor.prototype = superCtor.prototype;
      ctor.prototype = new TempCtor();
      ctor.prototype.constructor = ctor;
    }
  
    // BN
  
    function BN (number, base, endian) {
      if (BN.isBN(number)) {
        return number;
      }
  
      this.negative = 0;
      this.words = null;
      this.length = 0;
  
      // Reduction context
      this.red = null;
  
      if (number !== null) {
        if (base === 'le' || base === 'be') {
          endian = base;
          base = 10;
        }
  
        this._init(number || 0, base || 10, endian || 'be');
      }
    }
    if (typeof module === 'object') {
      module.exports = BN;
    } else {
      exports.BN = BN;
    }
  
    BN.BN = BN;
    BN.wordSize = 26;
  
    var Buffer;
    try {
      Buffer = require('buffer').Buffer;
    } catch (e) {
    }
  
    BN.isBN = function isBN (num) {
      if (num instanceof BN) {
        return true;
      }
  
      return num !== null && typeof num === 'object' &&
        num.constructor.wordSize === BN.wordSize && Array.isArray(num.words);
    };
  
    BN.max = function max (left, right) {
      if (left.cmp(right) > 0) return left;
      return right;
    };
  
    BN.min = function min (left, right) {
      if (left.cmp(right) < 0) return left;
      return right;
    };
  
    BN.prototype._init = function init (number, base, endian) {
      if (typeof number === 'number') {
        return this._initNumber(number, base, endian);
      }
  
      if (typeof number === 'object') {
        return this._initArray(number, base, endian);
      }
  
      if (base === 'hex') {
        base = 16;
      }
      assert(base === (base | 0) && base >= 2 && base <= 36);
  
      number = number.toString().replace(/\s+/g, '');
      var start = 0;
      if (number[0] === '-') {
        start++;
      }
  
      if (base === 16) {
        this._parseHex(number, start);
      } else {
        this._parseBase(number, base, start);
      }
  
      if (number[0] === '-') {
        this.negative = 1;
      }
  
      this.strip();
  
      if (endian !== 'le') return;
  
      this._initArray(this.toArray(), base, endian);
    };
  
    BN.prototype._initNumber = function _initNumber (number, base, endian) {
      if (number < 0) {
        this.negative = 1;
        number = -number;
      }
      if (number < 0x4000000) {
        this.words = [ number & 0x3ffffff ];
        this.length = 1;
      } else if (number < 0x10000000000000) {
        this.words = [
          number & 0x3ffffff,
          (number / 0x4000000) & 0x3ffffff
        ];
        this.length = 2;
      } else {
        assert(number < 0x20000000000000); // 2 ^ 53 (unsafe)
        this.words = [
          number & 0x3ffffff,
          (number / 0x4000000) & 0x3ffffff,
          1
        ];
        this.length = 3;
      }
  
      if (endian !== 'le') return;
  
      // Reverse the bytes
      this._initArray(this.toArray(), base, endian);
    };
  
    BN.prototype._initArray = function _initArray (number, base, endian) {
      // Perhaps a Uint8Array
      assert(typeof number.length === 'number');
      if (number.length <= 0) {
        this.words = [ 0 ];
        this.length = 1;
        return this;
      }
  
      this.length = Math.ceil(number.length / 3);
      this.words = new Array(this.length);
      for (var i = 0; i < this.length; i++) {
        this.words[i] = 0;
      }
  
      var j, w;
      var off = 0;
      if (endian === 'be') {
        for (i = number.length - 1, j = 0; i >= 0; i -= 3) {
          w = number[i] | (number[i - 1] << 8) | (number[i - 2] << 16);
          this.words[j] |= (w << off) & 0x3ffffff;
          this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;
          off += 24;
          if (off >= 26) {
            off -= 26;
            j++;
          }
        }
      } else if (endian === 'le') {
        for (i = 0, j = 0; i < number.length; i += 3) {
          w = number[i] | (number[i + 1] << 8) | (number[i + 2] << 16);
          this.words[j] |= (w << off) & 0x3ffffff;
          this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;
          off += 24;
          if (off >= 26) {
            off -= 26;
            j++;
          }
        }
      }
      return this.strip();
    };
  
    function parseHex (str, start, end) {
      var r = 0;
      var len = Math.min(str.length, end);
      for (var i = start; i < len; i++) {
        var c = str.charCodeAt(i) - 48;
  
        r <<= 4;
  
        // 'a' - 'f'
        if (c >= 49 && c <= 54) {
          r |= c - 49 + 0xa;
  
        // 'A' - 'F'
        } else if (c >= 17 && c <= 22) {
          r |= c - 17 + 0xa;
  
        // '0' - '9'
        } else {
          r |= c & 0xf;
        }
      }
      return r;
    }
  
    BN.prototype._parseHex = function _parseHex (number, start) {
      // Create possibly bigger array to ensure that it fits the number
      this.length = Math.ceil((number.length - start) / 6);
      this.words = new Array(this.length);
      for (var i = 0; i < this.length; i++) {
        this.words[i] = 0;
      }
  
      var j, w;
      // Scan 24-bit chunks and add them to the number
      var off = 0;
      for (i = number.length - 6, j = 0; i >= start; i -= 6) {
        w = parseHex(number, i, i + 6);
        this.words[j] |= (w << off) & 0x3ffffff;
        // NOTE: `0x3fffff` is intentional here, 26bits max shift + 24bit hex limb
        this.words[j + 1] |= w >>> (26 - off) & 0x3fffff;
        off += 24;
        if (off >= 26) {
          off -= 26;
          j++;
        }
      }
      if (i + 6 !== start) {
        w = parseHex(number, start, i + 6);
        this.words[j] |= (w << off) & 0x3ffffff;
        this.words[j + 1] |= w >>> (26 - off) & 0x3fffff;
      }
      this.strip();
    };
  
    function parseBase (str, start, end, mul) {
      var r = 0;
      var len = Math.min(str.length, end);
      for (var i = start; i < len; i++) {
        var c = str.charCodeAt(i) - 48;
  
        r *= mul;
  
        // 'a'
        if (c >= 49) {
          r += c - 49 + 0xa;
  
        // 'A'
        } else if (c >= 17) {
          r += c - 17 + 0xa;
  
        // '0' - '9'
        } else {
          r += c;
        }
      }
      return r;
    }
  
    BN.prototype._parseBase = function _parseBase (number, base, start) {
      // Initialize as zero
      this.words = [ 0 ];
      this.length = 1;
  
      // Find length of limb in base
      for (var limbLen = 0, limbPow = 1; limbPow <= 0x3ffffff; limbPow *= base) {
        limbLen++;
      }
      limbLen--;
      limbPow = (limbPow / base) | 0;
  
      var total = number.length - start;
      var mod = total % limbLen;
      var end = Math.min(total, total - mod) + start;
  
      var word = 0;
      for (var i = start; i < end; i += limbLen) {
        word = parseBase(number, i, i + limbLen, base);
  
        this.imuln(limbPow);
        if (this.words[0] + word < 0x4000000) {
          this.words[0] += word;
        } else {
          this._iaddn(word);
        }
      }
  
      if (mod !== 0) {
        var pow = 1;
        word = parseBase(number, i, number.length, base);
  
        for (i = 0; i < mod; i++) {
          pow *= base;
        }
  
        this.imuln(pow);
        if (this.words[0] + word < 0x4000000) {
          this.words[0] += word;
        } else {
          this._iaddn(word);
        }
      }
    };
  
    BN.prototype.copy = function copy (dest) {
      dest.words = new Array(this.length);
      for (var i = 0; i < this.length; i++) {
        dest.words[i] = this.words[i];
      }
      dest.length = this.length;
      dest.negative = this.negative;
      dest.red = this.red;
    };
  
    BN.prototype.clone = function clone () {
      var r = new BN(null);
      this.copy(r);
      return r;
    };
  
    BN.prototype._expand = function _expand (size) {
      while (this.length < size) {
        this.words[this.length++] = 0;
      }
      return this;
    };
  
    // Remove leading `0` from `this`
    BN.prototype.strip = function strip () {
      while (this.length > 1 && this.words[this.length - 1] === 0) {
        this.length--;
      }
      return this._normSign();
    };
  
    BN.prototype._normSign = function _normSign () {
      // -0 = 0
      if (this.length === 1 && this.words[0] === 0) {
        this.negative = 0;
      }
      return this;
    };
  
    BN.prototype.inspect = function inspect () {
      return (this.red ? '<BN-R: ' : '<BN: ') + this.toString(16) + '>';
    };
  
    /*
  
    var zeros = [];
    var groupSizes = [];
    var groupBases = [];
  
    var s = '';
    var i = -1;
    while (++i < BN.wordSize) {
      zeros[i] = s;
      s += '0';
    }
    groupSizes[0] = 0;
    groupSizes[1] = 0;
    groupBases[0] = 0;
    groupBases[1] = 0;
    var base = 2 - 1;
    while (++base < 36 + 1) {
      var groupSize = 0;
      var groupBase = 1;
      while (groupBase < (1 << BN.wordSize) / base) {
        groupBase *= base;
        groupSize += 1;
      }
      groupSizes[base] = groupSize;
      groupBases[base] = groupBase;
    }
  
    */
  
    var zeros = [
      '',
      '0',
      '00',
      '000',
      '0000',
      '00000',
      '000000',
      '0000000',
      '00000000',
      '000000000',
      '0000000000',
      '00000000000',
      '000000000000',
      '0000000000000',
      '00000000000000',
      '000000000000000',
      '0000000000000000',
      '00000000000000000',
      '000000000000000000',
      '0000000000000000000',
      '00000000000000000000',
      '000000000000000000000',
      '0000000000000000000000',
      '00000000000000000000000',
      '000000000000000000000000',
      '0000000000000000000000000'
    ];
  
    var groupSizes = [
      0, 0,
      25, 16, 12, 11, 10, 9, 8,
      8, 7, 7, 7, 7, 6, 6,
      6, 6, 6, 6, 6, 5, 5,
      5, 5, 5, 5, 5, 5, 5,
      5, 5, 5, 5, 5, 5, 5
    ];
  
    var groupBases = [
      0, 0,
      33554432, 43046721, 16777216, 48828125, 60466176, 40353607, 16777216,
      43046721, 10000000, 19487171, 35831808, 62748517, 7529536, 11390625,
      16777216, 24137569, 34012224, 47045881, 64000000, 4084101, 5153632,
      6436343, 7962624, 9765625, 11881376, 14348907, 17210368, 20511149,
      24300000, 28629151, 33554432, 39135393, 45435424, 52521875, 60466176
    ];
  
    BN.prototype.toString = function toString (base, padding) {
      base = base || 10;
      padding = padding | 0 || 1;
  
      var out;
      if (base === 16 || base === 'hex') {
        out = '';
        var off = 0;
        var carry = 0;
        for (var i = 0; i < this.length; i++) {
          var w = this.words[i];
          var word = (((w << off) | carry) & 0xffffff).toString(16);
          carry = (w >>> (24 - off)) & 0xffffff;
          if (carry !== 0 || i !== this.length - 1) {
            out = zeros[6 - word.length] + word + out;
          } else {
            out = word + out;
          }
          off += 2;
          if (off >= 26) {
            off -= 26;
            i--;
          }
        }
        if (carry !== 0) {
          out = carry.toString(16) + out;
        }
        while (out.length % padding !== 0) {
          out = '0' + out;
        }
        if (this.negative !== 0) {
          out = '-' + out;
        }
        return out;
      }
  
      if (base === (base | 0) && base >= 2 && base <= 36) {
        // var groupSize = Math.floor(BN.wordSize * Math.LN2 / Math.log(base));
        var groupSize = groupSizes[base];
        // var groupBase = Math.pow(base, groupSize);
        var groupBase = groupBases[base];
        out = '';
        var c = this.clone();
        c.negative = 0;
        while (!c.isZero()) {
          var r = c.modn(groupBase).toString(base);
          c = c.idivn(groupBase);
  
          if (!c.isZero()) {
            out = zeros[groupSize - r.length] + r + out;
          } else {
            out = r + out;
          }
        }
        if (this.isZero()) {
          out = '0' + out;
        }
        while (out.length % padding !== 0) {
          out = '0' + out;
        }
        if (this.negative !== 0) {
          out = '-' + out;
        }
        return out;
      }
  
      assert(false, 'Base should be between 2 and 36');
    };
  
    BN.prototype.toNumber = function toNumber () {
      var ret = this.words[0];
      if (this.length === 2) {
        ret += this.words[1] * 0x4000000;
      } else if (this.length === 3 && this.words[2] === 0x01) {
        // NOTE: at this stage it is known that the top bit is set
        ret += 0x10000000000000 + (this.words[1] * 0x4000000);
      } else if (this.length > 2) {
        assert(false, 'Number can only safely store up to 53 bits');
      }
      return (this.negative !== 0) ? -ret : ret;
    };
  
    BN.prototype.toJSON = function toJSON () {
      return this.toString(16);
    };
  
    BN.prototype.toBuffer = function toBuffer (endian, length) {
      assert(typeof Buffer !== 'undefined');
      return this.toArrayLike(Buffer, endian, length);
    };
  
    BN.prototype.toArray = function toArray (endian, length) {
      return this.toArrayLike(Array, endian, length);
    };
  
    BN.prototype.toArrayLike = function toArrayLike (ArrayType, endian, length) {
      var byteLength = this.byteLength();
      var reqLength = length || Math.max(1, byteLength);
      assert(byteLength <= reqLength, 'byte array longer than desired length');
      assert(reqLength > 0, 'Requested array length <= 0');
  
      this.strip();
      var littleEndian = endian === 'le';
      var res = new ArrayType(reqLength);
  
      var b, i;
      var q = this.clone();
      if (!littleEndian) {
        // Assume big-endian
        for (i = 0; i < reqLength - byteLength; i++) {
          res[i] = 0;
        }
  
        for (i = 0; !q.isZero(); i++) {
          b = q.andln(0xff);
          q.iushrn(8);
  
          res[reqLength - i - 1] = b;
        }
      } else {
        for (i = 0; !q.isZero(); i++) {
          b = q.andln(0xff);
          q.iushrn(8);
  
          res[i] = b;
        }
  
        for (; i < reqLength; i++) {
          res[i] = 0;
        }
      }
  
      return res;
    };
  
    if (Math.clz32) {
      BN.prototype._countBits = function _countBits (w) {
        return 32 - Math.clz32(w);
      };
    } else {
      BN.prototype._countBits = function _countBits (w) {
        var t = w;
        var r = 0;
        if (t >= 0x1000) {
          r += 13;
          t >>>= 13;
        }
        if (t >= 0x40) {
          r += 7;
          t >>>= 7;
        }
        if (t >= 0x8) {
          r += 4;
          t >>>= 4;
        }
        if (t >= 0x02) {
          r += 2;
          t >>>= 2;
        }
        return r + t;
      };
    }
  
    BN.prototype._zeroBits = function _zeroBits (w) {
      // Short-cut
      if (w === 0) return 26;
  
      var t = w;
      var r = 0;
      if ((t & 0x1fff) === 0) {
        r += 13;
        t >>>= 13;
      }
      if ((t & 0x7f) === 0) {
        r += 7;
        t >>>= 7;
      }
      if ((t & 0xf) === 0) {
        r += 4;
        t >>>= 4;
      }
      if ((t & 0x3) === 0) {
        r += 2;
        t >>>= 2;
      }
      if ((t & 0x1) === 0) {
        r++;
      }
      return r;
    };
  
    // Return number of used bits in a BN
    BN.prototype.bitLength = function bitLength () {
      var w = this.words[this.length - 1];
      var hi = this._countBits(w);
      return (this.length - 1) * 26 + hi;
    };
  
    function toBitArray (num) {
      var w = new Array(num.bitLength());
  
      for (var bit = 0; bit < w.length; bit++) {
        var off = (bit / 26) | 0;
        var wbit = bit % 26;
  
        w[bit] = (num.words[off] & (1 << wbit)) >>> wbit;
      }
  
      return w;
    }
  
    // Number of trailing zero bits
    BN.prototype.zeroBits = function zeroBits () {
      if (this.isZero()) return 0;
  
      var r = 0;
      for (var i = 0; i < this.length; i++) {
        var b = this._zeroBits(this.words[i]);
        r += b;
        if (b !== 26) break;
      }
      return r;
    };
  
    BN.prototype.byteLength = function byteLength () {
      return Math.ceil(this.bitLength() / 8);
    };
  
    BN.prototype.toTwos = function toTwos (width) {
      if (this.negative !== 0) {
        return this.abs().inotn(width).iaddn(1);
      }
      return this.clone();
    };
  
    BN.prototype.fromTwos = function fromTwos (width) {
      if (this.testn(width - 1)) {
        return this.notn(width).iaddn(1).ineg();
      }
      return this.clone();
    };
  
    BN.prototype.isNeg = function isNeg () {
      return this.negative !== 0;
    };
  
    // Return negative clone of `this`
    BN.prototype.neg = function neg () {
      return this.clone().ineg();
    };
  
    BN.prototype.ineg = function ineg () {
      if (!this.isZero()) {
        this.negative ^= 1;
      }
  
      return this;
    };
  
    // Or `num` with `this` in-place
    BN.prototype.iuor = function iuor (num) {
      while (this.length < num.length) {
        this.words[this.length++] = 0;
      }
  
      for (var i = 0; i < num.length; i++) {
        this.words[i] = this.words[i] | num.words[i];
      }
  
      return this.strip();
    };
  
    BN.prototype.ior = function ior (num) {
      assert((this.negative | num.negative) === 0);
      return this.iuor(num);
    };
  
    // Or `num` with `this`
    BN.prototype.or = function or (num) {
      if (this.length > num.length) return this.clone().ior(num);
      return num.clone().ior(this);
    };
  
    BN.prototype.uor = function uor (num) {
      if (this.length > num.length) return this.clone().iuor(num);
      return num.clone().iuor(this);
    };
  
    // And `num` with `this` in-place
    BN.prototype.iuand = function iuand (num) {
      // b = min-length(num, this)
      var b;
      if (this.length > num.length) {
        b = num;
      } else {
        b = this;
      }
  
      for (var i = 0; i < b.length; i++) {
        this.words[i] = this.words[i] & num.words[i];
      }
  
      this.length = b.length;
  
      return this.strip();
    };
  
    BN.prototype.iand = function iand (num) {
      assert((this.negative | num.negative) === 0);
      return this.iuand(num);
    };
  
    // And `num` with `this`
    BN.prototype.and = function and (num) {
      if (this.length > num.length) return this.clone().iand(num);
      return num.clone().iand(this);
    };
  
    BN.prototype.uand = function uand (num) {
      if (this.length > num.length) return this.clone().iuand(num);
      return num.clone().iuand(this);
    };
  
    // Xor `num` with `this` in-place
    BN.prototype.iuxor = function iuxor (num) {
      // a.length > b.length
      var a;
      var b;
      if (this.length > num.length) {
        a = this;
        b = num;
      } else {
        a = num;
        b = this;
      }
  
      for (var i = 0; i < b.length; i++) {
        this.words[i] = a.words[i] ^ b.words[i];
      }
  
      if (this !== a) {
        for (; i < a.length; i++) {
          this.words[i] = a.words[i];
        }
      }
  
      this.length = a.length;
  
      return this.strip();
    };
  
    BN.prototype.ixor = function ixor (num) {
      assert((this.negative | num.negative) === 0);
      return this.iuxor(num);
    };
  
    // Xor `num` with `this`
    BN.prototype.xor = function xor (num) {
      if (this.length > num.length) return this.clone().ixor(num);
      return num.clone().ixor(this);
    };
  
    BN.prototype.uxor = function uxor (num) {
      if (this.length > num.length) return this.clone().iuxor(num);
      return num.clone().iuxor(this);
    };
  
    // Not ``this`` with ``width`` bitwidth
    BN.prototype.inotn = function inotn (width) {
      assert(typeof width === 'number' && width >= 0);
  
      var bytesNeeded = Math.ceil(width / 26) | 0;
      var bitsLeft = width % 26;
  
      // Extend the buffer with leading zeroes
      this._expand(bytesNeeded);
  
      if (bitsLeft > 0) {
        bytesNeeded--;
      }
  
      // Handle complete words
      for (var i = 0; i < bytesNeeded; i++) {
        this.words[i] = ~this.words[i] & 0x3ffffff;
      }
  
      // Handle the residue
      if (bitsLeft > 0) {
        this.words[i] = ~this.words[i] & (0x3ffffff >> (26 - bitsLeft));
      }
  
      // And remove leading zeroes
      return this.strip();
    };
  
    BN.prototype.notn = function notn (width) {
      return this.clone().inotn(width);
    };
  
    // Set `bit` of `this`
    BN.prototype.setn = function setn (bit, val) {
      assert(typeof bit === 'number' && bit >= 0);
  
      var off = (bit / 26) | 0;
      var wbit = bit % 26;
  
      this._expand(off + 1);
  
      if (val) {
        this.words[off] = this.words[off] | (1 << wbit);
      } else {
        this.words[off] = this.words[off] & ~(1 << wbit);
      }
  
      return this.strip();
    };
  
    // Add `num` to `this` in-place
    BN.prototype.iadd = function iadd (num) {
      var r;
  
      // negative + positive
      if (this.negative !== 0 && num.negative === 0) {
        this.negative = 0;
        r = this.isub(num);
        this.negative ^= 1;
        return this._normSign();
  
      // positive + negative
      } else if (this.negative === 0 && num.negative !== 0) {
        num.negative = 0;
        r = this.isub(num);
        num.negative = 1;
        return r._normSign();
      }
  
      // a.length > b.length
      var a, b;
      if (this.length > num.length) {
        a = this;
        b = num;
      } else {
        a = num;
        b = this;
      }
  
      var carry = 0;
      for (var i = 0; i < b.length; i++) {
        r = (a.words[i] | 0) + (b.words[i] | 0) + carry;
        this.words[i] = r & 0x3ffffff;
        carry = r >>> 26;
      }
      for (; carry !== 0 && i < a.length; i++) {
        r = (a.words[i] | 0) + carry;
        this.words[i] = r & 0x3ffffff;
        carry = r >>> 26;
      }
  
      this.length = a.length;
      if (carry !== 0) {
        this.words[this.length] = carry;
        this.length++;
      // Copy the rest of the words
      } else if (a !== this) {
        for (; i < a.length; i++) {
          this.words[i] = a.words[i];
        }
      }
  
      return this;
    };
  
    // Add `num` to `this`
    BN.prototype.add = function add (num) {
      var res;
      if (num.negative !== 0 && this.negative === 0) {
        num.negative = 0;
        res = this.sub(num);
        num.negative ^= 1;
        return res;
      } else if (num.negative === 0 && this.negative !== 0) {
        this.negative = 0;
        res = num.sub(this);
        this.negative = 1;
        return res;
      }
  
      if (this.length > num.length) return this.clone().iadd(num);
  
      return num.clone().iadd(this);
    };
  
    // Subtract `num` from `this` in-place
    BN.prototype.isub = function isub (num) {
      // this - (-num) = this + num
      if (num.negative !== 0) {
        num.negative = 0;
        var r = this.iadd(num);
        num.negative = 1;
        return r._normSign();
  
      // -this - num = -(this + num)
      } else if (this.negative !== 0) {
        this.negative = 0;
        this.iadd(num);
        this.negative = 1;
        return this._normSign();
      }
  
      // At this point both numbers are positive
      var cmp = this.cmp(num);
  
      // Optimization - zeroify
      if (cmp === 0) {
        this.negative = 0;
        this.length = 1;
        this.words[0] = 0;
        return this;
      }
  
      // a > b
      var a, b;
      if (cmp > 0) {
        a = this;
        b = num;
      } else {
        a = num;
        b = this;
      }
  
      var carry = 0;
      for (var i = 0; i < b.length; i++) {
        r = (a.words[i] | 0) - (b.words[i] | 0) + carry;
        carry = r >> 26;
        this.words[i] = r & 0x3ffffff;
      }
      for (; carry !== 0 && i < a.length; i++) {
        r = (a.words[i] | 0) + carry;
        carry = r >> 26;
        this.words[i] = r & 0x3ffffff;
      }
  
      // Copy rest of the words
      if (carry === 0 && i < a.length && a !== this) {
        for (; i < a.length; i++) {
          this.words[i] = a.words[i];
        }
      }
  
      this.length = Math.max(this.length, i);
  
      if (a !== this) {
        this.negative = 1;
      }
  
      return this.strip();
    };
  
    // Subtract `num` from `this`
    BN.prototype.sub = function sub (num) {
      return this.clone().isub(num);
    };
  
    function smallMulTo (self, num, out) {
      out.negative = num.negative ^ self.negative;
      var len = (self.length + num.length) | 0;
      out.length = len;
      len = (len - 1) | 0;
  
      // Peel one iteration (compiler can't do it, because of code complexity)
      var a = self.words[0] | 0;
      var b = num.words[0] | 0;
      var r = a * b;
  
      var lo = r & 0x3ffffff;
      var carry = (r / 0x4000000) | 0;
      out.words[0] = lo;
  
      for (var k = 1; k < len; k++) {
        // Sum all words with the same `i + j = k` and accumulate `ncarry`,
        // note that ncarry could be >= 0x3ffffff
        var ncarry = carry >>> 26;
        var rword = carry & 0x3ffffff;
        var maxJ = Math.min(k, num.length - 1);
        for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {
          var i = (k - j) | 0;
          a = self.words[i] | 0;
          b = num.words[j] | 0;
          r = a * b + rword;
          ncarry += (r / 0x4000000) | 0;
          rword = r & 0x3ffffff;
        }
        out.words[k] = rword | 0;
        carry = ncarry | 0;
      }
      if (carry !== 0) {
        out.words[k] = carry | 0;
      } else {
        out.length--;
      }
  
      return out.strip();
    }
  
    // TODO(indutny): it may be reasonable to omit it for users who don't need
    // to work with 256-bit numbers, otherwise it gives 20% improvement for 256-bit
    // multiplication (like elliptic secp256k1).
    var comb10MulTo = function comb10MulTo (self, num, out) {
      var a = self.words;
      var b = num.words;
      var o = out.words;
      var c = 0;
      var lo;
      var mid;
      var hi;
      var a0 = a[0] | 0;
      var al0 = a0 & 0x1fff;
      var ah0 = a0 >>> 13;
      var a1 = a[1] | 0;
      var al1 = a1 & 0x1fff;
      var ah1 = a1 >>> 13;
      var a2 = a[2] | 0;
      var al2 = a2 & 0x1fff;
      var ah2 = a2 >>> 13;
      var a3 = a[3] | 0;
      var al3 = a3 & 0x1fff;
      var ah3 = a3 >>> 13;
      var a4 = a[4] | 0;
      var al4 = a4 & 0x1fff;
      var ah4 = a4 >>> 13;
      var a5 = a[5] | 0;
      var al5 = a5 & 0x1fff;
      var ah5 = a5 >>> 13;
      var a6 = a[6] | 0;
      var al6 = a6 & 0x1fff;
      var ah6 = a6 >>> 13;
      var a7 = a[7] | 0;
      var al7 = a7 & 0x1fff;
      var ah7 = a7 >>> 13;
      var a8 = a[8] | 0;
      var al8 = a8 & 0x1fff;
      var ah8 = a8 >>> 13;
      var a9 = a[9] | 0;
      var al9 = a9 & 0x1fff;
      var ah9 = a9 >>> 13;
      var b0 = b[0] | 0;
      var bl0 = b0 & 0x1fff;
      var bh0 = b0 >>> 13;
      var b1 = b[1] | 0;
      var bl1 = b1 & 0x1fff;
      var bh1 = b1 >>> 13;
      var b2 = b[2] | 0;
      var bl2 = b2 & 0x1fff;
      var bh2 = b2 >>> 13;
      var b3 = b[3] | 0;
      var bl3 = b3 & 0x1fff;
      var bh3 = b3 >>> 13;
      var b4 = b[4] | 0;
      var bl4 = b4 & 0x1fff;
      var bh4 = b4 >>> 13;
      var b5 = b[5] | 0;
      var bl5 = b5 & 0x1fff;
      var bh5 = b5 >>> 13;
      var b6 = b[6] | 0;
      var bl6 = b6 & 0x1fff;
      var bh6 = b6 >>> 13;
      var b7 = b[7] | 0;
      var bl7 = b7 & 0x1fff;
      var bh7 = b7 >>> 13;
      var b8 = b[8] | 0;
      var bl8 = b8 & 0x1fff;
      var bh8 = b8 >>> 13;
      var b9 = b[9] | 0;
      var bl9 = b9 & 0x1fff;
      var bh9 = b9 >>> 13;
  
      out.negative = self.negative ^ num.negative;
      out.length = 19;
      /* k = 0 */
      lo = Math.imul(al0, bl0);
      mid = Math.imul(al0, bh0);
      mid = (mid + Math.imul(ah0, bl0)) | 0;
      hi = Math.imul(ah0, bh0);
      var w0 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
      c = (((hi + (mid >>> 13)) | 0) + (w0 >>> 26)) | 0;
      w0 &= 0x3ffffff;
      /* k = 1 */
      lo = Math.imul(al1, bl0);
      mid = Math.imul(al1, bh0);
      mid = (mid + Math.imul(ah1, bl0)) | 0;
      hi = Math.imul(ah1, bh0);
      lo = (lo + Math.imul(al0, bl1)) | 0;
      mid = (mid + Math.imul(al0, bh1)) | 0;
      mid = (mid + Math.imul(ah0, bl1)) | 0;
      hi = (hi + Math.imul(ah0, bh1)) | 0;
      var w1 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
      c = (((hi + (mid >>> 13)) | 0) + (w1 >>> 26)) | 0;
      w1 &= 0x3ffffff;
      /* k = 2 */
      lo = Math.imul(al2, bl0);
      mid = Math.imul(al2, bh0);
      mid = (mid + Math.imul(ah2, bl0)) | 0;
      hi = Math.imul(ah2, bh0);
      lo = (lo + Math.imul(al1, bl1)) | 0;
      mid = (mid + Math.imul(al1, bh1)) | 0;
      mid = (mid + Math.imul(ah1, bl1)) | 0;
      hi = (hi + Math.imul(ah1, bh1)) | 0;
      lo = (lo + Math.imul(al0, bl2)) | 0;
      mid = (mid + Math.imul(al0, bh2)) | 0;
      mid = (mid + Math.imul(ah0, bl2)) | 0;
      hi = (hi + Math.imul(ah0, bh2)) | 0;
      var w2 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
      c = (((hi + (mid >>> 13)) | 0) + (w2 >>> 26)) | 0;
      w2 &= 0x3ffffff;
      /* k = 3 */
      lo = Math.imul(al3, bl0);
      mid = Math.imul(al3, bh0);
      mid = (mid + Math.imul(ah3, bl0)) | 0;
      hi = Math.imul(ah3, bh0);
      lo = (lo + Math.imul(al2, bl1)) | 0;
      mid = (mid + Math.imul(al2, bh1)) | 0;
      mid = (mid + Math.imul(ah2, bl1)) | 0;
      hi = (hi + Math.imul(ah2, bh1)) | 0;
      lo = (lo + Math.imul(al1, bl2)) | 0;
      mid = (mid + Math.imul(al1, bh2)) | 0;
      mid = (mid + Math.imul(ah1, bl2)) | 0;
      hi = (hi + Math.imul(ah1, bh2)) | 0;
      lo = (lo + Math.imul(al0, bl3)) | 0;
      mid = (mid + Math.imul(al0, bh3)) | 0;
      mid = (mid + Math.imul(ah0, bl3)) | 0;
      hi = (hi + Math.imul(ah0, bh3)) | 0;
      var w3 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
      c = (((hi + (mid >>> 13)) | 0) + (w3 >>> 26)) | 0;
      w3 &= 0x3ffffff;
      /* k = 4 */
      lo = Math.imul(al4, bl0);
      mid = Math.imul(al4, bh0);
      mid = (mid + Math.imul(ah4, bl0)) | 0;
      hi = Math.imul(ah4, bh0);
      lo = (lo + Math.imul(al3, bl1)) | 0;
      mid = (mid + Math.imul(al3, bh1)) | 0;
      mid = (mid + Math.imul(ah3, bl1)) | 0;
      hi = (hi + Math.imul(ah3, bh1)) | 0;
      lo = (lo + Math.imul(al2, bl2)) | 0;
      mid = (mid + Math.imul(al2, bh2)) | 0;
      mid = (mid + Math.imul(ah2, bl2)) | 0;
      hi = (hi + Math.imul(ah2, bh2)) | 0;
      lo = (lo + Math.imul(al1, bl3)) | 0;
      mid = (mid + Math.imul(al1, bh3)) | 0;
      mid = (mid + Math.imul(ah1, bl3)) | 0;
      hi = (hi + Math.imul(ah1, bh3)) | 0;
      lo = (lo + Math.imul(al0, bl4)) | 0;
      mid = (mid + Math.imul(al0, bh4)) | 0;
      mid = (mid + Math.imul(ah0, bl4)) | 0;
      hi = (hi + Math.imul(ah0, bh4)) | 0;
      var w4 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
      c = (((hi + (mid >>> 13)) | 0) + (w4 >>> 26)) | 0;
      w4 &= 0x3ffffff;
      /* k = 5 */
      lo = Math.imul(al5, bl0);
      mid = Math.imul(al5, bh0);
      mid = (mid + Math.imul(ah5, bl0)) | 0;
      hi = Math.imul(ah5, bh0);
      lo = (lo + Math.imul(al4, bl1)) | 0;
      mid = (mid + Math.imul(al4, bh1)) | 0;
      mid = (mid + Math.imul(ah4, bl1)) | 0;
      hi = (hi + Math.imul(ah4, bh1)) | 0;
      lo = (lo + Math.imul(al3, bl2)) | 0;
      mid = (mid + Math.imul(al3, bh2)) | 0;
      mid = (mid + Math.imul(ah3, bl2)) | 0;
      hi = (hi + Math.imul(ah3, bh2)) | 0;
      lo = (lo + Math.imul(al2, bl3)) | 0;
      mid = (mid + Math.imul(al2, bh3)) | 0;
      mid = (mid + Math.imul(ah2, bl3)) | 0;
      hi = (hi + Math.imul(ah2, bh3)) | 0;
      lo = (lo + Math.imul(al1, bl4)) | 0;
      mid = (mid + Math.imul(al1, bh4)) | 0;
      mid = (mid + Math.imul(ah1, bl4)) | 0;
      hi = (hi + Math.imul(ah1, bh4)) | 0;
      lo = (lo + Math.imul(al0, bl5)) | 0;
      mid = (mid + Math.imul(al0, bh5)) | 0;
      mid = (mid + Math.imul(ah0, bl5)) | 0;
      hi = (hi + Math.imul(ah0, bh5)) | 0;
      var w5 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
      c = (((hi + (mid >>> 13)) | 0) + (w5 >>> 26)) | 0;
      w5 &= 0x3ffffff;
      /* k = 6 */
      lo = Math.imul(al6, bl0);
      mid = Math.imul(al6, bh0);
      mid = (mid + Math.imul(ah6, bl0)) | 0;
      hi = Math.imul(ah6, bh0);
      lo = (lo + Math.imul(al5, bl1)) | 0;
      mid = (mid + Math.imul(al5, bh1)) | 0;
      mid = (mid + Math.imul(ah5, bl1)) | 0;
      hi = (hi + Math.imul(ah5, bh1)) | 0;
      lo = (lo + Math.imul(al4, bl2)) | 0;
      mid = (mid + Math.imul(al4, bh2)) | 0;
      mid = (mid + Math.imul(ah4, bl2)) | 0;
      hi = (hi + Math.imul(ah4, bh2)) | 0;
      lo = (lo + Math.imul(al3, bl3)) | 0;
      mid = (mid + Math.imul(al3, bh3)) | 0;
      mid = (mid + Math.imul(ah3, bl3)) | 0;
      hi = (hi + Math.imul(ah3, bh3)) | 0;
      lo = (lo + Math.imul(al2, bl4)) | 0;
      mid = (mid + Math.imul(al2, bh4)) | 0;
      mid = (mid + Math.imul(ah2, bl4)) | 0;
      hi = (hi + Math.imul(ah2, bh4)) | 0;
      lo = (lo + Math.imul(al1, bl5)) | 0;
      mid = (mid + Math.imul(al1, bh5)) | 0;
      mid = (mid + Math.imul(ah1, bl5)) | 0;
      hi = (hi + Math.imul(ah1, bh5)) | 0;
      lo = (lo + Math.imul(al0, bl6)) | 0;
      mid = (mid + Math.imul(al0, bh6)) | 0;
      mid = (mid + Math.imul(ah0, bl6)) | 0;
      hi = (hi + Math.imul(ah0, bh6)) | 0;
      var w6 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
      c = (((hi + (mid >>> 13)) | 0) + (w6 >>> 26)) | 0;
      w6 &= 0x3ffffff;
      /* k = 7 */
      lo = Math.imul(al7, bl0);
      mid = Math.imul(al7, bh0);
      mid = (mid + Math.imul(ah7, bl0)) | 0;
      hi = Math.imul(ah7, bh0);
      lo = (lo + Math.imul(al6, bl1)) | 0;
      mid = (mid + Math.imul(al6, bh1)) | 0;
      mid = (mid + Math.imul(ah6, bl1)) | 0;
      hi = (hi + Math.imul(ah6, bh1)) | 0;
      lo = (lo + Math.imul(al5, bl2)) | 0;
      mid = (mid + Math.imul(al5, bh2)) | 0;
      mid = (mid + Math.imul(ah5, bl2)) | 0;
      hi = (hi + Math.imul(ah5, bh2)) | 0;
      lo = (lo + Math.imul(al4, bl3)) | 0;
      mid = (mid + Math.imul(al4, bh3)) | 0;
      mid = (mid + Math.imul(ah4, bl3)) | 0;
      hi = (hi + Math.imul(ah4, bh3)) | 0;
      lo = (lo + Math.imul(al3, bl4)) | 0;
      mid = (mid + Math.imul(al3, bh4)) | 0;
      mid = (mid + Math.imul(ah3, bl4)) | 0;
      hi = (hi + Math.imul(ah3, bh4)) | 0;
      lo = (lo + Math.imul(al2, bl5)) | 0;
      mid = (mid + Math.imul(al2, bh5)) | 0;
      mid = (mid + Math.imul(ah2, bl5)) | 0;
      hi = (hi + Math.imul(ah2, bh5)) | 0;
      lo = (lo + Math.imul(al1, bl6)) | 0;
      mid = (mid + Math.imul(al1, bh6)) | 0;
      mid = (mid + Math.imul(ah1, bl6)) | 0;
      hi = (hi + Math.imul(ah1, bh6)) | 0;
      lo = (lo + Math.imul(al0, bl7)) | 0;
      mid = (mid + Math.imul(al0, bh7)) | 0;
      mid = (mid + Math.imul(ah0, bl7)) | 0;
      hi = (hi + Math.imul(ah0, bh7)) | 0;
      var w7 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
      c = (((hi + (mid >>> 13)) | 0) + (w7 >>> 26)) | 0;
      w7 &= 0x3ffffff;
      /* k = 8 */
      lo = Math.imul(al8, bl0);
      mid = Math.imul(al8, bh0);
      mid = (mid + Math.imul(ah8, bl0)) | 0;
      hi = Math.imul(ah8, bh0);
      lo = (lo + Math.imul(al7, bl1)) | 0;
      mid = (mid + Math.imul(al7, bh1)) | 0;
      mid = (mid + Math.imul(ah7, bl1)) | 0;
      hi = (hi + Math.imul(ah7, bh1)) | 0;
      lo = (lo + Math.imul(al6, bl2)) | 0;
      mid = (mid + Math.imul(al6, bh2)) | 0;
      mid = (mid + Math.imul(ah6, bl2)) | 0;
      hi = (hi + Math.imul(ah6, bh2)) | 0;
      lo = (lo + Math.imul(al5, bl3)) | 0;
      mid = (mid + Math.imul(al5, bh3)) | 0;
      mid = (mid + Math.imul(ah5, bl3)) | 0;
      hi = (hi + Math.imul(ah5, bh3)) | 0;
      lo = (lo + Math.imul(al4, bl4)) | 0;
      mid = (mid + Math.imul(al4, bh4)) | 0;
      mid = (mid + Math.imul(ah4, bl4)) | 0;
      hi = (hi + Math.imul(ah4, bh4)) | 0;
      lo = (lo + Math.imul(al3, bl5)) | 0;
      mid = (mid + Math.imul(al3, bh5)) | 0;
      mid = (mid + Math.imul(ah3, bl5)) | 0;
      hi = (hi + Math.imul(ah3, bh5)) | 0;
      lo = (lo + Math.imul(al2, bl6)) | 0;
      mid = (mid + Math.imul(al2, bh6)) | 0;
      mid = (mid + Math.imul(ah2, bl6)) | 0;
      hi = (hi + Math.imul(ah2, bh6)) | 0;
      lo = (lo + Math.imul(al1, bl7)) | 0;
      mid = (mid + Math.imul(al1, bh7)) | 0;
      mid = (mid + Math.imul(ah1, bl7)) | 0;
      hi = (hi + Math.imul(ah1, bh7)) | 0;
      lo = (lo + Math.imul(al0, bl8)) | 0;
      mid = (mid + Math.imul(al0, bh8)) | 0;
      mid = (mid + Math.imul(ah0, bl8)) | 0;
      hi = (hi + Math.imul(ah0, bh8)) | 0;
      var w8 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
      c = (((hi + (mid >>> 13)) | 0) + (w8 >>> 26)) | 0;
      w8 &= 0x3ffffff;
      /* k = 9 */
      lo = Math.imul(al9, bl0);
      mid = Math.imul(al9, bh0);
      mid = (mid + Math.imul(ah9, bl0)) | 0;
      hi = Math.imul(ah9, bh0);
      lo = (lo + Math.imul(al8, bl1)) | 0;
      mid = (mid + Math.imul(al8, bh1)) | 0;
      mid = (mid + Math.imul(ah8, bl1)) | 0;
      hi = (hi + Math.imul(ah8, bh1)) | 0;
      lo = (lo + Math.imul(al7, bl2)) | 0;
      mid = (mid + Math.imul(al7, bh2)) | 0;
      mid = (mid + Math.imul(ah7, bl2)) | 0;
      hi = (hi + Math.imul(ah7, bh2)) | 0;
      lo = (lo + Math.imul(al6, bl3)) | 0;
      mid = (mid + Math.imul(al6, bh3)) | 0;
      mid = (mid + Math.imul(ah6, bl3)) | 0;
      hi = (hi + Math.imul(ah6, bh3)) | 0;
      lo = (lo + Math.imul(al5, bl4)) | 0;
      mid = (mid + Math.imul(al5, bh4)) | 0;
      mid = (mid + Math.imul(ah5, bl4)) | 0;
      hi = (hi + Math.imul(ah5, bh4)) | 0;
      lo = (lo + Math.imul(al4, bl5)) | 0;
      mid = (mid + Math.imul(al4, bh5)) | 0;
      mid = (mid + Math.imul(ah4, bl5)) | 0;
      hi = (hi + Math.imul(ah4, bh5)) | 0;
      lo = (lo + Math.imul(al3, bl6)) | 0;
      mid = (mid + Math.imul(al3, bh6)) | 0;
      mid = (mid + Math.imul(ah3, bl6)) | 0;
      hi = (hi + Math.imul(ah3, bh6)) | 0;
      lo = (lo + Math.imul(al2, bl7)) | 0;
      mid = (mid + Math.imul(al2, bh7)) | 0;
      mid = (mid + Math.imul(ah2, bl7)) | 0;
      hi = (hi + Math.imul(ah2, bh7)) | 0;
      lo = (lo + Math.imul(al1, bl8)) | 0;
      mid = (mid + Math.imul(al1, bh8)) | 0;
      mid = (mid + Math.imul(ah1, bl8)) | 0;
      hi = (hi + Math.imul(ah1, bh8)) | 0;
      lo = (lo + Math.imul(al0, bl9)) | 0;
      mid = (mid + Math.imul(al0, bh9)) | 0;
      mid = (mid + Math.imul(ah0, bl9)) | 0;
      hi = (hi + Math.imul(ah0, bh9)) | 0;
      var w9 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
      c = (((hi + (mid >>> 13)) | 0) + (w9 >>> 26)) | 0;
      w9 &= 0x3ffffff;
      /* k = 10 */
      lo = Math.imul(al9, bl1);
      mid = Math.imul(al9, bh1);
      mid = (mid + Math.imul(ah9, bl1)) | 0;
      hi = Math.imul(ah9, bh1);
      lo = (lo + Math.imul(al8, bl2)) | 0;
      mid = (mid + Math.imul(al8, bh2)) | 0;
      mid = (mid + Math.imul(ah8, bl2)) | 0;
      hi = (hi + Math.imul(ah8, bh2)) | 0;
      lo = (lo + Math.imul(al7, bl3)) | 0;
      mid = (mid + Math.imul(al7, bh3)) | 0;
      mid = (mid + Math.imul(ah7, bl3)) | 0;
      hi = (hi + Math.imul(ah7, bh3)) | 0;
      lo = (lo + Math.imul(al6, bl4)) | 0;
      mid = (mid + Math.imul(al6, bh4)) | 0;
      mid = (mid + Math.imul(ah6, bl4)) | 0;
      hi = (hi + Math.imul(ah6, bh4)) | 0;
      lo = (lo + Math.imul(al5, bl5)) | 0;
      mid = (mid + Math.imul(al5, bh5)) | 0;
      mid = (mid + Math.imul(ah5, bl5)) | 0;
      hi = (hi + Math.imul(ah5, bh5)) | 0;
      lo = (lo + Math.imul(al4, bl6)) | 0;
      mid = (mid + Math.imul(al4, bh6)) | 0;
      mid = (mid + Math.imul(ah4, bl6)) | 0;
      hi = (hi + Math.imul(ah4, bh6)) | 0;
      lo = (lo + Math.imul(al3, bl7)) | 0;
      mid = (mid + Math.imul(al3, bh7)) | 0;
      mid = (mid + Math.imul(ah3, bl7)) | 0;
      hi = (hi + Math.imul(ah3, bh7)) | 0;
      lo = (lo + Math.imul(al2, bl8)) | 0;
      mid = (mid + Math.imul(al2, bh8)) | 0;
      mid = (mid + Math.imul(ah2, bl8)) | 0;
      hi = (hi + Math.imul(ah2, bh8)) | 0;
      lo = (lo + Math.imul(al1, bl9)) | 0;
      mid = (mid + Math.imul(al1, bh9)) | 0;
      mid = (mid + Math.imul(ah1, bl9)) | 0;
      hi = (hi + Math.imul(ah1, bh9)) | 0;
      var w10 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
      c = (((hi + (mid >>> 13)) | 0) + (w10 >>> 26)) | 0;
      w10 &= 0x3ffffff;
      /* k = 11 */
      lo = Math.imul(al9, bl2);
      mid = Math.imul(al9, bh2);
      mid = (mid + Math.imul(ah9, bl2)) | 0;
      hi = Math.imul(ah9, bh2);
      lo = (lo + Math.imul(al8, bl3)) | 0;
      mid = (mid + Math.imul(al8, bh3)) | 0;
      mid = (mid + Math.imul(ah8, bl3)) | 0;
      hi = (hi + Math.imul(ah8, bh3)) | 0;
      lo = (lo + Math.imul(al7, bl4)) | 0;
      mid = (mid + Math.imul(al7, bh4)) | 0;
      mid = (mid + Math.imul(ah7, bl4)) | 0;
      hi = (hi + Math.imul(ah7, bh4)) | 0;
      lo = (lo + Math.imul(al6, bl5)) | 0;
      mid = (mid + Math.imul(al6, bh5)) | 0;
      mid = (mid + Math.imul(ah6, bl5)) | 0;
      hi = (hi + Math.imul(ah6, bh5)) | 0;
      lo = (lo + Math.imul(al5, bl6)) | 0;
      mid = (mid + Math.imul(al5, bh6)) | 0;
      mid = (mid + Math.imul(ah5, bl6)) | 0;
      hi = (hi + Math.imul(ah5, bh6)) | 0;
      lo = (lo + Math.imul(al4, bl7)) | 0;
      mid = (mid + Math.imul(al4, bh7)) | 0;
      mid = (mid + Math.imul(ah4, bl7)) | 0;
      hi = (hi + Math.imul(ah4, bh7)) | 0;
      lo = (lo + Math.imul(al3, bl8)) | 0;
      mid = (mid + Math.imul(al3, bh8)) | 0;
      mid = (mid + Math.imul(ah3, bl8)) | 0;
      hi = (hi + Math.imul(ah3, bh8)) | 0;
      lo = (lo + Math.imul(al2, bl9)) | 0;
      mid = (mid + Math.imul(al2, bh9)) | 0;
      mid = (mid + Math.imul(ah2, bl9)) | 0;
      hi = (hi + Math.imul(ah2, bh9)) | 0;
      var w11 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
      c = (((hi + (mid >>> 13)) | 0) + (w11 >>> 26)) | 0;
      w11 &= 0x3ffffff;
      /* k = 12 */
      lo = Math.imul(al9, bl3);
      mid = Math.imul(al9, bh3);
      mid = (mid + Math.imul(ah9, bl3)) | 0;
      hi = Math.imul(ah9, bh3);
      lo = (lo + Math.imul(al8, bl4)) | 0;
      mid = (mid + Math.imul(al8, bh4)) | 0;
      mid = (mid + Math.imul(ah8, bl4)) | 0;
      hi = (hi + Math.imul(ah8, bh4)) | 0;
      lo = (lo + Math.imul(al7, bl5)) | 0;
      mid = (mid + Math.imul(al7, bh5)) | 0;
      mid = (mid + Math.imul(ah7, bl5)) | 0;
      hi = (hi + Math.imul(ah7, bh5)) | 0;
      lo = (lo + Math.imul(al6, bl6)) | 0;
      mid = (mid + Math.imul(al6, bh6)) | 0;
      mid = (mid + Math.imul(ah6, bl6)) | 0;
      hi = (hi + Math.imul(ah6, bh6)) | 0;
      lo = (lo + Math.imul(al5, bl7)) | 0;
      mid = (mid + Math.imul(al5, bh7)) | 0;
      mid = (mid + Math.imul(ah5, bl7)) | 0;
      hi = (hi + Math.imul(ah5, bh7)) | 0;
      lo = (lo + Math.imul(al4, bl8)) | 0;
      mid = (mid + Math.imul(al4, bh8)) | 0;
      mid = (mid + Math.imul(ah4, bl8)) | 0;
      hi = (hi + Math.imul(ah4, bh8)) | 0;
      lo = (lo + Math.imul(al3, bl9)) | 0;
      mid = (mid + Math.imul(al3, bh9)) | 0;
      mid = (mid + Math.imul(ah3, bl9)) | 0;
      hi = (hi + Math.imul(ah3, bh9)) | 0;
      var w12 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
      c = (((hi + (mid >>> 13)) | 0) + (w12 >>> 26)) | 0;
      w12 &= 0x3ffffff;
      /* k = 13 */
      lo = Math.imul(al9, bl4);
      mid = Math.imul(al9, bh4);
      mid = (mid + Math.imul(ah9, bl4)) | 0;
      hi = Math.imul(ah9, bh4);
      lo = (lo + Math.imul(al8, bl5)) | 0;
      mid = (mid + Math.imul(al8, bh5)) | 0;
      mid = (mid + Math.imul(ah8, bl5)) | 0;
      hi = (hi + Math.imul(ah8, bh5)) | 0;
      lo = (lo + Math.imul(al7, bl6)) | 0;
      mid = (mid + Math.imul(al7, bh6)) | 0;
      mid = (mid + Math.imul(ah7, bl6)) | 0;
      hi = (hi + Math.imul(ah7, bh6)) | 0;
      lo = (lo + Math.imul(al6, bl7)) | 0;
      mid = (mid + Math.imul(al6, bh7)) | 0;
      mid = (mid + Math.imul(ah6, bl7)) | 0;
      hi = (hi + Math.imul(ah6, bh7)) | 0;
      lo = (lo + Math.imul(al5, bl8)) | 0;
      mid = (mid + Math.imul(al5, bh8)) | 0;
      mid = (mid + Math.imul(ah5, bl8)) | 0;
      hi = (hi + Math.imul(ah5, bh8)) | 0;
      lo = (lo + Math.imul(al4, bl9)) | 0;
      mid = (mid + Math.imul(al4, bh9)) | 0;
      mid = (mid + Math.imul(ah4, bl9)) | 0;
      hi = (hi + Math.imul(ah4, bh9)) | 0;
      var w13 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
      c = (((hi + (mid >>> 13)) | 0) + (w13 >>> 26)) | 0;
      w13 &= 0x3ffffff;
      /* k = 14 */
      lo = Math.imul(al9, bl5);
      mid = Math.imul(al9, bh5);
      mid = (mid + Math.imul(ah9, bl5)) | 0;
      hi = Math.imul(ah9, bh5);
      lo = (lo + Math.imul(al8, bl6)) | 0;
      mid = (mid + Math.imul(al8, bh6)) | 0;
      mid = (mid + Math.imul(ah8, bl6)) | 0;
      hi = (hi + Math.imul(ah8, bh6)) | 0;
      lo = (lo + Math.imul(al7, bl7)) | 0;
      mid = (mid + Math.imul(al7, bh7)) | 0;
      mid = (mid + Math.imul(ah7, bl7)) | 0;
      hi = (hi + Math.imul(ah7, bh7)) | 0;
      lo = (lo + Math.imul(al6, bl8)) | 0;
      mid = (mid + Math.imul(al6, bh8)) | 0;
      mid = (mid + Math.imul(ah6, bl8)) | 0;
      hi = (hi + Math.imul(ah6, bh8)) | 0;
      lo = (lo + Math.imul(al5, bl9)) | 0;
      mid = (mid + Math.imul(al5, bh9)) | 0;
      mid = (mid + Math.imul(ah5, bl9)) | 0;
      hi = (hi + Math.imul(ah5, bh9)) | 0;
      var w14 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
      c = (((hi + (mid >>> 13)) | 0) + (w14 >>> 26)) | 0;
      w14 &= 0x3ffffff;
      /* k = 15 */
      lo = Math.imul(al9, bl6);
      mid = Math.imul(al9, bh6);
      mid = (mid + Math.imul(ah9, bl6)) | 0;
      hi = Math.imul(ah9, bh6);
      lo = (lo + Math.imul(al8, bl7)) | 0;
      mid = (mid + Math.imul(al8, bh7)) | 0;
      mid = (mid + Math.imul(ah8, bl7)) | 0;
      hi = (hi + Math.imul(ah8, bh7)) | 0;
      lo = (lo + Math.imul(al7, bl8)) | 0;
      mid = (mid + Math.imul(al7, bh8)) | 0;
      mid = (mid + Math.imul(ah7, bl8)) | 0;
      hi = (hi + Math.imul(ah7, bh8)) | 0;
      lo = (lo + Math.imul(al6, bl9)) | 0;
      mid = (mid + Math.imul(al6, bh9)) | 0;
      mid = (mid + Math.imul(ah6, bl9)) | 0;
      hi = (hi + Math.imul(ah6, bh9)) | 0;
      var w15 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
      c = (((hi + (mid >>> 13)) | 0) + (w15 >>> 26)) | 0;
      w15 &= 0x3ffffff;
      /* k = 16 */
      lo = Math.imul(al9, bl7);
      mid = Math.imul(al9, bh7);
      mid = (mid + Math.imul(ah9, bl7)) | 0;
      hi = Math.imul(ah9, bh7);
      lo = (lo + Math.imul(al8, bl8)) | 0;
      mid = (mid + Math.imul(al8, bh8)) | 0;
      mid = (mid + Math.imul(ah8, bl8)) | 0;
      hi = (hi + Math.imul(ah8, bh8)) | 0;
      lo = (lo + Math.imul(al7, bl9)) | 0;
      mid = (mid + Math.imul(al7, bh9)) | 0;
      mid = (mid + Math.imul(ah7, bl9)) | 0;
      hi = (hi + Math.imul(ah7, bh9)) | 0;
      var w16 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
      c = (((hi + (mid >>> 13)) | 0) + (w16 >>> 26)) | 0;
      w16 &= 0x3ffffff;
      /* k = 17 */
      lo = Math.imul(al9, bl8);
      mid = Math.imul(al9, bh8);
      mid = (mid + Math.imul(ah9, bl8)) | 0;
      hi = Math.imul(ah9, bh8);
      lo = (lo + Math.imul(al8, bl9)) | 0;
      mid = (mid + Math.imul(al8, bh9)) | 0;
      mid = (mid + Math.imul(ah8, bl9)) | 0;
      hi = (hi + Math.imul(ah8, bh9)) | 0;
      var w17 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
      c = (((hi + (mid >>> 13)) | 0) + (w17 >>> 26)) | 0;
      w17 &= 0x3ffffff;
      /* k = 18 */
      lo = Math.imul(al9, bl9);
      mid = Math.imul(al9, bh9);
      mid = (mid + Math.imul(ah9, bl9)) | 0;
      hi = Math.imul(ah9, bh9);
      var w18 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
      c = (((hi + (mid >>> 13)) | 0) + (w18 >>> 26)) | 0;
      w18 &= 0x3ffffff;
      o[0] = w0;
      o[1] = w1;
      o[2] = w2;
      o[3] = w3;
      o[4] = w4;
      o[5] = w5;
      o[6] = w6;
      o[7] = w7;
      o[8] = w8;
      o[9] = w9;
      o[10] = w10;
      o[11] = w11;
      o[12] = w12;
      o[13] = w13;
      o[14] = w14;
      o[15] = w15;
      o[16] = w16;
      o[17] = w17;
      o[18] = w18;
      if (c !== 0) {
        o[19] = c;
        out.length++;
      }
      return out;
    };
  
    // Polyfill comb
    if (!Math.imul) {
      comb10MulTo = smallMulTo;
    }
  
    function bigMulTo (self, num, out) {
      out.negative = num.negative ^ self.negative;
      out.length = self.length + num.length;
  
      var carry = 0;
      var hncarry = 0;
      for (var k = 0; k < out.length - 1; k++) {
        // Sum all words with the same `i + j = k` and accumulate `ncarry`,
        // note that ncarry could be >= 0x3ffffff
        var ncarry = hncarry;
        hncarry = 0;
        var rword = carry & 0x3ffffff;
        var maxJ = Math.min(k, num.length - 1);
        for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {
          var i = k - j;
          var a = self.words[i] | 0;
          var b = num.words[j] | 0;
          var r = a * b;
  
          var lo = r & 0x3ffffff;
          ncarry = (ncarry + ((r / 0x4000000) | 0)) | 0;
          lo = (lo + rword) | 0;
          rword = lo & 0x3ffffff;
          ncarry = (ncarry + (lo >>> 26)) | 0;
  
          hncarry += ncarry >>> 26;
          ncarry &= 0x3ffffff;
        }
        out.words[k] = rword;
        carry = ncarry;
        ncarry = hncarry;
      }
      if (carry !== 0) {
        out.words[k] = carry;
      } else {
        out.length--;
      }
  
      return out.strip();
    }
  
    function jumboMulTo (self, num, out) {
      var fftm = new FFTM();
      return fftm.mulp(self, num, out);
    }
  
    BN.prototype.mulTo = function mulTo (num, out) {
      var res;
      var len = this.length + num.length;
      if (this.length === 10 && num.length === 10) {
        res = comb10MulTo(this, num, out);
      } else if (len < 63) {
        res = smallMulTo(this, num, out);
      } else if (len < 1024) {
        res = bigMulTo(this, num, out);
      } else {
        res = jumboMulTo(this, num, out);
      }
  
      return res;
    };
  
    // Cooley-Tukey algorithm for FFT
    // slightly revisited to rely on looping instead of recursion
  
    function FFTM (x, y) {
      this.x = x;
      this.y = y;
    }
  
    FFTM.prototype.makeRBT = function makeRBT (N) {
      var t = new Array(N);
      var l = BN.prototype._countBits(N) - 1;
      for (var i = 0; i < N; i++) {
        t[i] = this.revBin(i, l, N);
      }
  
      return t;
    };
  
    // Returns binary-reversed representation of `x`
    FFTM.prototype.revBin = function revBin (x, l, N) {
      if (x === 0 || x === N - 1) return x;
  
      var rb = 0;
      for (var i = 0; i < l; i++) {
        rb |= (x & 1) << (l - i - 1);
        x >>= 1;
      }
  
      return rb;
    };
  
    // Performs "tweedling" phase, therefore 'emulating'
    // behaviour of the recursive algorithm
    FFTM.prototype.permute = function permute (rbt, rws, iws, rtws, itws, N) {
      for (var i = 0; i < N; i++) {
        rtws[i] = rws[rbt[i]];
        itws[i] = iws[rbt[i]];
      }
    };
  
    FFTM.prototype.transform = function transform (rws, iws, rtws, itws, N, rbt) {
      this.permute(rbt, rws, iws, rtws, itws, N);
  
      for (var s = 1; s < N; s <<= 1) {
        var l = s << 1;
  
        var rtwdf = Math.cos(2 * Math.PI / l);
        var itwdf = Math.sin(2 * Math.PI / l);
  
        for (var p = 0; p < N; p += l) {
          var rtwdf_ = rtwdf;
          var itwdf_ = itwdf;
  
          for (var j = 0; j < s; j++) {
            var re = rtws[p + j];
            var ie = itws[p + j];
  
            var ro = rtws[p + j + s];
            var io = itws[p + j + s];
  
            var rx = rtwdf_ * ro - itwdf_ * io;
  
            io = rtwdf_ * io + itwdf_ * ro;
            ro = rx;
  
            rtws[p + j] = re + ro;
            itws[p + j] = ie + io;
  
            rtws[p + j + s] = re - ro;
            itws[p + j + s] = ie - io;
  
            /* jshint maxdepth : false */
            if (j !== l) {
              rx = rtwdf * rtwdf_ - itwdf * itwdf_;
  
              itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;
              rtwdf_ = rx;
            }
          }
        }
      }
    };
  
    FFTM.prototype.guessLen13b = function guessLen13b (n, m) {
      var N = Math.max(m, n) | 1;
      var odd = N & 1;
      var i = 0;
      for (N = N / 2 | 0; N; N = N >>> 1) {
        i++;
      }
  
      return 1 << i + 1 + odd;
    };
  
    FFTM.prototype.conjugate = function conjugate (rws, iws, N) {
      if (N <= 1) return;
  
      for (var i = 0; i < N / 2; i++) {
        var t = rws[i];
  
        rws[i] = rws[N - i - 1];
        rws[N - i - 1] = t;
  
        t = iws[i];
  
        iws[i] = -iws[N - i - 1];
        iws[N - i - 1] = -t;
      }
    };
  
    FFTM.prototype.normalize13b = function normalize13b (ws, N) {
      var carry = 0;
      for (var i = 0; i < N / 2; i++) {
        var w = Math.round(ws[2 * i + 1] / N) * 0x2000 +
          Math.round(ws[2 * i] / N) +
          carry;
  
        ws[i] = w & 0x3ffffff;
  
        if (w < 0x4000000) {
          carry = 0;
        } else {
          carry = w / 0x4000000 | 0;
        }
      }
  
      return ws;
    };
  
    FFTM.prototype.convert13b = function convert13b (ws, len, rws, N) {
      var carry = 0;
      for (var i = 0; i < len; i++) {
        carry = carry + (ws[i] | 0);
  
        rws[2 * i] = carry & 0x1fff; carry = carry >>> 13;
        rws[2 * i + 1] = carry & 0x1fff; carry = carry >>> 13;
      }
  
      // Pad with zeroes
      for (i = 2 * len; i < N; ++i) {
        rws[i] = 0;
      }
  
      assert(carry === 0);
      assert((carry & ~0x1fff) === 0);
    };
  
    FFTM.prototype.stub = function stub (N) {
      var ph = new Array(N);
      for (var i = 0; i < N; i++) {
        ph[i] = 0;
      }
  
      return ph;
    };
  
    FFTM.prototype.mulp = function mulp (x, y, out) {
      var N = 2 * this.guessLen13b(x.length, y.length);
  
      var rbt = this.makeRBT(N);
  
      var _ = this.stub(N);
  
      var rws = new Array(N);
      var rwst = new Array(N);
      var iwst = new Array(N);
  
      var nrws = new Array(N);
      var nrwst = new Array(N);
      var niwst = new Array(N);
  
      var rmws = out.words;
      rmws.length = N;
  
      this.convert13b(x.words, x.length, rws, N);
      this.convert13b(y.words, y.length, nrws, N);
  
      this.transform(rws, _, rwst, iwst, N, rbt);
      this.transform(nrws, _, nrwst, niwst, N, rbt);
  
      for (var i = 0; i < N; i++) {
        var rx = rwst[i] * nrwst[i] - iwst[i] * niwst[i];
        iwst[i] = rwst[i] * niwst[i] + iwst[i] * nrwst[i];
        rwst[i] = rx;
      }
  
      this.conjugate(rwst, iwst, N);
      this.transform(rwst, iwst, rmws, _, N, rbt);
      this.conjugate(rmws, _, N);
      this.normalize13b(rmws, N);
  
      out.negative = x.negative ^ y.negative;
      out.length = x.length + y.length;
      return out.strip();
    };
  
    // Multiply `this` by `num`
    BN.prototype.mul = function mul (num) {
      var out = new BN(null);
      out.words = new Array(this.length + num.length);
      return this.mulTo(num, out);
    };
  
    // Multiply employing FFT
    BN.prototype.mulf = function mulf (num) {
      var out = new BN(null);
      out.words = new Array(this.length + num.length);
      return jumboMulTo(this, num, out);
    };
  
    // In-place Multiplication
    BN.prototype.imul = function imul (num) {
      return this.clone().mulTo(num, this);
    };
  
    BN.prototype.imuln = function imuln (num) {
      assert(typeof num === 'number');
      assert(num < 0x4000000);
  
      // Carry
      var carry = 0;
      for (var i = 0; i < this.length; i++) {
        var w = (this.words[i] | 0) * num;
        var lo = (w & 0x3ffffff) + (carry & 0x3ffffff);
        carry >>= 26;
        carry += (w / 0x4000000) | 0;
        // NOTE: lo is 27bit maximum
        carry += lo >>> 26;
        this.words[i] = lo & 0x3ffffff;
      }
  
      if (carry !== 0) {
        this.words[i] = carry;
        this.length++;
      }
  
      return this;
    };
  
    BN.prototype.muln = function muln (num) {
      return this.clone().imuln(num);
    };
  
    // `this` * `this`
    BN.prototype.sqr = function sqr () {
      return this.mul(this);
    };
  
    // `this` * `this` in-place
    BN.prototype.isqr = function isqr () {
      return this.imul(this.clone());
    };
  
    // Math.pow(`this`, `num`)
    BN.prototype.pow = function pow (num) {
      var w = toBitArray(num);
      if (w.length === 0) return new BN(1);
  
      // Skip leading zeroes
      var res = this;
      for (var i = 0; i < w.length; i++, res = res.sqr()) {
        if (w[i] !== 0) break;
      }
  
      if (++i < w.length) {
        for (var q = res.sqr(); i < w.length; i++, q = q.sqr()) {
          if (w[i] === 0) continue;
  
          res = res.mul(q);
        }
      }
  
      return res;
    };
  
    // Shift-left in-place
    BN.prototype.iushln = function iushln (bits) {
      assert(typeof bits === 'number' && bits >= 0);
      var r = bits % 26;
      var s = (bits - r) / 26;
      var carryMask = (0x3ffffff >>> (26 - r)) << (26 - r);
      var i;
  
      if (r !== 0) {
        var carry = 0;
  
        for (i = 0; i < this.length; i++) {
          var newCarry = this.words[i] & carryMask;
          var c = ((this.words[i] | 0) - newCarry) << r;
          this.words[i] = c | carry;
          carry = newCarry >>> (26 - r);
        }
  
        if (carry) {
          this.words[i] = carry;
          this.length++;
        }
      }
  
      if (s !== 0) {
        for (i = this.length - 1; i >= 0; i--) {
          this.words[i + s] = this.words[i];
        }
  
        for (i = 0; i < s; i++) {
          this.words[i] = 0;
        }
  
        this.length += s;
      }
  
      return this.strip();
    };
  
    BN.prototype.ishln = function ishln (bits) {
      // TODO(indutny): implement me
      assert(this.negative === 0);
      return this.iushln(bits);
    };
  
    // Shift-right in-place
    // NOTE: `hint` is a lowest bit before trailing zeroes
    // NOTE: if `extended` is present - it will be filled with destroyed bits
    BN.prototype.iushrn = function iushrn (bits, hint, extended) {
      assert(typeof bits === 'number' && bits >= 0);
      var h;
      if (hint) {
        h = (hint - (hint % 26)) / 26;
      } else {
        h = 0;
      }
  
      var r = bits % 26;
      var s = Math.min((bits - r) / 26, this.length);
      var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);
      var maskedWords = extended;
  
      h -= s;
      h = Math.max(0, h);
  
      // Extended mode, copy masked part
      if (maskedWords) {
        for (var i = 0; i < s; i++) {
          maskedWords.words[i] = this.words[i];
        }
        maskedWords.length = s;
      }
  
      if (s === 0) {
        // No-op, we should not move anything at all
      } else if (this.length > s) {
        this.length -= s;
        for (i = 0; i < this.length; i++) {
          this.words[i] = this.words[i + s];
        }
      } else {
        this.words[0] = 0;
        this.length = 1;
      }
  
      var carry = 0;
      for (i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--) {
        var word = this.words[i] | 0;
        this.words[i] = (carry << (26 - r)) | (word >>> r);
        carry = word & mask;
      }
  
      // Push carried bits as a mask
      if (maskedWords && carry !== 0) {
        maskedWords.words[maskedWords.length++] = carry;
      }
  
      if (this.length === 0) {
        this.words[0] = 0;
        this.length = 1;
      }
  
      return this.strip();
    };
  
    BN.prototype.ishrn = function ishrn (bits, hint, extended) {
      // TODO(indutny): implement me
      assert(this.negative === 0);
      return this.iushrn(bits, hint, extended);
    };
  
    // Shift-left
    BN.prototype.shln = function shln (bits) {
      return this.clone().ishln(bits);
    };
  
    BN.prototype.ushln = function ushln (bits) {
      return this.clone().iushln(bits);
    };
  
    // Shift-right
    BN.prototype.shrn = function shrn (bits) {
      return this.clone().ishrn(bits);
    };
  
    BN.prototype.ushrn = function ushrn (bits) {
      return this.clone().iushrn(bits);
    };
  
    // Test if n bit is set
    BN.prototype.testn = function testn (bit) {
      assert(typeof bit === 'number' && bit >= 0);
      var r = bit % 26;
      var s = (bit - r) / 26;
      var q = 1 << r;
  
      // Fast case: bit is much higher than all existing words
      if (this.length <= s) return false;
  
      // Check bit and return
      var w = this.words[s];
  
      return !!(w & q);
    };
  
    // Return only lowers bits of number (in-place)
    BN.prototype.imaskn = function imaskn (bits) {
      assert(typeof bits === 'number' && bits >= 0);
      var r = bits % 26;
      var s = (bits - r) / 26;
  
      assert(this.negative === 0, 'imaskn works only with positive numbers');
  
      if (this.length <= s) {
        return this;
      }
  
      if (r !== 0) {
        s++;
      }
      this.length = Math.min(s, this.length);
  
      if (r !== 0) {
        var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);
        this.words[this.length - 1] &= mask;
      }
  
      return this.strip();
    };
  
    // Return only lowers bits of number
    BN.prototype.maskn = function maskn (bits) {
      return this.clone().imaskn(bits);
    };
  
    // Add plain number `num` to `this`
    BN.prototype.iaddn = function iaddn (num) {
      assert(typeof num === 'number');
      assert(num < 0x4000000);
      if (num < 0) return this.isubn(-num);
  
      // Possible sign change
      if (this.negative !== 0) {
        if (this.length === 1 && (this.words[0] | 0) < num) {
          this.words[0] = num - (this.words[0] | 0);
          this.negative = 0;
          return this;
        }
  
        this.negative = 0;
        this.isubn(num);
        this.negative = 1;
        return this;
      }
  
      // Add without checks
      return this._iaddn(num);
    };
  
    BN.prototype._iaddn = function _iaddn (num) {
      this.words[0] += num;
  
      // Carry
      for (var i = 0; i < this.length && this.words[i] >= 0x4000000; i++) {
        this.words[i] -= 0x4000000;
        if (i === this.length - 1) {
          this.words[i + 1] = 1;
        } else {
          this.words[i + 1]++;
        }
      }
      this.length = Math.max(this.length, i + 1);
  
      return this;
    };
  
    // Subtract plain number `num` from `this`
    BN.prototype.isubn = function isubn (num) {
      assert(typeof num === 'number');
      assert(num < 0x4000000);
      if (num < 0) return this.iaddn(-num);
  
      if (this.negative !== 0) {
        this.negative = 0;
        this.iaddn(num);
        this.negative = 1;
        return this;
      }
  
      this.words[0] -= num;
  
      if (this.length === 1 && this.words[0] < 0) {
        this.words[0] = -this.words[0];
        this.negative = 1;
      } else {
        // Carry
        for (var i = 0; i < this.length && this.words[i] < 0; i++) {
          this.words[i] += 0x4000000;
          this.words[i + 1] -= 1;
        }
      }
  
      return this.strip();
    };
  
    BN.prototype.addn = function addn (num) {
      return this.clone().iaddn(num);
    };
  
    BN.prototype.subn = function subn (num) {
      return this.clone().isubn(num);
    };
  
    BN.prototype.iabs = function iabs () {
      this.negative = 0;
  
      return this;
    };
  
    BN.prototype.abs = function abs () {
      return this.clone().iabs();
    };
  
    BN.prototype._ishlnsubmul = function _ishlnsubmul (num, mul, shift) {
      var len = num.length + shift;
      var i;
  
      this._expand(len);
  
      var w;
      var carry = 0;
      for (i = 0; i < num.length; i++) {
        w = (this.words[i + shift] | 0) + carry;
        var right = (num.words[i] | 0) * mul;
        w -= right & 0x3ffffff;
        carry = (w >> 26) - ((right / 0x4000000) | 0);
        this.words[i + shift] = w & 0x3ffffff;
      }
      for (; i < this.length - shift; i++) {
        w = (this.words[i + shift] | 0) + carry;
        carry = w >> 26;
        this.words[i + shift] = w & 0x3ffffff;
      }
  
      if (carry === 0) return this.strip();
  
      // Subtraction overflow
      assert(carry === -1);
      carry = 0;
      for (i = 0; i < this.length; i++) {
        w = -(this.words[i] | 0) + carry;
        carry = w >> 26;
        this.words[i] = w & 0x3ffffff;
      }
      this.negative = 1;
  
      return this.strip();
    };
  
    BN.prototype._wordDiv = function _wordDiv (num, mode) {
      var shift = this.length - num.length;
  
      var a = this.clone();
      var b = num;
  
      // Normalize
      var bhi = b.words[b.length - 1] | 0;
      var bhiBits = this._countBits(bhi);
      shift = 26 - bhiBits;
      if (shift !== 0) {
        b = b.ushln(shift);
        a.iushln(shift);
        bhi = b.words[b.length - 1] | 0;
      }
  
      // Initialize quotient
      var m = a.length - b.length;
      var q;
  
      if (mode !== 'mod') {
        q = new BN(null);
        q.length = m + 1;
        q.words = new Array(q.length);
        for (var i = 0; i < q.length; i++) {
          q.words[i] = 0;
        }
      }
  
      var diff = a.clone()._ishlnsubmul(b, 1, m);
      if (diff.negative === 0) {
        a = diff;
        if (q) {
          q.words[m] = 1;
        }
      }
  
      for (var j = m - 1; j >= 0; j--) {
        var qj = (a.words[b.length + j] | 0) * 0x4000000 +
          (a.words[b.length + j - 1] | 0);
  
        // NOTE: (qj / bhi) is (0x3ffffff * 0x4000000 + 0x3ffffff) / 0x2000000 max
        // (0x7ffffff)
        qj = Math.min((qj / bhi) | 0, 0x3ffffff);
  
        a._ishlnsubmul(b, qj, j);
        while (a.negative !== 0) {
          qj--;
          a.negative = 0;
          a._ishlnsubmul(b, 1, j);
          if (!a.isZero()) {
            a.negative ^= 1;
          }
        }
        if (q) {
          q.words[j] = qj;
        }
      }
      if (q) {
        q.strip();
      }
      a.strip();
  
      // Denormalize
      if (mode !== 'div' && shift !== 0) {
        a.iushrn(shift);
      }
  
      return {
        div: q || null,
        mod: a
      };
    };
  
    // NOTE: 1) `mode` can be set to `mod` to request mod only,
    //       to `div` to request div only, or be absent to
    //       request both div & mod
    //       2) `positive` is true if unsigned mod is requested
    BN.prototype.divmod = function divmod (num, mode, positive) {
      assert(!num.isZero());
  
      if (this.isZero()) {
        return {
          div: new BN(0),
          mod: new BN(0)
        };
      }
  
      var div, mod, res;
      if (this.negative !== 0 && num.negative === 0) {
        res = this.neg().divmod(num, mode);
  
        if (mode !== 'mod') {
          div = res.div.neg();
        }
  
        if (mode !== 'div') {
          mod = res.mod.neg();
          if (positive && mod.negative !== 0) {
            mod.iadd(num);
          }
        }
  
        return {
          div: div,
          mod: mod
        };
      }
  
      if (this.negative === 0 && num.negative !== 0) {
        res = this.divmod(num.neg(), mode);
  
        if (mode !== 'mod') {
          div = res.div.neg();
        }
  
        return {
          div: div,
          mod: res.mod
        };
      }
  
      if ((this.negative & num.negative) !== 0) {
        res = this.neg().divmod(num.neg(), mode);
  
        if (mode !== 'div') {
          mod = res.mod.neg();
          if (positive && mod.negative !== 0) {
            mod.isub(num);
          }
        }
  
        return {
          div: res.div,
          mod: mod
        };
      }
  
      // Both numbers are positive at this point
  
      // Strip both numbers to approximate shift value
      if (num.length > this.length || this.cmp(num) < 0) {
        return {
          div: new BN(0),
          mod: this
        };
      }
  
      // Very short reduction
      if (num.length === 1) {
        if (mode === 'div') {
          return {
            div: this.divn(num.words[0]),
            mod: null
          };
        }
  
        if (mode === 'mod') {
          return {
            div: null,
            mod: new BN(this.modn(num.words[0]))
          };
        }
  
        return {
          div: this.divn(num.words[0]),
          mod: new BN(this.modn(num.words[0]))
        };
      }
  
      return this._wordDiv(num, mode);
    };
  
    // Find `this` / `num`
    BN.prototype.div = function div (num) {
      return this.divmod(num, 'div', false).div;
    };
  
    // Find `this` % `num`
    BN.prototype.mod = function mod (num) {
      return this.divmod(num, 'mod', false).mod;
    };
  
    BN.prototype.umod = function umod (num) {
      return this.divmod(num, 'mod', true).mod;
    };
  
    // Find Round(`this` / `num`)
    BN.prototype.divRound = function divRound (num) {
      var dm = this.divmod(num);
  
      // Fast case - exact division
      if (dm.mod.isZero()) return dm.div;
  
      var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;
  
      var half = num.ushrn(1);
      var r2 = num.andln(1);
      var cmp = mod.cmp(half);
  
      // Round down
      if (cmp < 0 || r2 === 1 && cmp === 0) return dm.div;
  
      // Round up
      return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);
    };
  
    BN.prototype.modn = function modn (num) {
      assert(num <= 0x3ffffff);
      var p = (1 << 26) % num;
  
      var acc = 0;
      for (var i = this.length - 1; i >= 0; i--) {
        acc = (p * acc + (this.words[i] | 0)) % num;
      }
  
      return acc;
    };
  
    // In-place division by number
    BN.prototype.idivn = function idivn (num) {
      assert(num <= 0x3ffffff);
  
      var carry = 0;
      for (var i = this.length - 1; i >= 0; i--) {
        var w = (this.words[i] | 0) + carry * 0x4000000;
        this.words[i] = (w / num) | 0;
        carry = w % num;
      }
  
      return this.strip();
    };
  
    BN.prototype.divn = function divn (num) {
      return this.clone().idivn(num);
    };
  
    BN.prototype.egcd = function egcd (p) {
      assert(p.negative === 0);
      assert(!p.isZero());
  
      var x = this;
      var y = p.clone();
  
      if (x.negative !== 0) {
        x = x.umod(p);
      } else {
        x = x.clone();
      }
  
      // A * x + B * y = x
      var A = new BN(1);
      var B = new BN(0);
  
      // C * x + D * y = y
      var C = new BN(0);
      var D = new BN(1);
  
      var g = 0;
  
      while (x.isEven() && y.isEven()) {
        x.iushrn(1);
        y.iushrn(1);
        ++g;
      }
  
      var yp = y.clone();
      var xp = x.clone();
  
      while (!x.isZero()) {
        for (var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
        if (i > 0) {
          x.iushrn(i);
          while (i-- > 0) {
            if (A.isOdd() || B.isOdd()) {
              A.iadd(yp);
              B.isub(xp);
            }
  
            A.iushrn(1);
            B.iushrn(1);
          }
        }
  
        for (var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
        if (j > 0) {
          y.iushrn(j);
          while (j-- > 0) {
            if (C.isOdd() || D.isOdd()) {
              C.iadd(yp);
              D.isub(xp);
            }
  
            C.iushrn(1);
            D.iushrn(1);
          }
        }
  
        if (x.cmp(y) >= 0) {
          x.isub(y);
          A.isub(C);
          B.isub(D);
        } else {
          y.isub(x);
          C.isub(A);
          D.isub(B);
        }
      }
  
      return {
        a: C,
        b: D,
        gcd: y.iushln(g)
      };
    };
  
    // This is reduced incarnation of the binary EEA
    // above, designated to invert members of the
    // _prime_ fields F(p) at a maximal speed
    BN.prototype._invmp = function _invmp (p) {
      assert(p.negative === 0);
      assert(!p.isZero());
  
      var a = this;
      var b = p.clone();
  
      if (a.negative !== 0) {
        a = a.umod(p);
      } else {
        a = a.clone();
      }
  
      var x1 = new BN(1);
      var x2 = new BN(0);
  
      var delta = b.clone();
  
      while (a.cmpn(1) > 0 && b.cmpn(1) > 0) {
        for (var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
        if (i > 0) {
          a.iushrn(i);
          while (i-- > 0) {
            if (x1.isOdd()) {
              x1.iadd(delta);
            }
  
            x1.iushrn(1);
          }
        }
  
        for (var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
        if (j > 0) {
          b.iushrn(j);
          while (j-- > 0) {
            if (x2.isOdd()) {
              x2.iadd(delta);
            }
  
            x2.iushrn(1);
          }
        }
  
        if (a.cmp(b) >= 0) {
          a.isub(b);
          x1.isub(x2);
        } else {
          b.isub(a);
          x2.isub(x1);
        }
      }
  
      var res;
      if (a.cmpn(1) === 0) {
        res = x1;
      } else {
        res = x2;
      }
  
      if (res.cmpn(0) < 0) {
        res.iadd(p);
      }
  
      return res;
    };
  
    BN.prototype.gcd = function gcd (num) {
      if (this.isZero()) return num.abs();
      if (num.isZero()) return this.abs();
  
      var a = this.clone();
      var b = num.clone();
      a.negative = 0;
      b.negative = 0;
  
      // Remove common factor of two
      for (var shift = 0; a.isEven() && b.isEven(); shift++) {
        a.iushrn(1);
        b.iushrn(1);
      }
  
      do {
        while (a.isEven()) {
          a.iushrn(1);
        }
        while (b.isEven()) {
          b.iushrn(1);
        }
  
        var r = a.cmp(b);
        if (r < 0) {
          // Swap `a` and `b` to make `a` always bigger than `b`
          var t = a;
          a = b;
          b = t;
        } else if (r === 0 || b.cmpn(1) === 0) {
          break;
        }
  
        a.isub(b);
      } while (true);
  
      return b.iushln(shift);
    };
  
    // Invert number in the field F(num)
    BN.prototype.invm = function invm (num) {
      return this.egcd(num).a.umod(num);
    };
  
    BN.prototype.isEven = function isEven () {
      return (this.words[0] & 1) === 0;
    };
  
    BN.prototype.isOdd = function isOdd () {
      return (this.words[0] & 1) === 1;
    };
  
    // And first word and num
    BN.prototype.andln = function andln (num) {
      return this.words[0] & num;
    };
  
    // Increment at the bit position in-line
    BN.prototype.bincn = function bincn (bit) {
      assert(typeof bit === 'number');
      var r = bit % 26;
      var s = (bit - r) / 26;
      var q = 1 << r;
  
      // Fast case: bit is much higher than all existing words
      if (this.length <= s) {
        this._expand(s + 1);
        this.words[s] |= q;
        return this;
      }
  
      // Add bit and propagate, if needed
      var carry = q;
      for (var i = s; carry !== 0 && i < this.length; i++) {
        var w = this.words[i] | 0;
        w += carry;
        carry = w >>> 26;
        w &= 0x3ffffff;
        this.words[i] = w;
      }
      if (carry !== 0) {
        this.words[i] = carry;
        this.length++;
      }
      return this;
    };
  
    BN.prototype.isZero = function isZero () {
      return this.length === 1 && this.words[0] === 0;
    };
  
    BN.prototype.cmpn = function cmpn (num) {
      var negative = num < 0;
  
      if (this.negative !== 0 && !negative) return -1;
      if (this.negative === 0 && negative) return 1;
  
      this.strip();
  
      var res;
      if (this.length > 1) {
        res = 1;
      } else {
        if (negative) {
          num = -num;
        }
  
        assert(num <= 0x3ffffff, 'Number is too big');
  
        var w = this.words[0] | 0;
        res = w === num ? 0 : w < num ? -1 : 1;
      }
      if (this.negative !== 0) return -res | 0;
      return res;
    };
  
    // Compare two numbers and return:
    // 1 - if `this` > `num`
    // 0 - if `this` == `num`
    // -1 - if `this` < `num`
    BN.prototype.cmp = function cmp (num) {
      if (this.negative !== 0 && num.negative === 0) return -1;
      if (this.negative === 0 && num.negative !== 0) return 1;
  
      var res = this.ucmp(num);
      if (this.negative !== 0) return -res | 0;
      return res;
    };
  
    // Unsigned comparison
    BN.prototype.ucmp = function ucmp (num) {
      // At this point both numbers have the same sign
      if (this.length > num.length) return 1;
      if (this.length < num.length) return -1;
  
      var res = 0;
      for (var i = this.length - 1; i >= 0; i--) {
        var a = this.words[i] | 0;
        var b = num.words[i] | 0;
  
        if (a === b) continue;
        if (a < b) {
          res = -1;
        } else if (a > b) {
          res = 1;
        }
        break;
      }
      return res;
    };
  
    BN.prototype.gtn = function gtn (num) {
      return this.cmpn(num) === 1;
    };
  
    BN.prototype.gt = function gt (num) {
      return this.cmp(num) === 1;
    };
  
    BN.prototype.gten = function gten (num) {
      return this.cmpn(num) >= 0;
    };
  
    BN.prototype.gte = function gte (num) {
      return this.cmp(num) >= 0;
    };
  
    BN.prototype.ltn = function ltn (num) {
      return this.cmpn(num) === -1;
    };
  
    BN.prototype.lt = function lt (num) {
      return this.cmp(num) === -1;
    };
  
    BN.prototype.lten = function lten (num) {
      return this.cmpn(num) <= 0;
    };
  
    BN.prototype.lte = function lte (num) {
      return this.cmp(num) <= 0;
    };
  
    BN.prototype.eqn = function eqn (num) {
      return this.cmpn(num) === 0;
    };
  
    BN.prototype.eq = function eq (num) {
      return this.cmp(num) === 0;
    };
  
    //
    // A reduce context, could be using montgomery or something better, depending
    // on the `m` itself.
    //
    BN.red = function red (num) {
      return new Red(num);
    };
  
    BN.prototype.toRed = function toRed (ctx) {
      assert(!this.red, 'Already a number in reduction context');
      assert(this.negative === 0, 'red works only with positives');
      return ctx.convertTo(this)._forceRed(ctx);
    };
  
    BN.prototype.fromRed = function fromRed () {
      assert(this.red, 'fromRed works only with numbers in reduction context');
      return this.red.convertFrom(this);
    };
  
    BN.prototype._forceRed = function _forceRed (ctx) {
      this.red = ctx;
      return this;
    };
  
    BN.prototype.forceRed = function forceRed (ctx) {
      assert(!this.red, 'Already a number in reduction context');
      return this._forceRed(ctx);
    };
  
    BN.prototype.redAdd = function redAdd (num) {
      assert(this.red, 'redAdd works only with red numbers');
      return this.red.add(this, num);
    };
  
    BN.prototype.redIAdd = function redIAdd (num) {
      assert(this.red, 'redIAdd works only with red numbers');
      return this.red.iadd(this, num);
    };
  
    BN.prototype.redSub = function redSub (num) {
      assert(this.red, 'redSub works only with red numbers');
      return this.red.sub(this, num);
    };
  
    BN.prototype.redISub = function redISub (num) {
      assert(this.red, 'redISub works only with red numbers');
      return this.red.isub(this, num);
    };
  
    BN.prototype.redShl = function redShl (num) {
      assert(this.red, 'redShl works only with red numbers');
      return this.red.shl(this, num);
    };
  
    BN.prototype.redMul = function redMul (num) {
      assert(this.red, 'redMul works only with red numbers');
      this.red._verify2(this, num);
      return this.red.mul(this, num);
    };
  
    BN.prototype.redIMul = function redIMul (num) {
      assert(this.red, 'redMul works only with red numbers');
      this.red._verify2(this, num);
      return this.red.imul(this, num);
    };
  
    BN.prototype.redSqr = function redSqr () {
      assert(this.red, 'redSqr works only with red numbers');
      this.red._verify1(this);
      return this.red.sqr(this);
    };
  
    BN.prototype.redISqr = function redISqr () {
      assert(this.red, 'redISqr works only with red numbers');
      this.red._verify1(this);
      return this.red.isqr(this);
    };
  
    // Square root over p
    BN.prototype.redSqrt = function redSqrt () {
      assert(this.red, 'redSqrt works only with red numbers');
      this.red._verify1(this);
      return this.red.sqrt(this);
    };
  
    BN.prototype.redInvm = function redInvm () {
      assert(this.red, 'redInvm works only with red numbers');
      this.red._verify1(this);
      return this.red.invm(this);
    };
  
    // Return negative clone of `this` % `red modulo`
    BN.prototype.redNeg = function redNeg () {
      assert(this.red, 'redNeg works only with red numbers');
      this.red._verify1(this);
      return this.red.neg(this);
    };
  
    BN.prototype.redPow = function redPow (num) {
      assert(this.red && !num.red, 'redPow(normalNum)');
      this.red._verify1(this);
      return this.red.pow(this, num);
    };
  
    // Prime numbers with efficient reduction
    var primes = {
      k256: null,
      p224: null,
      p192: null,
      p25519: null
    };
  
    // Pseudo-Mersenne prime
    function MPrime (name, p) {
      // P = 2 ^ N - K
      this.name = name;
      this.p = new BN(p, 16);
      this.n = this.p.bitLength();
      this.k = new BN(1).iushln(this.n).isub(this.p);
  
      this.tmp = this._tmp();
    }
  
    MPrime.prototype._tmp = function _tmp () {
      var tmp = new BN(null);
      tmp.words = new Array(Math.ceil(this.n / 13));
      return tmp;
    };
  
    MPrime.prototype.ireduce = function ireduce (num) {
      // Assumes that `num` is less than `P^2`
      // num = HI * (2 ^ N - K) + HI * K + LO = HI * K + LO (mod P)
      var r = num;
      var rlen;
  
      do {
        this.split(r, this.tmp);
        r = this.imulK(r);
        r = r.iadd(this.tmp);
        rlen = r.bitLength();
      } while (rlen > this.n);
  
      var cmp = rlen < this.n ? -1 : r.ucmp(this.p);
      if (cmp === 0) {
        r.words[0] = 0;
        r.length = 1;
      } else if (cmp > 0) {
        r.isub(this.p);
      } else {
        r.strip();
      }
  
      return r;
    };
  
    MPrime.prototype.split = function split (input, out) {
      input.iushrn(this.n, 0, out);
    };
  
    MPrime.prototype.imulK = function imulK (num) {
      return num.imul(this.k);
    };
  
    function K256 () {
      MPrime.call(
        this,
        'k256',
        'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f');
    }
    inherits(K256, MPrime);
  
    K256.prototype.split = function split (input, output) {
      // 256 = 9 * 26 + 22
      var mask = 0x3fffff;
  
      var outLen = Math.min(input.length, 9);
      for (var i = 0; i < outLen; i++) {
        output.words[i] = input.words[i];
      }
      output.length = outLen;
  
      if (input.length <= 9) {
        input.words[0] = 0;
        input.length = 1;
        return;
      }
  
      // Shift by 9 limbs
      var prev = input.words[9];
      output.words[output.length++] = prev & mask;
  
      for (i = 10; i < input.length; i++) {
        var next = input.words[i] | 0;
        input.words[i - 10] = ((next & mask) << 4) | (prev >>> 22);
        prev = next;
      }
      prev >>>= 22;
      input.words[i - 10] = prev;
      if (prev === 0 && input.length > 10) {
        input.length -= 10;
      } else {
        input.length -= 9;
      }
    };
  
    K256.prototype.imulK = function imulK (num) {
      // K = 0x1000003d1 = [ 0x40, 0x3d1 ]
      num.words[num.length] = 0;
      num.words[num.length + 1] = 0;
      num.length += 2;
  
      // bounded at: 0x40 * 0x3ffffff + 0x3d0 = 0x100000390
      var lo = 0;
      for (var i = 0; i < num.length; i++) {
        var w = num.words[i] | 0;
        lo += w * 0x3d1;
        num.words[i] = lo & 0x3ffffff;
        lo = w * 0x40 + ((lo / 0x4000000) | 0);
      }
  
      // Fast length reduction
      if (num.words[num.length - 1] === 0) {
        num.length--;
        if (num.words[num.length - 1] === 0) {
          num.length--;
        }
      }
      return num;
    };
  
    function P224 () {
      MPrime.call(
        this,
        'p224',
        'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001');
    }
    inherits(P224, MPrime);
  
    function P192 () {
      MPrime.call(
        this,
        'p192',
        'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff');
    }
    inherits(P192, MPrime);
  
    function P25519 () {
      // 2 ^ 255 - 19
      MPrime.call(
        this,
        '25519',
        '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed');
    }
    inherits(P25519, MPrime);
  
    P25519.prototype.imulK = function imulK (num) {
      // K = 0x13
      var carry = 0;
      for (var i = 0; i < num.length; i++) {
        var hi = (num.words[i] | 0) * 0x13 + carry;
        var lo = hi & 0x3ffffff;
        hi >>>= 26;
  
        num.words[i] = lo;
        carry = hi;
      }
      if (carry !== 0) {
        num.words[num.length++] = carry;
      }
      return num;
    };
  
    // Exported mostly for testing purposes, use plain name instead
    BN._prime = function prime (name) {
      // Cached version of prime
      if (primes[name]) return primes[name];
  
      var prime;
      if (name === 'k256') {
        prime = new K256();
      } else if (name === 'p224') {
        prime = new P224();
      } else if (name === 'p192') {
        prime = new P192();
      } else if (name === 'p25519') {
        prime = new P25519();
      } else {
        throw new Error('Unknown prime ' + name);
      }
      primes[name] = prime;
  
      return prime;
    };
  
    //
    // Base reduction engine
    //
    function Red (m) {
      if (typeof m === 'string') {
        var prime = BN._prime(m);
        this.m = prime.p;
        this.prime = prime;
      } else {
        assert(m.gtn(1), 'modulus must be greater than 1');
        this.m = m;
        this.prime = null;
      }
    }
  
    Red.prototype._verify1 = function _verify1 (a) {
      assert(a.negative === 0, 'red works only with positives');
      assert(a.red, 'red works only with red numbers');
    };
  
    Red.prototype._verify2 = function _verify2 (a, b) {
      assert((a.negative | b.negative) === 0, 'red works only with positives');
      assert(a.red && a.red === b.red,
        'red works only with red numbers');
    };
  
    Red.prototype.imod = function imod (a) {
      if (this.prime) return this.prime.ireduce(a)._forceRed(this);
      return a.umod(this.m)._forceRed(this);
    };
  
    Red.prototype.neg = function neg (a) {
      if (a.isZero()) {
        return a.clone();
      }
  
      return this.m.sub(a)._forceRed(this);
    };
  
    Red.prototype.add = function add (a, b) {
      this._verify2(a, b);
  
      var res = a.add(b);
      if (res.cmp(this.m) >= 0) {
        res.isub(this.m);
      }
      return res._forceRed(this);
    };
  
    Red.prototype.iadd = function iadd (a, b) {
      this._verify2(a, b);
  
      var res = a.iadd(b);
      if (res.cmp(this.m) >= 0) {
        res.isub(this.m);
      }
      return res;
    };
  
    Red.prototype.sub = function sub (a, b) {
      this._verify2(a, b);
  
      var res = a.sub(b);
      if (res.cmpn(0) < 0) {
        res.iadd(this.m);
      }
      return res._forceRed(this);
    };
  
    Red.prototype.isub = function isub (a, b) {
      this._verify2(a, b);
  
      var res = a.isub(b);
      if (res.cmpn(0) < 0) {
        res.iadd(this.m);
      }
      return res;
    };
  
    Red.prototype.shl = function shl (a, num) {
      this._verify1(a);
      return this.imod(a.ushln(num));
    };
  
    Red.prototype.imul = function imul (a, b) {
      this._verify2(a, b);
      return this.imod(a.imul(b));
    };
  
    Red.prototype.mul = function mul (a, b) {
      this._verify2(a, b);
      return this.imod(a.mul(b));
    };
  
    Red.prototype.isqr = function isqr (a) {
      return this.imul(a, a.clone());
    };
  
    Red.prototype.sqr = function sqr (a) {
      return this.mul(a, a);
    };
  
    Red.prototype.sqrt = function sqrt (a) {
      if (a.isZero()) return a.clone();
  
      var mod3 = this.m.andln(3);
      assert(mod3 % 2 === 1);
  
      // Fast case
      if (mod3 === 3) {
        var pow = this.m.add(new BN(1)).iushrn(2);
        return this.pow(a, pow);
      }
  
      // Tonelli-Shanks algorithm (Totally unoptimized and slow)
      //
      // Find Q and S, that Q * 2 ^ S = (P - 1)
      var q = this.m.subn(1);
      var s = 0;
      while (!q.isZero() && q.andln(1) === 0) {
        s++;
        q.iushrn(1);
      }
      assert(!q.isZero());
  
      var one = new BN(1).toRed(this);
      var nOne = one.redNeg();
  
      // Find quadratic non-residue
      // NOTE: Max is such because of generalized Riemann hypothesis.
      var lpow = this.m.subn(1).iushrn(1);
      var z = this.m.bitLength();
      z = new BN(2 * z * z).toRed(this);
  
      while (this.pow(z, lpow).cmp(nOne) !== 0) {
        z.redIAdd(nOne);
      }
  
      var c = this.pow(z, q);
      var r = this.pow(a, q.addn(1).iushrn(1));
      var t = this.pow(a, q);
      var m = s;
      while (t.cmp(one) !== 0) {
        var tmp = t;
        for (var i = 0; tmp.cmp(one) !== 0; i++) {
          tmp = tmp.redSqr();
        }
        assert(i < m);
        var b = this.pow(c, new BN(1).iushln(m - i - 1));
  
        r = r.redMul(b);
        c = b.redSqr();
        t = t.redMul(c);
        m = i;
      }
  
      return r;
    };
  
    Red.prototype.invm = function invm (a) {
      var inv = a._invmp(this.m);
      if (inv.negative !== 0) {
        inv.negative = 0;
        return this.imod(inv).redNeg();
      } else {
        return this.imod(inv);
      }
    };
  
    Red.prototype.pow = function pow (a, num) {
      if (num.isZero()) return new BN(1).toRed(this);
      if (num.cmpn(1) === 0) return a.clone();
  
      var windowSize = 4;
      var wnd = new Array(1 << windowSize);
      wnd[0] = new BN(1).toRed(this);
      wnd[1] = a;
      for (var i = 2; i < wnd.length; i++) {
        wnd[i] = this.mul(wnd[i - 1], a);
      }
  
      var res = wnd[0];
      var current = 0;
      var currentLen = 0;
      var start = num.bitLength() % 26;
      if (start === 0) {
        start = 26;
      }
  
      for (i = num.length - 1; i >= 0; i--) {
        var word = num.words[i];
        for (var j = start - 1; j >= 0; j--) {
          var bit = (word >> j) & 1;
          if (res !== wnd[0]) {
            res = this.sqr(res);
          }
  
          if (bit === 0 && current === 0) {
            currentLen = 0;
            continue;
          }
  
          current <<= 1;
          current |= bit;
          currentLen++;
          if (currentLen !== windowSize && (i !== 0 || j !== 0)) continue;
  
          res = this.mul(res, wnd[current]);
          currentLen = 0;
          current = 0;
        }
        start = 26;
      }
  
      return res;
    };
  
    Red.prototype.convertTo = function convertTo (num) {
      var r = num.umod(this.m);
  
      return r === num ? r.clone() : r;
    };
  
    Red.prototype.convertFrom = function convertFrom (num) {
      var res = num.clone();
      res.red = null;
      return res;
    };
  
    //
    // Montgomery method engine
    //
  
    BN.mont = function mont (num) {
      return new Mont(num);
    };
  
    function Mont (m) {
      Red.call(this, m);
  
      this.shift = this.m.bitLength();
      if (this.shift % 26 !== 0) {
        this.shift += 26 - (this.shift % 26);
      }
  
      this.r = new BN(1).iushln(this.shift);
      this.r2 = this.imod(this.r.sqr());
      this.rinv = this.r._invmp(this.m);
  
      this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);
      this.minv = this.minv.umod(this.r);
      this.minv = this.r.sub(this.minv);
    }
    inherits(Mont, Red);
  
    Mont.prototype.convertTo = function convertTo (num) {
      return this.imod(num.ushln(this.shift));
    };
  
    Mont.prototype.convertFrom = function convertFrom (num) {
      var r = this.imod(num.mul(this.rinv));
      r.red = null;
      return r;
    };
  
    Mont.prototype.imul = function imul (a, b) {
      if (a.isZero() || b.isZero()) {
        a.words[0] = 0;
        a.length = 1;
        return a;
      }
  
      var t = a.imul(b);
      var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
      var u = t.isub(c).iushrn(this.shift);
      var res = u;
  
      if (u.cmp(this.m) >= 0) {
        res = u.isub(this.m);
      } else if (u.cmpn(0) < 0) {
        res = u.iadd(this.m);
      }
  
      return res._forceRed(this);
    };
  
    Mont.prototype.mul = function mul (a, b) {
      if (a.isZero() || b.isZero()) return new BN(0)._forceRed(this);
  
      var t = a.mul(b);
      var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
      var u = t.isub(c).iushrn(this.shift);
      var res = u;
      if (u.cmp(this.m) >= 0) {
        res = u.isub(this.m);
      } else if (u.cmpn(0) < 0) {
        res = u.iadd(this.m);
      }
  
      return res._forceRed(this);
    };
  
    Mont.prototype.invm = function invm (a) {
      // (AR)^-1 * R^2 = (A^-1 * R^-1) * R^2 = A^-1 * R
      var res = this.imod(a._invmp(this.m).mul(this.r2));
      return res._forceRed(this);
    };
  })(typeof module === 'undefined' || module, this);
  
  },{"buffer":55}],54:[function(require,module,exports){
  var r;
  
  module.exports = function rand(len) {
    if (!r)
      r = new Rand(null);
  
    return r.generate(len);
  };
  
  function Rand(rand) {
    this.rand = rand;
  }
  module.exports.Rand = Rand;
  
  Rand.prototype.generate = function generate(len) {
    return this._rand(len);
  };
  
  // Emulate crypto API using randy
  Rand.prototype._rand = function _rand(n) {
    if (this.rand.getBytes)
      return this.rand.getBytes(n);
  
    var res = new Uint8Array(n);
    for (var i = 0; i < res.length; i++)
      res[i] = this.rand.getByte();
    return res;
  };
  
  if (typeof self === 'object') {
    if (self.crypto && self.crypto.getRandomValues) {
      // Modern browsers
      Rand.prototype._rand = function _rand(n) {
        var arr = new Uint8Array(n);
        self.crypto.getRandomValues(arr);
        return arr;
      };
    } else if (self.msCrypto && self.msCrypto.getRandomValues) {
      // IE
      Rand.prototype._rand = function _rand(n) {
        var arr = new Uint8Array(n);
        self.msCrypto.getRandomValues(arr);
        return arr;
      };
  
    // Safari's WebWorkers do not have `crypto`
    } else if (typeof window === 'object') {
      // Old junk
      Rand.prototype._rand = function() {
        throw new Error('Not implemented yet');
      };
    }
  } else {
    // Node.js or Web worker with no crypto support
    try {
      var crypto = require('crypto');
      if (typeof crypto.randomBytes !== 'function')
        throw new Error('Not supported');
  
      Rand.prototype._rand = function _rand(n) {
        return crypto.randomBytes(n);
      };
    } catch (e) {
    }
  }
  
  },{"crypto":55}],55:[function(require,module,exports){
  
  },{}],56:[function(require,module,exports){
  // based on the aes implementation in triple sec
  // https://github.com/keybase/triplesec
  // which is in turn based on the one from crypto-js
  // https://code.google.com/p/crypto-js/
  
  var Buffer = require('safe-buffer').Buffer
  
  function asUInt32Array (buf) {
    if (!Buffer.isBuffer(buf)) buf = Buffer.from(buf)
  
    var len = (buf.length / 4) | 0
    var out = new Array(len)
  
    for (var i = 0; i < len; i++) {
      out[i] = buf.readUInt32BE(i * 4)
    }
  
    return out
  }
  
  function scrubVec (v) {
    for (var i = 0; i < v.length; v++) {
      v[i] = 0
    }
  }
  
  function cryptBlock (M, keySchedule, SUB_MIX, SBOX, nRounds) {
    var SUB_MIX0 = SUB_MIX[0]
    var SUB_MIX1 = SUB_MIX[1]
    var SUB_MIX2 = SUB_MIX[2]
    var SUB_MIX3 = SUB_MIX[3]
  
    var s0 = M[0] ^ keySchedule[0]
    var s1 = M[1] ^ keySchedule[1]
    var s2 = M[2] ^ keySchedule[2]
    var s3 = M[3] ^ keySchedule[3]
    var t0, t1, t2, t3
    var ksRow = 4
  
    for (var round = 1; round < nRounds; round++) {
      t0 = SUB_MIX0[s0 >>> 24] ^ SUB_MIX1[(s1 >>> 16) & 0xff] ^ SUB_MIX2[(s2 >>> 8) & 0xff] ^ SUB_MIX3[s3 & 0xff] ^ keySchedule[ksRow++]
      t1 = SUB_MIX0[s1 >>> 24] ^ SUB_MIX1[(s2 >>> 16) & 0xff] ^ SUB_MIX2[(s3 >>> 8) & 0xff] ^ SUB_MIX3[s0 & 0xff] ^ keySchedule[ksRow++]
      t2 = SUB_MIX0[s2 >>> 24] ^ SUB_MIX1[(s3 >>> 16) & 0xff] ^ SUB_MIX2[(s0 >>> 8) & 0xff] ^ SUB_MIX3[s1 & 0xff] ^ keySchedule[ksRow++]
      t3 = SUB_MIX0[s3 >>> 24] ^ SUB_MIX1[(s0 >>> 16) & 0xff] ^ SUB_MIX2[(s1 >>> 8) & 0xff] ^ SUB_MIX3[s2 & 0xff] ^ keySchedule[ksRow++]
      s0 = t0
      s1 = t1
      s2 = t2
      s3 = t3
    }
  
    t0 = ((SBOX[s0 >>> 24] << 24) | (SBOX[(s1 >>> 16) & 0xff] << 16) | (SBOX[(s2 >>> 8) & 0xff] << 8) | SBOX[s3 & 0xff]) ^ keySchedule[ksRow++]
    t1 = ((SBOX[s1 >>> 24] << 24) | (SBOX[(s2 >>> 16) & 0xff] << 16) | (SBOX[(s3 >>> 8) & 0xff] << 8) | SBOX[s0 & 0xff]) ^ keySchedule[ksRow++]
    t2 = ((SBOX[s2 >>> 24] << 24) | (SBOX[(s3 >>> 16) & 0xff] << 16) | (SBOX[(s0 >>> 8) & 0xff] << 8) | SBOX[s1 & 0xff]) ^ keySchedule[ksRow++]
    t3 = ((SBOX[s3 >>> 24] << 24) | (SBOX[(s0 >>> 16) & 0xff] << 16) | (SBOX[(s1 >>> 8) & 0xff] << 8) | SBOX[s2 & 0xff]) ^ keySchedule[ksRow++]
    t0 = t0 >>> 0
    t1 = t1 >>> 0
    t2 = t2 >>> 0
    t3 = t3 >>> 0
  
    return [t0, t1, t2, t3]
  }
  
  // AES constants
  var RCON = [0x00, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36]
  var G = (function () {
    // Compute double table
    var d = new Array(256)
    for (var j = 0; j < 256; j++) {
      if (j < 128) {
        d[j] = j << 1
      } else {
        d[j] = (j << 1) ^ 0x11b
      }
    }
  
    var SBOX = []
    var INV_SBOX = []
    var SUB_MIX = [[], [], [], []]
    var INV_SUB_MIX = [[], [], [], []]
  
    // Walk GF(2^8)
    var x = 0
    var xi = 0
    for (var i = 0; i < 256; ++i) {
      // Compute sbox
      var sx = xi ^ (xi << 1) ^ (xi << 2) ^ (xi << 3) ^ (xi << 4)
      sx = (sx >>> 8) ^ (sx & 0xff) ^ 0x63
      SBOX[x] = sx
      INV_SBOX[sx] = x
  
      // Compute multiplication
      var x2 = d[x]
      var x4 = d[x2]
      var x8 = d[x4]
  
      // Compute sub bytes, mix columns tables
      var t = (d[sx] * 0x101) ^ (sx * 0x1010100)
      SUB_MIX[0][x] = (t << 24) | (t >>> 8)
      SUB_MIX[1][x] = (t << 16) | (t >>> 16)
      SUB_MIX[2][x] = (t << 8) | (t >>> 24)
      SUB_MIX[3][x] = t
  
      // Compute inv sub bytes, inv mix columns tables
      t = (x8 * 0x1010101) ^ (x4 * 0x10001) ^ (x2 * 0x101) ^ (x * 0x1010100)
      INV_SUB_MIX[0][sx] = (t << 24) | (t >>> 8)
      INV_SUB_MIX[1][sx] = (t << 16) | (t >>> 16)
      INV_SUB_MIX[2][sx] = (t << 8) | (t >>> 24)
      INV_SUB_MIX[3][sx] = t
  
      if (x === 0) {
        x = xi = 1
      } else {
        x = x2 ^ d[d[d[x8 ^ x2]]]
        xi ^= d[d[xi]]
      }
    }
  
    return {
      SBOX: SBOX,
      INV_SBOX: INV_SBOX,
      SUB_MIX: SUB_MIX,
      INV_SUB_MIX: INV_SUB_MIX
    }
  })()
  
  function AES (key) {
    this._key = asUInt32Array(key)
    this._reset()
  }
  
  AES.blockSize = 4 * 4
  AES.keySize = 256 / 8
  AES.prototype.blockSize = AES.blockSize
  AES.prototype.keySize = AES.keySize
  AES.prototype._reset = function () {
    var keyWords = this._key
    var keySize = keyWords.length
    var nRounds = keySize + 6
    var ksRows = (nRounds + 1) * 4
  
    var keySchedule = []
    for (var k = 0; k < keySize; k++) {
      keySchedule[k] = keyWords[k]
    }
  
    for (k = keySize; k < ksRows; k++) {
      var t = keySchedule[k - 1]
  
      if (k % keySize === 0) {
        t = (t << 8) | (t >>> 24)
        t =
          (G.SBOX[t >>> 24] << 24) |
          (G.SBOX[(t >>> 16) & 0xff] << 16) |
          (G.SBOX[(t >>> 8) & 0xff] << 8) |
          (G.SBOX[t & 0xff])
  
        t ^= RCON[(k / keySize) | 0] << 24
      } else if (keySize > 6 && k % keySize === 4) {
        t =
          (G.SBOX[t >>> 24] << 24) |
          (G.SBOX[(t >>> 16) & 0xff] << 16) |
          (G.SBOX[(t >>> 8) & 0xff] << 8) |
          (G.SBOX[t & 0xff])
      }
  
      keySchedule[k] = keySchedule[k - keySize] ^ t
    }
  
    var invKeySchedule = []
    for (var ik = 0; ik < ksRows; ik++) {
      var ksR = ksRows - ik
      var tt = keySchedule[ksR - (ik % 4 ? 0 : 4)]
  
      if (ik < 4 || ksR <= 4) {
        invKeySchedule[ik] = tt
      } else {
        invKeySchedule[ik] =
          G.INV_SUB_MIX[0][G.SBOX[tt >>> 24]] ^
          G.INV_SUB_MIX[1][G.SBOX[(tt >>> 16) & 0xff]] ^
          G.INV_SUB_MIX[2][G.SBOX[(tt >>> 8) & 0xff]] ^
          G.INV_SUB_MIX[3][G.SBOX[tt & 0xff]]
      }
    }
  
    this._nRounds = nRounds
    this._keySchedule = keySchedule
    this._invKeySchedule = invKeySchedule
  }
  
  AES.prototype.encryptBlockRaw = function (M) {
    M = asUInt32Array(M)
    return cryptBlock(M, this._keySchedule, G.SUB_MIX, G.SBOX, this._nRounds)
  }
  
  AES.prototype.encryptBlock = function (M) {
    var out = this.encryptBlockRaw(M)
    var buf = Buffer.allocUnsafe(16)
    buf.writeUInt32BE(out[0], 0)
    buf.writeUInt32BE(out[1], 4)
    buf.writeUInt32BE(out[2], 8)
    buf.writeUInt32BE(out[3], 12)
    return buf
  }
  
  AES.prototype.decryptBlock = function (M) {
    M = asUInt32Array(M)
  
    // swap
    var m1 = M[1]
    M[1] = M[3]
    M[3] = m1
  
    var out = cryptBlock(M, this._invKeySchedule, G.INV_SUB_MIX, G.INV_SBOX, this._nRounds)
    var buf = Buffer.allocUnsafe(16)
    buf.writeUInt32BE(out[0], 0)
    buf.writeUInt32BE(out[3], 4)
    buf.writeUInt32BE(out[2], 8)
    buf.writeUInt32BE(out[1], 12)
    return buf
  }
  
  AES.prototype.scrub = function () {
    scrubVec(this._keySchedule)
    scrubVec(this._invKeySchedule)
    scrubVec(this._key)
  }
  
  module.exports.AES = AES
  
  },{"safe-buffer":290}],57:[function(require,module,exports){
  var aes = require('./aes')
  var Buffer = require('safe-buffer').Buffer
  var Transform = require('cipher-base')
  var inherits = require('inherits')
  var GHASH = require('./ghash')
  var xor = require('buffer-xor')
  var incr32 = require('./incr32')
  
  function xorTest (a, b) {
    var out = 0
    if (a.length !== b.length) out++
  
    var len = Math.min(a.length, b.length)
    for (var i = 0; i < len; ++i) {
      out += (a[i] ^ b[i])
    }
  
    return out
  }
  
  function calcIv (self, iv, ck) {
    if (iv.length === 12) {
      self._finID = Buffer.concat([iv, Buffer.from([0, 0, 0, 1])])
      return Buffer.concat([iv, Buffer.from([0, 0, 0, 2])])
    }
    var ghash = new GHASH(ck)
    var len = iv.length
    var toPad = len % 16
    ghash.update(iv)
    if (toPad) {
      toPad = 16 - toPad
      ghash.update(Buffer.alloc(toPad, 0))
    }
    ghash.update(Buffer.alloc(8, 0))
    var ivBits = len * 8
    var tail = Buffer.alloc(8)
    tail.writeUIntBE(ivBits, 0, 8)
    ghash.update(tail)
    self._finID = ghash.state
    var out = Buffer.from(self._finID)
    incr32(out)
    return out
  }
  function StreamCipher (mode, key, iv, decrypt) {
    Transform.call(this)
  
    var h = Buffer.alloc(4, 0)
  
    this._cipher = new aes.AES(key)
    var ck = this._cipher.encryptBlock(h)
    this._ghash = new GHASH(ck)
    iv = calcIv(this, iv, ck)
  
    this._prev = Buffer.from(iv)
    this._cache = Buffer.allocUnsafe(0)
    this._secCache = Buffer.allocUnsafe(0)
    this._decrypt = decrypt
    this._alen = 0
    this._len = 0
    this._mode = mode
  
    this._authTag = null
    this._called = false
  }
  
  inherits(StreamCipher, Transform)
  
  StreamCipher.prototype._update = function (chunk) {
    if (!this._called && this._alen) {
      var rump = 16 - (this._alen % 16)
      if (rump < 16) {
        rump = Buffer.alloc(rump, 0)
        this._ghash.update(rump)
      }
    }
  
    this._called = true
    var out = this._mode.encrypt(this, chunk)
    if (this._decrypt) {
      this._ghash.update(chunk)
    } else {
      this._ghash.update(out)
    }
    this._len += chunk.length
    return out
  }
  
  StreamCipher.prototype._final = function () {
    if (this._decrypt && !this._authTag) throw new Error('Unsupported state or unable to authenticate data')
  
    var tag = xor(this._ghash.final(this._alen * 8, this._len * 8), this._cipher.encryptBlock(this._finID))
    if (this._decrypt && xorTest(tag, this._authTag)) throw new Error('Unsupported state or unable to authenticate data')
  
    this._authTag = tag
    this._cipher.scrub()
  }
  
  StreamCipher.prototype.getAuthTag = function getAuthTag () {
    if (this._decrypt || !Buffer.isBuffer(this._authTag)) throw new Error('Attempting to get auth tag in unsupported state')
  
    return this._authTag
  }
  
  StreamCipher.prototype.setAuthTag = function setAuthTag (tag) {
    if (!this._decrypt) throw new Error('Attempting to set auth tag in unsupported state')
  
    this._authTag = tag
  }
  
  StreamCipher.prototype.setAAD = function setAAD (buf) {
    if (this._called) throw new Error('Attempting to set AAD in unsupported state')
  
    this._ghash.update(buf)
    this._alen += buf.length
  }
  
  module.exports = StreamCipher
  
  },{"./aes":56,"./ghash":61,"./incr32":62,"buffer-xor":83,"cipher-base":86,"inherits":180,"safe-buffer":290}],58:[function(require,module,exports){
  var ciphers = require('./encrypter')
  var deciphers = require('./decrypter')
  var modes = require('./modes/list.json')
  
  function getCiphers () {
    return Object.keys(modes)
  }
  
  exports.createCipher = exports.Cipher = ciphers.createCipher
  exports.createCipheriv = exports.Cipheriv = ciphers.createCipheriv
  exports.createDecipher = exports.Decipher = deciphers.createDecipher
  exports.createDecipheriv = exports.Decipheriv = deciphers.createDecipheriv
  exports.listCiphers = exports.getCiphers = getCiphers
  
  },{"./decrypter":59,"./encrypter":60,"./modes/list.json":70}],59:[function(require,module,exports){
  var AuthCipher = require('./authCipher')
  var Buffer = require('safe-buffer').Buffer
  var MODES = require('./modes')
  var StreamCipher = require('./streamCipher')
  var Transform = require('cipher-base')
  var aes = require('./aes')
  var ebtk = require('evp_bytestokey')
  var inherits = require('inherits')
  
  function Decipher (mode, key, iv) {
    Transform.call(this)
  
    this._cache = new Splitter()
    this._last = void 0
    this._cipher = new aes.AES(key)
    this._prev = Buffer.from(iv)
    this._mode = mode
    this._autopadding = true
  }
  
  inherits(Decipher, Transform)
  
  Decipher.prototype._update = function (data) {
    this._cache.add(data)
    var chunk
    var thing
    var out = []
    while ((chunk = this._cache.get(this._autopadding))) {
      thing = this._mode.decrypt(this, chunk)
      out.push(thing)
    }
    return Buffer.concat(out)
  }
  
  Decipher.prototype._final = function () {
    var chunk = this._cache.flush()
    if (this._autopadding) {
      return unpad(this._mode.decrypt(this, chunk))
    } else if (chunk) {
      throw new Error('data not multiple of block length')
    }
  }
  
  Decipher.prototype.setAutoPadding = function (setTo) {
    this._autopadding = !!setTo
    return this
  }
  
  function Splitter () {
    this.cache = Buffer.allocUnsafe(0)
  }
  
  Splitter.prototype.add = function (data) {
    this.cache = Buffer.concat([this.cache, data])
  }
  
  Splitter.prototype.get = function (autoPadding) {
    var out
    if (autoPadding) {
      if (this.cache.length > 16) {
        out = this.cache.slice(0, 16)
        this.cache = this.cache.slice(16)
        return out
      }
    } else {
      if (this.cache.length >= 16) {
        out = this.cache.slice(0, 16)
        this.cache = this.cache.slice(16)
        return out
      }
    }
  
    return null
  }
  
  Splitter.prototype.flush = function () {
    if (this.cache.length) return this.cache
  }
  
  function unpad (last) {
    var padded = last[15]
    var i = -1
    while (++i < padded) {
      if (last[(i + (16 - padded))] !== padded) {
        throw new Error('unable to decrypt data')
      }
    }
    if (padded === 16) return
  
    return last.slice(0, 16 - padded)
  }
  
  function createDecipheriv (suite, password, iv) {
    var config = MODES[suite.toLowerCase()]
    if (!config) throw new TypeError('invalid suite type')
  
    if (typeof iv === 'string') iv = Buffer.from(iv)
    if (config.mode !== 'GCM' && iv.length !== config.iv) throw new TypeError('invalid iv length ' + iv.length)
  
    if (typeof password === 'string') password = Buffer.from(password)
    if (password.length !== config.key / 8) throw new TypeError('invalid key length ' + password.length)
  
    if (config.type === 'stream') {
      return new StreamCipher(config.module, password, iv, true)
    } else if (config.type === 'auth') {
      return new AuthCipher(config.module, password, iv, true)
    }
  
    return new Decipher(config.module, password, iv)
  }
  
  function createDecipher (suite, password) {
    var config = MODES[suite.toLowerCase()]
    if (!config) throw new TypeError('invalid suite type')
  
    var keys = ebtk(password, false, config.key, config.iv)
    return createDecipheriv(suite, keys.key, keys.iv)
  }
  
  exports.createDecipher = createDecipher
  exports.createDecipheriv = createDecipheriv
  
  },{"./aes":56,"./authCipher":57,"./modes":69,"./streamCipher":72,"cipher-base":86,"evp_bytestokey":158,"inherits":180,"safe-buffer":290}],60:[function(require,module,exports){
  var MODES = require('./modes')
  var AuthCipher = require('./authCipher')
  var Buffer = require('safe-buffer').Buffer
  var StreamCipher = require('./streamCipher')
  var Transform = require('cipher-base')
  var aes = require('./aes')
  var ebtk = require('evp_bytestokey')
  var inherits = require('inherits')
  
  function Cipher (mode, key, iv) {
    Transform.call(this)
  
    this._cache = new Splitter()
    this._cipher = new aes.AES(key)
    this._prev = Buffer.from(iv)
    this._mode = mode
    this._autopadding = true
  }
  
  inherits(Cipher, Transform)
  
  Cipher.prototype._update = function (data) {
    this._cache.add(data)
    var chunk
    var thing
    var out = []
  
    while ((chunk = this._cache.get())) {
      thing = this._mode.encrypt(this, chunk)
      out.push(thing)
    }
  
    return Buffer.concat(out)
  }
  
  var PADDING = Buffer.alloc(16, 0x10)
  
  Cipher.prototype._final = function () {
    var chunk = this._cache.flush()
    if (this._autopadding) {
      chunk = this._mode.encrypt(this, chunk)
      this._cipher.scrub()
      return chunk
    }
  
    if (!chunk.equals(PADDING)) {
      this._cipher.scrub()
      throw new Error('data not multiple of block length')
    }
  }
  
  Cipher.prototype.setAutoPadding = function (setTo) {
    this._autopadding = !!setTo
    return this
  }
  
  function Splitter () {
    this.cache = Buffer.allocUnsafe(0)
  }
  
  Splitter.prototype.add = function (data) {
    this.cache = Buffer.concat([this.cache, data])
  }
  
  Splitter.prototype.get = function () {
    if (this.cache.length > 15) {
      var out = this.cache.slice(0, 16)
      this.cache = this.cache.slice(16)
      return out
    }
    return null
  }
  
  Splitter.prototype.flush = function () {
    var len = 16 - this.cache.length
    var padBuff = Buffer.allocUnsafe(len)
  
    var i = -1
    while (++i < len) {
      padBuff.writeUInt8(len, i)
    }
  
    return Buffer.concat([this.cache, padBuff])
  }
  
  function createCipheriv (suite, password, iv) {
    var config = MODES[suite.toLowerCase()]
    if (!config) throw new TypeError('invalid suite type')
  
    if (typeof password === 'string') password = Buffer.from(password)
    if (password.length !== config.key / 8) throw new TypeError('invalid key length ' + password.length)
  
    if (typeof iv === 'string') iv = Buffer.from(iv)
    if (config.mode !== 'GCM' && iv.length !== config.iv) throw new TypeError('invalid iv length ' + iv.length)
  
    if (config.type === 'stream') {
      return new StreamCipher(config.module, password, iv)
    } else if (config.type === 'auth') {
      return new AuthCipher(config.module, password, iv)
    }
  
    return new Cipher(config.module, password, iv)
  }
  
  function createCipher (suite, password) {
    var config = MODES[suite.toLowerCase()]
    if (!config) throw new TypeError('invalid suite type')
  
    var keys = ebtk(password, false, config.key, config.iv)
    return createCipheriv(suite, keys.key, keys.iv)
  }
  
  exports.createCipheriv = createCipheriv
  exports.createCipher = createCipher
  
  },{"./aes":56,"./authCipher":57,"./modes":69,"./streamCipher":72,"cipher-base":86,"evp_bytestokey":158,"inherits":180,"safe-buffer":290}],61:[function(require,module,exports){
  var Buffer = require('safe-buffer').Buffer
  var ZEROES = Buffer.alloc(16, 0)
  
  function toArray (buf) {
    return [
      buf.readUInt32BE(0),
      buf.readUInt32BE(4),
      buf.readUInt32BE(8),
      buf.readUInt32BE(12)
    ]
  }
  
  function fromArray (out) {
    var buf = Buffer.allocUnsafe(16)
    buf.writeUInt32BE(out[0] >>> 0, 0)
    buf.writeUInt32BE(out[1] >>> 0, 4)
    buf.writeUInt32BE(out[2] >>> 0, 8)
    buf.writeUInt32BE(out[3] >>> 0, 12)
    return buf
  }
  
  function GHASH (key) {
    this.h = key
    this.state = Buffer.alloc(16, 0)
    this.cache = Buffer.allocUnsafe(0)
  }
  
  // from http://bitwiseshiftleft.github.io/sjcl/doc/symbols/src/core_gcm.js.html
  // by Juho VÃ¤hÃ¤-Herttua
  GHASH.prototype.ghash = function (block) {
    var i = -1
    while (++i < block.length) {
      this.state[i] ^= block[i]
    }
    this._multiply()
  }
  
  GHASH.prototype._multiply = function () {
    var Vi = toArray(this.h)
    var Zi = [0, 0, 0, 0]
    var j, xi, lsbVi
    var i = -1
    while (++i < 128) {
      xi = (this.state[~~(i / 8)] & (1 << (7 - (i % 8)))) !== 0
      if (xi) {
        // Z_i+1 = Z_i ^ V_i
        Zi[0] ^= Vi[0]
        Zi[1] ^= Vi[1]
        Zi[2] ^= Vi[2]
        Zi[3] ^= Vi[3]
      }
  
      // Store the value of LSB(V_i)
      lsbVi = (Vi[3] & 1) !== 0
  
      // V_i+1 = V_i >> 1
      for (j = 3; j > 0; j--) {
        Vi[j] = (Vi[j] >>> 1) | ((Vi[j - 1] & 1) << 31)
      }
      Vi[0] = Vi[0] >>> 1
  
      // If LSB(V_i) is 1, V_i+1 = (V_i >> 1) ^ R
      if (lsbVi) {
        Vi[0] = Vi[0] ^ (0xe1 << 24)
      }
    }
    this.state = fromArray(Zi)
  }
  
  GHASH.prototype.update = function (buf) {
    this.cache = Buffer.concat([this.cache, buf])
    var chunk
    while (this.cache.length >= 16) {
      chunk = this.cache.slice(0, 16)
      this.cache = this.cache.slice(16)
      this.ghash(chunk)
    }
  }
  
  GHASH.prototype.final = function (abl, bl) {
    if (this.cache.length) {
      this.ghash(Buffer.concat([this.cache, ZEROES], 16))
    }
  
    this.ghash(fromArray([0, abl, 0, bl]))
    return this.state
  }
  
  module.exports = GHASH
  
  },{"safe-buffer":290}],62:[function(require,module,exports){
  function incr32 (iv) {
    var len = iv.length
    var item
    while (len--) {
      item = iv.readUInt8(len)
      if (item === 255) {
        iv.writeUInt8(0, len)
      } else {
        item++
        iv.writeUInt8(item, len)
        break
      }
    }
  }
  module.exports = incr32
  
  },{}],63:[function(require,module,exports){
  var xor = require('buffer-xor')
  
  exports.encrypt = function (self, block) {
    var data = xor(block, self._prev)
  
    self._prev = self._cipher.encryptBlock(data)
    return self._prev
  }
  
  exports.decrypt = function (self, block) {
    var pad = self._prev
  
    self._prev = block
    var out = self._cipher.decryptBlock(block)
  
    return xor(out, pad)
  }
  
  },{"buffer-xor":83}],64:[function(require,module,exports){
  var Buffer = require('safe-buffer').Buffer
  var xor = require('buffer-xor')
  
  function encryptStart (self, data, decrypt) {
    var len = data.length
    var out = xor(data, self._cache)
    self._cache = self._cache.slice(len)
    self._prev = Buffer.concat([self._prev, decrypt ? data : out])
    return out
  }
  
  exports.encrypt = function (self, data, decrypt) {
    var out = Buffer.allocUnsafe(0)
    var len
  
    while (data.length) {
      if (self._cache.length === 0) {
        self._cache = self._cipher.encryptBlock(self._prev)
        self._prev = Buffer.allocUnsafe(0)
      }
  
      if (self._cache.length <= data.length) {
        len = self._cache.length
        out = Buffer.concat([out, encryptStart(self, data.slice(0, len), decrypt)])
        data = data.slice(len)
      } else {
        out = Buffer.concat([out, encryptStart(self, data, decrypt)])
        break
      }
    }
  
    return out
  }
  
  },{"buffer-xor":83,"safe-buffer":290}],65:[function(require,module,exports){
  var Buffer = require('safe-buffer').Buffer
  
  function encryptByte (self, byteParam, decrypt) {
    var pad
    var i = -1
    var len = 8
    var out = 0
    var bit, value
    while (++i < len) {
      pad = self._cipher.encryptBlock(self._prev)
      bit = (byteParam & (1 << (7 - i))) ? 0x80 : 0
      value = pad[0] ^ bit
      out += ((value & 0x80) >> (i % 8))
      self._prev = shiftIn(self._prev, decrypt ? bit : value)
    }
    return out
  }
  
  function shiftIn (buffer, value) {
    var len = buffer.length
    var i = -1
    var out = Buffer.allocUnsafe(buffer.length)
    buffer = Buffer.concat([buffer, Buffer.from([value])])
  
    while (++i < len) {
      out[i] = buffer[i] << 1 | buffer[i + 1] >> (7)
    }
  
    return out
  }
  
  exports.encrypt = function (self, chunk, decrypt) {
    var len = chunk.length
    var out = Buffer.allocUnsafe(len)
    var i = -1
  
    while (++i < len) {
      out[i] = encryptByte(self, chunk[i], decrypt)
    }
  
    return out
  }
  
  },{"safe-buffer":290}],66:[function(require,module,exports){
  var Buffer = require('safe-buffer').Buffer
  
  function encryptByte (self, byteParam, decrypt) {
    var pad = self._cipher.encryptBlock(self._prev)
    var out = pad[0] ^ byteParam
  
    self._prev = Buffer.concat([
      self._prev.slice(1),
      Buffer.from([decrypt ? byteParam : out])
    ])
  
    return out
  }
  
  exports.encrypt = function (self, chunk, decrypt) {
    var len = chunk.length
    var out = Buffer.allocUnsafe(len)
    var i = -1
  
    while (++i < len) {
      out[i] = encryptByte(self, chunk[i], decrypt)
    }
  
    return out
  }
  
  },{"safe-buffer":290}],67:[function(require,module,exports){
  var xor = require('buffer-xor')
  var Buffer = require('safe-buffer').Buffer
  var incr32 = require('../incr32')
  
  function getBlock (self) {
    var out = self._cipher.encryptBlockRaw(self._prev)
    incr32(self._prev)
    return out
  }
  
  var blockSize = 16
  exports.encrypt = function (self, chunk) {
    var chunkNum = Math.ceil(chunk.length / blockSize)
    var start = self._cache.length
    self._cache = Buffer.concat([
      self._cache,
      Buffer.allocUnsafe(chunkNum * blockSize)
    ])
    for (var i = 0; i < chunkNum; i++) {
      var out = getBlock(self)
      var offset = start + i * blockSize
      self._cache.writeUInt32BE(out[0], offset + 0)
      self._cache.writeUInt32BE(out[1], offset + 4)
      self._cache.writeUInt32BE(out[2], offset + 8)
      self._cache.writeUInt32BE(out[3], offset + 12)
    }
    var pad = self._cache.slice(0, chunk.length)
    self._cache = self._cache.slice(chunk.length)
    return xor(chunk, pad)
  }
  
  },{"../incr32":62,"buffer-xor":83,"safe-buffer":290}],68:[function(require,module,exports){
  exports.encrypt = function (self, block) {
    return self._cipher.encryptBlock(block)
  }
  
  exports.decrypt = function (self, block) {
    return self._cipher.decryptBlock(block)
  }
  
  },{}],69:[function(require,module,exports){
  var modeModules = {
    ECB: require('./ecb'),
    CBC: require('./cbc'),
    CFB: require('./cfb'),
    CFB8: require('./cfb8'),
    CFB1: require('./cfb1'),
    OFB: require('./ofb'),
    CTR: require('./ctr'),
    GCM: require('./ctr')
  }
  
  var modes = require('./list.json')
  
  for (var key in modes) {
    modes[key].module = modeModules[modes[key].mode]
  }
  
  module.exports = modes
  
  },{"./cbc":63,"./cfb":64,"./cfb1":65,"./cfb8":66,"./ctr":67,"./ecb":68,"./list.json":70,"./ofb":71}],70:[function(require,module,exports){
  module.exports={
    "aes-128-ecb": {
      "cipher": "AES",
      "key": 128,
      "iv": 0,
      "mode": "ECB",
      "type": "block"
    },
    "aes-192-ecb": {
      "cipher": "AES",
      "key": 192,
      "iv": 0,
      "mode": "ECB",
      "type": "block"
    },
    "aes-256-ecb": {
      "cipher": "AES",
      "key": 256,
      "iv": 0,
      "mode": "ECB",
      "type": "block"
    },
    "aes-128-cbc": {
      "cipher": "AES",
      "key": 128,
      "iv": 16,
      "mode": "CBC",
      "type": "block"
    },
    "aes-192-cbc": {
      "cipher": "AES",
      "key": 192,
      "iv": 16,
      "mode": "CBC",
      "type": "block"
    },
    "aes-256-cbc": {
      "cipher": "AES",
      "key": 256,
      "iv": 16,
      "mode": "CBC",
      "type": "block"
    },
    "aes128": {
      "cipher": "AES",
      "key": 128,
      "iv": 16,
      "mode": "CBC",
      "type": "block"
    },
    "aes192": {
      "cipher": "AES",
      "key": 192,
      "iv": 16,
      "mode": "CBC",
      "type": "block"
    },
    "aes256": {
      "cipher": "AES",
      "key": 256,
      "iv": 16,
      "mode": "CBC",
      "type": "block"
    },
    "aes-128-cfb": {
      "cipher": "AES",
      "key": 128,
      "iv": 16,
      "mode": "CFB",
      "type": "stream"
    },
    "aes-192-cfb": {
      "cipher": "AES",
      "key": 192,
      "iv": 16,
      "mode": "CFB",
      "type": "stream"
    },
    "aes-256-cfb": {
      "cipher": "AES",
      "key": 256,
      "iv": 16,
      "mode": "CFB",
      "type": "stream"
    },
    "aes-128-cfb8": {
      "cipher": "AES",
      "key": 128,
      "iv": 16,
      "mode": "CFB8",
      "type": "stream"
    },
    "aes-192-cfb8": {
      "cipher": "AES",
      "key": 192,
      "iv": 16,
      "mode": "CFB8",
      "type": "stream"
    },
    "aes-256-cfb8": {
      "cipher": "AES",
      "key": 256,
      "iv": 16,
      "mode": "CFB8",
      "type": "stream"
    },
    "aes-128-cfb1": {
      "cipher": "AES",
      "key": 128,
      "iv": 16,
      "mode": "CFB1",
      "type": "stream"
    },
    "aes-192-cfb1": {
      "cipher": "AES",
      "key": 192,
      "iv": 16,
      "mode": "CFB1",
      "type": "stream"
    },
    "aes-256-cfb1": {
      "cipher": "AES",
      "key": 256,
      "iv": 16,
      "mode": "CFB1",
      "type": "stream"
    },
    "aes-128-ofb": {
      "cipher": "AES",
      "key": 128,
      "iv": 16,
      "mode": "OFB",
      "type": "stream"
    },
    "aes-192-ofb": {
      "cipher": "AES",
      "key": 192,
      "iv": 16,
      "mode": "OFB",
      "type": "stream"
    },
    "aes-256-ofb": {
      "cipher": "AES",
      "key": 256,
      "iv": 16,
      "mode": "OFB",
      "type": "stream"
    },
    "aes-128-ctr": {
      "cipher": "AES",
      "key": 128,
      "iv": 16,
      "mode": "CTR",
      "type": "stream"
    },
    "aes-192-ctr": {
      "cipher": "AES",
      "key": 192,
      "iv": 16,
      "mode": "CTR",
      "type": "stream"
    },
    "aes-256-ctr": {
      "cipher": "AES",
      "key": 256,
      "iv": 16,
      "mode": "CTR",
      "type": "stream"
    },
    "aes-128-gcm": {
      "cipher": "AES",
      "key": 128,
      "iv": 12,
      "mode": "GCM",
      "type": "auth"
    },
    "aes-192-gcm": {
      "cipher": "AES",
      "key": 192,
      "iv": 12,
      "mode": "GCM",
      "type": "auth"
    },
    "aes-256-gcm": {
      "cipher": "AES",
      "key": 256,
      "iv": 12,
      "mode": "GCM",
      "type": "auth"
    }
  }
  
  },{}],71:[function(require,module,exports){
  (function (Buffer){
  var xor = require('buffer-xor')
  
  function getBlock (self) {
    self._prev = self._cipher.encryptBlock(self._prev)
    return self._prev
  }
  
  exports.encrypt = function (self, chunk) {
    while (self._cache.length < chunk.length) {
      self._cache = Buffer.concat([self._cache, getBlock(self)])
    }
  
    var pad = self._cache.slice(0, chunk.length)
    self._cache = self._cache.slice(chunk.length)
    return xor(chunk, pad)
  }
  
  }).call(this,require("buffer").Buffer)
  },{"buffer":84,"buffer-xor":83}],72:[function(require,module,exports){
  var aes = require('./aes')
  var Buffer = require('safe-buffer').Buffer
  var Transform = require('cipher-base')
  var inherits = require('inherits')
  
  function StreamCipher (mode, key, iv, decrypt) {
    Transform.call(this)
  
    this._cipher = new aes.AES(key)
    this._prev = Buffer.from(iv)
    this._cache = Buffer.allocUnsafe(0)
    this._secCache = Buffer.allocUnsafe(0)
    this._decrypt = decrypt
    this._mode = mode
  }
  
  inherits(StreamCipher, Transform)
  
  StreamCipher.prototype._update = function (chunk) {
    return this._mode.encrypt(this, chunk, this._decrypt)
  }
  
  StreamCipher.prototype._final = function () {
    this._cipher.scrub()
  }
  
  module.exports = StreamCipher
  
  },{"./aes":56,"cipher-base":86,"inherits":180,"safe-buffer":290}],73:[function(require,module,exports){
  var ebtk = require('evp_bytestokey')
  var aes = require('browserify-aes/browser')
  var DES = require('browserify-des')
  var desModes = require('browserify-des/modes')
  var aesModes = require('browserify-aes/modes')
  function createCipher (suite, password) {
    var keyLen, ivLen
    suite = suite.toLowerCase()
    if (aesModes[suite]) {
      keyLen = aesModes[suite].key
      ivLen = aesModes[suite].iv
    } else if (desModes[suite]) {
      keyLen = desModes[suite].key * 8
      ivLen = desModes[suite].iv
    } else {
      throw new TypeError('invalid suite type')
    }
    var keys = ebtk(password, false, keyLen, ivLen)
    return createCipheriv(suite, keys.key, keys.iv)
  }
  function createDecipher (suite, password) {
    var keyLen, ivLen
    suite = suite.toLowerCase()
    if (aesModes[suite]) {
      keyLen = aesModes[suite].key
      ivLen = aesModes[suite].iv
    } else if (desModes[suite]) {
      keyLen = desModes[suite].key * 8
      ivLen = desModes[suite].iv
    } else {
      throw new TypeError('invalid suite type')
    }
    var keys = ebtk(password, false, keyLen, ivLen)
    return createDecipheriv(suite, keys.key, keys.iv)
  }
  
  function createCipheriv (suite, key, iv) {
    suite = suite.toLowerCase()
    if (aesModes[suite]) {
      return aes.createCipheriv(suite, key, iv)
    } else if (desModes[suite]) {
      return new DES({
        key: key,
        iv: iv,
        mode: suite
      })
    } else {
      throw new TypeError('invalid suite type')
    }
  }
  function createDecipheriv (suite, key, iv) {
    suite = suite.toLowerCase()
    if (aesModes[suite]) {
      return aes.createDecipheriv(suite, key, iv)
    } else if (desModes[suite]) {
      return new DES({
        key: key,
        iv: iv,
        mode: suite,
        decrypt: true
      })
    } else {
      throw new TypeError('invalid suite type')
    }
  }
  exports.createCipher = exports.Cipher = createCipher
  exports.createCipheriv = exports.Cipheriv = createCipheriv
  exports.createDecipher = exports.Decipher = createDecipher
  exports.createDecipheriv = exports.Decipheriv = createDecipheriv
  function getCiphers () {
    return Object.keys(desModes).concat(aes.getCiphers())
  }
  exports.listCiphers = exports.getCiphers = getCiphers
  
  },{"browserify-aes/browser":58,"browserify-aes/modes":69,"browserify-des":74,"browserify-des/modes":75,"evp_bytestokey":158}],74:[function(require,module,exports){
  (function (Buffer){
  var CipherBase = require('cipher-base')
  var des = require('des.js')
  var inherits = require('inherits')
  
  var modes = {
    'des-ede3-cbc': des.CBC.instantiate(des.EDE),
    'des-ede3': des.EDE,
    'des-ede-cbc': des.CBC.instantiate(des.EDE),
    'des-ede': des.EDE,
    'des-cbc': des.CBC.instantiate(des.DES),
    'des-ecb': des.DES
  }
  modes.des = modes['des-cbc']
  modes.des3 = modes['des-ede3-cbc']
  module.exports = DES
  inherits(DES, CipherBase)
  function DES (opts) {
    CipherBase.call(this)
    var modeName = opts.mode.toLowerCase()
    var mode = modes[modeName]
    var type
    if (opts.decrypt) {
      type = 'decrypt'
    } else {
      type = 'encrypt'
    }
    var key = opts.key
    if (modeName === 'des-ede' || modeName === 'des-ede-cbc') {
      key = Buffer.concat([key, key.slice(0, 8)])
    }
    var iv = opts.iv
    this._des = mode.create({
      key: key,
      iv: iv,
      type: type
    })
  }
  DES.prototype._update = function (data) {
    return new Buffer(this._des.update(data))
  }
  DES.prototype._final = function () {
    return new Buffer(this._des.final())
  }
  
  }).call(this,require("buffer").Buffer)
  },{"buffer":84,"cipher-base":86,"des.js":99,"inherits":180}],75:[function(require,module,exports){
  exports['des-ecb'] = {
    key: 8,
    iv: 0
  }
  exports['des-cbc'] = exports.des = {
    key: 8,
    iv: 8
  }
  exports['des-ede3-cbc'] = exports.des3 = {
    key: 24,
    iv: 8
  }
  exports['des-ede3'] = {
    key: 24,
    iv: 0
  }
  exports['des-ede-cbc'] = {
    key: 16,
    iv: 8
  }
  exports['des-ede'] = {
    key: 16,
    iv: 0
  }
  
  },{}],76:[function(require,module,exports){
  (function (Buffer){
  var bn = require('bn.js');
  var randomBytes = require('randombytes');
  module.exports = crt;
  function blind(priv) {
    var r = getr(priv);
    var blinder = r.toRed(bn.mont(priv.modulus))
    .redPow(new bn(priv.publicExponent)).fromRed();
    return {
      blinder: blinder,
      unblinder:r.invm(priv.modulus)
    };
  }
  function crt(msg, priv) {
    var blinds = blind(priv);
    var len = priv.modulus.byteLength();
    var mod = bn.mont(priv.modulus);
    var blinded = new bn(msg).mul(blinds.blinder).umod(priv.modulus);
    var c1 = blinded.toRed(bn.mont(priv.prime1));
    var c2 = blinded.toRed(bn.mont(priv.prime2));
    var qinv = priv.coefficient;
    var p = priv.prime1;
    var q = priv.prime2;
    var m1 = c1.redPow(priv.exponent1);
    var m2 = c2.redPow(priv.exponent2);
    m1 = m1.fromRed();
    m2 = m2.fromRed();
    var h = m1.isub(m2).imul(qinv).umod(p);
    h.imul(q);
    m2.iadd(h);
    return new Buffer(m2.imul(blinds.unblinder).umod(priv.modulus).toArray(false, len));
  }
  crt.getr = getr;
  function getr(priv) {
    var len = priv.modulus.byteLength();
    var r = new bn(randomBytes(len));
    while (r.cmp(priv.modulus) >=  0 || !r.umod(priv.prime1) || !r.umod(priv.prime2)) {
      r = new bn(randomBytes(len));
    }
    return r;
  }
  
  }).call(this,require("buffer").Buffer)
  },{"bn.js":53,"buffer":84,"randombytes":270}],77:[function(require,module,exports){
  module.exports = require('./browser/algorithms.json')
  
  },{"./browser/algorithms.json":78}],78:[function(require,module,exports){
  module.exports={
    "sha224WithRSAEncryption": {
      "sign": "rsa",
      "hash": "sha224",
      "id": "302d300d06096086480165030402040500041c"
    },
    "RSA-SHA224": {
      "sign": "ecdsa/rsa",
      "hash": "sha224",
      "id": "302d300d06096086480165030402040500041c"
    },
    "sha256WithRSAEncryption": {
      "sign": "rsa",
      "hash": "sha256",
      "id": "3031300d060960864801650304020105000420"
    },
    "RSA-SHA256": {
      "sign": "ecdsa/rsa",
      "hash": "sha256",
      "id": "3031300d060960864801650304020105000420"
    },
    "sha384WithRSAEncryption": {
      "sign": "rsa",
      "hash": "sha384",
      "id": "3041300d060960864801650304020205000430"
    },
    "RSA-SHA384": {
      "sign": "ecdsa/rsa",
      "hash": "sha384",
      "id": "3041300d060960864801650304020205000430"
    },
    "sha512WithRSAEncryption": {
      "sign": "rsa",
      "hash": "sha512",
      "id": "3051300d060960864801650304020305000440"
    },
    "RSA-SHA512": {
      "sign": "ecdsa/rsa",
      "hash": "sha512",
      "id": "3051300d060960864801650304020305000440"
    },
    "RSA-SHA1": {
      "sign": "rsa",
      "hash": "sha1",
      "id": "3021300906052b0e03021a05000414"
    },
    "ecdsa-with-SHA1": {
      "sign": "ecdsa",
      "hash": "sha1",
      "id": ""
    },
    "sha256": {
      "sign": "ecdsa",
      "hash": "sha256",
      "id": ""
    },
    "sha224": {
      "sign": "ecdsa",
      "hash": "sha224",
      "id": ""
    },
    "sha384": {
      "sign": "ecdsa",
      "hash": "sha384",
      "id": ""
    },
    "sha512": {
      "sign": "ecdsa",
      "hash": "sha512",
      "id": ""
    },
    "DSA-SHA": {
      "sign": "dsa",
      "hash": "sha1",
      "id": ""
    },
    "DSA-SHA1": {
      "sign": "dsa",
      "hash": "sha1",
      "id": ""
    },
    "DSA": {
      "sign": "dsa",
      "hash": "sha1",
      "id": ""
    },
    "DSA-WITH-SHA224": {
      "sign": "dsa",
      "hash": "sha224",
      "id": ""
    },
    "DSA-SHA224": {
      "sign": "dsa",
      "hash": "sha224",
      "id": ""
    },
    "DSA-WITH-SHA256": {
      "sign": "dsa",
      "hash": "sha256",
      "id": ""
    },
    "DSA-SHA256": {
      "sign": "dsa",
      "hash": "sha256",
      "id": ""
    },
    "DSA-WITH-SHA384": {
      "sign": "dsa",
      "hash": "sha384",
      "id": ""
    },
    "DSA-SHA384": {
      "sign": "dsa",
      "hash": "sha384",
      "id": ""
    },
    "DSA-WITH-SHA512": {
      "sign": "dsa",
      "hash": "sha512",
      "id": ""
    },
    "DSA-SHA512": {
      "sign": "dsa",
      "hash": "sha512",
      "id": ""
    },
    "DSA-RIPEMD160": {
      "sign": "dsa",
      "hash": "rmd160",
      "id": ""
    },
    "ripemd160WithRSA": {
      "sign": "rsa",
      "hash": "rmd160",
      "id": "3021300906052b2403020105000414"
    },
    "RSA-RIPEMD160": {
      "sign": "rsa",
      "hash": "rmd160",
      "id": "3021300906052b2403020105000414"
    },
    "md5WithRSAEncryption": {
      "sign": "rsa",
      "hash": "md5",
      "id": "3020300c06082a864886f70d020505000410"
    },
    "RSA-MD5": {
      "sign": "rsa",
      "hash": "md5",
      "id": "3020300c06082a864886f70d020505000410"
    }
  }
  
  },{}],79:[function(require,module,exports){
  module.exports={
    "1.3.132.0.10": "secp256k1",
    "1.3.132.0.33": "p224",
    "1.2.840.10045.3.1.1": "p192",
    "1.2.840.10045.3.1.7": "p256",
    "1.3.132.0.34": "p384",
    "1.3.132.0.35": "p521"
  }
  
  },{}],80:[function(require,module,exports){
  (function (Buffer){
  var createHash = require('create-hash')
  var stream = require('stream')
  var inherits = require('inherits')
  var sign = require('./sign')
  var verify = require('./verify')
  
  var algorithms = require('./algorithms.json')
  Object.keys(algorithms).forEach(function (key) {
    algorithms[key].id = new Buffer(algorithms[key].id, 'hex')
    algorithms[key.toLowerCase()] = algorithms[key]
  })
  
  function Sign (algorithm) {
    stream.Writable.call(this)
  
    var data = algorithms[algorithm]
    if (!data) throw new Error('Unknown message digest')
  
    this._hashType = data.hash
    this._hash = createHash(data.hash)
    this._tag = data.id
    this._signType = data.sign
  }
  inherits(Sign, stream.Writable)
  
  Sign.prototype._write = function _write (data, _, done) {
    this._hash.update(data)
    done()
  }
  
  Sign.prototype.update = function update (data, enc) {
    if (typeof data === 'string') data = new Buffer(data, enc)
  
    this._hash.update(data)
    return this
  }
  
  Sign.prototype.sign = function signMethod (key, enc) {
    this.end()
    var hash = this._hash.digest()
    var sig = sign(hash, key, this._hashType, this._signType, this._tag)
  
    return enc ? sig.toString(enc) : sig
  }
  
  function Verify (algorithm) {
    stream.Writable.call(this)
  
    var data = algorithms[algorithm]
    if (!data) throw new Error('Unknown message digest')
  
    this._hash = createHash(data.hash)
    this._tag = data.id
    this._signType = data.sign
  }
  inherits(Verify, stream.Writable)
  
  Verify.prototype._write = function _write (data, _, done) {
    this._hash.update(data)
    done()
  }
  
  Verify.prototype.update = function update (data, enc) {
    if (typeof data === 'string') data = new Buffer(data, enc)
  
    this._hash.update(data)
    return this
  }
  
  Verify.prototype.verify = function verifyMethod (key, sig, enc) {
    if (typeof sig === 'string') sig = new Buffer(sig, enc)
  
    this.end()
    var hash = this._hash.digest()
    return verify(sig, hash, key, this._signType, this._tag)
  }
  
  function createSign (algorithm) {
    return new Sign(algorithm)
  }
  
  function createVerify (algorithm) {
    return new Verify(algorithm)
  }
  
  module.exports = {
    Sign: createSign,
    Verify: createVerify,
    createSign: createSign,
    createVerify: createVerify
  }
  
  }).call(this,require("buffer").Buffer)
  },{"./algorithms.json":78,"./sign":81,"./verify":82,"buffer":84,"create-hash":91,"inherits":180,"stream":311}],81:[function(require,module,exports){
  (function (Buffer){
  // much of this based on https://github.com/indutny/self-signed/blob/gh-pages/lib/rsa.js
  var createHmac = require('create-hmac')
  var crt = require('browserify-rsa')
  var EC = require('elliptic').ec
  var BN = require('bn.js')
  var parseKeys = require('parse-asn1')
  var curves = require('./curves.json')
  
  function sign (hash, key, hashType, signType, tag) {
    var priv = parseKeys(key)
    if (priv.curve) {
      // rsa keys can be interpreted as ecdsa ones in openssl
      if (signType !== 'ecdsa' && signType !== 'ecdsa/rsa') throw new Error('wrong private key type')
      return ecSign(hash, priv)
    } else if (priv.type === 'dsa') {
      if (signType !== 'dsa') throw new Error('wrong private key type')
      return dsaSign(hash, priv, hashType)
    } else {
      if (signType !== 'rsa' && signType !== 'ecdsa/rsa') throw new Error('wrong private key type')
    }
    hash = Buffer.concat([tag, hash])
    var len = priv.modulus.byteLength()
    var pad = [ 0, 1 ]
    while (hash.length + pad.length + 1 < len) pad.push(0xff)
    pad.push(0x00)
    var i = -1
    while (++i < hash.length) pad.push(hash[i])
  
    var out = crt(pad, priv)
    return out
  }
  
  function ecSign (hash, priv) {
    var curveId = curves[priv.curve.join('.')]
    if (!curveId) throw new Error('unknown curve ' + priv.curve.join('.'))
  
    var curve = new EC(curveId)
    var key = curve.keyFromPrivate(priv.privateKey)
    var out = key.sign(hash)
  
    return new Buffer(out.toDER())
  }
  
  function dsaSign (hash, priv, algo) {
    var x = priv.params.priv_key
    var p = priv.params.p
    var q = priv.params.q
    var g = priv.params.g
    var r = new BN(0)
    var k
    var H = bits2int(hash, q).mod(q)
    var s = false
    var kv = getKey(x, q, hash, algo)
    while (s === false) {
      k = makeKey(q, kv, algo)
      r = makeR(g, k, p, q)
      s = k.invm(q).imul(H.add(x.mul(r))).mod(q)
      if (s.cmpn(0) === 0) {
        s = false
        r = new BN(0)
      }
    }
    return toDER(r, s)
  }
  
  function toDER (r, s) {
    r = r.toArray()
    s = s.toArray()
  
    // Pad values
    if (r[0] & 0x80) r = [ 0 ].concat(r)
    if (s[0] & 0x80) s = [ 0 ].concat(s)
  
    var total = r.length + s.length + 4
    var res = [ 0x30, total, 0x02, r.length ]
    res = res.concat(r, [ 0x02, s.length ], s)
    return new Buffer(res)
  }
  
  function getKey (x, q, hash, algo) {
    x = new Buffer(x.toArray())
    if (x.length < q.byteLength()) {
      var zeros = new Buffer(q.byteLength() - x.length)
      zeros.fill(0)
      x = Buffer.concat([ zeros, x ])
    }
    var hlen = hash.length
    var hbits = bits2octets(hash, q)
    var v = new Buffer(hlen)
    v.fill(1)
    var k = new Buffer(hlen)
    k.fill(0)
    k = createHmac(algo, k).update(v).update(new Buffer([ 0 ])).update(x).update(hbits).digest()
    v = createHmac(algo, k).update(v).digest()
    k = createHmac(algo, k).update(v).update(new Buffer([ 1 ])).update(x).update(hbits).digest()
    v = createHmac(algo, k).update(v).digest()
    return { k: k, v: v }
  }
  
  function bits2int (obits, q) {
    var bits = new BN(obits)
    var shift = (obits.length << 3) - q.bitLength()
    if (shift > 0) bits.ishrn(shift)
    return bits
  }
  
  function bits2octets (bits, q) {
    bits = bits2int(bits, q)
    bits = bits.mod(q)
    var out = new Buffer(bits.toArray())
    if (out.length < q.byteLength()) {
      var zeros = new Buffer(q.byteLength() - out.length)
      zeros.fill(0)
      out = Buffer.concat([ zeros, out ])
    }
    return out
  }
  
  function makeKey (q, kv, algo) {
    var t
    var k
  
    do {
      t = new Buffer(0)
  
      while (t.length * 8 < q.bitLength()) {
        kv.v = createHmac(algo, kv.k).update(kv.v).digest()
        t = Buffer.concat([ t, kv.v ])
      }
  
      k = bits2int(t, q)
      kv.k = createHmac(algo, kv.k).update(kv.v).update(new Buffer([ 0 ])).digest()
      kv.v = createHmac(algo, kv.k).update(kv.v).digest()
    } while (k.cmp(q) !== -1)
  
    return k
  }
  
  function makeR (g, k, p, q) {
    return g.toRed(BN.mont(p)).redPow(k).fromRed().mod(q)
  }
  
  module.exports = sign
  module.exports.getKey = getKey
  module.exports.makeKey = makeKey
  
  }).call(this,require("buffer").Buffer)
  },{"./curves.json":79,"bn.js":53,"browserify-rsa":76,"buffer":84,"create-hmac":94,"elliptic":109,"parse-asn1":245}],82:[function(require,module,exports){
  (function (Buffer){
  // much of this based on https://github.com/indutny/self-signed/blob/gh-pages/lib/rsa.js
  var BN = require('bn.js')
  var EC = require('elliptic').ec
  var parseKeys = require('parse-asn1')
  var curves = require('./curves.json')
  
  function verify (sig, hash, key, signType, tag) {
    var pub = parseKeys(key)
    if (pub.type === 'ec') {
      // rsa keys can be interpreted as ecdsa ones in openssl
      if (signType !== 'ecdsa' && signType !== 'ecdsa/rsa') throw new Error('wrong public key type')
      return ecVerify(sig, hash, pub)
    } else if (pub.type === 'dsa') {
      if (signType !== 'dsa') throw new Error('wrong public key type')
      return dsaVerify(sig, hash, pub)
    } else {
      if (signType !== 'rsa' && signType !== 'ecdsa/rsa') throw new Error('wrong public key type')
    }
    hash = Buffer.concat([tag, hash])
    var len = pub.modulus.byteLength()
    var pad = [ 1 ]
    var padNum = 0
    while (hash.length + pad.length + 2 < len) {
      pad.push(0xff)
      padNum++
    }
    pad.push(0x00)
    var i = -1
    while (++i < hash.length) {
      pad.push(hash[i])
    }
    pad = new Buffer(pad)
    var red = BN.mont(pub.modulus)
    sig = new BN(sig).toRed(red)
  
    sig = sig.redPow(new BN(pub.publicExponent))
    sig = new Buffer(sig.fromRed().toArray())
    var out = padNum < 8 ? 1 : 0
    len = Math.min(sig.length, pad.length)
    if (sig.length !== pad.length) out = 1
  
    i = -1
    while (++i < len) out |= sig[i] ^ pad[i]
    return out === 0
  }
  
  function ecVerify (sig, hash, pub) {
    var curveId = curves[pub.data.algorithm.curve.join('.')]
    if (!curveId) throw new Error('unknown curve ' + pub.data.algorithm.curve.join('.'))
  
    var curve = new EC(curveId)
    var pubkey = pub.data.subjectPrivateKey.data
  
    return curve.verify(hash, sig, pubkey)
  }
  
  function dsaVerify (sig, hash, pub) {
    var p = pub.data.p
    var q = pub.data.q
    var g = pub.data.g
    var y = pub.data.pub_key
    var unpacked = parseKeys.signature.decode(sig, 'der')
    var s = unpacked.s
    var r = unpacked.r
    checkValue(s, q)
    checkValue(r, q)
    var montp = BN.mont(p)
    var w = s.invm(q)
    var v = g.toRed(montp)
      .redPow(new BN(hash).mul(w).mod(q))
      .fromRed()
      .mul(y.toRed(montp).redPow(r.mul(w).mod(q)).fromRed())
      .mod(p)
      .mod(q)
    return v.cmp(r) === 0
  }
  
  function checkValue (b, q) {
    if (b.cmpn(0) <= 0) throw new Error('invalid sig')
    if (b.cmp(q) >= q) throw new Error('invalid sig')
  }
  
  module.exports = verify
  
  }).call(this,require("buffer").Buffer)
  },{"./curves.json":79,"bn.js":53,"buffer":84,"elliptic":109,"parse-asn1":245}],83:[function(require,module,exports){
  (function (Buffer){
  module.exports = function xor (a, b) {
    var length = Math.min(a.length, b.length)
    var buffer = new Buffer(length)
  
    for (var i = 0; i < length; ++i) {
      buffer[i] = a[i] ^ b[i]
    }
  
    return buffer
  }
  
  }).call(this,require("buffer").Buffer)
  },{"buffer":84}],84:[function(require,module,exports){
  /*!
   * The buffer module from node.js, for the browser.
   *
   * @author   Feross Aboukhadijeh <https://feross.org>
   * @license  MIT
   */
  /* eslint-disable no-proto */
  
  'use strict'
  
  var base64 = require('base64-js')
  var ieee754 = require('ieee754')
  
  exports.Buffer = Buffer
  exports.SlowBuffer = SlowBuffer
  exports.INSPECT_MAX_BYTES = 50
  
  var K_MAX_LENGTH = 0x7fffffff
  exports.kMaxLength = K_MAX_LENGTH
  
  /**
   * If `Buffer.TYPED_ARRAY_SUPPORT`:
   *   === true    Use Uint8Array implementation (fastest)
   *   === false   Print warning and recommend using `buffer` v4.x which has an Object
   *               implementation (most compatible, even IE6)
   *
   * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
   * Opera 11.6+, iOS 4.2+.
   *
   * We report that the browser does not support typed arrays if the are not subclassable
   * using __proto__. Firefox 4-29 lacks support for adding new properties to `Uint8Array`
   * (See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438). IE 10 lacks support
   * for __proto__ and has a buggy typed array implementation.
   */
  Buffer.TYPED_ARRAY_SUPPORT = typedArraySupport()
  
  if (!Buffer.TYPED_ARRAY_SUPPORT && typeof console !== 'undefined' &&
      typeof console.error === 'function') {
    console.error(
      'This browser lacks typed array (Uint8Array) support which is required by ' +
      '`buffer` v5.x. Use `buffer` v4.x if you require old browser support.'
    )
  }
  
  function typedArraySupport () {
    // Can typed array instances can be augmented?
    try {
      var arr = new Uint8Array(1)
      arr.__proto__ = {__proto__: Uint8Array.prototype, foo: function () { return 42 }}
      return arr.foo() === 42
    } catch (e) {
      return false
    }
  }
  
  function createBuffer (length) {
    if (length > K_MAX_LENGTH) {
      throw new RangeError('Invalid typed array length')
    }
    // Return an augmented `Uint8Array` instance
    var buf = new Uint8Array(length)
    buf.__proto__ = Buffer.prototype
    return buf
  }
  
  /**
   * The Buffer constructor returns instances of `Uint8Array` that have their
   * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
   * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
   * and the `Uint8Array` methods. Square bracket notation works as expected -- it
   * returns a single octet.
   *
   * The `Uint8Array` prototype remains unmodified.
   */
  
  function Buffer (arg, encodingOrOffset, length) {
    // Common case.
    if (typeof arg === 'number') {
      if (typeof encodingOrOffset === 'string') {
        throw new Error(
          'If encoding is specified then the first argument must be a string'
        )
      }
      return allocUnsafe(arg)
    }
    return from(arg, encodingOrOffset, length)
  }
  
  // Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97
  if (typeof Symbol !== 'undefined' && Symbol.species &&
      Buffer[Symbol.species] === Buffer) {
    Object.defineProperty(Buffer, Symbol.species, {
      value: null,
      configurable: true,
      enumerable: false,
      writable: false
    })
  }
  
  Buffer.poolSize = 8192 // not used by this implementation
  
  function from (value, encodingOrOffset, length) {
    if (typeof value === 'number') {
      throw new TypeError('"value" argument must not be a number')
    }
  
    if (isArrayBuffer(value)) {
      return fromArrayBuffer(value, encodingOrOffset, length)
    }
  
    if (typeof value === 'string') {
      return fromString(value, encodingOrOffset)
    }
  
    return fromObject(value)
  }
  
  /**
   * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
   * if value is a number.
   * Buffer.from(str[, encoding])
   * Buffer.from(array)
   * Buffer.from(buffer)
   * Buffer.from(arrayBuffer[, byteOffset[, length]])
   **/
  Buffer.from = function (value, encodingOrOffset, length) {
    return from(value, encodingOrOffset, length)
  }
  
  // Note: Change prototype *after* Buffer.from is defined to workaround Chrome bug:
  // https://github.com/feross/buffer/pull/148
  Buffer.prototype.__proto__ = Uint8Array.prototype
  Buffer.__proto__ = Uint8Array
  
  function assertSize (size) {
    if (typeof size !== 'number') {
      throw new TypeError('"size" argument must be a number')
    } else if (size < 0) {
      throw new RangeError('"size" argument must not be negative')
    }
  }
  
  function alloc (size, fill, encoding) {
    assertSize(size)
    if (size <= 0) {
      return createBuffer(size)
    }
    if (fill !== undefined) {
      // Only pay attention to encoding if it's a string. This
      // prevents accidentally sending in a number that would
      // be interpreted as a start offset.
      return typeof encoding === 'string'
        ? createBuffer(size).fill(fill, encoding)
        : createBuffer(size).fill(fill)
    }
    return createBuffer(size)
  }
  
  /**
   * Creates a new filled Buffer instance.
   * alloc(size[, fill[, encoding]])
   **/
  Buffer.alloc = function (size, fill, encoding) {
    return alloc(size, fill, encoding)
  }
  
  function allocUnsafe (size) {
    assertSize(size)
    return createBuffer(size < 0 ? 0 : checked(size) | 0)
  }
  
  /**
   * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
   * */
  Buffer.allocUnsafe = function (size) {
    return allocUnsafe(size)
  }
  /**
   * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
   */
  Buffer.allocUnsafeSlow = function (size) {
    return allocUnsafe(size)
  }
  
  function fromString (string, encoding) {
    if (typeof encoding !== 'string' || encoding === '') {
      encoding = 'utf8'
    }
  
    if (!Buffer.isEncoding(encoding)) {
      throw new TypeError('"encoding" must be a valid string encoding')
    }
  
    var length = byteLength(string, encoding) | 0
    var buf = createBuffer(length)
  
    var actual = buf.write(string, encoding)
  
    if (actual !== length) {
      // Writing a hex string, for example, that contains invalid characters will
      // cause everything after the first invalid character to be ignored. (e.g.
      // 'abxxcd' will be treated as 'ab')
      buf = buf.slice(0, actual)
    }
  
    return buf
  }
  
  function fromArrayLike (array) {
    var length = array.length < 0 ? 0 : checked(array.length) | 0
    var buf = createBuffer(length)
    for (var i = 0; i < length; i += 1) {
      buf[i] = array[i] & 255
    }
    return buf
  }
  
  function fromArrayBuffer (array, byteOffset, length) {
    if (byteOffset < 0 || array.byteLength < byteOffset) {
      throw new RangeError('\'offset\' is out of bounds')
    }
  
    if (array.byteLength < byteOffset + (length || 0)) {
      throw new RangeError('\'length\' is out of bounds')
    }
  
    var buf
    if (byteOffset === undefined && length === undefined) {
      buf = new Uint8Array(array)
    } else if (length === undefined) {
      buf = new Uint8Array(array, byteOffset)
    } else {
      buf = new Uint8Array(array, byteOffset, length)
    }
  
    // Return an augmented `Uint8Array` instance
    buf.__proto__ = Buffer.prototype
    return buf
  }
  
  function fromObject (obj) {
    if (Buffer.isBuffer(obj)) {
      var len = checked(obj.length) | 0
      var buf = createBuffer(len)
  
      if (buf.length === 0) {
        return buf
      }
  
      obj.copy(buf, 0, 0, len)
      return buf
    }
  
    if (obj) {
      if (isArrayBufferView(obj) || 'length' in obj) {
        if (typeof obj.length !== 'number' || numberIsNaN(obj.length)) {
          return createBuffer(0)
        }
        return fromArrayLike(obj)
      }
  
      if (obj.type === 'Buffer' && Array.isArray(obj.data)) {
        return fromArrayLike(obj.data)
      }
    }
  
    throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.')
  }
  
  function checked (length) {
    // Note: cannot use `length < K_MAX_LENGTH` here because that fails when
    // length is NaN (which is otherwise coerced to zero.)
    if (length >= K_MAX_LENGTH) {
      throw new RangeError('Attempt to allocate Buffer larger than maximum ' +
                           'size: 0x' + K_MAX_LENGTH.toString(16) + ' bytes')
    }
    return length | 0
  }
  
  function SlowBuffer (length) {
    if (+length != length) { // eslint-disable-line eqeqeq
      length = 0
    }
    return Buffer.alloc(+length)
  }
  
  Buffer.isBuffer = function isBuffer (b) {
    return b != null && b._isBuffer === true
  }
  
  Buffer.compare = function compare (a, b) {
    if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
      throw new TypeError('Arguments must be Buffers')
    }
  
    if (a === b) return 0
  
    var x = a.length
    var y = b.length
  
    for (var i = 0, len = Math.min(x, y); i < len; ++i) {
      if (a[i] !== b[i]) {
        x = a[i]
        y = b[i]
        break
      }
    }
  
    if (x < y) return -1
    if (y < x) return 1
    return 0
  }
  
  Buffer.isEncoding = function isEncoding (encoding) {
    switch (String(encoding).toLowerCase()) {
      case 'hex':
      case 'utf8':
      case 'utf-8':
      case 'ascii':
      case 'latin1':
      case 'binary':
      case 'base64':
      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return true
      default:
        return false
    }
  }
  
  Buffer.concat = function concat (list, length) {
    if (!Array.isArray(list)) {
      throw new TypeError('"list" argument must be an Array of Buffers')
    }
  
    if (list.length === 0) {
      return Buffer.alloc(0)
    }
  
    var i
    if (length === undefined) {
      length = 0
      for (i = 0; i < list.length; ++i) {
        length += list[i].length
      }
    }
  
    var buffer = Buffer.allocUnsafe(length)
    var pos = 0
    for (i = 0; i < list.length; ++i) {
      var buf = list[i]
      if (!Buffer.isBuffer(buf)) {
        throw new TypeError('"list" argument must be an Array of Buffers')
      }
      buf.copy(buffer, pos)
      pos += buf.length
    }
    return buffer
  }
  
  function byteLength (string, encoding) {
    if (Buffer.isBuffer(string)) {
      return string.length
    }
    if (isArrayBufferView(string) || isArrayBuffer(string)) {
      return string.byteLength
    }
    if (typeof string !== 'string') {
      string = '' + string
    }
  
    var len = string.length
    if (len === 0) return 0
  
    // Use a for loop to avoid recursion
    var loweredCase = false
    for (;;) {
      switch (encoding) {
        case 'ascii':
        case 'latin1':
        case 'binary':
          return len
        case 'utf8':
        case 'utf-8':
        case undefined:
          return utf8ToBytes(string).length
        case 'ucs2':
        case 'ucs-2':
        case 'utf16le':
        case 'utf-16le':
          return len * 2
        case 'hex':
          return len >>> 1
        case 'base64':
          return base64ToBytes(string).length
        default:
          if (loweredCase) return utf8ToBytes(string).length // assume utf8
          encoding = ('' + encoding).toLowerCase()
          loweredCase = true
      }
    }
  }
  Buffer.byteLength = byteLength
  
  function slowToString (encoding, start, end) {
    var loweredCase = false
  
    // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
    // property of a typed array.
  
    // This behaves neither like String nor Uint8Array in that we set start/end
    // to their upper/lower bounds if the value passed is out of range.
    // undefined is handled specially as per ECMA-262 6th Edition,
    // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
    if (start === undefined || start < 0) {
      start = 0
    }
    // Return early if start > this.length. Done here to prevent potential uint32
    // coercion fail below.
    if (start > this.length) {
      return ''
    }
  
    if (end === undefined || end > this.length) {
      end = this.length
    }
  
    if (end <= 0) {
      return ''
    }
  
    // Force coercion to uint32. This will also coerce falsey/NaN values to 0.
    end >>>= 0
    start >>>= 0
  
    if (end <= start) {
      return ''
    }
  
    if (!encoding) encoding = 'utf8'
  
    while (true) {
      switch (encoding) {
        case 'hex':
          return hexSlice(this, start, end)
  
        case 'utf8':
        case 'utf-8':
          return utf8Slice(this, start, end)
  
        case 'ascii':
          return asciiSlice(this, start, end)
  
        case 'latin1':
        case 'binary':
          return latin1Slice(this, start, end)
  
        case 'base64':
          return base64Slice(this, start, end)
  
        case 'ucs2':
        case 'ucs-2':
        case 'utf16le':
        case 'utf-16le':
          return utf16leSlice(this, start, end)
  
        default:
          if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
          encoding = (encoding + '').toLowerCase()
          loweredCase = true
      }
    }
  }
  
  // This property is used by `Buffer.isBuffer` (and the `is-buffer` npm package)
  // to detect a Buffer instance. It's not possible to use `instanceof Buffer`
  // reliably in a browserify context because there could be multiple different
  // copies of the 'buffer' package in use. This method works even for Buffer
  // instances that were created from another copy of the `buffer` package.
  // See: https://github.com/feross/buffer/issues/154
  Buffer.prototype._isBuffer = true
  
  function swap (b, n, m) {
    var i = b[n]
    b[n] = b[m]
    b[m] = i
  }
  
  Buffer.prototype.swap16 = function swap16 () {
    var len = this.length
    if (len % 2 !== 0) {
      throw new RangeError('Buffer size must be a multiple of 16-bits')
    }
    for (var i = 0; i < len; i += 2) {
      swap(this, i, i + 1)
    }
    return this
  }
  
  Buffer.prototype.swap32 = function swap32 () {
    var len = this.length
    if (len % 4 !== 0) {
      throw new RangeError('Buffer size must be a multiple of 32-bits')
    }
    for (var i = 0; i < len; i += 4) {
      swap(this, i, i + 3)
      swap(this, i + 1, i + 2)
    }
    return this
  }
  
  Buffer.prototype.swap64 = function swap64 () {
    var len = this.length
    if (len % 8 !== 0) {
      throw new RangeError('Buffer size must be a multiple of 64-bits')
    }
    for (var i = 0; i < len; i += 8) {
      swap(this, i, i + 7)
      swap(this, i + 1, i + 6)
      swap(this, i + 2, i + 5)
      swap(this, i + 3, i + 4)
    }
    return this
  }
  
  Buffer.prototype.toString = function toString () {
    var length = this.length
    if (length === 0) return ''
    if (arguments.length === 0) return utf8Slice(this, 0, length)
    return slowToString.apply(this, arguments)
  }
  
  Buffer.prototype.equals = function equals (b) {
    if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')
    if (this === b) return true
    return Buffer.compare(this, b) === 0
  }
  
  Buffer.prototype.inspect = function inspect () {
    var str = ''
    var max = exports.INSPECT_MAX_BYTES
    if (this.length > 0) {
      str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')
      if (this.length > max) str += ' ... '
    }
    return '<Buffer ' + str + '>'
  }
  
  Buffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {
    if (!Buffer.isBuffer(target)) {
      throw new TypeError('Argument must be a Buffer')
    }
  
    if (start === undefined) {
      start = 0
    }
    if (end === undefined) {
      end = target ? target.length : 0
    }
    if (thisStart === undefined) {
      thisStart = 0
    }
    if (thisEnd === undefined) {
      thisEnd = this.length
    }
  
    if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
      throw new RangeError('out of range index')
    }
  
    if (thisStart >= thisEnd && start >= end) {
      return 0
    }
    if (thisStart >= thisEnd) {
      return -1
    }
    if (start >= end) {
      return 1
    }
  
    start >>>= 0
    end >>>= 0
    thisStart >>>= 0
    thisEnd >>>= 0
  
    if (this === target) return 0
  
    var x = thisEnd - thisStart
    var y = end - start
    var len = Math.min(x, y)
  
    var thisCopy = this.slice(thisStart, thisEnd)
    var targetCopy = target.slice(start, end)
  
    for (var i = 0; i < len; ++i) {
      if (thisCopy[i] !== targetCopy[i]) {
        x = thisCopy[i]
        y = targetCopy[i]
        break
      }
    }
  
    if (x < y) return -1
    if (y < x) return 1
    return 0
  }
  
  // Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
  // OR the last index of `val` in `buffer` at offset <= `byteOffset`.
  //
  // Arguments:
  // - buffer - a Buffer to search
  // - val - a string, Buffer, or number
  // - byteOffset - an index into `buffer`; will be clamped to an int32
  // - encoding - an optional encoding, relevant is val is a string
  // - dir - true for indexOf, false for lastIndexOf
  function bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {
    // Empty buffer means no match
    if (buffer.length === 0) return -1
  
    // Normalize byteOffset
    if (typeof byteOffset === 'string') {
      encoding = byteOffset
      byteOffset = 0
    } else if (byteOffset > 0x7fffffff) {
      byteOffset = 0x7fffffff
    } else if (byteOffset < -0x80000000) {
      byteOffset = -0x80000000
    }
    byteOffset = +byteOffset  // Coerce to Number.
    if (numberIsNaN(byteOffset)) {
      // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
      byteOffset = dir ? 0 : (buffer.length - 1)
    }
  
    // Normalize byteOffset: negative offsets start from the end of the buffer
    if (byteOffset < 0) byteOffset = buffer.length + byteOffset
    if (byteOffset >= buffer.length) {
      if (dir) return -1
      else byteOffset = buffer.length - 1
    } else if (byteOffset < 0) {
      if (dir) byteOffset = 0
      else return -1
    }
  
    // Normalize val
    if (typeof val === 'string') {
      val = Buffer.from(val, encoding)
    }
  
    // Finally, search either indexOf (if dir is true) or lastIndexOf
    if (Buffer.isBuffer(val)) {
      // Special case: looking for empty string/buffer always fails
      if (val.length === 0) {
        return -1
      }
      return arrayIndexOf(buffer, val, byteOffset, encoding, dir)
    } else if (typeof val === 'number') {
      val = val & 0xFF // Search for a byte value [0-255]
      if (typeof Uint8Array.prototype.indexOf === 'function') {
        if (dir) {
          return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)
        } else {
          return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)
        }
      }
      return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)
    }
  
    throw new TypeError('val must be string, number or Buffer')
  }
  
  function arrayIndexOf (arr, val, byteOffset, encoding, dir) {
    var indexSize = 1
    var arrLength = arr.length
    var valLength = val.length
  
    if (encoding !== undefined) {
      encoding = String(encoding).toLowerCase()
      if (encoding === 'ucs2' || encoding === 'ucs-2' ||
          encoding === 'utf16le' || encoding === 'utf-16le') {
        if (arr.length < 2 || val.length < 2) {
          return -1
        }
        indexSize = 2
        arrLength /= 2
        valLength /= 2
        byteOffset /= 2
      }
    }
  
    function read (buf, i) {
      if (indexSize === 1) {
        return buf[i]
      } else {
        return buf.readUInt16BE(i * indexSize)
      }
    }
  
    var i
    if (dir) {
      var foundIndex = -1
      for (i = byteOffset; i < arrLength; i++) {
        if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
          if (foundIndex === -1) foundIndex = i
          if (i - foundIndex + 1 === valLength) return foundIndex * indexSize
        } else {
          if (foundIndex !== -1) i -= i - foundIndex
          foundIndex = -1
        }
      }
    } else {
      if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength
      for (i = byteOffset; i >= 0; i--) {
        var found = true
        for (var j = 0; j < valLength; j++) {
          if (read(arr, i + j) !== read(val, j)) {
            found = false
            break
          }
        }
        if (found) return i
      }
    }
  
    return -1
  }
  
  Buffer.prototype.includes = function includes (val, byteOffset, encoding) {
    return this.indexOf(val, byteOffset, encoding) !== -1
  }
  
  Buffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {
    return bidirectionalIndexOf(this, val, byteOffset, encoding, true)
  }
  
  Buffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {
    return bidirectionalIndexOf(this, val, byteOffset, encoding, false)
  }
  
  function hexWrite (buf, string, offset, length) {
    offset = Number(offset) || 0
    var remaining = buf.length - offset
    if (!length) {
      length = remaining
    } else {
      length = Number(length)
      if (length > remaining) {
        length = remaining
      }
    }
  
    // must be an even number of digits
    var strLen = string.length
    if (strLen % 2 !== 0) throw new TypeError('Invalid hex string')
  
    if (length > strLen / 2) {
      length = strLen / 2
    }
    for (var i = 0; i < length; ++i) {
      var parsed = parseInt(string.substr(i * 2, 2), 16)
      if (numberIsNaN(parsed)) return i
      buf[offset + i] = parsed
    }
    return i
  }
  
  function utf8Write (buf, string, offset, length) {
    return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)
  }
  
  function asciiWrite (buf, string, offset, length) {
    return blitBuffer(asciiToBytes(string), buf, offset, length)
  }
  
  function latin1Write (buf, string, offset, length) {
    return asciiWrite(buf, string, offset, length)
  }
  
  function base64Write (buf, string, offset, length) {
    return blitBuffer(base64ToBytes(string), buf, offset, length)
  }
  
  function ucs2Write (buf, string, offset, length) {
    return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)
  }
  
  Buffer.prototype.write = function write (string, offset, length, encoding) {
    // Buffer#write(string)
    if (offset === undefined) {
      encoding = 'utf8'
      length = this.length
      offset = 0
    // Buffer#write(string, encoding)
    } else if (length === undefined && typeof offset === 'string') {
      encoding = offset
      length = this.length
      offset = 0
    // Buffer#write(string, offset[, length][, encoding])
    } else if (isFinite(offset)) {
      offset = offset >>> 0
      if (isFinite(length)) {
        length = length >>> 0
        if (encoding === undefined) encoding = 'utf8'
      } else {
        encoding = length
        length = undefined
      }
    } else {
      throw new Error(
        'Buffer.write(string, encoding, offset[, length]) is no longer supported'
      )
    }
  
    var remaining = this.length - offset
    if (length === undefined || length > remaining) length = remaining
  
    if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {
      throw new RangeError('Attempt to write outside buffer bounds')
    }
  
    if (!encoding) encoding = 'utf8'
  
    var loweredCase = false
    for (;;) {
      switch (encoding) {
        case 'hex':
          return hexWrite(this, string, offset, length)
  
        case 'utf8':
        case 'utf-8':
          return utf8Write(this, string, offset, length)
  
        case 'ascii':
          return asciiWrite(this, string, offset, length)
  
        case 'latin1':
        case 'binary':
          return latin1Write(this, string, offset, length)
  
        case 'base64':
          // Warning: maxLength not taken into account in base64Write
          return base64Write(this, string, offset, length)
  
        case 'ucs2':
        case 'ucs-2':
        case 'utf16le':
        case 'utf-16le':
          return ucs2Write(this, string, offset, length)
  
        default:
          if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
          encoding = ('' + encoding).toLowerCase()
          loweredCase = true
      }
    }
  }
  
  Buffer.prototype.toJSON = function toJSON () {
    return {
      type: 'Buffer',
      data: Array.prototype.slice.call(this._arr || this, 0)
    }
  }
  
  function base64Slice (buf, start, end) {
    if (start === 0 && end === buf.length) {
      return base64.fromByteArray(buf)
    } else {
      return base64.fromByteArray(buf.slice(start, end))
    }
  }
  
  function utf8Slice (buf, start, end) {
    end = Math.min(buf.length, end)
    var res = []
  
    var i = start
    while (i < end) {
      var firstByte = buf[i]
      var codePoint = null
      var bytesPerSequence = (firstByte > 0xEF) ? 4
        : (firstByte > 0xDF) ? 3
        : (firstByte > 0xBF) ? 2
        : 1
  
      if (i + bytesPerSequence <= end) {
        var secondByte, thirdByte, fourthByte, tempCodePoint
  
        switch (bytesPerSequence) {
          case 1:
            if (firstByte < 0x80) {
              codePoint = firstByte
            }
            break
          case 2:
            secondByte = buf[i + 1]
            if ((secondByte & 0xC0) === 0x80) {
              tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)
              if (tempCodePoint > 0x7F) {
                codePoint = tempCodePoint
              }
            }
            break
          case 3:
            secondByte = buf[i + 1]
            thirdByte = buf[i + 2]
            if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
              tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)
              if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
                codePoint = tempCodePoint
              }
            }
            break
          case 4:
            secondByte = buf[i + 1]
            thirdByte = buf[i + 2]
            fourthByte = buf[i + 3]
            if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
              tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)
              if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
                codePoint = tempCodePoint
              }
            }
        }
      }
  
      if (codePoint === null) {
        // we did not generate a valid codePoint so insert a
        // replacement char (U+FFFD) and advance only 1 byte
        codePoint = 0xFFFD
        bytesPerSequence = 1
      } else if (codePoint > 0xFFFF) {
        // encode to utf16 (surrogate pair dance)
        codePoint -= 0x10000
        res.push(codePoint >>> 10 & 0x3FF | 0xD800)
        codePoint = 0xDC00 | codePoint & 0x3FF
      }
  
      res.push(codePoint)
      i += bytesPerSequence
    }
  
    return decodeCodePointsArray(res)
  }
  
  // Based on http://stackoverflow.com/a/22747272/680742, the browser with
  // the lowest limit is Chrome, with 0x10000 args.
  // We go 1 magnitude less, for safety
  var MAX_ARGUMENTS_LENGTH = 0x1000
  
  function decodeCodePointsArray (codePoints) {
    var len = codePoints.length
    if (len <= MAX_ARGUMENTS_LENGTH) {
      return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
    }
  
    // Decode in chunks to avoid "call stack size exceeded".
    var res = ''
    var i = 0
    while (i < len) {
      res += String.fromCharCode.apply(
        String,
        codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)
      )
    }
    return res
  }
  
  function asciiSlice (buf, start, end) {
    var ret = ''
    end = Math.min(buf.length, end)
  
    for (var i = start; i < end; ++i) {
      ret += String.fromCharCode(buf[i] & 0x7F)
    }
    return ret
  }
  
  function latin1Slice (buf, start, end) {
    var ret = ''
    end = Math.min(buf.length, end)
  
    for (var i = start; i < end; ++i) {
      ret += String.fromCharCode(buf[i])
    }
    return ret
  }
  
  function hexSlice (buf, start, end) {
    var len = buf.length
  
    if (!start || start < 0) start = 0
    if (!end || end < 0 || end > len) end = len
  
    var out = ''
    for (var i = start; i < end; ++i) {
      out += toHex(buf[i])
    }
    return out
  }
  
  function utf16leSlice (buf, start, end) {
    var bytes = buf.slice(start, end)
    var res = ''
    for (var i = 0; i < bytes.length; i += 2) {
      res += String.fromCharCode(bytes[i] + (bytes[i + 1] * 256))
    }
    return res
  }
  
  Buffer.prototype.slice = function slice (start, end) {
    var len = this.length
    start = ~~start
    end = end === undefined ? len : ~~end
  
    if (start < 0) {
      start += len
      if (start < 0) start = 0
    } else if (start > len) {
      start = len
    }
  
    if (end < 0) {
      end += len
      if (end < 0) end = 0
    } else if (end > len) {
      end = len
    }
  
    if (end < start) end = start
  
    var newBuf = this.subarray(start, end)
    // Return an augmented `Uint8Array` instance
    newBuf.__proto__ = Buffer.prototype
    return newBuf
  }
  
  /*
   * Need to make sure that buffer isn't trying to write out of bounds.
   */
  function checkOffset (offset, ext, length) {
    if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')
    if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')
  }
  
  Buffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {
    offset = offset >>> 0
    byteLength = byteLength >>> 0
    if (!noAssert) checkOffset(offset, byteLength, this.length)
  
    var val = this[offset]
    var mul = 1
    var i = 0
    while (++i < byteLength && (mul *= 0x100)) {
      val += this[offset + i] * mul
    }
  
    return val
  }
  
  Buffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {
    offset = offset >>> 0
    byteLength = byteLength >>> 0
    if (!noAssert) {
      checkOffset(offset, byteLength, this.length)
    }
  
    var val = this[offset + --byteLength]
    var mul = 1
    while (byteLength > 0 && (mul *= 0x100)) {
      val += this[offset + --byteLength] * mul
    }
  
    return val
  }
  
  Buffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {
    offset = offset >>> 0
    if (!noAssert) checkOffset(offset, 1, this.length)
    return this[offset]
  }
  
  Buffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {
    offset = offset >>> 0
    if (!noAssert) checkOffset(offset, 2, this.length)
    return this[offset] | (this[offset + 1] << 8)
  }
  
  Buffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {
    offset = offset >>> 0
    if (!noAssert) checkOffset(offset, 2, this.length)
    return (this[offset] << 8) | this[offset + 1]
  }
  
  Buffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {
    offset = offset >>> 0
    if (!noAssert) checkOffset(offset, 4, this.length)
  
    return ((this[offset]) |
        (this[offset + 1] << 8) |
        (this[offset + 2] << 16)) +
        (this[offset + 3] * 0x1000000)
  }
  
  Buffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {
    offset = offset >>> 0
    if (!noAssert) checkOffset(offset, 4, this.length)
  
    return (this[offset] * 0x1000000) +
      ((this[offset + 1] << 16) |
      (this[offset + 2] << 8) |
      this[offset + 3])
  }
  
  Buffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {
    offset = offset >>> 0
    byteLength = byteLength >>> 0
    if (!noAssert) checkOffset(offset, byteLength, this.length)
  
    var val = this[offset]
    var mul = 1
    var i = 0
    while (++i < byteLength && (mul *= 0x100)) {
      val += this[offset + i] * mul
    }
    mul *= 0x80
  
    if (val >= mul) val -= Math.pow(2, 8 * byteLength)
  
    return val
  }
  
  Buffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {
    offset = offset >>> 0
    byteLength = byteLength >>> 0
    if (!noAssert) checkOffset(offset, byteLength, this.length)
  
    var i = byteLength
    var mul = 1
    var val = this[offset + --i]
    while (i > 0 && (mul *= 0x100)) {
      val += this[offset + --i] * mul
    }
    mul *= 0x80
  
    if (val >= mul) val -= Math.pow(2, 8 * byteLength)
  
    return val
  }
  
  Buffer.prototype.readInt8 = function readInt8 (offset, noAssert) {
    offset = offset >>> 0
    if (!noAssert) checkOffset(offset, 1, this.length)
    if (!(this[offset] & 0x80)) return (this[offset])
    return ((0xff - this[offset] + 1) * -1)
  }
  
  Buffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {
    offset = offset >>> 0
    if (!noAssert) checkOffset(offset, 2, this.length)
    var val = this[offset] | (this[offset + 1] << 8)
    return (val & 0x8000) ? val | 0xFFFF0000 : val
  }
  
  Buffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {
    offset = offset >>> 0
    if (!noAssert) checkOffset(offset, 2, this.length)
    var val = this[offset + 1] | (this[offset] << 8)
    return (val & 0x8000) ? val | 0xFFFF0000 : val
  }
  
  Buffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {
    offset = offset >>> 0
    if (!noAssert) checkOffset(offset, 4, this.length)
  
    return (this[offset]) |
      (this[offset + 1] << 8) |
      (this[offset + 2] << 16) |
      (this[offset + 3] << 24)
  }
  
  Buffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {
    offset = offset >>> 0
    if (!noAssert) checkOffset(offset, 4, this.length)
  
    return (this[offset] << 24) |
      (this[offset + 1] << 16) |
      (this[offset + 2] << 8) |
      (this[offset + 3])
  }
  
  Buffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {
    offset = offset >>> 0
    if (!noAssert) checkOffset(offset, 4, this.length)
    return ieee754.read(this, offset, true, 23, 4)
  }
  
  Buffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {
    offset = offset >>> 0
    if (!noAssert) checkOffset(offset, 4, this.length)
    return ieee754.read(this, offset, false, 23, 4)
  }
  
  Buffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {
    offset = offset >>> 0
    if (!noAssert) checkOffset(offset, 8, this.length)
    return ieee754.read(this, offset, true, 52, 8)
  }
  
  Buffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {
    offset = offset >>> 0
    if (!noAssert) checkOffset(offset, 8, this.length)
    return ieee754.read(this, offset, false, 52, 8)
  }
  
  function checkInt (buf, value, offset, ext, max, min) {
    if (!Buffer.isBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance')
    if (value > max || value < min) throw new RangeError('"value" argument is out of bounds')
    if (offset + ext > buf.length) throw new RangeError('Index out of range')
  }
  
  Buffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {
    value = +value
    offset = offset >>> 0
    byteLength = byteLength >>> 0
    if (!noAssert) {
      var maxBytes = Math.pow(2, 8 * byteLength) - 1
      checkInt(this, value, offset, byteLength, maxBytes, 0)
    }
  
    var mul = 1
    var i = 0
    this[offset] = value & 0xFF
    while (++i < byteLength && (mul *= 0x100)) {
      this[offset + i] = (value / mul) & 0xFF
    }
  
    return offset + byteLength
  }
  
  Buffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {
    value = +value
    offset = offset >>> 0
    byteLength = byteLength >>> 0
    if (!noAssert) {
      var maxBytes = Math.pow(2, 8 * byteLength) - 1
      checkInt(this, value, offset, byteLength, maxBytes, 0)
    }
  
    var i = byteLength - 1
    var mul = 1
    this[offset + i] = value & 0xFF
    while (--i >= 0 && (mul *= 0x100)) {
      this[offset + i] = (value / mul) & 0xFF
    }
  
    return offset + byteLength
  }
  
  Buffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {
    value = +value
    offset = offset >>> 0
    if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)
    this[offset] = (value & 0xff)
    return offset + 1
  }
  
  Buffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {
    value = +value
    offset = offset >>> 0
    if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
    this[offset] = (value & 0xff)
    this[offset + 1] = (value >>> 8)
    return offset + 2
  }
  
  Buffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {
    value = +value
    offset = offset >>> 0
    if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
    this[offset] = (value >>> 8)
    this[offset + 1] = (value & 0xff)
    return offset + 2
  }
  
  Buffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {
    value = +value
    offset = offset >>> 0
    if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
    this[offset + 3] = (value >>> 24)
    this[offset + 2] = (value >>> 16)
    this[offset + 1] = (value >>> 8)
    this[offset] = (value & 0xff)
    return offset + 4
  }
  
  Buffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {
    value = +value
    offset = offset >>> 0
    if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
    this[offset] = (value >>> 24)
    this[offset + 1] = (value >>> 16)
    this[offset + 2] = (value >>> 8)
    this[offset + 3] = (value & 0xff)
    return offset + 4
  }
  
  Buffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {
    value = +value
    offset = offset >>> 0
    if (!noAssert) {
      var limit = Math.pow(2, (8 * byteLength) - 1)
  
      checkInt(this, value, offset, byteLength, limit - 1, -limit)
    }
  
    var i = 0
    var mul = 1
    var sub = 0
    this[offset] = value & 0xFF
    while (++i < byteLength && (mul *= 0x100)) {
      if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
        sub = 1
      }
      this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
    }
  
    return offset + byteLength
  }
  
  Buffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {
    value = +value
    offset = offset >>> 0
    if (!noAssert) {
      var limit = Math.pow(2, (8 * byteLength) - 1)
  
      checkInt(this, value, offset, byteLength, limit - 1, -limit)
    }
  
    var i = byteLength - 1
    var mul = 1
    var sub = 0
    this[offset + i] = value & 0xFF
    while (--i >= 0 && (mul *= 0x100)) {
      if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
        sub = 1
      }
      this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
    }
  
    return offset + byteLength
  }
  
  Buffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {
    value = +value
    offset = offset >>> 0
    if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)
    if (value < 0) value = 0xff + value + 1
    this[offset] = (value & 0xff)
    return offset + 1
  }
  
  Buffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {
    value = +value
    offset = offset >>> 0
    if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
    this[offset] = (value & 0xff)
    this[offset + 1] = (value >>> 8)
    return offset + 2
  }
  
  Buffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {
    value = +value
    offset = offset >>> 0
    if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
    this[offset] = (value >>> 8)
    this[offset + 1] = (value & 0xff)
    return offset + 2
  }
  
  Buffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {
    value = +value
    offset = offset >>> 0
    if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
    this[offset] = (value & 0xff)
    this[offset + 1] = (value >>> 8)
    this[offset + 2] = (value >>> 16)
    this[offset + 3] = (value >>> 24)
    return offset + 4
  }
  
  Buffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {
    value = +value
    offset = offset >>> 0
    if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
    if (value < 0) value = 0xffffffff + value + 1
    this[offset] = (value >>> 24)
    this[offset + 1] = (value >>> 16)
    this[offset + 2] = (value >>> 8)
    this[offset + 3] = (value & 0xff)
    return offset + 4
  }
  
  function checkIEEE754 (buf, value, offset, ext, max, min) {
    if (offset + ext > buf.length) throw new RangeError('Index out of range')
    if (offset < 0) throw new RangeError('Index out of range')
  }
  
  function writeFloat (buf, value, offset, littleEndian, noAssert) {
    value = +value
    offset = offset >>> 0
    if (!noAssert) {
      checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)
    }
    ieee754.write(buf, value, offset, littleEndian, 23, 4)
    return offset + 4
  }
  
  Buffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {
    return writeFloat(this, value, offset, true, noAssert)
  }
  
  Buffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {
    return writeFloat(this, value, offset, false, noAssert)
  }
  
  function writeDouble (buf, value, offset, littleEndian, noAssert) {
    value = +value
    offset = offset >>> 0
    if (!noAssert) {
      checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)
    }
    ieee754.write(buf, value, offset, littleEndian, 52, 8)
    return offset + 8
  }
  
  Buffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {
    return writeDouble(this, value, offset, true, noAssert)
  }
  
  Buffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {
    return writeDouble(this, value, offset, false, noAssert)
  }
  
  // copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
  Buffer.prototype.copy = function copy (target, targetStart, start, end) {
    if (!start) start = 0
    if (!end && end !== 0) end = this.length
    if (targetStart >= target.length) targetStart = target.length
    if (!targetStart) targetStart = 0
    if (end > 0 && end < start) end = start
  
    // Copy 0 bytes; we're done
    if (end === start) return 0
    if (target.length === 0 || this.length === 0) return 0
  
    // Fatal error conditions
    if (targetStart < 0) {
      throw new RangeError('targetStart out of bounds')
    }
    if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')
    if (end < 0) throw new RangeError('sourceEnd out of bounds')
  
    // Are we oob?
    if (end > this.length) end = this.length
    if (target.length - targetStart < end - start) {
      end = target.length - targetStart + start
    }
  
    var len = end - start
    var i
  
    if (this === target && start < targetStart && targetStart < end) {
      // descending copy from end
      for (i = len - 1; i >= 0; --i) {
        target[i + targetStart] = this[i + start]
      }
    } else if (len < 1000) {
      // ascending copy from start
      for (i = 0; i < len; ++i) {
        target[i + targetStart] = this[i + start]
      }
    } else {
      Uint8Array.prototype.set.call(
        target,
        this.subarray(start, start + len),
        targetStart
      )
    }
  
    return len
  }
  
  // Usage:
  //    buffer.fill(number[, offset[, end]])
  //    buffer.fill(buffer[, offset[, end]])
  //    buffer.fill(string[, offset[, end]][, encoding])
  Buffer.prototype.fill = function fill (val, start, end, encoding) {
    // Handle string cases:
    if (typeof val === 'string') {
      if (typeof start === 'string') {
        encoding = start
        start = 0
        end = this.length
      } else if (typeof end === 'string') {
        encoding = end
        end = this.length
      }
      if (val.length === 1) {
        var code = val.charCodeAt(0)
        if (code < 256) {
          val = code
        }
      }
      if (encoding !== undefined && typeof encoding !== 'string') {
        throw new TypeError('encoding must be a string')
      }
      if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {
        throw new TypeError('Unknown encoding: ' + encoding)
      }
    } else if (typeof val === 'number') {
      val = val & 255
    }
  
    // Invalid ranges are not set to a default, so can range check early.
    if (start < 0 || this.length < start || this.length < end) {
      throw new RangeError('Out of range index')
    }
  
    if (end <= start) {
      return this
    }
  
    start = start >>> 0
    end = end === undefined ? this.length : end >>> 0
  
    if (!val) val = 0
  
    var i
    if (typeof val === 'number') {
      for (i = start; i < end; ++i) {
        this[i] = val
      }
    } else {
      var bytes = Buffer.isBuffer(val)
        ? val
        : new Buffer(val, encoding)
      var len = bytes.length
      for (i = 0; i < end - start; ++i) {
        this[i + start] = bytes[i % len]
      }
    }
  
    return this
  }
  
  // HELPER FUNCTIONS
  // ================
  
  var INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g
  
  function base64clean (str) {
    // Node strips out invalid characters like \n and \t from the string, base64-js does not
    str = str.trim().replace(INVALID_BASE64_RE, '')
    // Node converts strings with length < 2 to ''
    if (str.length < 2) return ''
    // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
    while (str.length % 4 !== 0) {
      str = str + '='
    }
    return str
  }
  
  function toHex (n) {
    if (n < 16) return '0' + n.toString(16)
    return n.toString(16)
  }
  
  function utf8ToBytes (string, units) {
    units = units || Infinity
    var codePoint
    var length = string.length
    var leadSurrogate = null
    var bytes = []
  
    for (var i = 0; i < length; ++i) {
      codePoint = string.charCodeAt(i)
  
      // is surrogate component
      if (codePoint > 0xD7FF && codePoint < 0xE000) {
        // last char was a lead
        if (!leadSurrogate) {
          // no lead yet
          if (codePoint > 0xDBFF) {
            // unexpected trail
            if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
            continue
          } else if (i + 1 === length) {
            // unpaired lead
            if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
            continue
          }
  
          // valid lead
          leadSurrogate = codePoint
  
          continue
        }
  
        // 2 leads in a row
        if (codePoint < 0xDC00) {
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          leadSurrogate = codePoint
          continue
        }
  
        // valid surrogate pair
        codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000
      } else if (leadSurrogate) {
        // valid bmp char, but last char was a lead
        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
      }
  
      leadSurrogate = null
  
      // encode utf8
      if (codePoint < 0x80) {
        if ((units -= 1) < 0) break
        bytes.push(codePoint)
      } else if (codePoint < 0x800) {
        if ((units -= 2) < 0) break
        bytes.push(
          codePoint >> 0x6 | 0xC0,
          codePoint & 0x3F | 0x80
        )
      } else if (codePoint < 0x10000) {
        if ((units -= 3) < 0) break
        bytes.push(
          codePoint >> 0xC | 0xE0,
          codePoint >> 0x6 & 0x3F | 0x80,
          codePoint & 0x3F | 0x80
        )
      } else if (codePoint < 0x110000) {
        if ((units -= 4) < 0) break
        bytes.push(
          codePoint >> 0x12 | 0xF0,
          codePoint >> 0xC & 0x3F | 0x80,
          codePoint >> 0x6 & 0x3F | 0x80,
          codePoint & 0x3F | 0x80
        )
      } else {
        throw new Error('Invalid code point')
      }
    }
  
    return bytes
  }
  
  function asciiToBytes (str) {
    var byteArray = []
    for (var i = 0; i < str.length; ++i) {
      // Node's code seems to be doing this and not & 0x7F..
      byteArray.push(str.charCodeAt(i) & 0xFF)
    }
    return byteArray
  }
  
  function utf16leToBytes (str, units) {
    var c, hi, lo
    var byteArray = []
    for (var i = 0; i < str.length; ++i) {
      if ((units -= 2) < 0) break
  
      c = str.charCodeAt(i)
      hi = c >> 8
      lo = c % 256
      byteArray.push(lo)
      byteArray.push(hi)
    }
  
    return byteArray
  }
  
  function base64ToBytes (str) {
    return base64.toByteArray(base64clean(str))
  }
  
  function blitBuffer (src, dst, offset, length) {
    for (var i = 0; i < length; ++i) {
      if ((i + offset >= dst.length) || (i >= src.length)) break
      dst[i + offset] = src[i]
    }
    return i
  }
  
  // ArrayBuffers from another context (i.e. an iframe) do not pass the `instanceof` check
  // but they should be treated as valid. See: https://github.com/feross/buffer/issues/166
  function isArrayBuffer (obj) {
    return obj instanceof ArrayBuffer ||
      (obj != null && obj.constructor != null && obj.constructor.name === 'ArrayBuffer' &&
        typeof obj.byteLength === 'number')
  }
  
  // Node 0.10 supports `ArrayBuffer` but lacks `ArrayBuffer.isView`
  function isArrayBufferView (obj) {
    return (typeof ArrayBuffer.isView === 'function') && ArrayBuffer.isView(obj)
  }
  
  function numberIsNaN (obj) {
    return obj !== obj // eslint-disable-line no-self-compare
  }
  
  },{"base64-js":51,"ieee754":178}],85:[function(require,module,exports){
  module.exports = {
    "100": "Continue",
    "101": "Switching Protocols",
    "102": "Processing",
    "200": "OK",
    "201": "Created",
    "202": "Accepted",
    "203": "Non-Authoritative Information",
    "204": "No Content",
    "205": "Reset Content",
    "206": "Partial Content",
    "207": "Multi-Status",
    "208": "Already Reported",
    "226": "IM Used",
    "300": "Multiple Choices",
    "301": "Moved Permanently",
    "302": "Found",
    "303": "See Other",
    "304": "Not Modified",
    "305": "Use Proxy",
    "307": "Temporary Redirect",
    "308": "Permanent Redirect",
    "400": "Bad Request",
    "401": "Unauthorized",
    "402": "Payment Required",
    "403": "Forbidden",
    "404": "Not Found",
    "405": "Method Not Allowed",
    "406": "Not Acceptable",
    "407": "Proxy Authentication Required",
    "408": "Request Timeout",
    "409": "Conflict",
    "410": "Gone",
    "411": "Length Required",
    "412": "Precondition Failed",
    "413": "Payload Too Large",
    "414": "URI Too Long",
    "415": "Unsupported Media Type",
    "416": "Range Not Satisfiable",
    "417": "Expectation Failed",
    "418": "I'm a teapot",
    "421": "Misdirected Request",
    "422": "Unprocessable Entity",
    "423": "Locked",
    "424": "Failed Dependency",
    "425": "Unordered Collection",
    "426": "Upgrade Required",
    "428": "Precondition Required",
    "429": "Too Many Requests",
    "431": "Request Header Fields Too Large",
    "451": "Unavailable For Legal Reasons",
    "500": "Internal Server Error",
    "501": "Not Implemented",
    "502": "Bad Gateway",
    "503": "Service Unavailable",
    "504": "Gateway Timeout",
    "505": "HTTP Version Not Supported",
    "506": "Variant Also Negotiates",
    "507": "Insufficient Storage",
    "508": "Loop Detected",
    "509": "Bandwidth Limit Exceeded",
    "510": "Not Extended",
    "511": "Network Authentication Required"
  }
  
  },{}],86:[function(require,module,exports){
  var Buffer = require('safe-buffer').Buffer
  var Transform = require('stream').Transform
  var StringDecoder = require('string_decoder').StringDecoder
  var inherits = require('inherits')
  
  function CipherBase (hashMode) {
    Transform.call(this)
    this.hashMode = typeof hashMode === 'string'
    if (this.hashMode) {
      this[hashMode] = this._finalOrDigest
    } else {
      this.final = this._finalOrDigest
    }
    if (this._final) {
      this.__final = this._final
      this._final = null
    }
    this._decoder = null
    this._encoding = null
  }
  inherits(CipherBase, Transform)
  
  CipherBase.prototype.update = function (data, inputEnc, outputEnc) {
    if (typeof data === 'string') {
      data = Buffer.from(data, inputEnc)
    }
  
    var outData = this._update(data)
    if (this.hashMode) return this
  
    if (outputEnc) {
      outData = this._toString(outData, outputEnc)
    }
  
    return outData
  }
  
  CipherBase.prototype.setAutoPadding = function () {}
  CipherBase.prototype.getAuthTag = function () {
    throw new Error('trying to get auth tag in unsupported state')
  }
  
  CipherBase.prototype.setAuthTag = function () {
    throw new Error('trying to set auth tag in unsupported state')
  }
  
  CipherBase.prototype.setAAD = function () {
    throw new Error('trying to set aad in unsupported state')
  }
  
  CipherBase.prototype._transform = function (data, _, next) {
    var err
    try {
      if (this.hashMode) {
        this._update(data)
      } else {
        this.push(this._update(data))
      }
    } catch (e) {
      err = e
    } finally {
      next(err)
    }
  }
  CipherBase.prototype._flush = function (done) {
    var err
    try {
      this.push(this.__final())
    } catch (e) {
      err = e
    }
  
    done(err)
  }
  CipherBase.prototype._finalOrDigest = function (outputEnc) {
    var outData = this.__final() || Buffer.alloc(0)
    if (outputEnc) {
      outData = this._toString(outData, outputEnc, true)
    }
    return outData
  }
  
  CipherBase.prototype._toString = function (value, enc, fin) {
    if (!this._decoder) {
      this._decoder = new StringDecoder(enc)
      this._encoding = enc
    }
  
    if (this._encoding !== enc) throw new Error('can\'t switch encodings')
  
    var out = this._decoder.write(value)
    if (fin) {
      out += this._decoder.end()
    }
  
    return out
  }
  
  module.exports = CipherBase
  
  },{"inherits":180,"safe-buffer":290,"stream":311,"string_decoder":317}],87:[function(require,module,exports){
  (function (Buffer){
  var clone = (function() {
  'use strict';
  
  function _instanceof(obj, type) {
    return type != null && obj instanceof type;
  }
  
  var nativeMap;
  try {
    nativeMap = Map;
  } catch(_) {
    // maybe a reference error because no `Map`. Give it a dummy value that no
    // value will ever be an instanceof.
    nativeMap = function() {};
  }
  
  var nativeSet;
  try {
    nativeSet = Set;
  } catch(_) {
    nativeSet = function() {};
  }
  
  var nativePromise;
  try {
    nativePromise = Promise;
  } catch(_) {
    nativePromise = function() {};
  }
  
  /**
   * Clones (copies) an Object using deep copying.
   *
   * This function supports circular references by default, but if you are certain
   * there are no circular references in your object, you can save some CPU time
   * by calling clone(obj, false).
   *
   * Caution: if `circular` is false and `parent` contains circular references,
   * your program may enter an infinite loop and crash.
   *
   * @param `parent` - the object to be cloned
   * @param `circular` - set to true if the object to be cloned may contain
   *    circular references. (optional - true by default)
   * @param `depth` - set to a number if the object is only to be cloned to
   *    a particular depth. (optional - defaults to Infinity)
   * @param `prototype` - sets the prototype to be used when cloning an object.
   *    (optional - defaults to parent prototype).
   * @param `includeNonEnumerable` - set to true if the non-enumerable properties
   *    should be cloned as well. Non-enumerable properties on the prototype
   *    chain will be ignored. (optional - false by default)
  */
  function clone(parent, circular, depth, prototype, includeNonEnumerable) {
    if (typeof circular === 'object') {
      depth = circular.depth;
      prototype = circular.prototype;
      includeNonEnumerable = circular.includeNonEnumerable;
      circular = circular.circular;
    }
    // maintain two arrays for circular references, where corresponding parents
    // and children have the same index
    var allParents = [];
    var allChildren = [];
  
    var useBuffer = typeof Buffer != 'undefined';
  
    if (typeof circular == 'undefined')
      circular = true;
  
    if (typeof depth == 'undefined')
      depth = Infinity;
  
    // recurse this function so we don't reset allParents and allChildren
    function _clone(parent, depth) {
      // cloning null always returns null
      if (parent === null)
        return null;
  
      if (depth === 0)
        return parent;
  
      var child;
      var proto;
      if (typeof parent != 'object') {
        return parent;
      }
  
      if (_instanceof(parent, nativeMap)) {
        child = new nativeMap();
      } else if (_instanceof(parent, nativeSet)) {
        child = new nativeSet();
      } else if (_instanceof(parent, nativePromise)) {
        child = new nativePromise(function (resolve, reject) {
          parent.then(function(value) {
            resolve(_clone(value, depth - 1));
          }, function(err) {
            reject(_clone(err, depth - 1));
          });
        });
      } else if (clone.__isArray(parent)) {
        child = [];
      } else if (clone.__isRegExp(parent)) {
        child = new RegExp(parent.source, __getRegExpFlags(parent));
        if (parent.lastIndex) child.lastIndex = parent.lastIndex;
      } else if (clone.__isDate(parent)) {
        child = new Date(parent.getTime());
      } else if (useBuffer && Buffer.isBuffer(parent)) {
        if (Buffer.allocUnsafe) {
          // Node.js >= 4.5.0
          child = Buffer.allocUnsafe(parent.length);
        } else {
          // Older Node.js versions
          child = new Buffer(parent.length);
        }
        parent.copy(child);
        return child;
      } else if (_instanceof(parent, Error)) {
        child = Object.create(parent);
      } else {
        if (typeof prototype == 'undefined') {
          proto = Object.getPrototypeOf(parent);
          child = Object.create(proto);
        }
        else {
          child = Object.create(prototype);
          proto = prototype;
        }
      }
  
      if (circular) {
        var index = allParents.indexOf(parent);
  
        if (index != -1) {
          return allChildren[index];
        }
        allParents.push(parent);
        allChildren.push(child);
      }
  
      if (_instanceof(parent, nativeMap)) {
        parent.forEach(function(value, key) {
          var keyChild = _clone(key, depth - 1);
          var valueChild = _clone(value, depth - 1);
          child.set(keyChild, valueChild);
        });
      }
      if (_instanceof(parent, nativeSet)) {
        parent.forEach(function(value) {
          var entryChild = _clone(value, depth - 1);
          child.add(entryChild);
        });
      }
  
      for (var i in parent) {
        var attrs;
        if (proto) {
          attrs = Object.getOwnPropertyDescriptor(proto, i);
        }
  
        if (attrs && attrs.set == null) {
          continue;
        }
        child[i] = _clone(parent[i], depth - 1);
      }
  
      if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(parent);
        for (var i = 0; i < symbols.length; i++) {
          // Don't need to worry about cloning a symbol because it is a primitive,
          // like a number or string.
          var symbol = symbols[i];
          var descriptor = Object.getOwnPropertyDescriptor(parent, symbol);
          if (descriptor && !descriptor.enumerable && !includeNonEnumerable) {
            continue;
          }
          child[symbol] = _clone(parent[symbol], depth - 1);
          if (!descriptor.enumerable) {
            Object.defineProperty(child, symbol, {
              enumerable: false
            });
          }
        }
      }
  
      if (includeNonEnumerable) {
        var allPropertyNames = Object.getOwnPropertyNames(parent);
        for (var i = 0; i < allPropertyNames.length; i++) {
          var propertyName = allPropertyNames[i];
          var descriptor = Object.getOwnPropertyDescriptor(parent, propertyName);
          if (descriptor && descriptor.enumerable) {
            continue;
          }
          child[propertyName] = _clone(parent[propertyName], depth - 1);
          Object.defineProperty(child, propertyName, {
            enumerable: false
          });
        }
      }
  
      return child;
    }
  
    return _clone(parent, depth);
  }
  
  /**
   * Simple flat clone using prototype, accepts only objects, useful for property
   * override on FLAT configuration object (no nested props).
   *
   * USE WITH CAUTION! This may not behave as you wish if you do not know how this
   * works.
   */
  clone.clonePrototype = function clonePrototype(parent) {
    if (parent === null)
      return null;
  
    var c = function () {};
    c.prototype = parent;
    return new c();
  };
  
  // private utility functions
  
  function __objToStr(o) {
    return Object.prototype.toString.call(o);
  }
  clone.__objToStr = __objToStr;
  
  function __isDate(o) {
    return typeof o === 'object' && __objToStr(o) === '[object Date]';
  }
  clone.__isDate = __isDate;
  
  function __isArray(o) {
    return typeof o === 'object' && __objToStr(o) === '[object Array]';
  }
  clone.__isArray = __isArray;
  
  function __isRegExp(o) {
    return typeof o === 'object' && __objToStr(o) === '[object RegExp]';
  }
  clone.__isRegExp = __isRegExp;
  
  function __getRegExpFlags(re) {
    var flags = '';
    if (re.global) flags += 'g';
    if (re.ignoreCase) flags += 'i';
    if (re.multiline) flags += 'm';
    return flags;
  }
  clone.__getRegExpFlags = __getRegExpFlags;
  
  return clone;
  })();
  
  if (typeof module === 'object' && module.exports) {
    module.exports = clone;
  }
  
  }).call(this,require("buffer").Buffer)
  },{"buffer":84}],88:[function(require,module,exports){
  /* jshint node: true */
  (function () {
      "use strict";
  
      function CookieAccessInfo(domain, path, secure, script) {
          if (this instanceof CookieAccessInfo) {
              this.domain = domain || undefined;
              this.path = path || "/";
              this.secure = !!secure;
              this.script = !!script;
              return this;
          }
          return new CookieAccessInfo(domain, path, secure, script);
      }
      CookieAccessInfo.All = Object.freeze(Object.create(null));
      exports.CookieAccessInfo = CookieAccessInfo;
  
      function Cookie(cookiestr, request_domain, request_path) {
          if (cookiestr instanceof Cookie) {
              return cookiestr;
          }
          if (this instanceof Cookie) {
              this.name = null;
              this.value = null;
              this.expiration_date = Infinity;
              this.path = String(request_path || "/");
              this.explicit_path = false;
              this.domain = request_domain || null;
              this.explicit_domain = false;
              this.secure = false; //how to define default?
              this.noscript = false; //httponly
              if (cookiestr) {
                  this.parse(cookiestr, request_domain, request_path);
              }
              return this;
          }
          return new Cookie(cookiestr, request_domain, request_path);
      }
      exports.Cookie = Cookie;
  
      Cookie.prototype.toString = function toString() {
          var str = [this.name + "=" + this.value];
          if (this.expiration_date !== Infinity) {
              str.push("expires=" + (new Date(this.expiration_date)).toGMTString());
          }
          if (this.domain) {
              str.push("domain=" + this.domain);
          }
          if (this.path) {
              str.push("path=" + this.path);
          }
          if (this.secure) {
              str.push("secure");
          }
          if (this.noscript) {
              str.push("httponly");
          }
          return str.join("; ");
      };
  
      Cookie.prototype.toValueString = function toValueString() {
          return this.name + "=" + this.value;
      };
  
      var cookie_str_splitter = /[:](?=\s*[a-zA-Z0-9_\-]+\s*[=])/g;
      Cookie.prototype.parse = function parse(str, request_domain, request_path) {
          if (this instanceof Cookie) {
              var parts = str.split(";").filter(function (value) {
                      return !!value;
                  });
              var i;
  
              var pair = parts[0].match(/([^=]+)=([\s\S]*)/);
              if (!pair) {
                  console.warn("Invalid cookie header encountered. Header: '"+str+"'");
                  return;
              }
  
              var key = pair[1];
              var value = pair[2];
              if ( typeof key !== 'string' || key.length === 0 || typeof value !== 'string' ) {
                  console.warn("Unable to extract values from cookie header. Cookie: '"+str+"'");
                  return;
              }
  
              this.name = key;
              this.value = value;
  
              for (i = 1; i < parts.length; i += 1) {
                  pair = parts[i].match(/([^=]+)(?:=([\s\S]*))?/);
                  key = pair[1].trim().toLowerCase();
                  value = pair[2];
                  switch (key) {
                  case "httponly":
                      this.noscript = true;
                      break;
                  case "expires":
                      this.expiration_date = value ?
                              Number(Date.parse(value)) :
                              Infinity;
                      break;
                  case "path":
                      this.path = value ?
                              value.trim() :
                              "";
                      this.explicit_path = true;
                      break;
                  case "domain":
                      this.domain = value ?
                              value.trim() :
                              "";
                      this.explicit_domain = !!this.domain;
                      break;
                  case "secure":
                      this.secure = true;
                      break;
                  }
              }
  
              if (!this.explicit_path) {
                 this.path = request_path || "/";
              }
              if (!this.explicit_domain) {
                 this.domain = request_domain;
              }
  
              return this;
          }
          return new Cookie().parse(str, request_domain, request_path);
      };
  
      Cookie.prototype.matches = function matches(access_info) {
          if (access_info === CookieAccessInfo.All) {
            return true;
          }
          if (this.noscript && access_info.script ||
                  this.secure && !access_info.secure ||
                  !this.collidesWith(access_info)) {
              return false;
          }
          return true;
      };
  
      Cookie.prototype.collidesWith = function collidesWith(access_info) {
          if ((this.path && !access_info.path) || (this.domain && !access_info.domain)) {
              return false;
          }
          if (this.path && access_info.path.indexOf(this.path) !== 0) {
              return false;
          }
          if (this.explicit_path && access_info.path.indexOf( this.path ) !== 0) {
             return false;
          }
          var access_domain = access_info.domain && access_info.domain.replace(/^[\.]/,'');
          var cookie_domain = this.domain && this.domain.replace(/^[\.]/,'');
          if (cookie_domain === access_domain) {
              return true;
          }
          if (cookie_domain) {
              if (!this.explicit_domain) {
                  return false; // we already checked if the domains were exactly the same
              }
              var wildcard = access_domain.indexOf(cookie_domain);
              if (wildcard === -1 || wildcard !== access_domain.length - cookie_domain.length) {
                  return false;
              }
              return true;
          }
          return true;
      };
  
      function CookieJar() {
          var cookies, cookies_list, collidable_cookie;
          if (this instanceof CookieJar) {
              cookies = Object.create(null); //name: [Cookie]
  
              this.setCookie = function setCookie(cookie, request_domain, request_path) {
                  var remove, i;
                  cookie = new Cookie(cookie, request_domain, request_path);
                  //Delete the cookie if the set is past the current time
                  remove = cookie.expiration_date <= Date.now();
                  if (cookies[cookie.name] !== undefined) {
                      cookies_list = cookies[cookie.name];
                      for (i = 0; i < cookies_list.length; i += 1) {
                          collidable_cookie = cookies_list[i];
                          if (collidable_cookie.collidesWith(cookie)) {
                              if (remove) {
                                  cookies_list.splice(i, 1);
                                  if (cookies_list.length === 0) {
                                      delete cookies[cookie.name];
                                  }
                                  return false;
                              }
                              cookies_list[i] = cookie;
                              return cookie;
                          }
                      }
                      if (remove) {
                          return false;
                      }
                      cookies_list.push(cookie);
                      return cookie;
                  }
                  if (remove) {
                      return false;
                  }
                  cookies[cookie.name] = [cookie];
                  return cookies[cookie.name];
              };
              //returns a cookie
              this.getCookie = function getCookie(cookie_name, access_info) {
                  var cookie, i;
                  cookies_list = cookies[cookie_name];
                  if (!cookies_list) {
                      return;
                  }
                  for (i = 0; i < cookies_list.length; i += 1) {
                      cookie = cookies_list[i];
                      if (cookie.expiration_date <= Date.now()) {
                          if (cookies_list.length === 0) {
                              delete cookies[cookie.name];
                          }
                          continue;
                      }
  
                      if (cookie.matches(access_info)) {
                          return cookie;
                      }
                  }
              };
              //returns a list of cookies
              this.getCookies = function getCookies(access_info) {
                  var matches = [], cookie_name, cookie;
                  for (cookie_name in cookies) {
                      cookie = this.getCookie(cookie_name, access_info);
                      if (cookie) {
                          matches.push(cookie);
                      }
                  }
                  matches.toString = function toString() {
                      return matches.join(":");
                  };
                  matches.toValueString = function toValueString() {
                      return matches.map(function (c) {
                          return c.toValueString();
                      }).join(';');
                  };
                  return matches;
              };
  
              return this;
          }
          return new CookieJar();
      }
      exports.CookieJar = CookieJar;
  
      //returns list of cookies that were set correctly. Cookies that are expired and removed are not returned.
      CookieJar.prototype.setCookies = function setCookies(cookies, request_domain, request_path) {
          cookies = Array.isArray(cookies) ?
                  cookies :
                  cookies.split(cookie_str_splitter);
          var successful = [],
              i,
              cookie;
          cookies = cookies.map(function(item){
              return new Cookie(item, request_domain, request_path);
          });
          for (i = 0; i < cookies.length; i += 1) {
              cookie = cookies[i];
              if (this.setCookie(cookie, request_domain, request_path)) {
                  successful.push(cookie);
              }
          }
          return successful;
      };
  }());
  
  },{}],89:[function(require,module,exports){
  (function (Buffer){
  // Copyright Joyent, Inc. and other Node contributors.
  //
  // Permission is hereby granted, free of charge, to any person obtaining a
  // copy of this software and associated documentation files (the
  // "Software"), to deal in the Software without restriction, including
  // without limitation the rights to use, copy, modify, merge, publish,
  // distribute, sublicense, and/or sell copies of the Software, and to permit
  // persons to whom the Software is furnished to do so, subject to the
  // following conditions:
  //
  // The above copyright notice and this permission notice shall be included
  // in all copies or substantial portions of the Software.
  //
  // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
  // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
  // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
  // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
  // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
  // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
  // USE OR OTHER DEALINGS IN THE SOFTWARE.
  
  // NOTE: These type checking functions intentionally don't use `instanceof`
  // because it is fragile and can be easily faked with `Object.create()`.
  
  function isArray(arg) {
    if (Array.isArray) {
      return Array.isArray(arg);
    }
    return objectToString(arg) === '[object Array]';
  }
  exports.isArray = isArray;
  
  function isBoolean(arg) {
    return typeof arg === 'boolean';
  }
  exports.isBoolean = isBoolean;
  
  function isNull(arg) {
    return arg === null;
  }
  exports.isNull = isNull;
  
  function isNullOrUndefined(arg) {
    return arg == null;
  }
  exports.isNullOrUndefined = isNullOrUndefined;
  
  function isNumber(arg) {
    return typeof arg === 'number';
  }
  exports.isNumber = isNumber;
  
  function isString(arg) {
    return typeof arg === 'string';
  }
  exports.isString = isString;
  
  function isSymbol(arg) {
    return typeof arg === 'symbol';
  }
  exports.isSymbol = isSymbol;
  
  function isUndefined(arg) {
    return arg === void 0;
  }
  exports.isUndefined = isUndefined;
  
  function isRegExp(re) {
    return objectToString(re) === '[object RegExp]';
  }
  exports.isRegExp = isRegExp;
  
  function isObject(arg) {
    return typeof arg === 'object' && arg !== null;
  }
  exports.isObject = isObject;
  
  function isDate(d) {
    return objectToString(d) === '[object Date]';
  }
  exports.isDate = isDate;
  
  function isError(e) {
    return (objectToString(e) === '[object Error]' || e instanceof Error);
  }
  exports.isError = isError;
  
  function isFunction(arg) {
    return typeof arg === 'function';
  }
  exports.isFunction = isFunction;
  
  function isPrimitive(arg) {
    return arg === null ||
           typeof arg === 'boolean' ||
           typeof arg === 'number' ||
           typeof arg === 'string' ||
           typeof arg === 'symbol' ||  // ES6 symbol
           typeof arg === 'undefined';
  }
  exports.isPrimitive = isPrimitive;
  
  exports.isBuffer = Buffer.isBuffer;
  
  function objectToString(o) {
    return Object.prototype.toString.call(o);
  }
  
  }).call(this,{"isBuffer":require("../../is-buffer/index.js")})
  },{"../../is-buffer/index.js":181}],90:[function(require,module,exports){
  (function (Buffer){
  var elliptic = require('elliptic');
  var BN = require('bn.js');
  
  module.exports = function createECDH(curve) {
    return new ECDH(curve);
  };
  
  var aliases = {
    secp256k1: {
      name: 'secp256k1',
      byteLength: 32
    },
    secp224r1: {
      name: 'p224',
      byteLength: 28
    },
    prime256v1: {
      name: 'p256',
      byteLength: 32
    },
    prime192v1: {
      name: 'p192',
      byteLength: 24
    },
    ed25519: {
      name: 'ed25519',
      byteLength: 32
    },
    secp384r1: {
      name: 'p384',
      byteLength: 48
    },
    secp521r1: {
      name: 'p521',
      byteLength: 66
    }
  };
  
  aliases.p224 = aliases.secp224r1;
  aliases.p256 = aliases.secp256r1 = aliases.prime256v1;
  aliases.p192 = aliases.secp192r1 = aliases.prime192v1;
  aliases.p384 = aliases.secp384r1;
  aliases.p521 = aliases.secp521r1;
  
  function ECDH(curve) {
    this.curveType = aliases[curve];
    if (!this.curveType ) {
      this.curveType = {
        name: curve
      };
    }
    this.curve = new elliptic.ec(this.curveType.name);
    this.keys = void 0;
  }
  
  ECDH.prototype.generateKeys = function (enc, format) {
    this.keys = this.curve.genKeyPair();
    return this.getPublicKey(enc, format);
  };
  
  ECDH.prototype.computeSecret = function (other, inenc, enc) {
    inenc = inenc || 'utf8';
    if (!Buffer.isBuffer(other)) {
      other = new Buffer(other, inenc);
    }
    var otherPub = this.curve.keyFromPublic(other).getPublic();
    var out = otherPub.mul(this.keys.getPrivate()).getX();
    return formatReturnValue(out, enc, this.curveType.byteLength);
  };
  
  ECDH.prototype.getPublicKey = function (enc, format) {
    var key = this.keys.getPublic(format === 'compressed', true);
    if (format === 'hybrid') {
      if (key[key.length - 1] % 2) {
        key[0] = 7;
      } else {
        key [0] = 6;
      }
    }
    return formatReturnValue(key, enc);
  };
  
  ECDH.prototype.getPrivateKey = function (enc) {
    return formatReturnValue(this.keys.getPrivate(), enc);
  };
  
  ECDH.prototype.setPublicKey = function (pub, enc) {
    enc = enc || 'utf8';
    if (!Buffer.isBuffer(pub)) {
      pub = new Buffer(pub, enc);
    }
    this.keys._importPublic(pub);
    return this;
  };
  
  ECDH.prototype.setPrivateKey = function (priv, enc) {
    enc = enc || 'utf8';
    if (!Buffer.isBuffer(priv)) {
      priv = new Buffer(priv, enc);
    }
    var _priv = new BN(priv);
    _priv = _priv.toString(16);
    this.keys._importPrivate(_priv);
    return this;
  };
  
  function formatReturnValue(bn, enc, len) {
    if (!Array.isArray(bn)) {
      bn = bn.toArray();
    }
    var buf = new Buffer(bn);
    if (len && buf.length < len) {
      var zeros = new Buffer(len - buf.length);
      zeros.fill(0);
      buf = Buffer.concat([zeros, buf]);
    }
    if (!enc) {
      return buf;
    } else {
      return buf.toString(enc);
    }
  }
  
  }).call(this,require("buffer").Buffer)
  },{"bn.js":53,"buffer":84,"elliptic":109}],91:[function(require,module,exports){
  (function (Buffer){
  'use strict'
  var inherits = require('inherits')
  var md5 = require('./md5')
  var RIPEMD160 = require('ripemd160')
  var sha = require('sha.js')
  
  var Base = require('cipher-base')
  
  function HashNoConstructor (hash) {
    Base.call(this, 'digest')
  
    this._hash = hash
    this.buffers = []
  }
  
  inherits(HashNoConstructor, Base)
  
  HashNoConstructor.prototype._update = function (data) {
    this.buffers.push(data)
  }
  
  HashNoConstructor.prototype._final = function () {
    var buf = Buffer.concat(this.buffers)
    var r = this._hash(buf)
    this.buffers = null
  
    return r
  }
  
  function Hash (hash) {
    Base.call(this, 'digest')
  
    this._hash = hash
  }
  
  inherits(Hash, Base)
  
  Hash.prototype._update = function (data) {
    this._hash.update(data)
  }
  
  Hash.prototype._final = function () {
    return this._hash.digest()
  }
  
  module.exports = function createHash (alg) {
    alg = alg.toLowerCase()
    if (alg === 'md5') return new HashNoConstructor(md5)
    if (alg === 'rmd160' || alg === 'ripemd160') return new Hash(new RIPEMD160())
  
    return new Hash(sha(alg))
  }
  
  }).call(this,require("buffer").Buffer)
  },{"./md5":93,"buffer":84,"cipher-base":86,"inherits":180,"ripemd160":288,"sha.js":304}],92:[function(require,module,exports){
  (function (Buffer){
  'use strict'
  var intSize = 4
  var zeroBuffer = new Buffer(intSize)
  zeroBuffer.fill(0)
  
  var charSize = 8
  var hashSize = 16
  
  function toArray (buf) {
    if ((buf.length % intSize) !== 0) {
      var len = buf.length + (intSize - (buf.length % intSize))
      buf = Buffer.concat([buf, zeroBuffer], len)
    }
  
    var arr = new Array(buf.length >>> 2)
    for (var i = 0, j = 0; i < buf.length; i += intSize, j++) {
      arr[j] = buf.readInt32LE(i)
    }
  
    return arr
  }
  
  module.exports = function hash (buf, fn) {
    var arr = fn(toArray(buf), buf.length * charSize)
    buf = new Buffer(hashSize)
    for (var i = 0; i < arr.length; i++) {
      buf.writeInt32LE(arr[i], i << 2, true)
    }
    return buf
  }
  
  }).call(this,require("buffer").Buffer)
  },{"buffer":84}],93:[function(require,module,exports){
  'use strict'
  /*
   * A JavaScript implementation of the RSA Data Security, Inc. MD5 Message
   * Digest Algorithm, as defined in RFC 1321.
   * Version 2.1 Copyright (C) Paul Johnston 1999 - 2002.
   * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
   * Distributed under the BSD License
   * See http://pajhome.org.uk/crypt/md5 for more info.
   */
  
  var makeHash = require('./make-hash')
  
  /*
   * Calculate the MD5 of an array of little-endian words, and a bit length
   */
  function core_md5 (x, len) {
    /* append padding */
    x[len >> 5] |= 0x80 << ((len) % 32)
    x[(((len + 64) >>> 9) << 4) + 14] = len
  
    var a = 1732584193
    var b = -271733879
    var c = -1732584194
    var d = 271733878
  
    for (var i = 0; i < x.length; i += 16) {
      var olda = a
      var oldb = b
      var oldc = c
      var oldd = d
  
      a = md5_ff(a, b, c, d, x[i + 0], 7, -680876936)
      d = md5_ff(d, a, b, c, x[i + 1], 12, -389564586)
      c = md5_ff(c, d, a, b, x[i + 2], 17, 606105819)
      b = md5_ff(b, c, d, a, x[i + 3], 22, -1044525330)
      a = md5_ff(a, b, c, d, x[i + 4], 7, -176418897)
      d = md5_ff(d, a, b, c, x[i + 5], 12, 1200080426)
      c = md5_ff(c, d, a, b, x[i + 6], 17, -1473231341)
      b = md5_ff(b, c, d, a, x[i + 7], 22, -45705983)
      a = md5_ff(a, b, c, d, x[i + 8], 7, 1770035416)
      d = md5_ff(d, a, b, c, x[i + 9], 12, -1958414417)
      c = md5_ff(c, d, a, b, x[i + 10], 17, -42063)
      b = md5_ff(b, c, d, a, x[i + 11], 22, -1990404162)
      a = md5_ff(a, b, c, d, x[i + 12], 7, 1804603682)
      d = md5_ff(d, a, b, c, x[i + 13], 12, -40341101)
      c = md5_ff(c, d, a, b, x[i + 14], 17, -1502002290)
      b = md5_ff(b, c, d, a, x[i + 15], 22, 1236535329)
  
      a = md5_gg(a, b, c, d, x[i + 1], 5, -165796510)
      d = md5_gg(d, a, b, c, x[i + 6], 9, -1069501632)
      c = md5_gg(c, d, a, b, x[i + 11], 14, 643717713)
      b = md5_gg(b, c, d, a, x[i + 0], 20, -373897302)
      a = md5_gg(a, b, c, d, x[i + 5], 5, -701558691)
      d = md5_gg(d, a, b, c, x[i + 10], 9, 38016083)
      c = md5_gg(c, d, a, b, x[i + 15], 14, -660478335)
      b = md5_gg(b, c, d, a, x[i + 4], 20, -405537848)
      a = md5_gg(a, b, c, d, x[i + 9], 5, 568446438)
      d = md5_gg(d, a, b, c, x[i + 14], 9, -1019803690)
      c = md5_gg(c, d, a, b, x[i + 3], 14, -187363961)
      b = md5_gg(b, c, d, a, x[i + 8], 20, 1163531501)
      a = md5_gg(a, b, c, d, x[i + 13], 5, -1444681467)
      d = md5_gg(d, a, b, c, x[i + 2], 9, -51403784)
      c = md5_gg(c, d, a, b, x[i + 7], 14, 1735328473)
      b = md5_gg(b, c, d, a, x[i + 12], 20, -1926607734)
  
      a = md5_hh(a, b, c, d, x[i + 5], 4, -378558)
      d = md5_hh(d, a, b, c, x[i + 8], 11, -2022574463)
      c = md5_hh(c, d, a, b, x[i + 11], 16, 1839030562)
      b = md5_hh(b, c, d, a, x[i + 14], 23, -35309556)
      a = md5_hh(a, b, c, d, x[i + 1], 4, -1530992060)
      d = md5_hh(d, a, b, c, x[i + 4], 11, 1272893353)
      c = md5_hh(c, d, a, b, x[i + 7], 16, -155497632)
      b = md5_hh(b, c, d, a, x[i + 10], 23, -1094730640)
      a = md5_hh(a, b, c, d, x[i + 13], 4, 681279174)
      d = md5_hh(d, a, b, c, x[i + 0], 11, -358537222)
      c = md5_hh(c, d, a, b, x[i + 3], 16, -722521979)
      b = md5_hh(b, c, d, a, x[i + 6], 23, 76029189)
      a = md5_hh(a, b, c, d, x[i + 9], 4, -640364487)
      d = md5_hh(d, a, b, c, x[i + 12], 11, -421815835)
      c = md5_hh(c, d, a, b, x[i + 15], 16, 530742520)
      b = md5_hh(b, c, d, a, x[i + 2], 23, -995338651)
  
      a = md5_ii(a, b, c, d, x[i + 0], 6, -198630844)
      d = md5_ii(d, a, b, c, x[i + 7], 10, 1126891415)
      c = md5_ii(c, d, a, b, x[i + 14], 15, -1416354905)
      b = md5_ii(b, c, d, a, x[i + 5], 21, -57434055)
      a = md5_ii(a, b, c, d, x[i + 12], 6, 1700485571)
      d = md5_ii(d, a, b, c, x[i + 3], 10, -1894986606)
      c = md5_ii(c, d, a, b, x[i + 10], 15, -1051523)
      b = md5_ii(b, c, d, a, x[i + 1], 21, -2054922799)
      a = md5_ii(a, b, c, d, x[i + 8], 6, 1873313359)
      d = md5_ii(d, a, b, c, x[i + 15], 10, -30611744)
      c = md5_ii(c, d, a, b, x[i + 6], 15, -1560198380)
      b = md5_ii(b, c, d, a, x[i + 13], 21, 1309151649)
      a = md5_ii(a, b, c, d, x[i + 4], 6, -145523070)
      d = md5_ii(d, a, b, c, x[i + 11], 10, -1120210379)
      c = md5_ii(c, d, a, b, x[i + 2], 15, 718787259)
      b = md5_ii(b, c, d, a, x[i + 9], 21, -343485551)
  
      a = safe_add(a, olda)
      b = safe_add(b, oldb)
      c = safe_add(c, oldc)
      d = safe_add(d, oldd)
    }
  
    return [a, b, c, d]
  }
  
  /*
   * These functions implement the four basic operations the algorithm uses.
   */
  function md5_cmn (q, a, b, x, s, t) {
    return safe_add(bit_rol(safe_add(safe_add(a, q), safe_add(x, t)), s), b)
  }
  
  function md5_ff (a, b, c, d, x, s, t) {
    return md5_cmn((b & c) | ((~b) & d), a, b, x, s, t)
  }
  
  function md5_gg (a, b, c, d, x, s, t) {
    return md5_cmn((b & d) | (c & (~d)), a, b, x, s, t)
  }
  
  function md5_hh (a, b, c, d, x, s, t) {
    return md5_cmn(b ^ c ^ d, a, b, x, s, t)
  }
  
  function md5_ii (a, b, c, d, x, s, t) {
    return md5_cmn(c ^ (b | (~d)), a, b, x, s, t)
  }
  
  /*
   * Add integers, wrapping at 2^32. This uses 16-bit operations internally
   * to work around bugs in some JS interpreters.
   */
  function safe_add (x, y) {
    var lsw = (x & 0xFFFF) + (y & 0xFFFF)
    var msw = (x >> 16) + (y >> 16) + (lsw >> 16)
    return (msw << 16) | (lsw & 0xFFFF)
  }
  
  /*
   * Bitwise rotate a 32-bit number to the left.
   */
  function bit_rol (num, cnt) {
    return (num << cnt) | (num >>> (32 - cnt))
  }
  
  module.exports = function md5 (buf) {
    return makeHash(buf, core_md5)
  }
  
  },{"./make-hash":92}],94:[function(require,module,exports){
  'use strict'
  var inherits = require('inherits')
  var Legacy = require('./legacy')
  var Base = require('cipher-base')
  var Buffer = require('safe-buffer').Buffer
  var md5 = require('create-hash/md5')
  var RIPEMD160 = require('ripemd160')
  
  var sha = require('sha.js')
  
  var ZEROS = Buffer.alloc(128)
  
  function Hmac (alg, key) {
    Base.call(this, 'digest')
    if (typeof key === 'string') {
      key = Buffer.from(key)
    }
  
    var blocksize = (alg === 'sha512' || alg === 'sha384') ? 128 : 64
  
    this._alg = alg
    this._key = key
    if (key.length > blocksize) {
      var hash = alg === 'rmd160' ? new RIPEMD160() : sha(alg)
      key = hash.update(key).digest()
    } else if (key.length < blocksize) {
      key = Buffer.concat([key, ZEROS], blocksize)
    }
  
    var ipad = this._ipad = Buffer.allocUnsafe(blocksize)
    var opad = this._opad = Buffer.allocUnsafe(blocksize)
  
    for (var i = 0; i < blocksize; i++) {
      ipad[i] = key[i] ^ 0x36
      opad[i] = key[i] ^ 0x5C
    }
    this._hash = alg === 'rmd160' ? new RIPEMD160() : sha(alg)
    this._hash.update(ipad)
  }
  
  inherits(Hmac, Base)
  
  Hmac.prototype._update = function (data) {
    this._hash.update(data)
  }
  
  Hmac.prototype._final = function () {
    var h = this._hash.digest()
    var hash = this._alg === 'rmd160' ? new RIPEMD160() : sha(this._alg)
    return hash.update(this._opad).update(h).digest()
  }
  
  module.exports = function createHmac (alg, key) {
    alg = alg.toLowerCase()
    if (alg === 'rmd160' || alg === 'ripemd160') {
      return new Hmac('rmd160', key)
    }
    if (alg === 'md5') {
      return new Legacy(md5, key)
    }
    return new Hmac(alg, key)
  }
  
  },{"./legacy":95,"cipher-base":86,"create-hash/md5":93,"inherits":180,"ripemd160":288,"safe-buffer":290,"sha.js":304}],95:[function(require,module,exports){
  'use strict'
  var inherits = require('inherits')
  var Buffer = require('safe-buffer').Buffer
  
  var Base = require('cipher-base')
  
  var ZEROS = Buffer.alloc(128)
  var blocksize = 64
  
  function Hmac (alg, key) {
    Base.call(this, 'digest')
    if (typeof key === 'string') {
      key = Buffer.from(key)
    }
  
    this._alg = alg
    this._key = key
  
    if (key.length > blocksize) {
      key = alg(key)
    } else if (key.length < blocksize) {
      key = Buffer.concat([key, ZEROS], blocksize)
    }
  
    var ipad = this._ipad = Buffer.allocUnsafe(blocksize)
    var opad = this._opad = Buffer.allocUnsafe(blocksize)
  
    for (var i = 0; i < blocksize; i++) {
      ipad[i] = key[i] ^ 0x36
      opad[i] = key[i] ^ 0x5C
    }
  
    this._hash = [ipad]
  }
  
  inherits(Hmac, Base)
  
  Hmac.prototype._update = function (data) {
    this._hash.push(data)
  }
  
  Hmac.prototype._final = function () {
    var h = this._alg(Buffer.concat(this._hash))
    return this._alg(Buffer.concat([this._opad, h]))
  }
  module.exports = Hmac
  
  },{"cipher-base":86,"inherits":180,"safe-buffer":290}],96:[function(require,module,exports){
  var __root__ = (function (root) {
  function F() { this.fetch = false; }
  F.prototype = root;
  return new F();
  })(typeof self !== 'undefined' ? self : this);
  (function(self) {
  
  (function(self) {
  
    if (self.fetch) {
      return
    }
  
    var support = {
      searchParams: 'URLSearchParams' in self,
      iterable: 'Symbol' in self && 'iterator' in Symbol,
      blob: 'FileReader' in self && 'Blob' in self && (function() {
        try {
          new Blob();
          return true
        } catch(e) {
          return false
        }
      })(),
      formData: 'FormData' in self,
      arrayBuffer: 'ArrayBuffer' in self
    };
  
    if (support.arrayBuffer) {
      var viewClasses = [
        '[object Int8Array]',
        '[object Uint8Array]',
        '[object Uint8ClampedArray]',
        '[object Int16Array]',
        '[object Uint16Array]',
        '[object Int32Array]',
        '[object Uint32Array]',
        '[object Float32Array]',
        '[object Float64Array]'
      ];
  
      var isDataView = function(obj) {
        return obj && DataView.prototype.isPrototypeOf(obj)
      };
  
      var isArrayBufferView = ArrayBuffer.isView || function(obj) {
        return obj && viewClasses.indexOf(Object.prototype.toString.call(obj)) > -1
      };
    }
  
    function normalizeName(name) {
      if (typeof name !== 'string') {
        name = String(name);
      }
      if (/[^a-z0-9\-#$%&'*+.\^_`|~]/i.test(name)) {
        throw new TypeError('Invalid character in header field name')
      }
      return name.toLowerCase()
    }
  
    function normalizeValue(value) {
      if (typeof value !== 'string') {
        value = String(value);
      }
      return value
    }
  
    // Build a destructive iterator for the value list
    function iteratorFor(items) {
      var iterator = {
        next: function() {
          var value = items.shift();
          return {done: value === undefined, value: value}
        }
      };
  
      if (support.iterable) {
        iterator[Symbol.iterator] = function() {
          return iterator
        };
      }
  
      return iterator
    }
  
    function Headers(headers) {
      this.map = {};
  
      if (headers instanceof Headers) {
        headers.forEach(function(value, name) {
          this.append(name, value);
        }, this);
      } else if (Array.isArray(headers)) {
        headers.forEach(function(header) {
          this.append(header[0], header[1]);
        }, this);
      } else if (headers) {
        Object.getOwnPropertyNames(headers).forEach(function(name) {
          this.append(name, headers[name]);
        }, this);
      }
    }
  
    Headers.prototype.append = function(name, value) {
      name = normalizeName(name);
      value = normalizeValue(value);
      var oldValue = this.map[name];
      this.map[name] = oldValue ? oldValue+','+value : value;
    };
  
    Headers.prototype['delete'] = function(name) {
      delete this.map[normalizeName(name)];
    };
  
    Headers.prototype.get = function(name) {
      name = normalizeName(name);
      return this.has(name) ? this.map[name] : null
    };
  
    Headers.prototype.has = function(name) {
      return this.map.hasOwnProperty(normalizeName(name))
    };
  
    Headers.prototype.set = function(name, value) {
      this.map[normalizeName(name)] = normalizeValue(value);
    };
  
    Headers.prototype.forEach = function(callback, thisArg) {
      for (var name in this.map) {
        if (this.map.hasOwnProperty(name)) {
          callback.call(thisArg, this.map[name], name, this);
        }
      }
    };
  
    Headers.prototype.keys = function() {
      var items = [];
      this.forEach(function(value, name) { items.push(name); });
      return iteratorFor(items)
    };
  
    Headers.prototype.values = function() {
      var items = [];
      this.forEach(function(value) { items.push(value); });
      return iteratorFor(items)
    };
  
    Headers.prototype.entries = function() {
      var items = [];
      this.forEach(function(value, name) { items.push([name, value]); });
      return iteratorFor(items)
    };
  
    if (support.iterable) {
      Headers.prototype[Symbol.iterator] = Headers.prototype.entries;
    }
  
    function consumed(body) {
      if (body.bodyUsed) {
        return Promise.reject(new TypeError('Already read'))
      }
      body.bodyUsed = true;
    }
  
    function fileReaderReady(reader) {
      return new Promise(function(resolve, reject) {
        reader.onload = function() {
          resolve(reader.result);
        };
        reader.onerror = function() {
          reject(reader.error);
        };
      })
    }
  
    function readBlobAsArrayBuffer(blob) {
      var reader = new FileReader();
      var promise = fileReaderReady(reader);
      reader.readAsArrayBuffer(blob);
      return promise
    }
  
    function readBlobAsText(blob) {
      var reader = new FileReader();
      var promise = fileReaderReady(reader);
      reader.readAsText(blob);
      return promise
    }
  
    function readArrayBufferAsText(buf) {
      var view = new Uint8Array(buf);
      var chars = new Array(view.length);
  
      for (var i = 0; i < view.length; i++) {
        chars[i] = String.fromCharCode(view[i]);
      }
      return chars.join('')
    }
  
    function bufferClone(buf) {
      if (buf.slice) {
        return buf.slice(0)
      } else {
        var view = new Uint8Array(buf.byteLength);
        view.set(new Uint8Array(buf));
        return view.buffer
      }
    }
  
    function Body() {
      this.bodyUsed = false;
  
      this._initBody = function(body) {
        this._bodyInit = body;
        if (!body) {
          this._bodyText = '';
        } else if (typeof body === 'string') {
          this._bodyText = body;
        } else if (support.blob && Blob.prototype.isPrototypeOf(body)) {
          this._bodyBlob = body;
        } else if (support.formData && FormData.prototype.isPrototypeOf(body)) {
          this._bodyFormData = body;
        } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {
          this._bodyText = body.toString();
        } else if (support.arrayBuffer && support.blob && isDataView(body)) {
          this._bodyArrayBuffer = bufferClone(body.buffer);
          // IE 10-11 can't handle a DataView body.
          this._bodyInit = new Blob([this._bodyArrayBuffer]);
        } else if (support.arrayBuffer && (ArrayBuffer.prototype.isPrototypeOf(body) || isArrayBufferView(body))) {
          this._bodyArrayBuffer = bufferClone(body);
        } else {
          throw new Error('unsupported BodyInit type')
        }
  
        if (!this.headers.get('content-type')) {
          if (typeof body === 'string') {
            this.headers.set('content-type', 'text/plain;charset=UTF-8');
          } else if (this._bodyBlob && this._bodyBlob.type) {
            this.headers.set('content-type', this._bodyBlob.type);
          } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {
            this.headers.set('content-type', 'application/x-www-form-urlencoded;charset=UTF-8');
          }
        }
      };
  
      if (support.blob) {
        this.blob = function() {
          var rejected = consumed(this);
          if (rejected) {
            return rejected
          }
  
          if (this._bodyBlob) {
            return Promise.resolve(this._bodyBlob)
          } else if (this._bodyArrayBuffer) {
            return Promise.resolve(new Blob([this._bodyArrayBuffer]))
          } else if (this._bodyFormData) {
            throw new Error('could not read FormData body as blob')
          } else {
            return Promise.resolve(new Blob([this._bodyText]))
          }
        };
  
        this.arrayBuffer = function() {
          if (this._bodyArrayBuffer) {
            return consumed(this) || Promise.resolve(this._bodyArrayBuffer)
          } else {
            return this.blob().then(readBlobAsArrayBuffer)
          }
        };
      }
  
      this.text = function() {
        var rejected = consumed(this);
        if (rejected) {
          return rejected
        }
  
        if (this._bodyBlob) {
          return readBlobAsText(this._bodyBlob)
        } else if (this._bodyArrayBuffer) {
          return Promise.resolve(readArrayBufferAsText(this._bodyArrayBuffer))
        } else if (this._bodyFormData) {
          throw new Error('could not read FormData body as text')
        } else {
          return Promise.resolve(this._bodyText)
        }
      };
  
      if (support.formData) {
        this.formData = function() {
          return this.text().then(decode)
        };
      }
  
      this.json = function() {
        return this.text().then(JSON.parse)
      };
  
      return this
    }
  
    // HTTP methods whose capitalization should be normalized
    var methods = ['DELETE', 'GET', 'HEAD', 'OPTIONS', 'POST', 'PUT'];
  
    function normalizeMethod(method) {
      var upcased = method.toUpperCase();
      return (methods.indexOf(upcased) > -1) ? upcased : method
    }
  
    function Request(input, options) {
      options = options || {};
      var body = options.body;
  
      if (input instanceof Request) {
        if (input.bodyUsed) {
          throw new TypeError('Already read')
        }
        this.url = input.url;
        this.credentials = input.credentials;
        if (!options.headers) {
          this.headers = new Headers(input.headers);
        }
        this.method = input.method;
        this.mode = input.mode;
        if (!body && input._bodyInit != null) {
          body = input._bodyInit;
          input.bodyUsed = true;
        }
      } else {
        this.url = String(input);
      }
  
      this.credentials = options.credentials || this.credentials || 'omit';
      if (options.headers || !this.headers) {
        this.headers = new Headers(options.headers);
      }
      this.method = normalizeMethod(options.method || this.method || 'GET');
      this.mode = options.mode || this.mode || null;
      this.referrer = null;
  
      if ((this.method === 'GET' || this.method === 'HEAD') && body) {
        throw new TypeError('Body not allowed for GET or HEAD requests')
      }
      this._initBody(body);
    }
  
    Request.prototype.clone = function() {
      return new Request(this, { body: this._bodyInit })
    };
  
    function decode(body) {
      var form = new FormData();
      body.trim().split('&').forEach(function(bytes) {
        if (bytes) {
          var split = bytes.split('=');
          var name = split.shift().replace(/\+/g, ' ');
          var value = split.join('=').replace(/\+/g, ' ');
          form.append(decodeURIComponent(name), decodeURIComponent(value));
        }
      });
      return form
    }
  
    function parseHeaders(rawHeaders) {
      var headers = new Headers();
      // Replace instances of \r\n and \n followed by at least one space or horizontal tab with a space
      // https://tools.ietf.org/html/rfc7230#section-3.2
      var preProcessedHeaders = rawHeaders.replace(/\r?\n[\t ]+/g, ' ');
      preProcessedHeaders.split(/\r?\n/).forEach(function(line) {
        var parts = line.split(':');
        var key = parts.shift().trim();
        if (key) {
          var value = parts.join(':').trim();
          headers.append(key, value);
        }
      });
      return headers
    }
  
    Body.call(Request.prototype);
  
    function Response(bodyInit, options) {
      if (!options) {
        options = {};
      }
  
      this.type = 'default';
      this.status = options.status === undefined ? 200 : options.status;
      this.ok = this.status >= 200 && this.status < 300;
      this.statusText = 'statusText' in options ? options.statusText : 'OK';
      this.headers = new Headers(options.headers);
      this.url = options.url || '';
      this._initBody(bodyInit);
    }
  
    Body.call(Response.prototype);
  
    Response.prototype.clone = function() {
      return new Response(this._bodyInit, {
        status: this.status,
        statusText: this.statusText,
        headers: new Headers(this.headers),
        url: this.url
      })
    };
  
    Response.error = function() {
      var response = new Response(null, {status: 0, statusText: ''});
      response.type = 'error';
      return response
    };
  
    var redirectStatuses = [301, 302, 303, 307, 308];
  
    Response.redirect = function(url, status) {
      if (redirectStatuses.indexOf(status) === -1) {
        throw new RangeError('Invalid status code')
      }
  
      return new Response(null, {status: status, headers: {location: url}})
    };
  
    self.Headers = Headers;
    self.Request = Request;
    self.Response = Response;
  
    self.fetch = function(input, init) {
      return new Promise(function(resolve, reject) {
        var request = new Request(input, init);
        var xhr = new XMLHttpRequest();
  
        xhr.onload = function() {
          var options = {
            status: xhr.status,
            statusText: xhr.statusText,
            headers: parseHeaders(xhr.getAllResponseHeaders() || '')
          };
          options.url = 'responseURL' in xhr ? xhr.responseURL : options.headers.get('X-Request-URL');
          var body = 'response' in xhr ? xhr.response : xhr.responseText;
          resolve(new Response(body, options));
        };
  
        xhr.onerror = function() {
          reject(new TypeError('Network request failed'));
        };
  
        xhr.ontimeout = function() {
          reject(new TypeError('Network request failed'));
        };
  
        xhr.open(request.method, request.url, true);
  
        if (request.credentials === 'include') {
          xhr.withCredentials = true;
        } else if (request.credentials === 'omit') {
          xhr.withCredentials = false;
        }
  
        if ('responseType' in xhr && support.blob) {
          xhr.responseType = 'blob';
        }
  
        request.headers.forEach(function(value, name) {
          xhr.setRequestHeader(name, value);
        });
  
        xhr.send(typeof request._bodyInit === 'undefined' ? null : request._bodyInit);
      })
    };
    self.fetch.polyfill = true;
  })(typeof self !== 'undefined' ? self : this);
  }).call(__root__, void(0));
  var fetch = __root__.fetch;
  var Response = fetch.Response = __root__.Response;
  var Request = fetch.Request = __root__.Request;
  var Headers = fetch.Headers = __root__.Headers;
  if (typeof module === 'object' && module.exports) {
  module.exports = fetch;
  // Needed for TypeScript consumers without esModuleInterop.
  module.exports.default = fetch;
  }
  
  },{}],97:[function(require,module,exports){
  'use strict'
  
  exports.randomBytes = exports.rng = exports.pseudoRandomBytes = exports.prng = require('randombytes')
  exports.createHash = exports.Hash = require('create-hash')
  exports.createHmac = exports.Hmac = require('create-hmac')
  
  var algos = require('browserify-sign/algos')
  var algoKeys = Object.keys(algos)
  var hashes = ['sha1', 'sha224', 'sha256', 'sha384', 'sha512', 'md5', 'rmd160'].concat(algoKeys)
  exports.getHashes = function () {
    return hashes
  }
  
  var p = require('pbkdf2')
  exports.pbkdf2 = p.pbkdf2
  exports.pbkdf2Sync = p.pbkdf2Sync
  
  var aes = require('browserify-cipher')
  
  exports.Cipher = aes.Cipher
  exports.createCipher = aes.createCipher
  exports.Cipheriv = aes.Cipheriv
  exports.createCipheriv = aes.createCipheriv
  exports.Decipher = aes.Decipher
  exports.createDecipher = aes.createDecipher
  exports.Decipheriv = aes.Decipheriv
  exports.createDecipheriv = aes.createDecipheriv
  exports.getCiphers = aes.getCiphers
  exports.listCiphers = aes.listCiphers
  
  var dh = require('diffie-hellman')
  
  exports.DiffieHellmanGroup = dh.DiffieHellmanGroup
  exports.createDiffieHellmanGroup = dh.createDiffieHellmanGroup
  exports.getDiffieHellman = dh.getDiffieHellman
  exports.createDiffieHellman = dh.createDiffieHellman
  exports.DiffieHellman = dh.DiffieHellman
  
  var sign = require('browserify-sign')
  
  exports.createSign = sign.createSign
  exports.Sign = sign.Sign
  exports.createVerify = sign.createVerify
  exports.Verify = sign.Verify
  
  exports.createECDH = require('create-ecdh')
  
  var publicEncrypt = require('public-encrypt')
  
  exports.publicEncrypt = publicEncrypt.publicEncrypt
  exports.privateEncrypt = publicEncrypt.privateEncrypt
  exports.publicDecrypt = publicEncrypt.publicDecrypt
  exports.privateDecrypt = publicEncrypt.privateDecrypt
  
  // the least I can do is make error messages for the rest of the node.js/crypto api.
  // ;[
  //   'createCredentials'
  // ].forEach(function (name) {
  //   exports[name] = function () {
  //     throw new Error([
  //       'sorry, ' + name + ' is not implemented yet',
  //       'we accept pull requests',
  //       'https://github.com/crypto-browserify/crypto-browserify'
  //     ].join('\n'))
  //   }
  // })
  
  var rf = require('randomfill')
  
  exports.randomFill = rf.randomFill
  exports.randomFillSync = rf.randomFillSync
  
  exports.createCredentials = function () {
    throw new Error([
      'sorry, createCredentials is not implemented yet',
      'we accept pull requests',
      'https://github.com/crypto-browserify/crypto-browserify'
    ].join('\n'))
  }
  
  exports.constants = {
    'DH_CHECK_P_NOT_SAFE_PRIME': 2,
    'DH_CHECK_P_NOT_PRIME': 1,
    'DH_UNABLE_TO_CHECK_GENERATOR': 4,
    'DH_NOT_SUITABLE_GENERATOR': 8,
    'NPN_ENABLED': 1,
    'ALPN_ENABLED': 1,
    'RSA_PKCS1_PADDING': 1,
    'RSA_SSLV23_PADDING': 2,
    'RSA_NO_PADDING': 3,
    'RSA_PKCS1_OAEP_PADDING': 4,
    'RSA_X931_PADDING': 5,
    'RSA_PKCS1_PSS_PADDING': 6,
    'POINT_CONVERSION_COMPRESSED': 2,
    'POINT_CONVERSION_UNCOMPRESSED': 4,
    'POINT_CONVERSION_HYBRID': 6
  }
  
  },{"browserify-cipher":73,"browserify-sign":80,"browserify-sign/algos":77,"create-ecdh":90,"create-hash":91,"create-hmac":94,"diffie-hellman":105,"pbkdf2":247,"public-encrypt":259,"randombytes":270,"randomfill":271}],98:[function(require,module,exports){
  'use strict';
  var token = '%[a-f0-9]{2}';
  var singleMatcher = new RegExp(token, 'gi');
  var multiMatcher = new RegExp('(' + token + ')+', 'gi');
  
  function decodeComponents(components, split) {
    try {
      // Try to decode the entire string first
      return decodeURIComponent(components.join(''));
    } catch (err) {
      // Do nothing
    }
  
    if (components.length === 1) {
      return components;
    }
  
    split = split || 1;
  
    // Split the array in 2 parts
    var left = components.slice(0, split);
    var right = components.slice(split);
  
    return Array.prototype.concat.call([], decodeComponents(left), decodeComponents(right));
  }
  
  function decode(input) {
    try {
      return decodeURIComponent(input);
    } catch (err) {
      var tokens = input.match(singleMatcher);
  
      for (var i = 1; i < tokens.length; i++) {
        input = decodeComponents(tokens, i).join('');
  
        tokens = input.match(singleMatcher);
      }
  
      return input;
    }
  }
  
  function customDecodeURIComponent(input) {
    // Keep track of all the replacements and prefill the map with the `BOM`
    var replaceMap = {
      '%FE%FF': '\uFFFD\uFFFD',
      '%FF%FE': '\uFFFD\uFFFD'
    };
  
    var match = multiMatcher.exec(input);
    while (match) {
      try {
        // Decode as big chunks as possible
        replaceMap[match[0]] = decodeURIComponent(match[0]);
      } catch (err) {
        var result = decode(match[0]);
  
        if (result !== match[0]) {
          replaceMap[match[0]] = result;
        }
      }
  
      match = multiMatcher.exec(input);
    }
  
    // Add `%C2` at the end of the map to make sure it does not replace the combinator before everything else
    replaceMap['%C2'] = '\uFFFD';
  
    var entries = Object.keys(replaceMap);
  
    for (var i = 0; i < entries.length; i++) {
      // Replace all decoded components
      var key = entries[i];
      input = input.replace(new RegExp(key, 'g'), replaceMap[key]);
    }
  
    return input;
  }
  
  module.exports = function (encodedURI) {
    if (typeof encodedURI !== 'string') {
      throw new TypeError('Expected `encodedURI` to be of type `string`, got `' + typeof encodedURI + '`');
    }
  
    try {
      encodedURI = encodedURI.replace(/\+/g, ' ');
  
      // Try the built in decoder first
      return decodeURIComponent(encodedURI);
    } catch (err) {
      // Fallback to a more advanced decoder
      return customDecodeURIComponent(encodedURI);
    }
  };
  
  },{}],99:[function(require,module,exports){
  'use strict';
  
  exports.utils = require('./des/utils');
  exports.Cipher = require('./des/cipher');
  exports.DES = require('./des/des');
  exports.CBC = require('./des/cbc');
  exports.EDE = require('./des/ede');
  
  },{"./des/cbc":100,"./des/cipher":101,"./des/des":102,"./des/ede":103,"./des/utils":104}],100:[function(require,module,exports){
  'use strict';
  
  var assert = require('minimalistic-assert');
  var inherits = require('inherits');
  
  var proto = {};
  
  function CBCState(iv) {
    assert.equal(iv.length, 8, 'Invalid IV length');
  
    this.iv = new Array(8);
    for (var i = 0; i < this.iv.length; i++)
      this.iv[i] = iv[i];
  }
  
  function instantiate(Base) {
    function CBC(options) {
      Base.call(this, options);
      this._cbcInit();
    }
    inherits(CBC, Base);
  
    var keys = Object.keys(proto);
    for (var i = 0; i < keys.length; i++) {
      var key = keys[i];
      CBC.prototype[key] = proto[key];
    }
  
    CBC.create = function create(options) {
      return new CBC(options);
    };
  
    return CBC;
  }
  
  exports.instantiate = instantiate;
  
  proto._cbcInit = function _cbcInit() {
    var state = new CBCState(this.options.iv);
    this._cbcState = state;
  };
  
  proto._update = function _update(inp, inOff, out, outOff) {
    var state = this._cbcState;
    var superProto = this.constructor.super_.prototype;
  
    var iv = state.iv;
    if (this.type === 'encrypt') {
      for (var i = 0; i < this.blockSize; i++)
        iv[i] ^= inp[inOff + i];
  
      superProto._update.call(this, iv, 0, out, outOff);
  
      for (var i = 0; i < this.blockSize; i++)
        iv[i] = out[outOff + i];
    } else {
      superProto._update.call(this, inp, inOff, out, outOff);
  
      for (var i = 0; i < this.blockSize; i++)
        out[outOff + i] ^= iv[i];
  
      for (var i = 0; i < this.blockSize; i++)
        iv[i] = inp[inOff + i];
    }
  };
  
  },{"inherits":180,"minimalistic-assert":234}],101:[function(require,module,exports){
  'use strict';
  
  var assert = require('minimalistic-assert');
  
  function Cipher(options) {
    this.options = options;
  
    this.type = this.options.type;
    this.blockSize = 8;
    this._init();
  
    this.buffer = new Array(this.blockSize);
    this.bufferOff = 0;
  }
  module.exports = Cipher;
  
  Cipher.prototype._init = function _init() {
    // Might be overridden
  };
  
  Cipher.prototype.update = function update(data) {
    if (data.length === 0)
      return [];
  
    if (this.type === 'decrypt')
      return this._updateDecrypt(data);
    else
      return this._updateEncrypt(data);
  };
  
  Cipher.prototype._buffer = function _buffer(data, off) {
    // Append data to buffer
    var min = Math.min(this.buffer.length - this.bufferOff, data.length - off);
    for (var i = 0; i < min; i++)
      this.buffer[this.bufferOff + i] = data[off + i];
    this.bufferOff += min;
  
    // Shift next
    return min;
  };
  
  Cipher.prototype._flushBuffer = function _flushBuffer(out, off) {
    this._update(this.buffer, 0, out, off);
    this.bufferOff = 0;
    return this.blockSize;
  };
  
  Cipher.prototype._updateEncrypt = function _updateEncrypt(data) {
    var inputOff = 0;
    var outputOff = 0;
  
    var count = ((this.bufferOff + data.length) / this.blockSize) | 0;
    var out = new Array(count * this.blockSize);
  
    if (this.bufferOff !== 0) {
      inputOff += this._buffer(data, inputOff);
  
      if (this.bufferOff === this.buffer.length)
        outputOff += this._flushBuffer(out, outputOff);
    }
  
    // Write blocks
    var max = data.length - ((data.length - inputOff) % this.blockSize);
    for (; inputOff < max; inputOff += this.blockSize) {
      this._update(data, inputOff, out, outputOff);
      outputOff += this.blockSize;
    }
  
    // Queue rest
    for (; inputOff < data.length; inputOff++, this.bufferOff++)
      this.buffer[this.bufferOff] = data[inputOff];
  
    return out;
  };
  
  Cipher.prototype._updateDecrypt = function _updateDecrypt(data) {
    var inputOff = 0;
    var outputOff = 0;
  
    var count = Math.ceil((this.bufferOff + data.length) / this.blockSize) - 1;
    var out = new Array(count * this.blockSize);
  
    // TODO(indutny): optimize it, this is far from optimal
    for (; count > 0; count--) {
      inputOff += this._buffer(data, inputOff);
      outputOff += this._flushBuffer(out, outputOff);
    }
  
    // Buffer rest of the input
    inputOff += this._buffer(data, inputOff);
  
    return out;
  };
  
  Cipher.prototype.final = function final(buffer) {
    var first;
    if (buffer)
      first = this.update(buffer);
  
    var last;
    if (this.type === 'encrypt')
      last = this._finalEncrypt();
    else
      last = this._finalDecrypt();
  
    if (first)
      return first.concat(last);
    else
      return last;
  };
  
  Cipher.prototype._pad = function _pad(buffer, off) {
    if (off === 0)
      return false;
  
    while (off < buffer.length)
      buffer[off++] = 0;
  
    return true;
  };
  
  Cipher.prototype._finalEncrypt = function _finalEncrypt() {
    if (!this._pad(this.buffer, this.bufferOff))
      return [];
  
    var out = new Array(this.blockSize);
    this._update(this.buffer, 0, out, 0);
    return out;
  };
  
  Cipher.prototype._unpad = function _unpad(buffer) {
    return buffer;
  };
  
  Cipher.prototype._finalDecrypt = function _finalDecrypt() {
    assert.equal(this.bufferOff, this.blockSize, 'Not enough data to decrypt');
    var out = new Array(this.blockSize);
    this._flushBuffer(out, 0);
  
    return this._unpad(out);
  };
  
  },{"minimalistic-assert":234}],102:[function(require,module,exports){
  'use strict';
  
  var assert = require('minimalistic-assert');
  var inherits = require('inherits');
  
  var des = require('../des');
  var utils = des.utils;
  var Cipher = des.Cipher;
  
  function DESState() {
    this.tmp = new Array(2);
    this.keys = null;
  }
  
  function DES(options) {
    Cipher.call(this, options);
  
    var state = new DESState();
    this._desState = state;
  
    this.deriveKeys(state, options.key);
  }
  inherits(DES, Cipher);
  module.exports = DES;
  
  DES.create = function create(options) {
    return new DES(options);
  };
  
  var shiftTable = [
    1, 1, 2, 2, 2, 2, 2, 2,
    1, 2, 2, 2, 2, 2, 2, 1
  ];
  
  DES.prototype.deriveKeys = function deriveKeys(state, key) {
    state.keys = new Array(16 * 2);
  
    assert.equal(key.length, this.blockSize, 'Invalid key length');
  
    var kL = utils.readUInt32BE(key, 0);
    var kR = utils.readUInt32BE(key, 4);
  
    utils.pc1(kL, kR, state.tmp, 0);
    kL = state.tmp[0];
    kR = state.tmp[1];
    for (var i = 0; i < state.keys.length; i += 2) {
      var shift = shiftTable[i >>> 1];
      kL = utils.r28shl(kL, shift);
      kR = utils.r28shl(kR, shift);
      utils.pc2(kL, kR, state.keys, i);
    }
  };
  
  DES.prototype._update = function _update(inp, inOff, out, outOff) {
    var state = this._desState;
  
    var l = utils.readUInt32BE(inp, inOff);
    var r = utils.readUInt32BE(inp, inOff + 4);
  
    // Initial Permutation
    utils.ip(l, r, state.tmp, 0);
    l = state.tmp[0];
    r = state.tmp[1];
  
    if (this.type === 'encrypt')
      this._encrypt(state, l, r, state.tmp, 0);
    else
      this._decrypt(state, l, r, state.tmp, 0);
  
    l = state.tmp[0];
    r = state.tmp[1];
  
    utils.writeUInt32BE(out, l, outOff);
    utils.writeUInt32BE(out, r, outOff + 4);
  };
  
  DES.prototype._pad = function _pad(buffer, off) {
    var value = buffer.length - off;
    for (var i = off; i < buffer.length; i++)
      buffer[i] = value;
  
    return true;
  };
  
  DES.prototype._unpad = function _unpad(buffer) {
    var pad = buffer[buffer.length - 1];
    for (var i = buffer.length - pad; i < buffer.length; i++)
      assert.equal(buffer[i], pad);
  
    return buffer.slice(0, buffer.length - pad);
  };
  
  DES.prototype._encrypt = function _encrypt(state, lStart, rStart, out, off) {
    var l = lStart;
    var r = rStart;
  
    // Apply f() x16 times
    for (var i = 0; i < state.keys.length; i += 2) {
      var keyL = state.keys[i];
      var keyR = state.keys[i + 1];
  
      // f(r, k)
      utils.expand(r, state.tmp, 0);
  
      keyL ^= state.tmp[0];
      keyR ^= state.tmp[1];
      var s = utils.substitute(keyL, keyR);
      var f = utils.permute(s);
  
      var t = r;
      r = (l ^ f) >>> 0;
      l = t;
    }
  
    // Reverse Initial Permutation
    utils.rip(r, l, out, off);
  };
  
  DES.prototype._decrypt = function _decrypt(state, lStart, rStart, out, off) {
    var l = rStart;
    var r = lStart;
  
    // Apply f() x16 times
    for (var i = state.keys.length - 2; i >= 0; i -= 2) {
      var keyL = state.keys[i];
      var keyR = state.keys[i + 1];
  
      // f(r, k)
      utils.expand(l, state.tmp, 0);
  
      keyL ^= state.tmp[0];
      keyR ^= state.tmp[1];
      var s = utils.substitute(keyL, keyR);
      var f = utils.permute(s);
  
      var t = l;
      l = (r ^ f) >>> 0;
      r = t;
    }
  
    // Reverse Initial Permutation
    utils.rip(l, r, out, off);
  };
  
  },{"../des":99,"inherits":180,"minimalistic-assert":234}],103:[function(require,module,exports){
  'use strict';
  
  var assert = require('minimalistic-assert');
  var inherits = require('inherits');
  
  var des = require('../des');
  var Cipher = des.Cipher;
  var DES = des.DES;
  
  function EDEState(type, key) {
    assert.equal(key.length, 24, 'Invalid key length');
  
    var k1 = key.slice(0, 8);
    var k2 = key.slice(8, 16);
    var k3 = key.slice(16, 24);
  
    if (type === 'encrypt') {
      this.ciphers = [
        DES.create({ type: 'encrypt', key: k1 }),
        DES.create({ type: 'decrypt', key: k2 }),
        DES.create({ type: 'encrypt', key: k3 })
      ];
    } else {
      this.ciphers = [
        DES.create({ type: 'decrypt', key: k3 }),
        DES.create({ type: 'encrypt', key: k2 }),
        DES.create({ type: 'decrypt', key: k1 })
      ];
    }
  }
  
  function EDE(options) {
    Cipher.call(this, options);
  
    var state = new EDEState(this.type, this.options.key);
    this._edeState = state;
  }
  inherits(EDE, Cipher);
  
  module.exports = EDE;
  
  EDE.create = function create(options) {
    return new EDE(options);
  };
  
  EDE.prototype._update = function _update(inp, inOff, out, outOff) {
    var state = this._edeState;
  
    state.ciphers[0]._update(inp, inOff, out, outOff);
    state.ciphers[1]._update(out, outOff, out, outOff);
    state.ciphers[2]._update(out, outOff, out, outOff);
  };
  
  EDE.prototype._pad = DES.prototype._pad;
  EDE.prototype._unpad = DES.prototype._unpad;
  
  },{"../des":99,"inherits":180,"minimalistic-assert":234}],104:[function(require,module,exports){
  'use strict';
  
  exports.readUInt32BE = function readUInt32BE(bytes, off) {
    var res =  (bytes[0 + off] << 24) |
               (bytes[1 + off] << 16) |
               (bytes[2 + off] << 8) |
               bytes[3 + off];
    return res >>> 0;
  };
  
  exports.writeUInt32BE = function writeUInt32BE(bytes, value, off) {
    bytes[0 + off] = value >>> 24;
    bytes[1 + off] = (value >>> 16) & 0xff;
    bytes[2 + off] = (value >>> 8) & 0xff;
    bytes[3 + off] = value & 0xff;
  };
  
  exports.ip = function ip(inL, inR, out, off) {
    var outL = 0;
    var outR = 0;
  
    for (var i = 6; i >= 0; i -= 2) {
      for (var j = 0; j <= 24; j += 8) {
        outL <<= 1;
        outL |= (inR >>> (j + i)) & 1;
      }
      for (var j = 0; j <= 24; j += 8) {
        outL <<= 1;
        outL |= (inL >>> (j + i)) & 1;
      }
    }
  
    for (var i = 6; i >= 0; i -= 2) {
      for (var j = 1; j <= 25; j += 8) {
        outR <<= 1;
        outR |= (inR >>> (j + i)) & 1;
      }
      for (var j = 1; j <= 25; j += 8) {
        outR <<= 1;
        outR |= (inL >>> (j + i)) & 1;
      }
    }
  
    out[off + 0] = outL >>> 0;
    out[off + 1] = outR >>> 0;
  };
  
  exports.rip = function rip(inL, inR, out, off) {
    var outL = 0;
    var outR = 0;
  
    for (var i = 0; i < 4; i++) {
      for (var j = 24; j >= 0; j -= 8) {
        outL <<= 1;
        outL |= (inR >>> (j + i)) & 1;
        outL <<= 1;
        outL |= (inL >>> (j + i)) & 1;
      }
    }
    for (var i = 4; i < 8; i++) {
      for (var j = 24; j >= 0; j -= 8) {
        outR <<= 1;
        outR |= (inR >>> (j + i)) & 1;
        outR <<= 1;
        outR |= (inL >>> (j + i)) & 1;
      }
    }
  
    out[off + 0] = outL >>> 0;
    out[off + 1] = outR >>> 0;
  };
  
  exports.pc1 = function pc1(inL, inR, out, off) {
    var outL = 0;
    var outR = 0;
  
    // 7, 15, 23, 31, 39, 47, 55, 63
    // 6, 14, 22, 30, 39, 47, 55, 63
    // 5, 13, 21, 29, 39, 47, 55, 63
    // 4, 12, 20, 28
    for (var i = 7; i >= 5; i--) {
      for (var j = 0; j <= 24; j += 8) {
        outL <<= 1;
        outL |= (inR >> (j + i)) & 1;
      }
      for (var j = 0; j <= 24; j += 8) {
        outL <<= 1;
        outL |= (inL >> (j + i)) & 1;
      }
    }
    for (var j = 0; j <= 24; j += 8) {
      outL <<= 1;
      outL |= (inR >> (j + i)) & 1;
    }
  
    // 1, 9, 17, 25, 33, 41, 49, 57
    // 2, 10, 18, 26, 34, 42, 50, 58
    // 3, 11, 19, 27, 35, 43, 51, 59
    // 36, 44, 52, 60
    for (var i = 1; i <= 3; i++) {
      for (var j = 0; j <= 24; j += 8) {
        outR <<= 1;
        outR |= (inR >> (j + i)) & 1;
      }
      for (var j = 0; j <= 24; j += 8) {
        outR <<= 1;
        outR |= (inL >> (j + i)) & 1;
      }
    }
    for (var j = 0; j <= 24; j += 8) {
      outR <<= 1;
      outR |= (inL >> (j + i)) & 1;
    }
  
    out[off + 0] = outL >>> 0;
    out[off + 1] = outR >>> 0;
  };
  
  exports.r28shl = function r28shl(num, shift) {
    return ((num << shift) & 0xfffffff) | (num >>> (28 - shift));
  };
  
  var pc2table = [
    // inL => outL
    14, 11, 17, 4, 27, 23, 25, 0,
    13, 22, 7, 18, 5, 9, 16, 24,
    2, 20, 12, 21, 1, 8, 15, 26,
  
    // inR => outR
    15, 4, 25, 19, 9, 1, 26, 16,
    5, 11, 23, 8, 12, 7, 17, 0,
    22, 3, 10, 14, 6, 20, 27, 24
  ];
  
  exports.pc2 = function pc2(inL, inR, out, off) {
    var outL = 0;
    var outR = 0;
  
    var len = pc2table.length >>> 1;
    for (var i = 0; i < len; i++) {
      outL <<= 1;
      outL |= (inL >>> pc2table[i]) & 0x1;
    }
    for (var i = len; i < pc2table.length; i++) {
      outR <<= 1;
      outR |= (inR >>> pc2table[i]) & 0x1;
    }
  
    out[off + 0] = outL >>> 0;
    out[off + 1] = outR >>> 0;
  };
  
  exports.expand = function expand(r, out, off) {
    var outL = 0;
    var outR = 0;
  
    outL = ((r & 1) << 5) | (r >>> 27);
    for (var i = 23; i >= 15; i -= 4) {
      outL <<= 6;
      outL |= (r >>> i) & 0x3f;
    }
    for (var i = 11; i >= 3; i -= 4) {
      outR |= (r >>> i) & 0x3f;
      outR <<= 6;
    }
    outR |= ((r & 0x1f) << 1) | (r >>> 31);
  
    out[off + 0] = outL >>> 0;
    out[off + 1] = outR >>> 0;
  };
  
  var sTable = [
    14, 0, 4, 15, 13, 7, 1, 4, 2, 14, 15, 2, 11, 13, 8, 1,
    3, 10, 10, 6, 6, 12, 12, 11, 5, 9, 9, 5, 0, 3, 7, 8,
    4, 15, 1, 12, 14, 8, 8, 2, 13, 4, 6, 9, 2, 1, 11, 7,
    15, 5, 12, 11, 9, 3, 7, 14, 3, 10, 10, 0, 5, 6, 0, 13,
  
    15, 3, 1, 13, 8, 4, 14, 7, 6, 15, 11, 2, 3, 8, 4, 14,
    9, 12, 7, 0, 2, 1, 13, 10, 12, 6, 0, 9, 5, 11, 10, 5,
    0, 13, 14, 8, 7, 10, 11, 1, 10, 3, 4, 15, 13, 4, 1, 2,
    5, 11, 8, 6, 12, 7, 6, 12, 9, 0, 3, 5, 2, 14, 15, 9,
  
    10, 13, 0, 7, 9, 0, 14, 9, 6, 3, 3, 4, 15, 6, 5, 10,
    1, 2, 13, 8, 12, 5, 7, 14, 11, 12, 4, 11, 2, 15, 8, 1,
    13, 1, 6, 10, 4, 13, 9, 0, 8, 6, 15, 9, 3, 8, 0, 7,
    11, 4, 1, 15, 2, 14, 12, 3, 5, 11, 10, 5, 14, 2, 7, 12,
  
    7, 13, 13, 8, 14, 11, 3, 5, 0, 6, 6, 15, 9, 0, 10, 3,
    1, 4, 2, 7, 8, 2, 5, 12, 11, 1, 12, 10, 4, 14, 15, 9,
    10, 3, 6, 15, 9, 0, 0, 6, 12, 10, 11, 1, 7, 13, 13, 8,
    15, 9, 1, 4, 3, 5, 14, 11, 5, 12, 2, 7, 8, 2, 4, 14,
  
    2, 14, 12, 11, 4, 2, 1, 12, 7, 4, 10, 7, 11, 13, 6, 1,
    8, 5, 5, 0, 3, 15, 15, 10, 13, 3, 0, 9, 14, 8, 9, 6,
    4, 11, 2, 8, 1, 12, 11, 7, 10, 1, 13, 14, 7, 2, 8, 13,
    15, 6, 9, 15, 12, 0, 5, 9, 6, 10, 3, 4, 0, 5, 14, 3,
  
    12, 10, 1, 15, 10, 4, 15, 2, 9, 7, 2, 12, 6, 9, 8, 5,
    0, 6, 13, 1, 3, 13, 4, 14, 14, 0, 7, 11, 5, 3, 11, 8,
    9, 4, 14, 3, 15, 2, 5, 12, 2, 9, 8, 5, 12, 15, 3, 10,
    7, 11, 0, 14, 4, 1, 10, 7, 1, 6, 13, 0, 11, 8, 6, 13,
  
    4, 13, 11, 0, 2, 11, 14, 7, 15, 4, 0, 9, 8, 1, 13, 10,
    3, 14, 12, 3, 9, 5, 7, 12, 5, 2, 10, 15, 6, 8, 1, 6,
    1, 6, 4, 11, 11, 13, 13, 8, 12, 1, 3, 4, 7, 10, 14, 7,
    10, 9, 15, 5, 6, 0, 8, 15, 0, 14, 5, 2, 9, 3, 2, 12,
  
    13, 1, 2, 15, 8, 13, 4, 8, 6, 10, 15, 3, 11, 7, 1, 4,
    10, 12, 9, 5, 3, 6, 14, 11, 5, 0, 0, 14, 12, 9, 7, 2,
    7, 2, 11, 1, 4, 14, 1, 7, 9, 4, 12, 10, 14, 8, 2, 13,
    0, 15, 6, 12, 10, 9, 13, 0, 15, 3, 3, 5, 5, 6, 8, 11
  ];
  
  exports.substitute = function substitute(inL, inR) {
    var out = 0;
    for (var i = 0; i < 4; i++) {
      var b = (inL >>> (18 - i * 6)) & 0x3f;
      var sb = sTable[i * 0x40 + b];
  
      out <<= 4;
      out |= sb;
    }
    for (var i = 0; i < 4; i++) {
      var b = (inR >>> (18 - i * 6)) & 0x3f;
      var sb = sTable[4 * 0x40 + i * 0x40 + b];
  
      out <<= 4;
      out |= sb;
    }
    return out >>> 0;
  };
  
  var permuteTable = [
    16, 25, 12, 11, 3, 20, 4, 15, 31, 17, 9, 6, 27, 14, 1, 22,
    30, 24, 8, 18, 0, 5, 29, 23, 13, 19, 2, 26, 10, 21, 28, 7
  ];
  
  exports.permute = function permute(num) {
    var out = 0;
    for (var i = 0; i < permuteTable.length; i++) {
      out <<= 1;
      out |= (num >>> permuteTable[i]) & 0x1;
    }
    return out >>> 0;
  };
  
  exports.padSplit = function padSplit(num, size, group) {
    var str = num.toString(2);
    while (str.length < size)
      str = '0' + str;
  
    var out = [];
    for (var i = 0; i < size; i += group)
      out.push(str.slice(i, i + group));
    return out.join(' ');
  };
  
  },{}],105:[function(require,module,exports){
  (function (Buffer){
  var generatePrime = require('./lib/generatePrime')
  var primes = require('./lib/primes.json')
  
  var DH = require('./lib/dh')
  
  function getDiffieHellman (mod) {
    var prime = new Buffer(primes[mod].prime, 'hex')
    var gen = new Buffer(primes[mod].gen, 'hex')
  
    return new DH(prime, gen)
  }
  
  var ENCODINGS = {
    'binary': true, 'hex': true, 'base64': true
  }
  
  function createDiffieHellman (prime, enc, generator, genc) {
    if (Buffer.isBuffer(enc) || ENCODINGS[enc] === undefined) {
      return createDiffieHellman(prime, 'binary', enc, generator)
    }
  
    enc = enc || 'binary'
    genc = genc || 'binary'
    generator = generator || new Buffer([2])
  
    if (!Buffer.isBuffer(generator)) {
      generator = new Buffer(generator, genc)
    }
  
    if (typeof prime === 'number') {
      return new DH(generatePrime(prime, generator), generator, true)
    }
  
    if (!Buffer.isBuffer(prime)) {
      prime = new Buffer(prime, enc)
    }
  
    return new DH(prime, generator, true)
  }
  
  exports.DiffieHellmanGroup = exports.createDiffieHellmanGroup = exports.getDiffieHellman = getDiffieHellman
  exports.createDiffieHellman = exports.DiffieHellman = createDiffieHellman
  
  }).call(this,require("buffer").Buffer)
  },{"./lib/dh":106,"./lib/generatePrime":107,"./lib/primes.json":108,"buffer":84}],106:[function(require,module,exports){
  (function (Buffer){
  var BN = require('bn.js');
  var MillerRabin = require('miller-rabin');
  var millerRabin = new MillerRabin();
  var TWENTYFOUR = new BN(24);
  var ELEVEN = new BN(11);
  var TEN = new BN(10);
  var THREE = new BN(3);
  var SEVEN = new BN(7);
  var primes = require('./generatePrime');
  var randomBytes = require('randombytes');
  module.exports = DH;
  
  function setPublicKey(pub, enc) {
    enc = enc || 'utf8';
    if (!Buffer.isBuffer(pub)) {
      pub = new Buffer(pub, enc);
    }
    this._pub = new BN(pub);
    return this;
  }
  
  function setPrivateKey(priv, enc) {
    enc = enc || 'utf8';
    if (!Buffer.isBuffer(priv)) {
      priv = new Buffer(priv, enc);
    }
    this._priv = new BN(priv);
    return this;
  }
  
  var primeCache = {};
  function checkPrime(prime, generator) {
    var gen = generator.toString('hex');
    var hex = [gen, prime.toString(16)].join('_');
    if (hex in primeCache) {
      return primeCache[hex];
    }
    var error = 0;
  
    if (prime.isEven() ||
      !primes.simpleSieve ||
      !primes.fermatTest(prime) ||
      !millerRabin.test(prime)) {
      //not a prime so +1
      error += 1;
  
      if (gen === '02' || gen === '05') {
        // we'd be able to check the generator
        // it would fail so +8
        error += 8;
      } else {
        //we wouldn't be able to test the generator
        // so +4
        error += 4;
      }
      primeCache[hex] = error;
      return error;
    }
    if (!millerRabin.test(prime.shrn(1))) {
      //not a safe prime
      error += 2;
    }
    var rem;
    switch (gen) {
      case '02':
        if (prime.mod(TWENTYFOUR).cmp(ELEVEN)) {
          // unsuidable generator
          error += 8;
        }
        break;
      case '05':
        rem = prime.mod(TEN);
        if (rem.cmp(THREE) && rem.cmp(SEVEN)) {
          // prime mod 10 needs to equal 3 or 7
          error += 8;
        }
        break;
      default:
        error += 4;
    }
    primeCache[hex] = error;
    return error;
  }
  
  function DH(prime, generator, malleable) {
    this.setGenerator(generator);
    this.__prime = new BN(prime);
    this._prime = BN.mont(this.__prime);
    this._primeLen = prime.length;
    this._pub = undefined;
    this._priv = undefined;
    this._primeCode = undefined;
    if (malleable) {
      this.setPublicKey = setPublicKey;
      this.setPrivateKey = setPrivateKey;
    } else {
      this._primeCode = 8;
    }
  }
  Object.defineProperty(DH.prototype, 'verifyError', {
    enumerable: true,
    get: function () {
      if (typeof this._primeCode !== 'number') {
        this._primeCode = checkPrime(this.__prime, this.__gen);
      }
      return this._primeCode;
    }
  });
  DH.prototype.generateKeys = function () {
    if (!this._priv) {
      this._priv = new BN(randomBytes(this._primeLen));
    }
    this._pub = this._gen.toRed(this._prime).redPow(this._priv).fromRed();
    return this.getPublicKey();
  };
  
  DH.prototype.computeSecret = function (other) {
    other = new BN(other);
    other = other.toRed(this._prime);
    var secret = other.redPow(this._priv).fromRed();
    var out = new Buffer(secret.toArray());
    var prime = this.getPrime();
    if (out.length < prime.length) {
      var front = new Buffer(prime.length - out.length);
      front.fill(0);
      out = Buffer.concat([front, out]);
    }
    return out;
  };
  
  DH.prototype.getPublicKey = function getPublicKey(enc) {
    return formatReturnValue(this._pub, enc);
  };
  
  DH.prototype.getPrivateKey = function getPrivateKey(enc) {
    return formatReturnValue(this._priv, enc);
  };
  
  DH.prototype.getPrime = function (enc) {
    return formatReturnValue(this.__prime, enc);
  };
  
  DH.prototype.getGenerator = function (enc) {
    return formatReturnValue(this._gen, enc);
  };
  
  DH.prototype.setGenerator = function (gen, enc) {
    enc = enc || 'utf8';
    if (!Buffer.isBuffer(gen)) {
      gen = new Buffer(gen, enc);
    }
    this.__gen = gen;
    this._gen = new BN(gen);
    return this;
  };
  
  function formatReturnValue(bn, enc) {
    var buf = new Buffer(bn.toArray());
    if (!enc) {
      return buf;
    } else {
      return buf.toString(enc);
    }
  }
  
  }).call(this,require("buffer").Buffer)
  },{"./generatePrime":107,"bn.js":53,"buffer":84,"miller-rabin":233,"randombytes":270}],107:[function(require,module,exports){
  var randomBytes = require('randombytes');
  module.exports = findPrime;
  findPrime.simpleSieve = simpleSieve;
  findPrime.fermatTest = fermatTest;
  var BN = require('bn.js');
  var TWENTYFOUR = new BN(24);
  var MillerRabin = require('miller-rabin');
  var millerRabin = new MillerRabin();
  var ONE = new BN(1);
  var TWO = new BN(2);
  var FIVE = new BN(5);
  var SIXTEEN = new BN(16);
  var EIGHT = new BN(8);
  var TEN = new BN(10);
  var THREE = new BN(3);
  var SEVEN = new BN(7);
  var ELEVEN = new BN(11);
  var FOUR = new BN(4);
  var TWELVE = new BN(12);
  var primes = null;
  
  function _getPrimes() {
    if (primes !== null)
      return primes;
  
    var limit = 0x100000;
    var res = [];
    res[0] = 2;
    for (var i = 1, k = 3; k < limit; k += 2) {
      var sqrt = Math.ceil(Math.sqrt(k));
      for (var j = 0; j < i && res[j] <= sqrt; j++)
        if (k % res[j] === 0)
          break;
  
      if (i !== j && res[j] <= sqrt)
        continue;
  
      res[i++] = k;
    }
    primes = res;
    return res;
  }
  
  function simpleSieve(p) {
    var primes = _getPrimes();
  
    for (var i = 0; i < primes.length; i++)
      if (p.modn(primes[i]) === 0) {
        if (p.cmpn(primes[i]) === 0) {
          return true;
        } else {
          return false;
        }
      }
  
    return true;
  }
  
  function fermatTest(p) {
    var red = BN.mont(p);
    return TWO.toRed(red).redPow(p.subn(1)).fromRed().cmpn(1) === 0;
  }
  
  function findPrime(bits, gen) {
    if (bits < 16) {
      // this is what openssl does
      if (gen === 2 || gen === 5) {
        return new BN([0x8c, 0x7b]);
      } else {
        return new BN([0x8c, 0x27]);
      }
    }
    gen = new BN(gen);
  
    var num, n2;
  
    while (true) {
      num = new BN(randomBytes(Math.ceil(bits / 8)));
      while (num.bitLength() > bits) {
        num.ishrn(1);
      }
      if (num.isEven()) {
        num.iadd(ONE);
      }
      if (!num.testn(1)) {
        num.iadd(TWO);
      }
      if (!gen.cmp(TWO)) {
        while (num.mod(TWENTYFOUR).cmp(ELEVEN)) {
          num.iadd(FOUR);
        }
      } else if (!gen.cmp(FIVE)) {
        while (num.mod(TEN).cmp(THREE)) {
          num.iadd(FOUR);
        }
      }
      n2 = num.shrn(1);
      if (simpleSieve(n2) && simpleSieve(num) &&
        fermatTest(n2) && fermatTest(num) &&
        millerRabin.test(n2) && millerRabin.test(num)) {
        return num;
      }
    }
  
  }
  
  },{"bn.js":53,"miller-rabin":233,"randombytes":270}],108:[function(require,module,exports){
  module.exports={
      "modp1": {
          "gen": "02",
          "prime": "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a63a3620ffffffffffffffff"
      },
      "modp2": {
          "gen": "02",
          "prime": "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece65381ffffffffffffffff"
      },
      "modp5": {
          "gen": "02",
          "prime": "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca237327ffffffffffffffff"
      },
      "modp14": {
          "gen": "02",
          "prime": "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aacaa68ffffffffffffffff"
      },
      "modp15": {
          "gen": "02",
          "prime": "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a93ad2caffffffffffffffff"
      },
      "modp16": {
          "gen": "02",
          "prime": "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a92108011a723c12a787e6d788719a10bdba5b2699c327186af4e23c1a946834b6150bda2583e9ca2ad44ce8dbbbc2db04de8ef92e8efc141fbecaa6287c59474e6bc05d99b2964fa090c3a2233ba186515be7ed1f612970cee2d7afb81bdd762170481cd0069127d5b05aa993b4ea988d8fddc186ffb7dc90a6c08f4df435c934063199ffffffffffffffff"
      },
      "modp17": {
          "gen": "02",
          "prime": "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a92108011a723c12a787e6d788719a10bdba5b2699c327186af4e23c1a946834b6150bda2583e9ca2ad44ce8dbbbc2db04de8ef92e8efc141fbecaa6287c59474e6bc05d99b2964fa090c3a2233ba186515be7ed1f612970cee2d7afb81bdd762170481cd0069127d5b05aa993b4ea988d8fddc186ffb7dc90a6c08f4df435c93402849236c3fab4d27c7026c1d4dcb2602646dec9751e763dba37bdf8ff9406ad9e530ee5db382f413001aeb06a53ed9027d831179727b0865a8918da3edbebcf9b14ed44ce6cbaced4bb1bdb7f1447e6cc254b332051512bd7af426fb8f401378cd2bf5983ca01c64b92ecf032ea15d1721d03f482d7ce6e74fef6d55e702f46980c82b5a84031900b1c9e59e7c97fbec7e8f323a97a7e36cc88be0f1d45b7ff585ac54bd407b22b4154aacc8f6d7ebf48e1d814cc5ed20f8037e0a79715eef29be32806a1d58bb7c5da76f550aa3d8a1fbff0eb19ccb1a313d55cda56c9ec2ef29632387fe8d76e3c0468043e8f663f4860ee12bf2d5b0b7474d6e694f91e6dcc4024ffffffffffffffff"
      },
      "modp18": {
          "gen": "02",
          "prime": "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a92108011a723c12a787e6d788719a10bdba5b2699c327186af4e23c1a946834b6150bda2583e9ca2ad44ce8dbbbc2db04de8ef92e8efc141fbecaa6287c59474e6bc05d99b2964fa090c3a2233ba186515be7ed1f612970cee2d7afb81bdd762170481cd0069127d5b05aa993b4ea988d8fddc186ffb7dc90a6c08f4df435c93402849236c3fab4d27c7026c1d4dcb2602646dec9751e763dba37bdf8ff9406ad9e530ee5db382f413001aeb06a53ed9027d831179727b0865a8918da3edbebcf9b14ed44ce6cbaced4bb1bdb7f1447e6cc254b332051512bd7af426fb8f401378cd2bf5983ca01c64b92ecf032ea15d1721d03f482d7ce6e74fef6d55e702f46980c82b5a84031900b1c9e59e7c97fbec7e8f323a97a7e36cc88be0f1d45b7ff585ac54bd407b22b4154aacc8f6d7ebf48e1d814cc5ed20f8037e0a79715eef29be32806a1d58bb7c5da76f550aa3d8a1fbff0eb19ccb1a313d55cda56c9ec2ef29632387fe8d76e3c0468043e8f663f4860ee12bf2d5b0b7474d6e694f91e6dbe115974a3926f12fee5e438777cb6a932df8cd8bec4d073b931ba3bc832b68d9dd300741fa7bf8afc47ed2576f6936ba424663aab639c5ae4f5683423b4742bf1c978238f16cbe39d652de3fdb8befc848ad922222e04a4037c0713eb57a81a23f0c73473fc646cea306b4bcbc8862f8385ddfa9d4b7fa2c087e879683303ed5bdd3a062b3cf5b3a278a66d2a13f83f44f82ddf310ee074ab6a364597e899a0255dc164f31cc50846851df9ab48195ded7ea1b1d510bd7ee74d73faf36bc31ecfa268359046f4eb879f924009438b481c6cd7889a002ed5ee382bc9190da6fc026e479558e4475677e9aa9e3050e2765694dfc81f56e880b96e7160c980dd98edd3dfffffffffffffffff"
      }
  }
  },{}],109:[function(require,module,exports){
  'use strict';
  
  var elliptic = exports;
  
  elliptic.version = require('../package.json').version;
  elliptic.utils = require('./elliptic/utils');
  elliptic.rand = require('brorand');
  elliptic.curve = require('./elliptic/curve');
  elliptic.curves = require('./elliptic/curves');
  
  // Protocols
  elliptic.ec = require('./elliptic/ec');
  elliptic.eddsa = require('./elliptic/eddsa');
  
  },{"../package.json":124,"./elliptic/curve":112,"./elliptic/curves":115,"./elliptic/ec":116,"./elliptic/eddsa":119,"./elliptic/utils":123,"brorand":54}],110:[function(require,module,exports){
  'use strict';
  
  var BN = require('bn.js');
  var elliptic = require('../../elliptic');
  var utils = elliptic.utils;
  var getNAF = utils.getNAF;
  var getJSF = utils.getJSF;
  var assert = utils.assert;
  
  function BaseCurve(type, conf) {
    this.type = type;
    this.p = new BN(conf.p, 16);
  
    // Use Montgomery, when there is no fast reduction for the prime
    this.red = conf.prime ? BN.red(conf.prime) : BN.mont(this.p);
  
    // Useful for many curves
    this.zero = new BN(0).toRed(this.red);
    this.one = new BN(1).toRed(this.red);
    this.two = new BN(2).toRed(this.red);
  
    // Curve configuration, optional
    this.n = conf.n && new BN(conf.n, 16);
    this.g = conf.g && this.pointFromJSON(conf.g, conf.gRed);
  
    // Temporary arrays
    this._wnafT1 = new Array(4);
    this._wnafT2 = new Array(4);
    this._wnafT3 = new Array(4);
    this._wnafT4 = new Array(4);
  
    // Generalized Greg Maxwell's trick
    var adjustCount = this.n && this.p.div(this.n);
    if (!adjustCount || adjustCount.cmpn(100) > 0) {
      this.redN = null;
    } else {
      this._maxwellTrick = true;
      this.redN = this.n.toRed(this.red);
    }
  }
  module.exports = BaseCurve;
  
  BaseCurve.prototype.point = function point() {
    throw new Error('Not implemented');
  };
  
  BaseCurve.prototype.validate = function validate() {
    throw new Error('Not implemented');
  };
  
  BaseCurve.prototype._fixedNafMul = function _fixedNafMul(p, k) {
    assert(p.precomputed);
    var doubles = p._getDoubles();
  
    var naf = getNAF(k, 1);
    var I = (1 << (doubles.step + 1)) - (doubles.step % 2 === 0 ? 2 : 1);
    I /= 3;
  
    // Translate into more windowed form
    var repr = [];
    for (var j = 0; j < naf.length; j += doubles.step) {
      var nafW = 0;
      for (var k = j + doubles.step - 1; k >= j; k--)
        nafW = (nafW << 1) + naf[k];
      repr.push(nafW);
    }
  
    var a = this.jpoint(null, null, null);
    var b = this.jpoint(null, null, null);
    for (var i = I; i > 0; i--) {
      for (var j = 0; j < repr.length; j++) {
        var nafW = repr[j];
        if (nafW === i)
          b = b.mixedAdd(doubles.points[j]);
        else if (nafW === -i)
          b = b.mixedAdd(doubles.points[j].neg());
      }
      a = a.add(b);
    }
    return a.toP();
  };
  
  BaseCurve.prototype._wnafMul = function _wnafMul(p, k) {
    var w = 4;
  
    // Precompute window
    var nafPoints = p._getNAFPoints(w);
    w = nafPoints.wnd;
    var wnd = nafPoints.points;
  
    // Get NAF form
    var naf = getNAF(k, w);
  
    // Add `this`*(N+1) for every w-NAF index
    var acc = this.jpoint(null, null, null);
    for (var i = naf.length - 1; i >= 0; i--) {
      // Count zeroes
      for (var k = 0; i >= 0 && naf[i] === 0; i--)
        k++;
      if (i >= 0)
        k++;
      acc = acc.dblp(k);
  
      if (i < 0)
        break;
      var z = naf[i];
      assert(z !== 0);
      if (p.type === 'affine') {
        // J +- P
        if (z > 0)
          acc = acc.mixedAdd(wnd[(z - 1) >> 1]);
        else
          acc = acc.mixedAdd(wnd[(-z - 1) >> 1].neg());
      } else {
        // J +- J
        if (z > 0)
          acc = acc.add(wnd[(z - 1) >> 1]);
        else
          acc = acc.add(wnd[(-z - 1) >> 1].neg());
      }
    }
    return p.type === 'affine' ? acc.toP() : acc;
  };
  
  BaseCurve.prototype._wnafMulAdd = function _wnafMulAdd(defW,
                                                         points,
                                                         coeffs,
                                                         len,
                                                         jacobianResult) {
    var wndWidth = this._wnafT1;
    var wnd = this._wnafT2;
    var naf = this._wnafT3;
  
    // Fill all arrays
    var max = 0;
    for (var i = 0; i < len; i++) {
      var p = points[i];
      var nafPoints = p._getNAFPoints(defW);
      wndWidth[i] = nafPoints.wnd;
      wnd[i] = nafPoints.points;
    }
  
    // Comb small window NAFs
    for (var i = len - 1; i >= 1; i -= 2) {
      var a = i - 1;
      var b = i;
      if (wndWidth[a] !== 1 || wndWidth[b] !== 1) {
        naf[a] = getNAF(coeffs[a], wndWidth[a]);
        naf[b] = getNAF(coeffs[b], wndWidth[b]);
        max = Math.max(naf[a].length, max);
        max = Math.max(naf[b].length, max);
        continue;
      }
  
      var comb = [
        points[a], /* 1 */
        null, /* 3 */
        null, /* 5 */
        points[b] /* 7 */
      ];
  
      // Try to avoid Projective points, if possible
      if (points[a].y.cmp(points[b].y) === 0) {
        comb[1] = points[a].add(points[b]);
        comb[2] = points[a].toJ().mixedAdd(points[b].neg());
      } else if (points[a].y.cmp(points[b].y.redNeg()) === 0) {
        comb[1] = points[a].toJ().mixedAdd(points[b]);
        comb[2] = points[a].add(points[b].neg());
      } else {
        comb[1] = points[a].toJ().mixedAdd(points[b]);
        comb[2] = points[a].toJ().mixedAdd(points[b].neg());
      }
  
      var index = [
        -3, /* -1 -1 */
        -1, /* -1 0 */
        -5, /* -1 1 */
        -7, /* 0 -1 */
        0, /* 0 0 */
        7, /* 0 1 */
        5, /* 1 -1 */
        1, /* 1 0 */
        3  /* 1 1 */
      ];
  
      var jsf = getJSF(coeffs[a], coeffs[b]);
      max = Math.max(jsf[0].length, max);
      naf[a] = new Array(max);
      naf[b] = new Array(max);
      for (var j = 0; j < max; j++) {
        var ja = jsf[0][j] | 0;
        var jb = jsf[1][j] | 0;
  
        naf[a][j] = index[(ja + 1) * 3 + (jb + 1)];
        naf[b][j] = 0;
        wnd[a] = comb;
      }
    }
  
    var acc = this.jpoint(null, null, null);
    var tmp = this._wnafT4;
    for (var i = max; i >= 0; i--) {
      var k = 0;
  
      while (i >= 0) {
        var zero = true;
        for (var j = 0; j < len; j++) {
          tmp[j] = naf[j][i] | 0;
          if (tmp[j] !== 0)
            zero = false;
        }
        if (!zero)
          break;
        k++;
        i--;
      }
      if (i >= 0)
        k++;
      acc = acc.dblp(k);
      if (i < 0)
        break;
  
      for (var j = 0; j < len; j++) {
        var z = tmp[j];
        var p;
        if (z === 0)
          continue;
        else if (z > 0)
          p = wnd[j][(z - 1) >> 1];
        else if (z < 0)
          p = wnd[j][(-z - 1) >> 1].neg();
  
        if (p.type === 'affine')
          acc = acc.mixedAdd(p);
        else
          acc = acc.add(p);
      }
    }
    // Zeroify references
    for (var i = 0; i < len; i++)
      wnd[i] = null;
  
    if (jacobianResult)
      return acc;
    else
      return acc.toP();
  };
  
  function BasePoint(curve, type) {
    this.curve = curve;
    this.type = type;
    this.precomputed = null;
  }
  BaseCurve.BasePoint = BasePoint;
  
  BasePoint.prototype.eq = function eq(/*other*/) {
    throw new Error('Not implemented');
  };
  
  BasePoint.prototype.validate = function validate() {
    return this.curve.validate(this);
  };
  
  BaseCurve.prototype.decodePoint = function decodePoint(bytes, enc) {
    bytes = utils.toArray(bytes, enc);
  
    var len = this.p.byteLength();
  
    // uncompressed, hybrid-odd, hybrid-even
    if ((bytes[0] === 0x04 || bytes[0] === 0x06 || bytes[0] === 0x07) &&
        bytes.length - 1 === 2 * len) {
      if (bytes[0] === 0x06)
        assert(bytes[bytes.length - 1] % 2 === 0);
      else if (bytes[0] === 0x07)
        assert(bytes[bytes.length - 1] % 2 === 1);
  
      var res =  this.point(bytes.slice(1, 1 + len),
                            bytes.slice(1 + len, 1 + 2 * len));
  
      return res;
    } else if ((bytes[0] === 0x02 || bytes[0] === 0x03) &&
                bytes.length - 1 === len) {
      return this.pointFromX(bytes.slice(1, 1 + len), bytes[0] === 0x03);
    }
    throw new Error('Unknown point format');
  };
  
  BasePoint.prototype.encodeCompressed = function encodeCompressed(enc) {
    return this.encode(enc, true);
  };
  
  BasePoint.prototype._encode = function _encode(compact) {
    var len = this.curve.p.byteLength();
    var x = this.getX().toArray('be', len);
  
    if (compact)
      return [ this.getY().isEven() ? 0x02 : 0x03 ].concat(x);
  
    return [ 0x04 ].concat(x, this.getY().toArray('be', len)) ;
  };
  
  BasePoint.prototype.encode = function encode(enc, compact) {
    return utils.encode(this._encode(compact), enc);
  };
  
  BasePoint.prototype.precompute = function precompute(power) {
    if (this.precomputed)
      return this;
  
    var precomputed = {
      doubles: null,
      naf: null,
      beta: null
    };
    precomputed.naf = this._getNAFPoints(8);
    precomputed.doubles = this._getDoubles(4, power);
    precomputed.beta = this._getBeta();
    this.precomputed = precomputed;
  
    return this;
  };
  
  BasePoint.prototype._hasDoubles = function _hasDoubles(k) {
    if (!this.precomputed)
      return false;
  
    var doubles = this.precomputed.doubles;
    if (!doubles)
      return false;
  
    return doubles.points.length >= Math.ceil((k.bitLength() + 1) / doubles.step);
  };
  
  BasePoint.prototype._getDoubles = function _getDoubles(step, power) {
    if (this.precomputed && this.precomputed.doubles)
      return this.precomputed.doubles;
  
    var doubles = [ this ];
    var acc = this;
    for (var i = 0; i < power; i += step) {
      for (var j = 0; j < step; j++)
        acc = acc.dbl();
      doubles.push(acc);
    }
    return {
      step: step,
      points: doubles
    };
  };
  
  BasePoint.prototype._getNAFPoints = function _getNAFPoints(wnd) {
    if (this.precomputed && this.precomputed.naf)
      return this.precomputed.naf;
  
    var res = [ this ];
    var max = (1 << wnd) - 1;
    var dbl = max === 1 ? null : this.dbl();
    for (var i = 1; i < max; i++)
      res[i] = res[i - 1].add(dbl);
    return {
      wnd: wnd,
      points: res
    };
  };
  
  BasePoint.prototype._getBeta = function _getBeta() {
    return null;
  };
  
  BasePoint.prototype.dblp = function dblp(k) {
    var r = this;
    for (var i = 0; i < k; i++)
      r = r.dbl();
    return r;
  };
  
  },{"../../elliptic":109,"bn.js":53}],111:[function(require,module,exports){
  'use strict';
  
  var curve = require('../curve');
  var elliptic = require('../../elliptic');
  var BN = require('bn.js');
  var inherits = require('inherits');
  var Base = curve.base;
  
  var assert = elliptic.utils.assert;
  
  function EdwardsCurve(conf) {
    // NOTE: Important as we are creating point in Base.call()
    this.twisted = (conf.a | 0) !== 1;
    this.mOneA = this.twisted && (conf.a | 0) === -1;
    this.extended = this.mOneA;
  
    Base.call(this, 'edwards', conf);
  
    this.a = new BN(conf.a, 16).umod(this.red.m);
    this.a = this.a.toRed(this.red);
    this.c = new BN(conf.c, 16).toRed(this.red);
    this.c2 = this.c.redSqr();
    this.d = new BN(conf.d, 16).toRed(this.red);
    this.dd = this.d.redAdd(this.d);
  
    assert(!this.twisted || this.c.fromRed().cmpn(1) === 0);
    this.oneC = (conf.c | 0) === 1;
  }
  inherits(EdwardsCurve, Base);
  module.exports = EdwardsCurve;
  
  EdwardsCurve.prototype._mulA = function _mulA(num) {
    if (this.mOneA)
      return num.redNeg();
    else
      return this.a.redMul(num);
  };
  
  EdwardsCurve.prototype._mulC = function _mulC(num) {
    if (this.oneC)
      return num;
    else
      return this.c.redMul(num);
  };
  
  // Just for compatibility with Short curve
  EdwardsCurve.prototype.jpoint = function jpoint(x, y, z, t) {
    return this.point(x, y, z, t);
  };
  
  EdwardsCurve.prototype.pointFromX = function pointFromX(x, odd) {
    x = new BN(x, 16);
    if (!x.red)
      x = x.toRed(this.red);
  
    var x2 = x.redSqr();
    var rhs = this.c2.redSub(this.a.redMul(x2));
    var lhs = this.one.redSub(this.c2.redMul(this.d).redMul(x2));
  
    var y2 = rhs.redMul(lhs.redInvm());
    var y = y2.redSqrt();
    if (y.redSqr().redSub(y2).cmp(this.zero) !== 0)
      throw new Error('invalid point');
  
    var isOdd = y.fromRed().isOdd();
    if (odd && !isOdd || !odd && isOdd)
      y = y.redNeg();
  
    return this.point(x, y);
  };
  
  EdwardsCurve.prototype.pointFromY = function pointFromY(y, odd) {
    y = new BN(y, 16);
    if (!y.red)
      y = y.toRed(this.red);
  
    // x^2 = (y^2 - 1) / (d y^2 + 1)
    var y2 = y.redSqr();
    var lhs = y2.redSub(this.one);
    var rhs = y2.redMul(this.d).redAdd(this.one);
    var x2 = lhs.redMul(rhs.redInvm());
  
    if (x2.cmp(this.zero) === 0) {
      if (odd)
        throw new Error('invalid point');
      else
        return this.point(this.zero, y);
    }
  
    var x = x2.redSqrt();
    if (x.redSqr().redSub(x2).cmp(this.zero) !== 0)
      throw new Error('invalid point');
  
    if (x.isOdd() !== odd)
      x = x.redNeg();
  
    return this.point(x, y);
  };
  
  EdwardsCurve.prototype.validate = function validate(point) {
    if (point.isInfinity())
      return true;
  
    // Curve: A * X^2 + Y^2 = C^2 * (1 + D * X^2 * Y^2)
    point.normalize();
  
    var x2 = point.x.redSqr();
    var y2 = point.y.redSqr();
    var lhs = x2.redMul(this.a).redAdd(y2);
    var rhs = this.c2.redMul(this.one.redAdd(this.d.redMul(x2).redMul(y2)));
  
    return lhs.cmp(rhs) === 0;
  };
  
  function Point(curve, x, y, z, t) {
    Base.BasePoint.call(this, curve, 'projective');
    if (x === null && y === null && z === null) {
      this.x = this.curve.zero;
      this.y = this.curve.one;
      this.z = this.curve.one;
      this.t = this.curve.zero;
      this.zOne = true;
    } else {
      this.x = new BN(x, 16);
      this.y = new BN(y, 16);
      this.z = z ? new BN(z, 16) : this.curve.one;
      this.t = t && new BN(t, 16);
      if (!this.x.red)
        this.x = this.x.toRed(this.curve.red);
      if (!this.y.red)
        this.y = this.y.toRed(this.curve.red);
      if (!this.z.red)
        this.z = this.z.toRed(this.curve.red);
      if (this.t && !this.t.red)
        this.t = this.t.toRed(this.curve.red);
      this.zOne = this.z === this.curve.one;
  
      // Use extended coordinates
      if (this.curve.extended && !this.t) {
        this.t = this.x.redMul(this.y);
        if (!this.zOne)
          this.t = this.t.redMul(this.z.redInvm());
      }
    }
  }
  inherits(Point, Base.BasePoint);
  
  EdwardsCurve.prototype.pointFromJSON = function pointFromJSON(obj) {
    return Point.fromJSON(this, obj);
  };
  
  EdwardsCurve.prototype.point = function point(x, y, z, t) {
    return new Point(this, x, y, z, t);
  };
  
  Point.fromJSON = function fromJSON(curve, obj) {
    return new Point(curve, obj[0], obj[1], obj[2]);
  };
  
  Point.prototype.inspect = function inspect() {
    if (this.isInfinity())
      return '<EC Point Infinity>';
    return '<EC Point x: ' + this.x.fromRed().toString(16, 2) +
        ' y: ' + this.y.fromRed().toString(16, 2) +
        ' z: ' + this.z.fromRed().toString(16, 2) + '>';
  };
  
  Point.prototype.isInfinity = function isInfinity() {
    // XXX This code assumes that zero is always zero in red
    return this.x.cmpn(0) === 0 &&
           this.y.cmp(this.z) === 0;
  };
  
  Point.prototype._extDbl = function _extDbl() {
    // hyperelliptic.org/EFD/g1p/auto-twisted-extended-1.html
    //     #doubling-dbl-2008-hwcd
    // 4M + 4S
  
    // A = X1^2
    var a = this.x.redSqr();
    // B = Y1^2
    var b = this.y.redSqr();
    // C = 2 * Z1^2
    var c = this.z.redSqr();
    c = c.redIAdd(c);
    // D = a * A
    var d = this.curve._mulA(a);
    // E = (X1 + Y1)^2 - A - B
    var e = this.x.redAdd(this.y).redSqr().redISub(a).redISub(b);
    // G = D + B
    var g = d.redAdd(b);
    // F = G - C
    var f = g.redSub(c);
    // H = D - B
    var h = d.redSub(b);
    // X3 = E * F
    var nx = e.redMul(f);
    // Y3 = G * H
    var ny = g.redMul(h);
    // T3 = E * H
    var nt = e.redMul(h);
    // Z3 = F * G
    var nz = f.redMul(g);
    return this.curve.point(nx, ny, nz, nt);
  };
  
  Point.prototype._projDbl = function _projDbl() {
    // hyperelliptic.org/EFD/g1p/auto-twisted-projective.html
    //     #doubling-dbl-2008-bbjlp
    //     #doubling-dbl-2007-bl
    // and others
    // Generally 3M + 4S or 2M + 4S
  
    // B = (X1 + Y1)^2
    var b = this.x.redAdd(this.y).redSqr();
    // C = X1^2
    var c = this.x.redSqr();
    // D = Y1^2
    var d = this.y.redSqr();
  
    var nx;
    var ny;
    var nz;
    if (this.curve.twisted) {
      // E = a * C
      var e = this.curve._mulA(c);
      // F = E + D
      var f = e.redAdd(d);
      if (this.zOne) {
        // X3 = (B - C - D) * (F - 2)
        nx = b.redSub(c).redSub(d).redMul(f.redSub(this.curve.two));
        // Y3 = F * (E - D)
        ny = f.redMul(e.redSub(d));
        // Z3 = F^2 - 2 * F
        nz = f.redSqr().redSub(f).redSub(f);
      } else {
        // H = Z1^2
        var h = this.z.redSqr();
        // J = F - 2 * H
        var j = f.redSub(h).redISub(h);
        // X3 = (B-C-D)*J
        nx = b.redSub(c).redISub(d).redMul(j);
        // Y3 = F * (E - D)
        ny = f.redMul(e.redSub(d));
        // Z3 = F * J
        nz = f.redMul(j);
      }
    } else {
      // E = C + D
      var e = c.redAdd(d);
      // H = (c * Z1)^2
      var h = this.curve._mulC(this.c.redMul(this.z)).redSqr();
      // J = E - 2 * H
      var j = e.redSub(h).redSub(h);
      // X3 = c * (B - E) * J
      nx = this.curve._mulC(b.redISub(e)).redMul(j);
      // Y3 = c * E * (C - D)
      ny = this.curve._mulC(e).redMul(c.redISub(d));
      // Z3 = E * J
      nz = e.redMul(j);
    }
    return this.curve.point(nx, ny, nz);
  };
  
  Point.prototype.dbl = function dbl() {
    if (this.isInfinity())
      return this;
  
    // Double in extended coordinates
    if (this.curve.extended)
      return this._extDbl();
    else
      return this._projDbl();
  };
  
  Point.prototype._extAdd = function _extAdd(p) {
    // hyperelliptic.org/EFD/g1p/auto-twisted-extended-1.html
    //     #addition-add-2008-hwcd-3
    // 8M
  
    // A = (Y1 - X1) * (Y2 - X2)
    var a = this.y.redSub(this.x).redMul(p.y.redSub(p.x));
    // B = (Y1 + X1) * (Y2 + X2)
    var b = this.y.redAdd(this.x).redMul(p.y.redAdd(p.x));
    // C = T1 * k * T2
    var c = this.t.redMul(this.curve.dd).redMul(p.t);
    // D = Z1 * 2 * Z2
    var d = this.z.redMul(p.z.redAdd(p.z));
    // E = B - A
    var e = b.redSub(a);
    // F = D - C
    var f = d.redSub(c);
    // G = D + C
    var g = d.redAdd(c);
    // H = B + A
    var h = b.redAdd(a);
    // X3 = E * F
    var nx = e.redMul(f);
    // Y3 = G * H
    var ny = g.redMul(h);
    // T3 = E * H
    var nt = e.redMul(h);
    // Z3 = F * G
    var nz = f.redMul(g);
    return this.curve.point(nx, ny, nz, nt);
  };
  
  Point.prototype._projAdd = function _projAdd(p) {
    // hyperelliptic.org/EFD/g1p/auto-twisted-projective.html
    //     #addition-add-2008-bbjlp
    //     #addition-add-2007-bl
    // 10M + 1S
  
    // A = Z1 * Z2
    var a = this.z.redMul(p.z);
    // B = A^2
    var b = a.redSqr();
    // C = X1 * X2
    var c = this.x.redMul(p.x);
    // D = Y1 * Y2
    var d = this.y.redMul(p.y);
    // E = d * C * D
    var e = this.curve.d.redMul(c).redMul(d);
    // F = B - E
    var f = b.redSub(e);
    // G = B + E
    var g = b.redAdd(e);
    // X3 = A * F * ((X1 + Y1) * (X2 + Y2) - C - D)
    var tmp = this.x.redAdd(this.y).redMul(p.x.redAdd(p.y)).redISub(c).redISub(d);
    var nx = a.redMul(f).redMul(tmp);
    var ny;
    var nz;
    if (this.curve.twisted) {
      // Y3 = A * G * (D - a * C)
      ny = a.redMul(g).redMul(d.redSub(this.curve._mulA(c)));
      // Z3 = F * G
      nz = f.redMul(g);
    } else {
      // Y3 = A * G * (D - C)
      ny = a.redMul(g).redMul(d.redSub(c));
      // Z3 = c * F * G
      nz = this.curve._mulC(f).redMul(g);
    }
    return this.curve.point(nx, ny, nz);
  };
  
  Point.prototype.add = function add(p) {
    if (this.isInfinity())
      return p;
    if (p.isInfinity())
      return this;
  
    if (this.curve.extended)
      return this._extAdd(p);
    else
      return this._projAdd(p);
  };
  
  Point.prototype.mul = function mul(k) {
    if (this._hasDoubles(k))
      return this.curve._fixedNafMul(this, k);
    else
      return this.curve._wnafMul(this, k);
  };
  
  Point.prototype.mulAdd = function mulAdd(k1, p, k2) {
    return this.curve._wnafMulAdd(1, [ this, p ], [ k1, k2 ], 2, false);
  };
  
  Point.prototype.jmulAdd = function jmulAdd(k1, p, k2) {
    return this.curve._wnafMulAdd(1, [ this, p ], [ k1, k2 ], 2, true);
  };
  
  Point.prototype.normalize = function normalize() {
    if (this.zOne)
      return this;
  
    // Normalize coordinates
    var zi = this.z.redInvm();
    this.x = this.x.redMul(zi);
    this.y = this.y.redMul(zi);
    if (this.t)
      this.t = this.t.redMul(zi);
    this.z = this.curve.one;
    this.zOne = true;
    return this;
  };
  
  Point.prototype.neg = function neg() {
    return this.curve.point(this.x.redNeg(),
                            this.y,
                            this.z,
                            this.t && this.t.redNeg());
  };
  
  Point.prototype.getX = function getX() {
    this.normalize();
    return this.x.fromRed();
  };
  
  Point.prototype.getY = function getY() {
    this.normalize();
    return this.y.fromRed();
  };
  
  Point.prototype.eq = function eq(other) {
    return this === other ||
           this.getX().cmp(other.getX()) === 0 &&
           this.getY().cmp(other.getY()) === 0;
  };
  
  Point.prototype.eqXToP = function eqXToP(x) {
    var rx = x.toRed(this.curve.red).redMul(this.z);
    if (this.x.cmp(rx) === 0)
      return true;
  
    var xc = x.clone();
    var t = this.curve.redN.redMul(this.z);
    for (;;) {
      xc.iadd(this.curve.n);
      if (xc.cmp(this.curve.p) >= 0)
        return false;
  
      rx.redIAdd(t);
      if (this.x.cmp(rx) === 0)
        return true;
    }
    return false;
  };
  
  // Compatibility with BaseCurve
  Point.prototype.toP = Point.prototype.normalize;
  Point.prototype.mixedAdd = Point.prototype.add;
  
  },{"../../elliptic":109,"../curve":112,"bn.js":53,"inherits":180}],112:[function(require,module,exports){
  'use strict';
  
  var curve = exports;
  
  curve.base = require('./base');
  curve.short = require('./short');
  curve.mont = require('./mont');
  curve.edwards = require('./edwards');
  
  },{"./base":110,"./edwards":111,"./mont":113,"./short":114}],113:[function(require,module,exports){
  'use strict';
  
  var curve = require('../curve');
  var BN = require('bn.js');
  var inherits = require('inherits');
  var Base = curve.base;
  
  var elliptic = require('../../elliptic');
  var utils = elliptic.utils;
  
  function MontCurve(conf) {
    Base.call(this, 'mont', conf);
  
    this.a = new BN(conf.a, 16).toRed(this.red);
    this.b = new BN(conf.b, 16).toRed(this.red);
    this.i4 = new BN(4).toRed(this.red).redInvm();
    this.two = new BN(2).toRed(this.red);
    this.a24 = this.i4.redMul(this.a.redAdd(this.two));
  }
  inherits(MontCurve, Base);
  module.exports = MontCurve;
  
  MontCurve.prototype.validate = function validate(point) {
    var x = point.normalize().x;
    var x2 = x.redSqr();
    var rhs = x2.redMul(x).redAdd(x2.redMul(this.a)).redAdd(x);
    var y = rhs.redSqrt();
  
    return y.redSqr().cmp(rhs) === 0;
  };
  
  function Point(curve, x, z) {
    Base.BasePoint.call(this, curve, 'projective');
    if (x === null && z === null) {
      this.x = this.curve.one;
      this.z = this.curve.zero;
    } else {
      this.x = new BN(x, 16);
      this.z = new BN(z, 16);
      if (!this.x.red)
        this.x = this.x.toRed(this.curve.red);
      if (!this.z.red)
        this.z = this.z.toRed(this.curve.red);
    }
  }
  inherits(Point, Base.BasePoint);
  
  MontCurve.prototype.decodePoint = function decodePoint(bytes, enc) {
    return this.point(utils.toArray(bytes, enc), 1);
  };
  
  MontCurve.prototype.point = function point(x, z) {
    return new Point(this, x, z);
  };
  
  MontCurve.prototype.pointFromJSON = function pointFromJSON(obj) {
    return Point.fromJSON(this, obj);
  };
  
  Point.prototype.precompute = function precompute() {
    // No-op
  };
  
  Point.prototype._encode = function _encode() {
    return this.getX().toArray('be', this.curve.p.byteLength());
  };
  
  Point.fromJSON = function fromJSON(curve, obj) {
    return new Point(curve, obj[0], obj[1] || curve.one);
  };
  
  Point.prototype.inspect = function inspect() {
    if (this.isInfinity())
      return '<EC Point Infinity>';
    return '<EC Point x: ' + this.x.fromRed().toString(16, 2) +
        ' z: ' + this.z.fromRed().toString(16, 2) + '>';
  };
  
  Point.prototype.isInfinity = function isInfinity() {
    // XXX This code assumes that zero is always zero in red
    return this.z.cmpn(0) === 0;
  };
  
  Point.prototype.dbl = function dbl() {
    // http://hyperelliptic.org/EFD/g1p/auto-montgom-xz.html#doubling-dbl-1987-m-3
    // 2M + 2S + 4A
  
    // A = X1 + Z1
    var a = this.x.redAdd(this.z);
    // AA = A^2
    var aa = a.redSqr();
    // B = X1 - Z1
    var b = this.x.redSub(this.z);
    // BB = B^2
    var bb = b.redSqr();
    // C = AA - BB
    var c = aa.redSub(bb);
    // X3 = AA * BB
    var nx = aa.redMul(bb);
    // Z3 = C * (BB + A24 * C)
    var nz = c.redMul(bb.redAdd(this.curve.a24.redMul(c)));
    return this.curve.point(nx, nz);
  };
  
  Point.prototype.add = function add() {
    throw new Error('Not supported on Montgomery curve');
  };
  
  Point.prototype.diffAdd = function diffAdd(p, diff) {
    // http://hyperelliptic.org/EFD/g1p/auto-montgom-xz.html#diffadd-dadd-1987-m-3
    // 4M + 2S + 6A
  
    // A = X2 + Z2
    var a = this.x.redAdd(this.z);
    // B = X2 - Z2
    var b = this.x.redSub(this.z);
    // C = X3 + Z3
    var c = p.x.redAdd(p.z);
    // D = X3 - Z3
    var d = p.x.redSub(p.z);
    // DA = D * A
    var da = d.redMul(a);
    // CB = C * B
    var cb = c.redMul(b);
    // X5 = Z1 * (DA + CB)^2
    var nx = diff.z.redMul(da.redAdd(cb).redSqr());
    // Z5 = X1 * (DA - CB)^2
    var nz = diff.x.redMul(da.redISub(cb).redSqr());
    return this.curve.point(nx, nz);
  };
  
  Point.prototype.mul = function mul(k) {
    var t = k.clone();
    var a = this; // (N / 2) * Q + Q
    var b = this.curve.point(null, null); // (N / 2) * Q
    var c = this; // Q
  
    for (var bits = []; t.cmpn(0) !== 0; t.iushrn(1))
      bits.push(t.andln(1));
  
    for (var i = bits.length - 1; i >= 0; i--) {
      if (bits[i] === 0) {
        // N * Q + Q = ((N / 2) * Q + Q)) + (N / 2) * Q
        a = a.diffAdd(b, c);
        // N * Q = 2 * ((N / 2) * Q + Q))
        b = b.dbl();
      } else {
        // N * Q = ((N / 2) * Q + Q) + ((N / 2) * Q)
        b = a.diffAdd(b, c);
        // N * Q + Q = 2 * ((N / 2) * Q + Q)
        a = a.dbl();
      }
    }
    return b;
  };
  
  Point.prototype.mulAdd = function mulAdd() {
    throw new Error('Not supported on Montgomery curve');
  };
  
  Point.prototype.jumlAdd = function jumlAdd() {
    throw new Error('Not supported on Montgomery curve');
  };
  
  Point.prototype.eq = function eq(other) {
    return this.getX().cmp(other.getX()) === 0;
  };
  
  Point.prototype.normalize = function normalize() {
    this.x = this.x.redMul(this.z.redInvm());
    this.z = this.curve.one;
    return this;
  };
  
  Point.prototype.getX = function getX() {
    // Normalize coordinates
    this.normalize();
  
    return this.x.fromRed();
  };
  
  },{"../../elliptic":109,"../curve":112,"bn.js":53,"inherits":180}],114:[function(require,module,exports){
  'use strict';
  
  var curve = require('../curve');
  var elliptic = require('../../elliptic');
  var BN = require('bn.js');
  var inherits = require('inherits');
  var Base = curve.base;
  
  var assert = elliptic.utils.assert;
  
  function ShortCurve(conf) {
    Base.call(this, 'short', conf);
  
    this.a = new BN(conf.a, 16).toRed(this.red);
    this.b = new BN(conf.b, 16).toRed(this.red);
    this.tinv = this.two.redInvm();
  
    this.zeroA = this.a.fromRed().cmpn(0) === 0;
    this.threeA = this.a.fromRed().sub(this.p).cmpn(-3) === 0;
  
    // If the curve is endomorphic, precalculate beta and lambda
    this.endo = this._getEndomorphism(conf);
    this._endoWnafT1 = new Array(4);
    this._endoWnafT2 = new Array(4);
  }
  inherits(ShortCurve, Base);
  module.exports = ShortCurve;
  
  ShortCurve.prototype._getEndomorphism = function _getEndomorphism(conf) {
    // No efficient endomorphism
    if (!this.zeroA || !this.g || !this.n || this.p.modn(3) !== 1)
      return;
  
    // Compute beta and lambda, that lambda * P = (beta * Px; Py)
    var beta;
    var lambda;
    if (conf.beta) {
      beta = new BN(conf.beta, 16).toRed(this.red);
    } else {
      var betas = this._getEndoRoots(this.p);
      // Choose the smallest beta
      beta = betas[0].cmp(betas[1]) < 0 ? betas[0] : betas[1];
      beta = beta.toRed(this.red);
    }
    if (conf.lambda) {
      lambda = new BN(conf.lambda, 16);
    } else {
      // Choose the lambda that is matching selected beta
      var lambdas = this._getEndoRoots(this.n);
      if (this.g.mul(lambdas[0]).x.cmp(this.g.x.redMul(beta)) === 0) {
        lambda = lambdas[0];
      } else {
        lambda = lambdas[1];
        assert(this.g.mul(lambda).x.cmp(this.g.x.redMul(beta)) === 0);
      }
    }
  
    // Get basis vectors, used for balanced length-two representation
    var basis;
    if (conf.basis) {
      basis = conf.basis.map(function(vec) {
        return {
          a: new BN(vec.a, 16),
          b: new BN(vec.b, 16)
        };
      });
    } else {
      basis = this._getEndoBasis(lambda);
    }
  
    return {
      beta: beta,
      lambda: lambda,
      basis: basis
    };
  };
  
  ShortCurve.prototype._getEndoRoots = function _getEndoRoots(num) {
    // Find roots of for x^2 + x + 1 in F
    // Root = (-1 +- Sqrt(-3)) / 2
    //
    var red = num === this.p ? this.red : BN.mont(num);
    var tinv = new BN(2).toRed(red).redInvm();
    var ntinv = tinv.redNeg();
  
    var s = new BN(3).toRed(red).redNeg().redSqrt().redMul(tinv);
  
    var l1 = ntinv.redAdd(s).fromRed();
    var l2 = ntinv.redSub(s).fromRed();
    return [ l1, l2 ];
  };
  
  ShortCurve.prototype._getEndoBasis = function _getEndoBasis(lambda) {
    // aprxSqrt >= sqrt(this.n)
    var aprxSqrt = this.n.ushrn(Math.floor(this.n.bitLength() / 2));
  
    // 3.74
    // Run EGCD, until r(L + 1) < aprxSqrt
    var u = lambda;
    var v = this.n.clone();
    var x1 = new BN(1);
    var y1 = new BN(0);
    var x2 = new BN(0);
    var y2 = new BN(1);
  
    // NOTE: all vectors are roots of: a + b * lambda = 0 (mod n)
    var a0;
    var b0;
    // First vector
    var a1;
    var b1;
    // Second vector
    var a2;
    var b2;
  
    var prevR;
    var i = 0;
    var r;
    var x;
    while (u.cmpn(0) !== 0) {
      var q = v.div(u);
      r = v.sub(q.mul(u));
      x = x2.sub(q.mul(x1));
      var y = y2.sub(q.mul(y1));
  
      if (!a1 && r.cmp(aprxSqrt) < 0) {
        a0 = prevR.neg();
        b0 = x1;
        a1 = r.neg();
        b1 = x;
      } else if (a1 && ++i === 2) {
        break;
      }
      prevR = r;
  
      v = u;
      u = r;
      x2 = x1;
      x1 = x;
      y2 = y1;
      y1 = y;
    }
    a2 = r.neg();
    b2 = x;
  
    var len1 = a1.sqr().add(b1.sqr());
    var len2 = a2.sqr().add(b2.sqr());
    if (len2.cmp(len1) >= 0) {
      a2 = a0;
      b2 = b0;
    }
  
    // Normalize signs
    if (a1.negative) {
      a1 = a1.neg();
      b1 = b1.neg();
    }
    if (a2.negative) {
      a2 = a2.neg();
      b2 = b2.neg();
    }
  
    return [
      { a: a1, b: b1 },
      { a: a2, b: b2 }
    ];
  };
  
  ShortCurve.prototype._endoSplit = function _endoSplit(k) {
    var basis = this.endo.basis;
    var v1 = basis[0];
    var v2 = basis[1];
  
    var c1 = v2.b.mul(k).divRound(this.n);
    var c2 = v1.b.neg().mul(k).divRound(this.n);
  
    var p1 = c1.mul(v1.a);
    var p2 = c2.mul(v2.a);
    var q1 = c1.mul(v1.b);
    var q2 = c2.mul(v2.b);
  
    // Calculate answer
    var k1 = k.sub(p1).sub(p2);
    var k2 = q1.add(q2).neg();
    return { k1: k1, k2: k2 };
  };
  
  ShortCurve.prototype.pointFromX = function pointFromX(x, odd) {
    x = new BN(x, 16);
    if (!x.red)
      x = x.toRed(this.red);
  
    var y2 = x.redSqr().redMul(x).redIAdd(x.redMul(this.a)).redIAdd(this.b);
    var y = y2.redSqrt();
    if (y.redSqr().redSub(y2).cmp(this.zero) !== 0)
      throw new Error('invalid point');
  
    // XXX Is there any way to tell if the number is odd without converting it
    // to non-red form?
    var isOdd = y.fromRed().isOdd();
    if (odd && !isOdd || !odd && isOdd)
      y = y.redNeg();
  
    return this.point(x, y);
  };
  
  ShortCurve.prototype.validate = function validate(point) {
    if (point.inf)
      return true;
  
    var x = point.x;
    var y = point.y;
  
    var ax = this.a.redMul(x);
    var rhs = x.redSqr().redMul(x).redIAdd(ax).redIAdd(this.b);
    return y.redSqr().redISub(rhs).cmpn(0) === 0;
  };
  
  ShortCurve.prototype._endoWnafMulAdd =
      function _endoWnafMulAdd(points, coeffs, jacobianResult) {
    var npoints = this._endoWnafT1;
    var ncoeffs = this._endoWnafT2;
    for (var i = 0; i < points.length; i++) {
      var split = this._endoSplit(coeffs[i]);
      var p = points[i];
      var beta = p._getBeta();
  
      if (split.k1.negative) {
        split.k1.ineg();
        p = p.neg(true);
      }
      if (split.k2.negative) {
        split.k2.ineg();
        beta = beta.neg(true);
      }
  
      npoints[i * 2] = p;
      npoints[i * 2 + 1] = beta;
      ncoeffs[i * 2] = split.k1;
      ncoeffs[i * 2 + 1] = split.k2;
    }
    var res = this._wnafMulAdd(1, npoints, ncoeffs, i * 2, jacobianResult);
  
    // Clean-up references to points and coefficients
    for (var j = 0; j < i * 2; j++) {
      npoints[j] = null;
      ncoeffs[j] = null;
    }
    return res;
  };
  
  function Point(curve, x, y, isRed) {
    Base.BasePoint.call(this, curve, 'affine');
    if (x === null && y === null) {
      this.x = null;
      this.y = null;
      this.inf = true;
    } else {
      this.x = new BN(x, 16);
      this.y = new BN(y, 16);
      // Force redgomery representation when loading from JSON
      if (isRed) {
        this.x.forceRed(this.curve.red);
        this.y.forceRed(this.curve.red);
      }
      if (!this.x.red)
        this.x = this.x.toRed(this.curve.red);
      if (!this.y.red)
        this.y = this.y.toRed(this.curve.red);
      this.inf = false;
    }
  }
  inherits(Point, Base.BasePoint);
  
  ShortCurve.prototype.point = function point(x, y, isRed) {
    return new Point(this, x, y, isRed);
  };
  
  ShortCurve.prototype.pointFromJSON = function pointFromJSON(obj, red) {
    return Point.fromJSON(this, obj, red);
  };
  
  Point.prototype._getBeta = function _getBeta() {
    if (!this.curve.endo)
      return;
  
    var pre = this.precomputed;
    if (pre && pre.beta)
      return pre.beta;
  
    var beta = this.curve.point(this.x.redMul(this.curve.endo.beta), this.y);
    if (pre) {
      var curve = this.curve;
      var endoMul = function(p) {
        return curve.point(p.x.redMul(curve.endo.beta), p.y);
      };
      pre.beta = beta;
      beta.precomputed = {
        beta: null,
        naf: pre.naf && {
          wnd: pre.naf.wnd,
          points: pre.naf.points.map(endoMul)
        },
        doubles: pre.doubles && {
          step: pre.doubles.step,
          points: pre.doubles.points.map(endoMul)
        }
      };
    }
    return beta;
  };
  
  Point.prototype.toJSON = function toJSON() {
    if (!this.precomputed)
      return [ this.x, this.y ];
  
    return [ this.x, this.y, this.precomputed && {
      doubles: this.precomputed.doubles && {
        step: this.precomputed.doubles.step,
        points: this.precomputed.doubles.points.slice(1)
      },
      naf: this.precomputed.naf && {
        wnd: this.precomputed.naf.wnd,
        points: this.precomputed.naf.points.slice(1)
      }
    } ];
  };
  
  Point.fromJSON = function fromJSON(curve, obj, red) {
    if (typeof obj === 'string')
      obj = JSON.parse(obj);
    var res = curve.point(obj[0], obj[1], red);
    if (!obj[2])
      return res;
  
    function obj2point(obj) {
      return curve.point(obj[0], obj[1], red);
    }
  
    var pre = obj[2];
    res.precomputed = {
      beta: null,
      doubles: pre.doubles && {
        step: pre.doubles.step,
        points: [ res ].concat(pre.doubles.points.map(obj2point))
      },
      naf: pre.naf && {
        wnd: pre.naf.wnd,
        points: [ res ].concat(pre.naf.points.map(obj2point))
      }
    };
    return res;
  };
  
  Point.prototype.inspect = function inspect() {
    if (this.isInfinity())
      return '<EC Point Infinity>';
    return '<EC Point x: ' + this.x.fromRed().toString(16, 2) +
        ' y: ' + this.y.fromRed().toString(16, 2) + '>';
  };
  
  Point.prototype.isInfinity = function isInfinity() {
    return this.inf;
  };
  
  Point.prototype.add = function add(p) {
    // O + P = P
    if (this.inf)
      return p;
  
    // P + O = P
    if (p.inf)
      return this;
  
    // P + P = 2P
    if (this.eq(p))
      return this.dbl();
  
    // P + (-P) = O
    if (this.neg().eq(p))
      return this.curve.point(null, null);
  
    // P + Q = O
    if (this.x.cmp(p.x) === 0)
      return this.curve.point(null, null);
  
    var c = this.y.redSub(p.y);
    if (c.cmpn(0) !== 0)
      c = c.redMul(this.x.redSub(p.x).redInvm());
    var nx = c.redSqr().redISub(this.x).redISub(p.x);
    var ny = c.redMul(this.x.redSub(nx)).redISub(this.y);
    return this.curve.point(nx, ny);
  };
  
  Point.prototype.dbl = function dbl() {
    if (this.inf)
      return this;
  
    // 2P = O
    var ys1 = this.y.redAdd(this.y);
    if (ys1.cmpn(0) === 0)
      return this.curve.point(null, null);
  
    var a = this.curve.a;
  
    var x2 = this.x.redSqr();
    var dyinv = ys1.redInvm();
    var c = x2.redAdd(x2).redIAdd(x2).redIAdd(a).redMul(dyinv);
  
    var nx = c.redSqr().redISub(this.x.redAdd(this.x));
    var ny = c.redMul(this.x.redSub(nx)).redISub(this.y);
    return this.curve.point(nx, ny);
  };
  
  Point.prototype.getX = function getX() {
    return this.x.fromRed();
  };
  
  Point.prototype.getY = function getY() {
    return this.y.fromRed();
  };
  
  Point.prototype.mul = function mul(k) {
    k = new BN(k, 16);
  
    if (this._hasDoubles(k))
      return this.curve._fixedNafMul(this, k);
    else if (this.curve.endo)
      return this.curve._endoWnafMulAdd([ this ], [ k ]);
    else
      return this.curve._wnafMul(this, k);
  };
  
  Point.prototype.mulAdd = function mulAdd(k1, p2, k2) {
    var points = [ this, p2 ];
    var coeffs = [ k1, k2 ];
    if (this.curve.endo)
      return this.curve._endoWnafMulAdd(points, coeffs);
    else
      return this.curve._wnafMulAdd(1, points, coeffs, 2);
  };
  
  Point.prototype.jmulAdd = function jmulAdd(k1, p2, k2) {
    var points = [ this, p2 ];
    var coeffs = [ k1, k2 ];
    if (this.curve.endo)
      return this.curve._endoWnafMulAdd(points, coeffs, true);
    else
      return this.curve._wnafMulAdd(1, points, coeffs, 2, true);
  };
  
  Point.prototype.eq = function eq(p) {
    return this === p ||
           this.inf === p.inf &&
               (this.inf || this.x.cmp(p.x) === 0 && this.y.cmp(p.y) === 0);
  };
  
  Point.prototype.neg = function neg(_precompute) {
    if (this.inf)
      return this;
  
    var res = this.curve.point(this.x, this.y.redNeg());
    if (_precompute && this.precomputed) {
      var pre = this.precomputed;
      var negate = function(p) {
        return p.neg();
      };
      res.precomputed = {
        naf: pre.naf && {
          wnd: pre.naf.wnd,
          points: pre.naf.points.map(negate)
        },
        doubles: pre.doubles && {
          step: pre.doubles.step,
          points: pre.doubles.points.map(negate)
        }
      };
    }
    return res;
  };
  
  Point.prototype.toJ = function toJ() {
    if (this.inf)
      return this.curve.jpoint(null, null, null);
  
    var res = this.curve.jpoint(this.x, this.y, this.curve.one);
    return res;
  };
  
  function JPoint(curve, x, y, z) {
    Base.BasePoint.call(this, curve, 'jacobian');
    if (x === null && y === null && z === null) {
      this.x = this.curve.one;
      this.y = this.curve.one;
      this.z = new BN(0);
    } else {
      this.x = new BN(x, 16);
      this.y = new BN(y, 16);
      this.z = new BN(z, 16);
    }
    if (!this.x.red)
      this.x = this.x.toRed(this.curve.red);
    if (!this.y.red)
      this.y = this.y.toRed(this.curve.red);
    if (!this.z.red)
      this.z = this.z.toRed(this.curve.red);
  
    this.zOne = this.z === this.curve.one;
  }
  inherits(JPoint, Base.BasePoint);
  
  ShortCurve.prototype.jpoint = function jpoint(x, y, z) {
    return new JPoint(this, x, y, z);
  };
  
  JPoint.prototype.toP = function toP() {
    if (this.isInfinity())
      return this.curve.point(null, null);
  
    var zinv = this.z.redInvm();
    var zinv2 = zinv.redSqr();
    var ax = this.x.redMul(zinv2);
    var ay = this.y.redMul(zinv2).redMul(zinv);
  
    return this.curve.point(ax, ay);
  };
  
  JPoint.prototype.neg = function neg() {
    return this.curve.jpoint(this.x, this.y.redNeg(), this.z);
  };
  
  JPoint.prototype.add = function add(p) {
    // O + P = P
    if (this.isInfinity())
      return p;
  
    // P + O = P
    if (p.isInfinity())
      return this;
  
    // 12M + 4S + 7A
    var pz2 = p.z.redSqr();
    var z2 = this.z.redSqr();
    var u1 = this.x.redMul(pz2);
    var u2 = p.x.redMul(z2);
    var s1 = this.y.redMul(pz2.redMul(p.z));
    var s2 = p.y.redMul(z2.redMul(this.z));
  
    var h = u1.redSub(u2);
    var r = s1.redSub(s2);
    if (h.cmpn(0) === 0) {
      if (r.cmpn(0) !== 0)
        return this.curve.jpoint(null, null, null);
      else
        return this.dbl();
    }
  
    var h2 = h.redSqr();
    var h3 = h2.redMul(h);
    var v = u1.redMul(h2);
  
    var nx = r.redSqr().redIAdd(h3).redISub(v).redISub(v);
    var ny = r.redMul(v.redISub(nx)).redISub(s1.redMul(h3));
    var nz = this.z.redMul(p.z).redMul(h);
  
    return this.curve.jpoint(nx, ny, nz);
  };
  
  JPoint.prototype.mixedAdd = function mixedAdd(p) {
    // O + P = P
    if (this.isInfinity())
      return p.toJ();
  
    // P + O = P
    if (p.isInfinity())
      return this;
  
    // 8M + 3S + 7A
    var z2 = this.z.redSqr();
    var u1 = this.x;
    var u2 = p.x.redMul(z2);
    var s1 = this.y;
    var s2 = p.y.redMul(z2).redMul(this.z);
  
    var h = u1.redSub(u2);
    var r = s1.redSub(s2);
    if (h.cmpn(0) === 0) {
      if (r.cmpn(0) !== 0)
        return this.curve.jpoint(null, null, null);
      else
        return this.dbl();
    }
  
    var h2 = h.redSqr();
    var h3 = h2.redMul(h);
    var v = u1.redMul(h2);
  
    var nx = r.redSqr().redIAdd(h3).redISub(v).redISub(v);
    var ny = r.redMul(v.redISub(nx)).redISub(s1.redMul(h3));
    var nz = this.z.redMul(h);
  
    return this.curve.jpoint(nx, ny, nz);
  };
  
  JPoint.prototype.dblp = function dblp(pow) {
    if (pow === 0)
      return this;
    if (this.isInfinity())
      return this;
    if (!pow)
      return this.dbl();
  
    if (this.curve.zeroA || this.curve.threeA) {
      var r = this;
      for (var i = 0; i < pow; i++)
        r = r.dbl();
      return r;
    }
  
    // 1M + 2S + 1A + N * (4S + 5M + 8A)
    // N = 1 => 6M + 6S + 9A
    var a = this.curve.a;
    var tinv = this.curve.tinv;
  
    var jx = this.x;
    var jy = this.y;
    var jz = this.z;
    var jz4 = jz.redSqr().redSqr();
  
    // Reuse results
    var jyd = jy.redAdd(jy);
    for (var i = 0; i < pow; i++) {
      var jx2 = jx.redSqr();
      var jyd2 = jyd.redSqr();
      var jyd4 = jyd2.redSqr();
      var c = jx2.redAdd(jx2).redIAdd(jx2).redIAdd(a.redMul(jz4));
  
      var t1 = jx.redMul(jyd2);
      var nx = c.redSqr().redISub(t1.redAdd(t1));
      var t2 = t1.redISub(nx);
      var dny = c.redMul(t2);
      dny = dny.redIAdd(dny).redISub(jyd4);
      var nz = jyd.redMul(jz);
      if (i + 1 < pow)
        jz4 = jz4.redMul(jyd4);
  
      jx = nx;
      jz = nz;
      jyd = dny;
    }
  
    return this.curve.jpoint(jx, jyd.redMul(tinv), jz);
  };
  
  JPoint.prototype.dbl = function dbl() {
    if (this.isInfinity())
      return this;
  
    if (this.curve.zeroA)
      return this._zeroDbl();
    else if (this.curve.threeA)
      return this._threeDbl();
    else
      return this._dbl();
  };
  
  JPoint.prototype._zeroDbl = function _zeroDbl() {
    var nx;
    var ny;
    var nz;
    // Z = 1
    if (this.zOne) {
      // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html
      //     #doubling-mdbl-2007-bl
      // 1M + 5S + 14A
  
      // XX = X1^2
      var xx = this.x.redSqr();
      // YY = Y1^2
      var yy = this.y.redSqr();
      // YYYY = YY^2
      var yyyy = yy.redSqr();
      // S = 2 * ((X1 + YY)^2 - XX - YYYY)
      var s = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
      s = s.redIAdd(s);
      // M = 3 * XX + a; a = 0
      var m = xx.redAdd(xx).redIAdd(xx);
      // T = M ^ 2 - 2*S
      var t = m.redSqr().redISub(s).redISub(s);
  
      // 8 * YYYY
      var yyyy8 = yyyy.redIAdd(yyyy);
      yyyy8 = yyyy8.redIAdd(yyyy8);
      yyyy8 = yyyy8.redIAdd(yyyy8);
  
      // X3 = T
      nx = t;
      // Y3 = M * (S - T) - 8 * YYYY
      ny = m.redMul(s.redISub(t)).redISub(yyyy8);
      // Z3 = 2*Y1
      nz = this.y.redAdd(this.y);
    } else {
      // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html
      //     #doubling-dbl-2009-l
      // 2M + 5S + 13A
  
      // A = X1^2
      var a = this.x.redSqr();
      // B = Y1^2
      var b = this.y.redSqr();
      // C = B^2
      var c = b.redSqr();
      // D = 2 * ((X1 + B)^2 - A - C)
      var d = this.x.redAdd(b).redSqr().redISub(a).redISub(c);
      d = d.redIAdd(d);
      // E = 3 * A
      var e = a.redAdd(a).redIAdd(a);
      // F = E^2
      var f = e.redSqr();
  
      // 8 * C
      var c8 = c.redIAdd(c);
      c8 = c8.redIAdd(c8);
      c8 = c8.redIAdd(c8);
  
      // X3 = F - 2 * D
      nx = f.redISub(d).redISub(d);
      // Y3 = E * (D - X3) - 8 * C
      ny = e.redMul(d.redISub(nx)).redISub(c8);
      // Z3 = 2 * Y1 * Z1
      nz = this.y.redMul(this.z);
      nz = nz.redIAdd(nz);
    }
  
    return this.curve.jpoint(nx, ny, nz);
  };
  
  JPoint.prototype._threeDbl = function _threeDbl() {
    var nx;
    var ny;
    var nz;
    // Z = 1
    if (this.zOne) {
      // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-3.html
      //     #doubling-mdbl-2007-bl
      // 1M + 5S + 15A
  
      // XX = X1^2
      var xx = this.x.redSqr();
      // YY = Y1^2
      var yy = this.y.redSqr();
      // YYYY = YY^2
      var yyyy = yy.redSqr();
      // S = 2 * ((X1 + YY)^2 - XX - YYYY)
      var s = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
      s = s.redIAdd(s);
      // M = 3 * XX + a
      var m = xx.redAdd(xx).redIAdd(xx).redIAdd(this.curve.a);
      // T = M^2 - 2 * S
      var t = m.redSqr().redISub(s).redISub(s);
      // X3 = T
      nx = t;
      // Y3 = M * (S - T) - 8 * YYYY
      var yyyy8 = yyyy.redIAdd(yyyy);
      yyyy8 = yyyy8.redIAdd(yyyy8);
      yyyy8 = yyyy8.redIAdd(yyyy8);
      ny = m.redMul(s.redISub(t)).redISub(yyyy8);
      // Z3 = 2 * Y1
      nz = this.y.redAdd(this.y);
    } else {
      // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-3.html#doubling-dbl-2001-b
      // 3M + 5S
  
      // delta = Z1^2
      var delta = this.z.redSqr();
      // gamma = Y1^2
      var gamma = this.y.redSqr();
      // beta = X1 * gamma
      var beta = this.x.redMul(gamma);
      // alpha = 3 * (X1 - delta) * (X1 + delta)
      var alpha = this.x.redSub(delta).redMul(this.x.redAdd(delta));
      alpha = alpha.redAdd(alpha).redIAdd(alpha);
      // X3 = alpha^2 - 8 * beta
      var beta4 = beta.redIAdd(beta);
      beta4 = beta4.redIAdd(beta4);
      var beta8 = beta4.redAdd(beta4);
      nx = alpha.redSqr().redISub(beta8);
      // Z3 = (Y1 + Z1)^2 - gamma - delta
      nz = this.y.redAdd(this.z).redSqr().redISub(gamma).redISub(delta);
      // Y3 = alpha * (4 * beta - X3) - 8 * gamma^2
      var ggamma8 = gamma.redSqr();
      ggamma8 = ggamma8.redIAdd(ggamma8);
      ggamma8 = ggamma8.redIAdd(ggamma8);
      ggamma8 = ggamma8.redIAdd(ggamma8);
      ny = alpha.redMul(beta4.redISub(nx)).redISub(ggamma8);
    }
  
    return this.curve.jpoint(nx, ny, nz);
  };
  
  JPoint.prototype._dbl = function _dbl() {
    var a = this.curve.a;
  
    // 4M + 6S + 10A
    var jx = this.x;
    var jy = this.y;
    var jz = this.z;
    var jz4 = jz.redSqr().redSqr();
  
    var jx2 = jx.redSqr();
    var jy2 = jy.redSqr();
  
    var c = jx2.redAdd(jx2).redIAdd(jx2).redIAdd(a.redMul(jz4));
  
    var jxd4 = jx.redAdd(jx);
    jxd4 = jxd4.redIAdd(jxd4);
    var t1 = jxd4.redMul(jy2);
    var nx = c.redSqr().redISub(t1.redAdd(t1));
    var t2 = t1.redISub(nx);
  
    var jyd8 = jy2.redSqr();
    jyd8 = jyd8.redIAdd(jyd8);
    jyd8 = jyd8.redIAdd(jyd8);
    jyd8 = jyd8.redIAdd(jyd8);
    var ny = c.redMul(t2).redISub(jyd8);
    var nz = jy.redAdd(jy).redMul(jz);
  
    return this.curve.jpoint(nx, ny, nz);
  };
  
  JPoint.prototype.trpl = function trpl() {
    if (!this.curve.zeroA)
      return this.dbl().add(this);
  
    // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html#tripling-tpl-2007-bl
    // 5M + 10S + ...
  
    // XX = X1^2
    var xx = this.x.redSqr();
    // YY = Y1^2
    var yy = this.y.redSqr();
    // ZZ = Z1^2
    var zz = this.z.redSqr();
    // YYYY = YY^2
    var yyyy = yy.redSqr();
    // M = 3 * XX + a * ZZ2; a = 0
    var m = xx.redAdd(xx).redIAdd(xx);
    // MM = M^2
    var mm = m.redSqr();
    // E = 6 * ((X1 + YY)^2 - XX - YYYY) - MM
    var e = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
    e = e.redIAdd(e);
    e = e.redAdd(e).redIAdd(e);
    e = e.redISub(mm);
    // EE = E^2
    var ee = e.redSqr();
    // T = 16*YYYY
    var t = yyyy.redIAdd(yyyy);
    t = t.redIAdd(t);
    t = t.redIAdd(t);
    t = t.redIAdd(t);
    // U = (M + E)^2 - MM - EE - T
    var u = m.redIAdd(e).redSqr().redISub(mm).redISub(ee).redISub(t);
    // X3 = 4 * (X1 * EE - 4 * YY * U)
    var yyu4 = yy.redMul(u);
    yyu4 = yyu4.redIAdd(yyu4);
    yyu4 = yyu4.redIAdd(yyu4);
    var nx = this.x.redMul(ee).redISub(yyu4);
    nx = nx.redIAdd(nx);
    nx = nx.redIAdd(nx);
    // Y3 = 8 * Y1 * (U * (T - U) - E * EE)
    var ny = this.y.redMul(u.redMul(t.redISub(u)).redISub(e.redMul(ee)));
    ny = ny.redIAdd(ny);
    ny = ny.redIAdd(ny);
    ny = ny.redIAdd(ny);
    // Z3 = (Z1 + E)^2 - ZZ - EE
    var nz = this.z.redAdd(e).redSqr().redISub(zz).redISub(ee);
  
    return this.curve.jpoint(nx, ny, nz);
  };
  
  JPoint.prototype.mul = function mul(k, kbase) {
    k = new BN(k, kbase);
  
    return this.curve._wnafMul(this, k);
  };
  
  JPoint.prototype.eq = function eq(p) {
    if (p.type === 'affine')
      return this.eq(p.toJ());
  
    if (this === p)
      return true;
  
    // x1 * z2^2 == x2 * z1^2
    var z2 = this.z.redSqr();
    var pz2 = p.z.redSqr();
    if (this.x.redMul(pz2).redISub(p.x.redMul(z2)).cmpn(0) !== 0)
      return false;
  
    // y1 * z2^3 == y2 * z1^3
    var z3 = z2.redMul(this.z);
    var pz3 = pz2.redMul(p.z);
    return this.y.redMul(pz3).redISub(p.y.redMul(z3)).cmpn(0) === 0;
  };
  
  JPoint.prototype.eqXToP = function eqXToP(x) {
    var zs = this.z.redSqr();
    var rx = x.toRed(this.curve.red).redMul(zs);
    if (this.x.cmp(rx) === 0)
      return true;
  
    var xc = x.clone();
    var t = this.curve.redN.redMul(zs);
    for (;;) {
      xc.iadd(this.curve.n);
      if (xc.cmp(this.curve.p) >= 0)
        return false;
  
      rx.redIAdd(t);
      if (this.x.cmp(rx) === 0)
        return true;
    }
    return false;
  };
  
  JPoint.prototype.inspect = function inspect() {
    if (this.isInfinity())
      return '<EC JPoint Infinity>';
    return '<EC JPoint x: ' + this.x.toString(16, 2) +
        ' y: ' + this.y.toString(16, 2) +
        ' z: ' + this.z.toString(16, 2) + '>';
  };
  
  JPoint.prototype.isInfinity = function isInfinity() {
    // XXX This code assumes that zero is always zero in red
    return this.z.cmpn(0) === 0;
  };
  
  },{"../../elliptic":109,"../curve":112,"bn.js":53,"inherits":180}],115:[function(require,module,exports){
  'use strict';
  
  var curves = exports;
  
  var hash = require('hash.js');
  var elliptic = require('../elliptic');
  
  var assert = elliptic.utils.assert;
  
  function PresetCurve(options) {
    if (options.type === 'short')
      this.curve = new elliptic.curve.short(options);
    else if (options.type === 'edwards')
      this.curve = new elliptic.curve.edwards(options);
    else
      this.curve = new elliptic.curve.mont(options);
    this.g = this.curve.g;
    this.n = this.curve.n;
    this.hash = options.hash;
  
    assert(this.g.validate(), 'Invalid curve');
    assert(this.g.mul(this.n).isInfinity(), 'Invalid curve, G*N != O');
  }
  curves.PresetCurve = PresetCurve;
  
  function defineCurve(name, options) {
    Object.defineProperty(curves, name, {
      configurable: true,
      enumerable: true,
      get: function() {
        var curve = new PresetCurve(options);
        Object.defineProperty(curves, name, {
          configurable: true,
          enumerable: true,
          value: curve
        });
        return curve;
      }
    });
  }
  
  defineCurve('p192', {
    type: 'short',
    prime: 'p192',
    p: 'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff',
    a: 'ffffffff ffffffff ffffffff fffffffe ffffffff fffffffc',
    b: '64210519 e59c80e7 0fa7e9ab 72243049 feb8deec c146b9b1',
    n: 'ffffffff ffffffff ffffffff 99def836 146bc9b1 b4d22831',
    hash: hash.sha256,
    gRed: false,
    g: [
      '188da80e b03090f6 7cbf20eb 43a18800 f4ff0afd 82ff1012',
      '07192b95 ffc8da78 631011ed 6b24cdd5 73f977a1 1e794811'
    ]
  });
  
  defineCurve('p224', {
    type: 'short',
    prime: 'p224',
    p: 'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001',
    a: 'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff fffffffe',
    b: 'b4050a85 0c04b3ab f5413256 5044b0b7 d7bfd8ba 270b3943 2355ffb4',
    n: 'ffffffff ffffffff ffffffff ffff16a2 e0b8f03e 13dd2945 5c5c2a3d',
    hash: hash.sha256,
    gRed: false,
    g: [
      'b70e0cbd 6bb4bf7f 321390b9 4a03c1d3 56c21122 343280d6 115c1d21',
      'bd376388 b5f723fb 4c22dfe6 cd4375a0 5a074764 44d58199 85007e34'
    ]
  });
  
  defineCurve('p256', {
    type: 'short',
    prime: null,
    p: 'ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff ffffffff',
    a: 'ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff fffffffc',
    b: '5ac635d8 aa3a93e7 b3ebbd55 769886bc 651d06b0 cc53b0f6 3bce3c3e 27d2604b',
    n: 'ffffffff 00000000 ffffffff ffffffff bce6faad a7179e84 f3b9cac2 fc632551',
    hash: hash.sha256,
    gRed: false,
    g: [
      '6b17d1f2 e12c4247 f8bce6e5 63a440f2 77037d81 2deb33a0 f4a13945 d898c296',
      '4fe342e2 fe1a7f9b 8ee7eb4a 7c0f9e16 2bce3357 6b315ece cbb64068 37bf51f5'
    ]
  });
  
  defineCurve('p384', {
    type: 'short',
    prime: null,
    p: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
       'fffffffe ffffffff 00000000 00000000 ffffffff',
    a: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
       'fffffffe ffffffff 00000000 00000000 fffffffc',
    b: 'b3312fa7 e23ee7e4 988e056b e3f82d19 181d9c6e fe814112 0314088f ' +
       '5013875a c656398d 8a2ed19d 2a85c8ed d3ec2aef',
    n: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff c7634d81 ' +
       'f4372ddf 581a0db2 48b0a77a ecec196a ccc52973',
    hash: hash.sha384,
    gRed: false,
    g: [
      'aa87ca22 be8b0537 8eb1c71e f320ad74 6e1d3b62 8ba79b98 59f741e0 82542a38 ' +
      '5502f25d bf55296c 3a545e38 72760ab7',
      '3617de4a 96262c6f 5d9e98bf 9292dc29 f8f41dbd 289a147c e9da3113 b5f0b8c0 ' +
      '0a60b1ce 1d7e819d 7a431d7c 90ea0e5f'
    ]
  });
  
  defineCurve('p521', {
    type: 'short',
    prime: null,
    p: '000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
       'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
       'ffffffff ffffffff ffffffff ffffffff ffffffff',
    a: '000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
       'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
       'ffffffff ffffffff ffffffff ffffffff fffffffc',
    b: '00000051 953eb961 8e1c9a1f 929a21a0 b68540ee a2da725b ' +
       '99b315f3 b8b48991 8ef109e1 56193951 ec7e937b 1652c0bd ' +
       '3bb1bf07 3573df88 3d2c34f1 ef451fd4 6b503f00',
    n: '000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
       'ffffffff ffffffff fffffffa 51868783 bf2f966b 7fcc0148 ' +
       'f709a5d0 3bb5c9b8 899c47ae bb6fb71e 91386409',
    hash: hash.sha512,
    gRed: false,
    g: [
      '000000c6 858e06b7 0404e9cd 9e3ecb66 2395b442 9c648139 ' +
      '053fb521 f828af60 6b4d3dba a14b5e77 efe75928 fe1dc127 ' +
      'a2ffa8de 3348b3c1 856a429b f97e7e31 c2e5bd66',
      '00000118 39296a78 9a3bc004 5c8a5fb4 2c7d1bd9 98f54449 ' +
      '579b4468 17afbd17 273e662c 97ee7299 5ef42640 c550b901 ' +
      '3fad0761 353c7086 a272c240 88be9476 9fd16650'
    ]
  });
  
  defineCurve('curve25519', {
    type: 'mont',
    prime: 'p25519',
    p: '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed',
    a: '76d06',
    b: '1',
    n: '1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed',
    hash: hash.sha256,
    gRed: false,
    g: [
      '9'
    ]
  });
  
  defineCurve('ed25519', {
    type: 'edwards',
    prime: 'p25519',
    p: '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed',
    a: '-1',
    c: '1',
    // -121665 * (121666^(-1)) (mod P)
    d: '52036cee2b6ffe73 8cc740797779e898 00700a4d4141d8ab 75eb4dca135978a3',
    n: '1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed',
    hash: hash.sha256,
    gRed: false,
    g: [
      '216936d3cd6e53fec0a4e231fdd6dc5c692cc7609525a7b2c9562d608f25d51a',
  
      // 4/5
      '6666666666666666666666666666666666666666666666666666666666666658'
    ]
  });
  
  var pre;
  try {
    pre = require('./precomputed/secp256k1');
  } catch (e) {
    pre = undefined;
  }
  
  defineCurve('secp256k1', {
    type: 'short',
    prime: 'k256',
    p: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f',
    a: '0',
    b: '7',
    n: 'ffffffff ffffffff ffffffff fffffffe baaedce6 af48a03b bfd25e8c d0364141',
    h: '1',
    hash: hash.sha256,
  
    // Precomputed endomorphism
    beta: '7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee',
    lambda: '5363ad4cc05c30e0a5261c028812645a122e22ea20816678df02967c1b23bd72',
    basis: [
      {
        a: '3086d221a7d46bcde86c90e49284eb15',
        b: '-e4437ed6010e88286f547fa90abfe4c3'
      },
      {
        a: '114ca50f7a8e2f3f657c1108d9d44cfd8',
        b: '3086d221a7d46bcde86c90e49284eb15'
      }
    ],
  
    gRed: false,
    g: [
      '79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798',
      '483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8',
      pre
    ]
  });
  
  },{"../elliptic":109,"./precomputed/secp256k1":122,"hash.js":162}],116:[function(require,module,exports){
  'use strict';
  
  var BN = require('bn.js');
  var HmacDRBG = require('hmac-drbg');
  var elliptic = require('../../elliptic');
  var utils = elliptic.utils;
  var assert = utils.assert;
  
  var KeyPair = require('./key');
  var Signature = require('./signature');
  
  function EC(options) {
    if (!(this instanceof EC))
      return new EC(options);
  
    // Shortcut `elliptic.ec(curve-name)`
    if (typeof options === 'string') {
      assert(elliptic.curves.hasOwnProperty(options), 'Unknown curve ' + options);
  
      options = elliptic.curves[options];
    }
  
    // Shortcut for `elliptic.ec(elliptic.curves.curveName)`
    if (options instanceof elliptic.curves.PresetCurve)
      options = { curve: options };
  
    this.curve = options.curve.curve;
    this.n = this.curve.n;
    this.nh = this.n.ushrn(1);
    this.g = this.curve.g;
  
    // Point on curve
    this.g = options.curve.g;
    this.g.precompute(options.curve.n.bitLength() + 1);
  
    // Hash for function for DRBG
    this.hash = options.hash || options.curve.hash;
  }
  module.exports = EC;
  
  EC.prototype.keyPair = function keyPair(options) {
    return new KeyPair(this, options);
  };
  
  EC.prototype.keyFromPrivate = function keyFromPrivate(priv, enc) {
    return KeyPair.fromPrivate(this, priv, enc);
  };
  
  EC.prototype.keyFromPublic = function keyFromPublic(pub, enc) {
    return KeyPair.fromPublic(this, pub, enc);
  };
  
  EC.prototype.genKeyPair = function genKeyPair(options) {
    if (!options)
      options = {};
  
    // Instantiate Hmac_DRBG
    var drbg = new HmacDRBG({
      hash: this.hash,
      pers: options.pers,
      persEnc: options.persEnc || 'utf8',
      entropy: options.entropy || elliptic.rand(this.hash.hmacStrength),
      entropyEnc: options.entropy && options.entropyEnc || 'utf8',
      nonce: this.n.toArray()
    });
  
    var bytes = this.n.byteLength();
    var ns2 = this.n.sub(new BN(2));
    do {
      var priv = new BN(drbg.generate(bytes));
      if (priv.cmp(ns2) > 0)
        continue;
  
      priv.iaddn(1);
      return this.keyFromPrivate(priv);
    } while (true);
  };
  
  EC.prototype._truncateToN = function truncateToN(msg, truncOnly) {
    var delta = msg.byteLength() * 8 - this.n.bitLength();
    if (delta > 0)
      msg = msg.ushrn(delta);
    if (!truncOnly && msg.cmp(this.n) >= 0)
      return msg.sub(this.n);
    else
      return msg;
  };
  
  EC.prototype.sign = function sign(msg, key, enc, options) {
    if (typeof enc === 'object') {
      options = enc;
      enc = null;
    }
    if (!options)
      options = {};
  
    key = this.keyFromPrivate(key, enc);
    msg = this._truncateToN(new BN(msg, 16));
  
    // Zero-extend key to provide enough entropy
    var bytes = this.n.byteLength();
    var bkey = key.getPrivate().toArray('be', bytes);
  
    // Zero-extend nonce to have the same byte size as N
    var nonce = msg.toArray('be', bytes);
  
    // Instantiate Hmac_DRBG
    var drbg = new HmacDRBG({
      hash: this.hash,
      entropy: bkey,
      nonce: nonce,
      pers: options.pers,
      persEnc: options.persEnc || 'utf8'
    });
  
    // Number of bytes to generate
    var ns1 = this.n.sub(new BN(1));
  
    for (var iter = 0; true; iter++) {
      var k = options.k ?
          options.k(iter) :
          new BN(drbg.generate(this.n.byteLength()));
      k = this._truncateToN(k, true);
      if (k.cmpn(1) <= 0 || k.cmp(ns1) >= 0)
        continue;
  
      var kp = this.g.mul(k);
      if (kp.isInfinity())
        continue;
  
      var kpX = kp.getX();
      var r = kpX.umod(this.n);
      if (r.cmpn(0) === 0)
        continue;
  
      var s = k.invm(this.n).mul(r.mul(key.getPrivate()).iadd(msg));
      s = s.umod(this.n);
      if (s.cmpn(0) === 0)
        continue;
  
      var recoveryParam = (kp.getY().isOdd() ? 1 : 0) |
                          (kpX.cmp(r) !== 0 ? 2 : 0);
  
      // Use complement of `s`, if it is > `n / 2`
      if (options.canonical && s.cmp(this.nh) > 0) {
        s = this.n.sub(s);
        recoveryParam ^= 1;
      }
  
      return new Signature({ r: r, s: s, recoveryParam: recoveryParam });
    }
  };
  
  EC.prototype.verify = function verify(msg, signature, key, enc) {
    msg = this._truncateToN(new BN(msg, 16));
    key = this.keyFromPublic(key, enc);
    signature = new Signature(signature, 'hex');
  
    // Perform primitive values validation
    var r = signature.r;
    var s = signature.s;
    if (r.cmpn(1) < 0 || r.cmp(this.n) >= 0)
      return false;
    if (s.cmpn(1) < 0 || s.cmp(this.n) >= 0)
      return false;
  
    // Validate signature
    var sinv = s.invm(this.n);
    var u1 = sinv.mul(msg).umod(this.n);
    var u2 = sinv.mul(r).umod(this.n);
  
    if (!this.curve._maxwellTrick) {
      var p = this.g.mulAdd(u1, key.getPublic(), u2);
      if (p.isInfinity())
        return false;
  
      return p.getX().umod(this.n).cmp(r) === 0;
    }
  
    // NOTE: Greg Maxwell's trick, inspired by:
    // https://git.io/vad3K
  
    var p = this.g.jmulAdd(u1, key.getPublic(), u2);
    if (p.isInfinity())
      return false;
  
    // Compare `p.x` of Jacobian point with `r`,
    // this will do `p.x == r * p.z^2` instead of multiplying `p.x` by the
    // inverse of `p.z^2`
    return p.eqXToP(r);
  };
  
  EC.prototype.recoverPubKey = function(msg, signature, j, enc) {
    assert((3 & j) === j, 'The recovery param is more than two bits');
    signature = new Signature(signature, enc);
  
    var n = this.n;
    var e = new BN(msg);
    var r = signature.r;
    var s = signature.s;
  
    // A set LSB signifies that the y-coordinate is odd
    var isYOdd = j & 1;
    var isSecondKey = j >> 1;
    if (r.cmp(this.curve.p.umod(this.curve.n)) >= 0 && isSecondKey)
      throw new Error('Unable to find second key candinate');
  
    // 1.1. Let x = r + jn.
    if (isSecondKey)
      r = this.curve.pointFromX(r.add(this.curve.n), isYOdd);
    else
      r = this.curve.pointFromX(r, isYOdd);
  
    var rInv = signature.r.invm(n);
    var s1 = n.sub(e).mul(rInv).umod(n);
    var s2 = s.mul(rInv).umod(n);
  
    // 1.6.1 Compute Q = r^-1 (sR -  eG)
    //               Q = r^-1 (sR + -eG)
    return this.g.mulAdd(s1, r, s2);
  };
  
  EC.prototype.getKeyRecoveryParam = function(e, signature, Q, enc) {
    signature = new Signature(signature, enc);
    if (signature.recoveryParam !== null)
      return signature.recoveryParam;
  
    for (var i = 0; i < 4; i++) {
      var Qprime;
      try {
        Qprime = this.recoverPubKey(e, signature, i);
      } catch (e) {
        continue;
      }
  
      if (Qprime.eq(Q))
        return i;
    }
    throw new Error('Unable to find valid recovery factor');
  };
  
  },{"../../elliptic":109,"./key":117,"./signature":118,"bn.js":53,"hmac-drbg":174}],117:[function(require,module,exports){
  'use strict';
  
  var BN = require('bn.js');
  var elliptic = require('../../elliptic');
  var utils = elliptic.utils;
  var assert = utils.assert;
  
  function KeyPair(ec, options) {
    this.ec = ec;
    this.priv = null;
    this.pub = null;
  
    // KeyPair(ec, { priv: ..., pub: ... })
    if (options.priv)
      this._importPrivate(options.priv, options.privEnc);
    if (options.pub)
      this._importPublic(options.pub, options.pubEnc);
  }
  module.exports = KeyPair;
  
  KeyPair.fromPublic = function fromPublic(ec, pub, enc) {
    if (pub instanceof KeyPair)
      return pub;
  
    return new KeyPair(ec, {
      pub: pub,
      pubEnc: enc
    });
  };
  
  KeyPair.fromPrivate = function fromPrivate(ec, priv, enc) {
    if (priv instanceof KeyPair)
      return priv;
  
    return new KeyPair(ec, {
      priv: priv,
      privEnc: enc
    });
  };
  
  KeyPair.prototype.validate = function validate() {
    var pub = this.getPublic();
  
    if (pub.isInfinity())
      return { result: false, reason: 'Invalid public key' };
    if (!pub.validate())
      return { result: false, reason: 'Public key is not a point' };
    if (!pub.mul(this.ec.curve.n).isInfinity())
      return { result: false, reason: 'Public key * N != O' };
  
    return { result: true, reason: null };
  };
  
  KeyPair.prototype.getPublic = function getPublic(compact, enc) {
    // compact is optional argument
    if (typeof compact === 'string') {
      enc = compact;
      compact = null;
    }
  
    if (!this.pub)
      this.pub = this.ec.g.mul(this.priv);
  
    if (!enc)
      return this.pub;
  
    return this.pub.encode(enc, compact);
  };
  
  KeyPair.prototype.getPrivate = function getPrivate(enc) {
    if (enc === 'hex')
      return this.priv.toString(16, 2);
    else
      return this.priv;
  };
  
  KeyPair.prototype._importPrivate = function _importPrivate(key, enc) {
    this.priv = new BN(key, enc || 16);
  
    // Ensure that the priv won't be bigger than n, otherwise we may fail
    // in fixed multiplication method
    this.priv = this.priv.umod(this.ec.curve.n);
  };
  
  KeyPair.prototype._importPublic = function _importPublic(key, enc) {
    if (key.x || key.y) {
      // Montgomery points only have an `x` coordinate.
      // Weierstrass/Edwards points on the other hand have both `x` and
      // `y` coordinates.
      if (this.ec.curve.type === 'mont') {
        assert(key.x, 'Need x coordinate');
      } else if (this.ec.curve.type === 'short' ||
                 this.ec.curve.type === 'edwards') {
        assert(key.x && key.y, 'Need both x and y coordinate');
      }
      this.pub = this.ec.curve.point(key.x, key.y);
      return;
    }
    this.pub = this.ec.curve.decodePoint(key, enc);
  };
  
  // ECDH
  KeyPair.prototype.derive = function derive(pub) {
    return pub.mul(this.priv).getX();
  };
  
  // ECDSA
  KeyPair.prototype.sign = function sign(msg, enc, options) {
    return this.ec.sign(msg, this, enc, options);
  };
  
  KeyPair.prototype.verify = function verify(msg, signature) {
    return this.ec.verify(msg, signature, this);
  };
  
  KeyPair.prototype.inspect = function inspect() {
    return '<Key priv: ' + (this.priv && this.priv.toString(16, 2)) +
           ' pub: ' + (this.pub && this.pub.inspect()) + ' >';
  };
  
  },{"../../elliptic":109,"bn.js":53}],118:[function(require,module,exports){
  'use strict';
  
  var BN = require('bn.js');
  
  var elliptic = require('../../elliptic');
  var utils = elliptic.utils;
  var assert = utils.assert;
  
  function Signature(options, enc) {
    if (options instanceof Signature)
      return options;
  
    if (this._importDER(options, enc))
      return;
  
    assert(options.r && options.s, 'Signature without r or s');
    this.r = new BN(options.r, 16);
    this.s = new BN(options.s, 16);
    if (options.recoveryParam === undefined)
      this.recoveryParam = null;
    else
      this.recoveryParam = options.recoveryParam;
  }
  module.exports = Signature;
  
  function Position() {
    this.place = 0;
  }
  
  function getLength(buf, p) {
    var initial = buf[p.place++];
    if (!(initial & 0x80)) {
      return initial;
    }
    var octetLen = initial & 0xf;
    var val = 0;
    for (var i = 0, off = p.place; i < octetLen; i++, off++) {
      val <<= 8;
      val |= buf[off];
    }
    p.place = off;
    return val;
  }
  
  function rmPadding(buf) {
    var i = 0;
    var len = buf.length - 1;
    while (!buf[i] && !(buf[i + 1] & 0x80) && i < len) {
      i++;
    }
    if (i === 0) {
      return buf;
    }
    return buf.slice(i);
  }
  
  Signature.prototype._importDER = function _importDER(data, enc) {
    data = utils.toArray(data, enc);
    var p = new Position();
    if (data[p.place++] !== 0x30) {
      return false;
    }
    var len = getLength(data, p);
    if ((len + p.place) !== data.length) {
      return false;
    }
    if (data[p.place++] !== 0x02) {
      return false;
    }
    var rlen = getLength(data, p);
    var r = data.slice(p.place, rlen + p.place);
    p.place += rlen;
    if (data[p.place++] !== 0x02) {
      return false;
    }
    var slen = getLength(data, p);
    if (data.length !== slen + p.place) {
      return false;
    }
    var s = data.slice(p.place, slen + p.place);
    if (r[0] === 0 && (r[1] & 0x80)) {
      r = r.slice(1);
    }
    if (s[0] === 0 && (s[1] & 0x80)) {
      s = s.slice(1);
    }
  
    this.r = new BN(r);
    this.s = new BN(s);
    this.recoveryParam = null;
  
    return true;
  };
  
  function constructLength(arr, len) {
    if (len < 0x80) {
      arr.push(len);
      return;
    }
    var octets = 1 + (Math.log(len) / Math.LN2 >>> 3);
    arr.push(octets | 0x80);
    while (--octets) {
      arr.push((len >>> (octets << 3)) & 0xff);
    }
    arr.push(len);
  }
  
  Signature.prototype.toDER = function toDER(enc) {
    var r = this.r.toArray();
    var s = this.s.toArray();
  
    // Pad values
    if (r[0] & 0x80)
      r = [ 0 ].concat(r);
    // Pad values
    if (s[0] & 0x80)
      s = [ 0 ].concat(s);
  
    r = rmPadding(r);
    s = rmPadding(s);
  
    while (!s[0] && !(s[1] & 0x80)) {
      s = s.slice(1);
    }
    var arr = [ 0x02 ];
    constructLength(arr, r.length);
    arr = arr.concat(r);
    arr.push(0x02);
    constructLength(arr, s.length);
    var backHalf = arr.concat(s);
    var res = [ 0x30 ];
    constructLength(res, backHalf.length);
    res = res.concat(backHalf);
    return utils.encode(res, enc);
  };
  
  },{"../../elliptic":109,"bn.js":53}],119:[function(require,module,exports){
  'use strict';
  
  var hash = require('hash.js');
  var elliptic = require('../../elliptic');
  var utils = elliptic.utils;
  var assert = utils.assert;
  var parseBytes = utils.parseBytes;
  var KeyPair = require('./key');
  var Signature = require('./signature');
  
  function EDDSA(curve) {
    assert(curve === 'ed25519', 'only tested with ed25519 so far');
  
    if (!(this instanceof EDDSA))
      return new EDDSA(curve);
  
    var curve = elliptic.curves[curve].curve;
    this.curve = curve;
    this.g = curve.g;
    this.g.precompute(curve.n.bitLength() + 1);
  
    this.pointClass = curve.point().constructor;
    this.encodingLength = Math.ceil(curve.n.bitLength() / 8);
    this.hash = hash.sha512;
  }
  
  module.exports = EDDSA;
  
  /**
  * @param {Array|String} message - message bytes
  * @param {Array|String|KeyPair} secret - secret bytes or a keypair
  * @returns {Signature} - signature
  */
  EDDSA.prototype.sign = function sign(message, secret) {
    message = parseBytes(message);
    var key = this.keyFromSecret(secret);
    var r = this.hashInt(key.messagePrefix(), message);
    var R = this.g.mul(r);
    var Rencoded = this.encodePoint(R);
    var s_ = this.hashInt(Rencoded, key.pubBytes(), message)
                 .mul(key.priv());
    var S = r.add(s_).umod(this.curve.n);
    return this.makeSignature({ R: R, S: S, Rencoded: Rencoded });
  };
  
  /**
  * @param {Array} message - message bytes
  * @param {Array|String|Signature} sig - sig bytes
  * @param {Array|String|Point|KeyPair} pub - public key
  * @returns {Boolean} - true if public key matches sig of message
  */
  EDDSA.prototype.verify = function verify(message, sig, pub) {
    message = parseBytes(message);
    sig = this.makeSignature(sig);
    var key = this.keyFromPublic(pub);
    var h = this.hashInt(sig.Rencoded(), key.pubBytes(), message);
    var SG = this.g.mul(sig.S());
    var RplusAh = sig.R().add(key.pub().mul(h));
    return RplusAh.eq(SG);
  };
  
  EDDSA.prototype.hashInt = function hashInt() {
    var hash = this.hash();
    for (var i = 0; i < arguments.length; i++)
      hash.update(arguments[i]);
    return utils.intFromLE(hash.digest()).umod(this.curve.n);
  };
  
  EDDSA.prototype.keyFromPublic = function keyFromPublic(pub) {
    return KeyPair.fromPublic(this, pub);
  };
  
  EDDSA.prototype.keyFromSecret = function keyFromSecret(secret) {
    return KeyPair.fromSecret(this, secret);
  };
  
  EDDSA.prototype.makeSignature = function makeSignature(sig) {
    if (sig instanceof Signature)
      return sig;
    return new Signature(this, sig);
  };
  
  /**
  * * https://tools.ietf.org/html/draft-josefsson-eddsa-ed25519-03#section-5.2
  *
  * EDDSA defines methods for encoding and decoding points and integers. These are
  * helper convenience methods, that pass along to utility functions implied
  * parameters.
  *
  */
  EDDSA.prototype.encodePoint = function encodePoint(point) {
    var enc = point.getY().toArray('le', this.encodingLength);
    enc[this.encodingLength - 1] |= point.getX().isOdd() ? 0x80 : 0;
    return enc;
  };
  
  EDDSA.prototype.decodePoint = function decodePoint(bytes) {
    bytes = utils.parseBytes(bytes);
  
    var lastIx = bytes.length - 1;
    var normed = bytes.slice(0, lastIx).concat(bytes[lastIx] & ~0x80);
    var xIsOdd = (bytes[lastIx] & 0x80) !== 0;
  
    var y = utils.intFromLE(normed);
    return this.curve.pointFromY(y, xIsOdd);
  };
  
  EDDSA.prototype.encodeInt = function encodeInt(num) {
    return num.toArray('le', this.encodingLength);
  };
  
  EDDSA.prototype.decodeInt = function decodeInt(bytes) {
    return utils.intFromLE(bytes);
  };
  
  EDDSA.prototype.isPoint = function isPoint(val) {
    return val instanceof this.pointClass;
  };
  
  },{"../../elliptic":109,"./key":120,"./signature":121,"hash.js":162}],120:[function(require,module,exports){
  'use strict';
  
  var elliptic = require('../../elliptic');
  var utils = elliptic.utils;
  var assert = utils.assert;
  var parseBytes = utils.parseBytes;
  var cachedProperty = utils.cachedProperty;
  
  /**
  * @param {EDDSA} eddsa - instance
  * @param {Object} params - public/private key parameters
  *
  * @param {Array<Byte>} [params.secret] - secret seed bytes
  * @param {Point} [params.pub] - public key point (aka `A` in eddsa terms)
  * @param {Array<Byte>} [params.pub] - public key point encoded as bytes
  *
  */
  function KeyPair(eddsa, params) {
    this.eddsa = eddsa;
    this._secret = parseBytes(params.secret);
    if (eddsa.isPoint(params.pub))
      this._pub = params.pub;
    else
      this._pubBytes = parseBytes(params.pub);
  }
  
  KeyPair.fromPublic = function fromPublic(eddsa, pub) {
    if (pub instanceof KeyPair)
      return pub;
    return new KeyPair(eddsa, { pub: pub });
  };
  
  KeyPair.fromSecret = function fromSecret(eddsa, secret) {
    if (secret instanceof KeyPair)
      return secret;
    return new KeyPair(eddsa, { secret: secret });
  };
  
  KeyPair.prototype.secret = function secret() {
    return this._secret;
  };
  
  cachedProperty(KeyPair, 'pubBytes', function pubBytes() {
    return this.eddsa.encodePoint(this.pub());
  });
  
  cachedProperty(KeyPair, 'pub', function pub() {
    if (this._pubBytes)
      return this.eddsa.decodePoint(this._pubBytes);
    return this.eddsa.g.mul(this.priv());
  });
  
  cachedProperty(KeyPair, 'privBytes', function privBytes() {
    var eddsa = this.eddsa;
    var hash = this.hash();
    var lastIx = eddsa.encodingLength - 1;
  
    var a = hash.slice(0, eddsa.encodingLength);
    a[0] &= 248;
    a[lastIx] &= 127;
    a[lastIx] |= 64;
  
    return a;
  });
  
  cachedProperty(KeyPair, 'priv', function priv() {
    return this.eddsa.decodeInt(this.privBytes());
  });
  
  cachedProperty(KeyPair, 'hash', function hash() {
    return this.eddsa.hash().update(this.secret()).digest();
  });
  
  cachedProperty(KeyPair, 'messagePrefix', function messagePrefix() {
    return this.hash().slice(this.eddsa.encodingLength);
  });
  
  KeyPair.prototype.sign = function sign(message) {
    assert(this._secret, 'KeyPair can only verify');
    return this.eddsa.sign(message, this);
  };
  
  KeyPair.prototype.verify = function verify(message, sig) {
    return this.eddsa.verify(message, sig, this);
  };
  
  KeyPair.prototype.getSecret = function getSecret(enc) {
    assert(this._secret, 'KeyPair is public only');
    return utils.encode(this.secret(), enc);
  };
  
  KeyPair.prototype.getPublic = function getPublic(enc) {
    return utils.encode(this.pubBytes(), enc);
  };
  
  module.exports = KeyPair;
  
  },{"../../elliptic":109}],121:[function(require,module,exports){
  'use strict';
  
  var BN = require('bn.js');
  var elliptic = require('../../elliptic');
  var utils = elliptic.utils;
  var assert = utils.assert;
  var cachedProperty = utils.cachedProperty;
  var parseBytes = utils.parseBytes;
  
  /**
  * @param {EDDSA} eddsa - eddsa instance
  * @param {Array<Bytes>|Object} sig -
  * @param {Array<Bytes>|Point} [sig.R] - R point as Point or bytes
  * @param {Array<Bytes>|bn} [sig.S] - S scalar as bn or bytes
  * @param {Array<Bytes>} [sig.Rencoded] - R point encoded
  * @param {Array<Bytes>} [sig.Sencoded] - S scalar encoded
  */
  function Signature(eddsa, sig) {
    this.eddsa = eddsa;
  
    if (typeof sig !== 'object')
      sig = parseBytes(sig);
  
    if (Array.isArray(sig)) {
      sig = {
        R: sig.slice(0, eddsa.encodingLength),
        S: sig.slice(eddsa.encodingLength)
      };
    }
  
    assert(sig.R && sig.S, 'Signature without R or S');
  
    if (eddsa.isPoint(sig.R))
      this._R = sig.R;
    if (sig.S instanceof BN)
      this._S = sig.S;
  
    this._Rencoded = Array.isArray(sig.R) ? sig.R : sig.Rencoded;
    this._Sencoded = Array.isArray(sig.S) ? sig.S : sig.Sencoded;
  }
  
  cachedProperty(Signature, 'S', function S() {
    return this.eddsa.decodeInt(this.Sencoded());
  });
  
  cachedProperty(Signature, 'R', function R() {
    return this.eddsa.decodePoint(this.Rencoded());
  });
  
  cachedProperty(Signature, 'Rencoded', function Rencoded() {
    return this.eddsa.encodePoint(this.R());
  });
  
  cachedProperty(Signature, 'Sencoded', function Sencoded() {
    return this.eddsa.encodeInt(this.S());
  });
  
  Signature.prototype.toBytes = function toBytes() {
    return this.Rencoded().concat(this.Sencoded());
  };
  
  Signature.prototype.toHex = function toHex() {
    return utils.encode(this.toBytes(), 'hex').toUpperCase();
  };
  
  module.exports = Signature;
  
  },{"../../elliptic":109,"bn.js":53}],122:[function(require,module,exports){
  module.exports = {
    doubles: {
      step: 4,
      points: [
        [
          'e60fce93b59e9ec53011aabc21c23e97b2a31369b87a5ae9c44ee89e2a6dec0a',
          'f7e3507399e595929db99f34f57937101296891e44d23f0be1f32cce69616821'
        ],
        [
          '8282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508',
          '11f8a8098557dfe45e8256e830b60ace62d613ac2f7b17bed31b6eaff6e26caf'
        ],
        [
          '175e159f728b865a72f99cc6c6fc846de0b93833fd2222ed73fce5b551e5b739',
          'd3506e0d9e3c79eba4ef97a51ff71f5eacb5955add24345c6efa6ffee9fed695'
        ],
        [
          '363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640',
          '4e273adfc732221953b445397f3363145b9a89008199ecb62003c7f3bee9de9'
        ],
        [
          '8b4b5f165df3c2be8c6244b5b745638843e4a781a15bcd1b69f79a55dffdf80c',
          '4aad0a6f68d308b4b3fbd7813ab0da04f9e336546162ee56b3eff0c65fd4fd36'
        ],
        [
          '723cbaa6e5db996d6bf771c00bd548c7b700dbffa6c0e77bcb6115925232fcda',
          '96e867b5595cc498a921137488824d6e2660a0653779494801dc069d9eb39f5f'
        ],
        [
          'eebfa4d493bebf98ba5feec812c2d3b50947961237a919839a533eca0e7dd7fa',
          '5d9a8ca3970ef0f269ee7edaf178089d9ae4cdc3a711f712ddfd4fdae1de8999'
        ],
        [
          '100f44da696e71672791d0a09b7bde459f1215a29b3c03bfefd7835b39a48db0',
          'cdd9e13192a00b772ec8f3300c090666b7ff4a18ff5195ac0fbd5cd62bc65a09'
        ],
        [
          'e1031be262c7ed1b1dc9227a4a04c017a77f8d4464f3b3852c8acde6e534fd2d',
          '9d7061928940405e6bb6a4176597535af292dd419e1ced79a44f18f29456a00d'
        ],
        [
          'feea6cae46d55b530ac2839f143bd7ec5cf8b266a41d6af52d5e688d9094696d',
          'e57c6b6c97dce1bab06e4e12bf3ecd5c981c8957cc41442d3155debf18090088'
        ],
        [
          'da67a91d91049cdcb367be4be6ffca3cfeed657d808583de33fa978bc1ec6cb1',
          '9bacaa35481642bc41f463f7ec9780e5dec7adc508f740a17e9ea8e27a68be1d'
        ],
        [
          '53904faa0b334cdda6e000935ef22151ec08d0f7bb11069f57545ccc1a37b7c0',
          '5bc087d0bc80106d88c9eccac20d3c1c13999981e14434699dcb096b022771c8'
        ],
        [
          '8e7bcd0bd35983a7719cca7764ca906779b53a043a9b8bcaeff959f43ad86047',
          '10b7770b2a3da4b3940310420ca9514579e88e2e47fd68b3ea10047e8460372a'
        ],
        [
          '385eed34c1cdff21e6d0818689b81bde71a7f4f18397e6690a841e1599c43862',
          '283bebc3e8ea23f56701de19e9ebf4576b304eec2086dc8cc0458fe5542e5453'
        ],
        [
          '6f9d9b803ecf191637c73a4413dfa180fddf84a5947fbc9c606ed86c3fac3a7',
          '7c80c68e603059ba69b8e2a30e45c4d47ea4dd2f5c281002d86890603a842160'
        ],
        [
          '3322d401243c4e2582a2147c104d6ecbf774d163db0f5e5313b7e0e742d0e6bd',
          '56e70797e9664ef5bfb019bc4ddaf9b72805f63ea2873af624f3a2e96c28b2a0'
        ],
        [
          '85672c7d2de0b7da2bd1770d89665868741b3f9af7643397721d74d28134ab83',
          '7c481b9b5b43b2eb6374049bfa62c2e5e77f17fcc5298f44c8e3094f790313a6'
        ],
        [
          '948bf809b1988a46b06c9f1919413b10f9226c60f668832ffd959af60c82a0a',
          '53a562856dcb6646dc6b74c5d1c3418c6d4dff08c97cd2bed4cb7f88d8c8e589'
        ],
        [
          '6260ce7f461801c34f067ce0f02873a8f1b0e44dfc69752accecd819f38fd8e8',
          'bc2da82b6fa5b571a7f09049776a1ef7ecd292238051c198c1a84e95b2b4ae17'
        ],
        [
          'e5037de0afc1d8d43d8348414bbf4103043ec8f575bfdc432953cc8d2037fa2d',
          '4571534baa94d3b5f9f98d09fb990bddbd5f5b03ec481f10e0e5dc841d755bda'
        ],
        [
          'e06372b0f4a207adf5ea905e8f1771b4e7e8dbd1c6a6c5b725866a0ae4fce725',
          '7a908974bce18cfe12a27bb2ad5a488cd7484a7787104870b27034f94eee31dd'
        ],
        [
          '213c7a715cd5d45358d0bbf9dc0ce02204b10bdde2a3f58540ad6908d0559754',
          '4b6dad0b5ae462507013ad06245ba190bb4850f5f36a7eeddff2c27534b458f2'
        ],
        [
          '4e7c272a7af4b34e8dbb9352a5419a87e2838c70adc62cddf0cc3a3b08fbd53c',
          '17749c766c9d0b18e16fd09f6def681b530b9614bff7dd33e0b3941817dcaae6'
        ],
        [
          'fea74e3dbe778b1b10f238ad61686aa5c76e3db2be43057632427e2840fb27b6',
          '6e0568db9b0b13297cf674deccb6af93126b596b973f7b77701d3db7f23cb96f'
        ],
        [
          '76e64113f677cf0e10a2570d599968d31544e179b760432952c02a4417bdde39',
          'c90ddf8dee4e95cf577066d70681f0d35e2a33d2b56d2032b4b1752d1901ac01'
        ],
        [
          'c738c56b03b2abe1e8281baa743f8f9a8f7cc643df26cbee3ab150242bcbb891',
          '893fb578951ad2537f718f2eacbfbbbb82314eef7880cfe917e735d9699a84c3'
        ],
        [
          'd895626548b65b81e264c7637c972877d1d72e5f3a925014372e9f6588f6c14b',
          'febfaa38f2bc7eae728ec60818c340eb03428d632bb067e179363ed75d7d991f'
        ],
        [
          'b8da94032a957518eb0f6433571e8761ceffc73693e84edd49150a564f676e03',
          '2804dfa44805a1e4d7c99cc9762808b092cc584d95ff3b511488e4e74efdf6e7'
        ],
        [
          'e80fea14441fb33a7d8adab9475d7fab2019effb5156a792f1a11778e3c0df5d',
          'eed1de7f638e00771e89768ca3ca94472d155e80af322ea9fcb4291b6ac9ec78'
        ],
        [
          'a301697bdfcd704313ba48e51d567543f2a182031efd6915ddc07bbcc4e16070',
          '7370f91cfb67e4f5081809fa25d40f9b1735dbf7c0a11a130c0d1a041e177ea1'
        ],
        [
          '90ad85b389d6b936463f9d0512678de208cc330b11307fffab7ac63e3fb04ed4',
          'e507a3620a38261affdcbd9427222b839aefabe1582894d991d4d48cb6ef150'
        ],
        [
          '8f68b9d2f63b5f339239c1ad981f162ee88c5678723ea3351b7b444c9ec4c0da',
          '662a9f2dba063986de1d90c2b6be215dbbea2cfe95510bfdf23cbf79501fff82'
        ],
        [
          'e4f3fb0176af85d65ff99ff9198c36091f48e86503681e3e6686fd5053231e11',
          '1e63633ad0ef4f1c1661a6d0ea02b7286cc7e74ec951d1c9822c38576feb73bc'
        ],
        [
          '8c00fa9b18ebf331eb961537a45a4266c7034f2f0d4e1d0716fb6eae20eae29e',
          'efa47267fea521a1a9dc343a3736c974c2fadafa81e36c54e7d2a4c66702414b'
        ],
        [
          'e7a26ce69dd4829f3e10cec0a9e98ed3143d084f308b92c0997fddfc60cb3e41',
          '2a758e300fa7984b471b006a1aafbb18d0a6b2c0420e83e20e8a9421cf2cfd51'
        ],
        [
          'b6459e0ee3662ec8d23540c223bcbdc571cbcb967d79424f3cf29eb3de6b80ef',
          '67c876d06f3e06de1dadf16e5661db3c4b3ae6d48e35b2ff30bf0b61a71ba45'
        ],
        [
          'd68a80c8280bb840793234aa118f06231d6f1fc67e73c5a5deda0f5b496943e8',
          'db8ba9fff4b586d00c4b1f9177b0e28b5b0e7b8f7845295a294c84266b133120'
        ],
        [
          '324aed7df65c804252dc0270907a30b09612aeb973449cea4095980fc28d3d5d',
          '648a365774b61f2ff130c0c35aec1f4f19213b0c7e332843967224af96ab7c84'
        ],
        [
          '4df9c14919cde61f6d51dfdbe5fee5dceec4143ba8d1ca888e8bd373fd054c96',
          '35ec51092d8728050974c23a1d85d4b5d506cdc288490192ebac06cad10d5d'
        ],
        [
          '9c3919a84a474870faed8a9c1cc66021523489054d7f0308cbfc99c8ac1f98cd',
          'ddb84f0f4a4ddd57584f044bf260e641905326f76c64c8e6be7e5e03d4fc599d'
        ],
        [
          '6057170b1dd12fdf8de05f281d8e06bb91e1493a8b91d4cc5a21382120a959e5',
          '9a1af0b26a6a4807add9a2daf71df262465152bc3ee24c65e899be932385a2a8'
        ],
        [
          'a576df8e23a08411421439a4518da31880cef0fba7d4df12b1a6973eecb94266',
          '40a6bf20e76640b2c92b97afe58cd82c432e10a7f514d9f3ee8be11ae1b28ec8'
        ],
        [
          '7778a78c28dec3e30a05fe9629de8c38bb30d1f5cf9a3a208f763889be58ad71',
          '34626d9ab5a5b22ff7098e12f2ff580087b38411ff24ac563b513fc1fd9f43ac'
        ],
        [
          '928955ee637a84463729fd30e7afd2ed5f96274e5ad7e5cb09eda9c06d903ac',
          'c25621003d3f42a827b78a13093a95eeac3d26efa8a8d83fc5180e935bcd091f'
        ],
        [
          '85d0fef3ec6db109399064f3a0e3b2855645b4a907ad354527aae75163d82751',
          '1f03648413a38c0be29d496e582cf5663e8751e96877331582c237a24eb1f962'
        ],
        [
          'ff2b0dce97eece97c1c9b6041798b85dfdfb6d8882da20308f5404824526087e',
          '493d13fef524ba188af4c4dc54d07936c7b7ed6fb90e2ceb2c951e01f0c29907'
        ],
        [
          '827fbbe4b1e880ea9ed2b2e6301b212b57f1ee148cd6dd28780e5e2cf856e241',
          'c60f9c923c727b0b71bef2c67d1d12687ff7a63186903166d605b68baec293ec'
        ],
        [
          'eaa649f21f51bdbae7be4ae34ce6e5217a58fdce7f47f9aa7f3b58fa2120e2b3',
          'be3279ed5bbbb03ac69a80f89879aa5a01a6b965f13f7e59d47a5305ba5ad93d'
        ],
        [
          'e4a42d43c5cf169d9391df6decf42ee541b6d8f0c9a137401e23632dda34d24f',
          '4d9f92e716d1c73526fc99ccfb8ad34ce886eedfa8d8e4f13a7f7131deba9414'
        ],
        [
          '1ec80fef360cbdd954160fadab352b6b92b53576a88fea4947173b9d4300bf19',
          'aeefe93756b5340d2f3a4958a7abbf5e0146e77f6295a07b671cdc1cc107cefd'
        ],
        [
          '146a778c04670c2f91b00af4680dfa8bce3490717d58ba889ddb5928366642be',
          'b318e0ec3354028add669827f9d4b2870aaa971d2f7e5ed1d0b297483d83efd0'
        ],
        [
          'fa50c0f61d22e5f07e3acebb1aa07b128d0012209a28b9776d76a8793180eef9',
          '6b84c6922397eba9b72cd2872281a68a5e683293a57a213b38cd8d7d3f4f2811'
        ],
        [
          'da1d61d0ca721a11b1a5bf6b7d88e8421a288ab5d5bba5220e53d32b5f067ec2',
          '8157f55a7c99306c79c0766161c91e2966a73899d279b48a655fba0f1ad836f1'
        ],
        [
          'a8e282ff0c9706907215ff98e8fd416615311de0446f1e062a73b0610d064e13',
          '7f97355b8db81c09abfb7f3c5b2515888b679a3e50dd6bd6cef7c73111f4cc0c'
        ],
        [
          '174a53b9c9a285872d39e56e6913cab15d59b1fa512508c022f382de8319497c',
          'ccc9dc37abfc9c1657b4155f2c47f9e6646b3a1d8cb9854383da13ac079afa73'
        ],
        [
          '959396981943785c3d3e57edf5018cdbe039e730e4918b3d884fdff09475b7ba',
          '2e7e552888c331dd8ba0386a4b9cd6849c653f64c8709385e9b8abf87524f2fd'
        ],
        [
          'd2a63a50ae401e56d645a1153b109a8fcca0a43d561fba2dbb51340c9d82b151',
          'e82d86fb6443fcb7565aee58b2948220a70f750af484ca52d4142174dcf89405'
        ],
        [
          '64587e2335471eb890ee7896d7cfdc866bacbdbd3839317b3436f9b45617e073',
          'd99fcdd5bf6902e2ae96dd6447c299a185b90a39133aeab358299e5e9faf6589'
        ],
        [
          '8481bde0e4e4d885b3a546d3e549de042f0aa6cea250e7fd358d6c86dd45e458',
          '38ee7b8cba5404dd84a25bf39cecb2ca900a79c42b262e556d64b1b59779057e'
        ],
        [
          '13464a57a78102aa62b6979ae817f4637ffcfed3c4b1ce30bcd6303f6caf666b',
          '69be159004614580ef7e433453ccb0ca48f300a81d0942e13f495a907f6ecc27'
        ],
        [
          'bc4a9df5b713fe2e9aef430bcc1dc97a0cd9ccede2f28588cada3a0d2d83f366',
          'd3a81ca6e785c06383937adf4b798caa6e8a9fbfa547b16d758d666581f33c1'
        ],
        [
          '8c28a97bf8298bc0d23d8c749452a32e694b65e30a9472a3954ab30fe5324caa',
          '40a30463a3305193378fedf31f7cc0eb7ae784f0451cb9459e71dc73cbef9482'
        ],
        [
          '8ea9666139527a8c1dd94ce4f071fd23c8b350c5a4bb33748c4ba111faccae0',
          '620efabbc8ee2782e24e7c0cfb95c5d735b783be9cf0f8e955af34a30e62b945'
        ],
        [
          'dd3625faef5ba06074669716bbd3788d89bdde815959968092f76cc4eb9a9787',
          '7a188fa3520e30d461da2501045731ca941461982883395937f68d00c644a573'
        ],
        [
          'f710d79d9eb962297e4f6232b40e8f7feb2bc63814614d692c12de752408221e',
          'ea98e67232d3b3295d3b535532115ccac8612c721851617526ae47a9c77bfc82'
        ]
      ]
    },
    naf: {
      wnd: 7,
      points: [
        [
          'f9308a019258c31049344f85f89d5229b531c845836f99b08601f113bce036f9',
          '388f7b0f632de8140fe337e62a37f3566500a99934c2231b6cb9fd7584b8e672'
        ],
        [
          '2f8bde4d1a07209355b4a7250a5c5128e88b84bddc619ab7cba8d569b240efe4',
          'd8ac222636e5e3d6d4dba9dda6c9c426f788271bab0d6840dca87d3aa6ac62d6'
        ],
        [
          '5cbdf0646e5db4eaa398f365f2ea7a0e3d419b7e0330e39ce92bddedcac4f9bc',
          '6aebca40ba255960a3178d6d861a54dba813d0b813fde7b5a5082628087264da'
        ],
        [
          'acd484e2f0c7f65309ad178a9f559abde09796974c57e714c35f110dfc27ccbe',
          'cc338921b0a7d9fd64380971763b61e9add888a4375f8e0f05cc262ac64f9c37'
        ],
        [
          '774ae7f858a9411e5ef4246b70c65aac5649980be5c17891bbec17895da008cb',
          'd984a032eb6b5e190243dd56d7b7b365372db1e2dff9d6a8301d74c9c953c61b'
        ],
        [
          'f28773c2d975288bc7d1d205c3748651b075fbc6610e58cddeeddf8f19405aa8',
          'ab0902e8d880a89758212eb65cdaf473a1a06da521fa91f29b5cb52db03ed81'
        ],
        [
          'd7924d4f7d43ea965a465ae3095ff41131e5946f3c85f79e44adbcf8e27e080e',
          '581e2872a86c72a683842ec228cc6defea40af2bd896d3a5c504dc9ff6a26b58'
        ],
        [
          'defdea4cdb677750a420fee807eacf21eb9898ae79b9768766e4faa04a2d4a34',
          '4211ab0694635168e997b0ead2a93daeced1f4a04a95c0f6cfb199f69e56eb77'
        ],
        [
          '2b4ea0a797a443d293ef5cff444f4979f06acfebd7e86d277475656138385b6c',
          '85e89bc037945d93b343083b5a1c86131a01f60c50269763b570c854e5c09b7a'
        ],
        [
          '352bbf4a4cdd12564f93fa332ce333301d9ad40271f8107181340aef25be59d5',
          '321eb4075348f534d59c18259dda3e1f4a1b3b2e71b1039c67bd3d8bcf81998c'
        ],
        [
          '2fa2104d6b38d11b0230010559879124e42ab8dfeff5ff29dc9cdadd4ecacc3f',
          '2de1068295dd865b64569335bd5dd80181d70ecfc882648423ba76b532b7d67'
        ],
        [
          '9248279b09b4d68dab21a9b066edda83263c3d84e09572e269ca0cd7f5453714',
          '73016f7bf234aade5d1aa71bdea2b1ff3fc0de2a887912ffe54a32ce97cb3402'
        ],
        [
          'daed4f2be3a8bf278e70132fb0beb7522f570e144bf615c07e996d443dee8729',
          'a69dce4a7d6c98e8d4a1aca87ef8d7003f83c230f3afa726ab40e52290be1c55'
        ],
        [
          'c44d12c7065d812e8acf28d7cbb19f9011ecd9e9fdf281b0e6a3b5e87d22e7db',
          '2119a460ce326cdc76c45926c982fdac0e106e861edf61c5a039063f0e0e6482'
        ],
        [
          '6a245bf6dc698504c89a20cfded60853152b695336c28063b61c65cbd269e6b4',
          'e022cf42c2bd4a708b3f5126f16a24ad8b33ba48d0423b6efd5e6348100d8a82'
        ],
        [
          '1697ffa6fd9de627c077e3d2fe541084ce13300b0bec1146f95ae57f0d0bd6a5',
          'b9c398f186806f5d27561506e4557433a2cf15009e498ae7adee9d63d01b2396'
        ],
        [
          '605bdb019981718b986d0f07e834cb0d9deb8360ffb7f61df982345ef27a7479',
          '2972d2de4f8d20681a78d93ec96fe23c26bfae84fb14db43b01e1e9056b8c49'
        ],
        [
          '62d14dab4150bf497402fdc45a215e10dcb01c354959b10cfe31c7e9d87ff33d',
          '80fc06bd8cc5b01098088a1950eed0db01aa132967ab472235f5642483b25eaf'
        ],
        [
          '80c60ad0040f27dade5b4b06c408e56b2c50e9f56b9b8b425e555c2f86308b6f',
          '1c38303f1cc5c30f26e66bad7fe72f70a65eed4cbe7024eb1aa01f56430bd57a'
        ],
        [
          '7a9375ad6167ad54aa74c6348cc54d344cc5dc9487d847049d5eabb0fa03c8fb',
          'd0e3fa9eca8726909559e0d79269046bdc59ea10c70ce2b02d499ec224dc7f7'
        ],
        [
          'd528ecd9b696b54c907a9ed045447a79bb408ec39b68df504bb51f459bc3ffc9',
          'eecf41253136e5f99966f21881fd656ebc4345405c520dbc063465b521409933'
        ],
        [
          '49370a4b5f43412ea25f514e8ecdad05266115e4a7ecb1387231808f8b45963',
          '758f3f41afd6ed428b3081b0512fd62a54c3f3afbb5b6764b653052a12949c9a'
        ],
        [
          '77f230936ee88cbbd73df930d64702ef881d811e0e1498e2f1c13eb1fc345d74',
          '958ef42a7886b6400a08266e9ba1b37896c95330d97077cbbe8eb3c7671c60d6'
        ],
        [
          'f2dac991cc4ce4b9ea44887e5c7c0bce58c80074ab9d4dbaeb28531b7739f530',
          'e0dedc9b3b2f8dad4da1f32dec2531df9eb5fbeb0598e4fd1a117dba703a3c37'
        ],
        [
          '463b3d9f662621fb1b4be8fbbe2520125a216cdfc9dae3debcba4850c690d45b',
          '5ed430d78c296c3543114306dd8622d7c622e27c970a1de31cb377b01af7307e'
        ],
        [
          'f16f804244e46e2a09232d4aff3b59976b98fac14328a2d1a32496b49998f247',
          'cedabd9b82203f7e13d206fcdf4e33d92a6c53c26e5cce26d6579962c4e31df6'
        ],
        [
          'caf754272dc84563b0352b7a14311af55d245315ace27c65369e15f7151d41d1',
          'cb474660ef35f5f2a41b643fa5e460575f4fa9b7962232a5c32f908318a04476'
        ],
        [
          '2600ca4b282cb986f85d0f1709979d8b44a09c07cb86d7c124497bc86f082120',
          '4119b88753c15bd6a693b03fcddbb45d5ac6be74ab5f0ef44b0be9475a7e4b40'
        ],
        [
          '7635ca72d7e8432c338ec53cd12220bc01c48685e24f7dc8c602a7746998e435',
          '91b649609489d613d1d5e590f78e6d74ecfc061d57048bad9e76f302c5b9c61'
        ],
        [
          '754e3239f325570cdbbf4a87deee8a66b7f2b33479d468fbc1a50743bf56cc18',
          '673fb86e5bda30fb3cd0ed304ea49a023ee33d0197a695d0c5d98093c536683'
        ],
        [
          'e3e6bd1071a1e96aff57859c82d570f0330800661d1c952f9fe2694691d9b9e8',
          '59c9e0bba394e76f40c0aa58379a3cb6a5a2283993e90c4167002af4920e37f5'
        ],
        [
          '186b483d056a033826ae73d88f732985c4ccb1f32ba35f4b4cc47fdcf04aa6eb',
          '3b952d32c67cf77e2e17446e204180ab21fb8090895138b4a4a797f86e80888b'
        ],
        [
          'df9d70a6b9876ce544c98561f4be4f725442e6d2b737d9c91a8321724ce0963f',
          '55eb2dafd84d6ccd5f862b785dc39d4ab157222720ef9da217b8c45cf2ba2417'
        ],
        [
          '5edd5cc23c51e87a497ca815d5dce0f8ab52554f849ed8995de64c5f34ce7143',
          'efae9c8dbc14130661e8cec030c89ad0c13c66c0d17a2905cdc706ab7399a868'
        ],
        [
          '290798c2b6476830da12fe02287e9e777aa3fba1c355b17a722d362f84614fba',
          'e38da76dcd440621988d00bcf79af25d5b29c094db2a23146d003afd41943e7a'
        ],
        [
          'af3c423a95d9f5b3054754efa150ac39cd29552fe360257362dfdecef4053b45',
          'f98a3fd831eb2b749a93b0e6f35cfb40c8cd5aa667a15581bc2feded498fd9c6'
        ],
        [
          '766dbb24d134e745cccaa28c99bf274906bb66b26dcf98df8d2fed50d884249a',
          '744b1152eacbe5e38dcc887980da38b897584a65fa06cedd2c924f97cbac5996'
        ],
        [
          '59dbf46f8c94759ba21277c33784f41645f7b44f6c596a58ce92e666191abe3e',
          'c534ad44175fbc300f4ea6ce648309a042ce739a7919798cd85e216c4a307f6e'
        ],
        [
          'f13ada95103c4537305e691e74e9a4a8dd647e711a95e73cb62dc6018cfd87b8',
          'e13817b44ee14de663bf4bc808341f326949e21a6a75c2570778419bdaf5733d'
        ],
        [
          '7754b4fa0e8aced06d4167a2c59cca4cda1869c06ebadfb6488550015a88522c',
          '30e93e864e669d82224b967c3020b8fa8d1e4e350b6cbcc537a48b57841163a2'
        ],
        [
          '948dcadf5990e048aa3874d46abef9d701858f95de8041d2a6828c99e2262519',
          'e491a42537f6e597d5d28a3224b1bc25df9154efbd2ef1d2cbba2cae5347d57e'
        ],
        [
          '7962414450c76c1689c7b48f8202ec37fb224cf5ac0bfa1570328a8a3d7c77ab',
          '100b610ec4ffb4760d5c1fc133ef6f6b12507a051f04ac5760afa5b29db83437'
        ],
        [
          '3514087834964b54b15b160644d915485a16977225b8847bb0dd085137ec47ca',
          'ef0afbb2056205448e1652c48e8127fc6039e77c15c2378b7e7d15a0de293311'
        ],
        [
          'd3cc30ad6b483e4bc79ce2c9dd8bc54993e947eb8df787b442943d3f7b527eaf',
          '8b378a22d827278d89c5e9be8f9508ae3c2ad46290358630afb34db04eede0a4'
        ],
        [
          '1624d84780732860ce1c78fcbfefe08b2b29823db913f6493975ba0ff4847610',
          '68651cf9b6da903e0914448c6cd9d4ca896878f5282be4c8cc06e2a404078575'
        ],
        [
          '733ce80da955a8a26902c95633e62a985192474b5af207da6df7b4fd5fc61cd4',
          'f5435a2bd2badf7d485a4d8b8db9fcce3e1ef8e0201e4578c54673bc1dc5ea1d'
        ],
        [
          '15d9441254945064cf1a1c33bbd3b49f8966c5092171e699ef258dfab81c045c',
          'd56eb30b69463e7234f5137b73b84177434800bacebfc685fc37bbe9efe4070d'
        ],
        [
          'a1d0fcf2ec9de675b612136e5ce70d271c21417c9d2b8aaaac138599d0717940',
          'edd77f50bcb5a3cab2e90737309667f2641462a54070f3d519212d39c197a629'
        ],
        [
          'e22fbe15c0af8ccc5780c0735f84dbe9a790badee8245c06c7ca37331cb36980',
          'a855babad5cd60c88b430a69f53a1a7a38289154964799be43d06d77d31da06'
        ],
        [
          '311091dd9860e8e20ee13473c1155f5f69635e394704eaa74009452246cfa9b3',
          '66db656f87d1f04fffd1f04788c06830871ec5a64feee685bd80f0b1286d8374'
        ],
        [
          '34c1fd04d301be89b31c0442d3e6ac24883928b45a9340781867d4232ec2dbdf',
          '9414685e97b1b5954bd46f730174136d57f1ceeb487443dc5321857ba73abee'
        ],
        [
          'f219ea5d6b54701c1c14de5b557eb42a8d13f3abbcd08affcc2a5e6b049b8d63',
          '4cb95957e83d40b0f73af4544cccf6b1f4b08d3c07b27fb8d8c2962a400766d1'
        ],
        [
          'd7b8740f74a8fbaab1f683db8f45de26543a5490bca627087236912469a0b448',
          'fa77968128d9c92ee1010f337ad4717eff15db5ed3c049b3411e0315eaa4593b'
        ],
        [
          '32d31c222f8f6f0ef86f7c98d3a3335ead5bcd32abdd94289fe4d3091aa824bf',
          '5f3032f5892156e39ccd3d7915b9e1da2e6dac9e6f26e961118d14b8462e1661'
        ],
        [
          '7461f371914ab32671045a155d9831ea8793d77cd59592c4340f86cbc18347b5',
          '8ec0ba238b96bec0cbdddcae0aa442542eee1ff50c986ea6b39847b3cc092ff6'
        ],
        [
          'ee079adb1df1860074356a25aa38206a6d716b2c3e67453d287698bad7b2b2d6',
          '8dc2412aafe3be5c4c5f37e0ecc5f9f6a446989af04c4e25ebaac479ec1c8c1e'
        ],
        [
          '16ec93e447ec83f0467b18302ee620f7e65de331874c9dc72bfd8616ba9da6b5',
          '5e4631150e62fb40d0e8c2a7ca5804a39d58186a50e497139626778e25b0674d'
        ],
        [
          'eaa5f980c245f6f038978290afa70b6bd8855897f98b6aa485b96065d537bd99',
          'f65f5d3e292c2e0819a528391c994624d784869d7e6ea67fb18041024edc07dc'
        ],
        [
          '78c9407544ac132692ee1910a02439958ae04877151342ea96c4b6b35a49f51',
          'f3e0319169eb9b85d5404795539a5e68fa1fbd583c064d2462b675f194a3ddb4'
        ],
        [
          '494f4be219a1a77016dcd838431aea0001cdc8ae7a6fc688726578d9702857a5',
          '42242a969283a5f339ba7f075e36ba2af925ce30d767ed6e55f4b031880d562c'
        ],
        [
          'a598a8030da6d86c6bc7f2f5144ea549d28211ea58faa70ebf4c1e665c1fe9b5',
          '204b5d6f84822c307e4b4a7140737aec23fc63b65b35f86a10026dbd2d864e6b'
        ],
        [
          'c41916365abb2b5d09192f5f2dbeafec208f020f12570a184dbadc3e58595997',
          '4f14351d0087efa49d245b328984989d5caf9450f34bfc0ed16e96b58fa9913'
        ],
        [
          '841d6063a586fa475a724604da03bc5b92a2e0d2e0a36acfe4c73a5514742881',
          '73867f59c0659e81904f9a1c7543698e62562d6744c169ce7a36de01a8d6154'
        ],
        [
          '5e95bb399a6971d376026947f89bde2f282b33810928be4ded112ac4d70e20d5',
          '39f23f366809085beebfc71181313775a99c9aed7d8ba38b161384c746012865'
        ],
        [
          '36e4641a53948fd476c39f8a99fd974e5ec07564b5315d8bf99471bca0ef2f66',
          'd2424b1b1abe4eb8164227b085c9aa9456ea13493fd563e06fd51cf5694c78fc'
        ],
        [
          '336581ea7bfbbb290c191a2f507a41cf5643842170e914faeab27c2c579f726',
          'ead12168595fe1be99252129b6e56b3391f7ab1410cd1e0ef3dcdcabd2fda224'
        ],
        [
          '8ab89816dadfd6b6a1f2634fcf00ec8403781025ed6890c4849742706bd43ede',
          '6fdcef09f2f6d0a044e654aef624136f503d459c3e89845858a47a9129cdd24e'
        ],
        [
          '1e33f1a746c9c5778133344d9299fcaa20b0938e8acff2544bb40284b8c5fb94',
          '60660257dd11b3aa9c8ed618d24edff2306d320f1d03010e33a7d2057f3b3b6'
        ],
        [
          '85b7c1dcb3cec1b7ee7f30ded79dd20a0ed1f4cc18cbcfcfa410361fd8f08f31',
          '3d98a9cdd026dd43f39048f25a8847f4fcafad1895d7a633c6fed3c35e999511'
        ],
        [
          '29df9fbd8d9e46509275f4b125d6d45d7fbe9a3b878a7af872a2800661ac5f51',
          'b4c4fe99c775a606e2d8862179139ffda61dc861c019e55cd2876eb2a27d84b'
        ],
        [
          'a0b1cae06b0a847a3fea6e671aaf8adfdfe58ca2f768105c8082b2e449fce252',
          'ae434102edde0958ec4b19d917a6a28e6b72da1834aff0e650f049503a296cf2'
        ],
        [
          '4e8ceafb9b3e9a136dc7ff67e840295b499dfb3b2133e4ba113f2e4c0e121e5',
          'cf2174118c8b6d7a4b48f6d534ce5c79422c086a63460502b827ce62a326683c'
        ],
        [
          'd24a44e047e19b6f5afb81c7ca2f69080a5076689a010919f42725c2b789a33b',
          '6fb8d5591b466f8fc63db50f1c0f1c69013f996887b8244d2cdec417afea8fa3'
        ],
        [
          'ea01606a7a6c9cdd249fdfcfacb99584001edd28abbab77b5104e98e8e3b35d4',
          '322af4908c7312b0cfbfe369f7a7b3cdb7d4494bc2823700cfd652188a3ea98d'
        ],
        [
          'af8addbf2b661c8a6c6328655eb96651252007d8c5ea31be4ad196de8ce2131f',
          '6749e67c029b85f52a034eafd096836b2520818680e26ac8f3dfbcdb71749700'
        ],
        [
          'e3ae1974566ca06cc516d47e0fb165a674a3dabcfca15e722f0e3450f45889',
          '2aeabe7e4531510116217f07bf4d07300de97e4874f81f533420a72eeb0bd6a4'
        ],
        [
          '591ee355313d99721cf6993ffed1e3e301993ff3ed258802075ea8ced397e246',
          'b0ea558a113c30bea60fc4775460c7901ff0b053d25ca2bdeee98f1a4be5d196'
        ],
        [
          '11396d55fda54c49f19aa97318d8da61fa8584e47b084945077cf03255b52984',
          '998c74a8cd45ac01289d5833a7beb4744ff536b01b257be4c5767bea93ea57a4'
        ],
        [
          '3c5d2a1ba39c5a1790000738c9e0c40b8dcdfd5468754b6405540157e017aa7a',
          'b2284279995a34e2f9d4de7396fc18b80f9b8b9fdd270f6661f79ca4c81bd257'
        ],
        [
          'cc8704b8a60a0defa3a99a7299f2e9c3fbc395afb04ac078425ef8a1793cc030',
          'bdd46039feed17881d1e0862db347f8cf395b74fc4bcdc4e940b74e3ac1f1b13'
        ],
        [
          'c533e4f7ea8555aacd9777ac5cad29b97dd4defccc53ee7ea204119b2889b197',
          '6f0a256bc5efdf429a2fb6242f1a43a2d9b925bb4a4b3a26bb8e0f45eb596096'
        ],
        [
          'c14f8f2ccb27d6f109f6d08d03cc96a69ba8c34eec07bbcf566d48e33da6593',
          'c359d6923bb398f7fd4473e16fe1c28475b740dd098075e6c0e8649113dc3a38'
        ],
        [
          'a6cbc3046bc6a450bac24789fa17115a4c9739ed75f8f21ce441f72e0b90e6ef',
          '21ae7f4680e889bb130619e2c0f95a360ceb573c70603139862afd617fa9b9f'
        ],
        [
          '347d6d9a02c48927ebfb86c1359b1caf130a3c0267d11ce6344b39f99d43cc38',
          '60ea7f61a353524d1c987f6ecec92f086d565ab687870cb12689ff1e31c74448'
        ],
        [
          'da6545d2181db8d983f7dcb375ef5866d47c67b1bf31c8cf855ef7437b72656a',
          '49b96715ab6878a79e78f07ce5680c5d6673051b4935bd897fea824b77dc208a'
        ],
        [
          'c40747cc9d012cb1a13b8148309c6de7ec25d6945d657146b9d5994b8feb1111',
          '5ca560753be2a12fc6de6caf2cb489565db936156b9514e1bb5e83037e0fa2d4'
        ],
        [
          '4e42c8ec82c99798ccf3a610be870e78338c7f713348bd34c8203ef4037f3502',
          '7571d74ee5e0fb92a7a8b33a07783341a5492144cc54bcc40a94473693606437'
        ],
        [
          '3775ab7089bc6af823aba2e1af70b236d251cadb0c86743287522a1b3b0dedea',
          'be52d107bcfa09d8bcb9736a828cfa7fac8db17bf7a76a2c42ad961409018cf7'
        ],
        [
          'cee31cbf7e34ec379d94fb814d3d775ad954595d1314ba8846959e3e82f74e26',
          '8fd64a14c06b589c26b947ae2bcf6bfa0149ef0be14ed4d80f448a01c43b1c6d'
        ],
        [
          'b4f9eaea09b6917619f6ea6a4eb5464efddb58fd45b1ebefcdc1a01d08b47986',
          '39e5c9925b5a54b07433a4f18c61726f8bb131c012ca542eb24a8ac07200682a'
        ],
        [
          'd4263dfc3d2df923a0179a48966d30ce84e2515afc3dccc1b77907792ebcc60e',
          '62dfaf07a0f78feb30e30d6295853ce189e127760ad6cf7fae164e122a208d54'
        ],
        [
          '48457524820fa65a4f8d35eb6930857c0032acc0a4a2de422233eeda897612c4',
          '25a748ab367979d98733c38a1fa1c2e7dc6cc07db2d60a9ae7a76aaa49bd0f77'
        ],
        [
          'dfeeef1881101f2cb11644f3a2afdfc2045e19919152923f367a1767c11cceda',
          'ecfb7056cf1de042f9420bab396793c0c390bde74b4bbdff16a83ae09a9a7517'
        ],
        [
          '6d7ef6b17543f8373c573f44e1f389835d89bcbc6062ced36c82df83b8fae859',
          'cd450ec335438986dfefa10c57fea9bcc521a0959b2d80bbf74b190dca712d10'
        ],
        [
          'e75605d59102a5a2684500d3b991f2e3f3c88b93225547035af25af66e04541f',
          'f5c54754a8f71ee540b9b48728473e314f729ac5308b06938360990e2bfad125'
        ],
        [
          'eb98660f4c4dfaa06a2be453d5020bc99a0c2e60abe388457dd43fefb1ed620c',
          '6cb9a8876d9cb8520609af3add26cd20a0a7cd8a9411131ce85f44100099223e'
        ],
        [
          '13e87b027d8514d35939f2e6892b19922154596941888336dc3563e3b8dba942',
          'fef5a3c68059a6dec5d624114bf1e91aac2b9da568d6abeb2570d55646b8adf1'
        ],
        [
          'ee163026e9fd6fe017c38f06a5be6fc125424b371ce2708e7bf4491691e5764a',
          '1acb250f255dd61c43d94ccc670d0f58f49ae3fa15b96623e5430da0ad6c62b2'
        ],
        [
          'b268f5ef9ad51e4d78de3a750c2dc89b1e626d43505867999932e5db33af3d80',
          '5f310d4b3c99b9ebb19f77d41c1dee018cf0d34fd4191614003e945a1216e423'
        ],
        [
          'ff07f3118a9df035e9fad85eb6c7bfe42b02f01ca99ceea3bf7ffdba93c4750d',
          '438136d603e858a3a5c440c38eccbaddc1d2942114e2eddd4740d098ced1f0d8'
        ],
        [
          '8d8b9855c7c052a34146fd20ffb658bea4b9f69e0d825ebec16e8c3ce2b526a1',
          'cdb559eedc2d79f926baf44fb84ea4d44bcf50fee51d7ceb30e2e7f463036758'
        ],
        [
          '52db0b5384dfbf05bfa9d472d7ae26dfe4b851ceca91b1eba54263180da32b63',
          'c3b997d050ee5d423ebaf66a6db9f57b3180c902875679de924b69d84a7b375'
        ],
        [
          'e62f9490d3d51da6395efd24e80919cc7d0f29c3f3fa48c6fff543becbd43352',
          '6d89ad7ba4876b0b22c2ca280c682862f342c8591f1daf5170e07bfd9ccafa7d'
        ],
        [
          '7f30ea2476b399b4957509c88f77d0191afa2ff5cb7b14fd6d8e7d65aaab1193',
          'ca5ef7d4b231c94c3b15389a5f6311e9daff7bb67b103e9880ef4bff637acaec'
        ],
        [
          '5098ff1e1d9f14fb46a210fada6c903fef0fb7b4a1dd1d9ac60a0361800b7a00',
          '9731141d81fc8f8084d37c6e7542006b3ee1b40d60dfe5362a5b132fd17ddc0'
        ],
        [
          '32b78c7de9ee512a72895be6b9cbefa6e2f3c4ccce445c96b9f2c81e2778ad58',
          'ee1849f513df71e32efc3896ee28260c73bb80547ae2275ba497237794c8753c'
        ],
        [
          'e2cb74fddc8e9fbcd076eef2a7c72b0ce37d50f08269dfc074b581550547a4f7',
          'd3aa2ed71c9dd2247a62df062736eb0baddea9e36122d2be8641abcb005cc4a4'
        ],
        [
          '8438447566d4d7bedadc299496ab357426009a35f235cb141be0d99cd10ae3a8',
          'c4e1020916980a4da5d01ac5e6ad330734ef0d7906631c4f2390426b2edd791f'
        ],
        [
          '4162d488b89402039b584c6fc6c308870587d9c46f660b878ab65c82c711d67e',
          '67163e903236289f776f22c25fb8a3afc1732f2b84b4e95dbda47ae5a0852649'
        ],
        [
          '3fad3fa84caf0f34f0f89bfd2dcf54fc175d767aec3e50684f3ba4a4bf5f683d',
          'cd1bc7cb6cc407bb2f0ca647c718a730cf71872e7d0d2a53fa20efcdfe61826'
        ],
        [
          '674f2600a3007a00568c1a7ce05d0816c1fb84bf1370798f1c69532faeb1a86b',
          '299d21f9413f33b3edf43b257004580b70db57da0b182259e09eecc69e0d38a5'
        ],
        [
          'd32f4da54ade74abb81b815ad1fb3b263d82d6c692714bcff87d29bd5ee9f08f',
          'f9429e738b8e53b968e99016c059707782e14f4535359d582fc416910b3eea87'
        ],
        [
          '30e4e670435385556e593657135845d36fbb6931f72b08cb1ed954f1e3ce3ff6',
          '462f9bce619898638499350113bbc9b10a878d35da70740dc695a559eb88db7b'
        ],
        [
          'be2062003c51cc3004682904330e4dee7f3dcd10b01e580bf1971b04d4cad297',
          '62188bc49d61e5428573d48a74e1c655b1c61090905682a0d5558ed72dccb9bc'
        ],
        [
          '93144423ace3451ed29e0fb9ac2af211cb6e84a601df5993c419859fff5df04a',
          '7c10dfb164c3425f5c71a3f9d7992038f1065224f72bb9d1d902a6d13037b47c'
        ],
        [
          'b015f8044f5fcbdcf21ca26d6c34fb8197829205c7b7d2a7cb66418c157b112c',
          'ab8c1e086d04e813744a655b2df8d5f83b3cdc6faa3088c1d3aea1454e3a1d5f'
        ],
        [
          'd5e9e1da649d97d89e4868117a465a3a4f8a18de57a140d36b3f2af341a21b52',
          '4cb04437f391ed73111a13cc1d4dd0db1693465c2240480d8955e8592f27447a'
        ],
        [
          'd3ae41047dd7ca065dbf8ed77b992439983005cd72e16d6f996a5316d36966bb',
          'bd1aeb21ad22ebb22a10f0303417c6d964f8cdd7df0aca614b10dc14d125ac46'
        ],
        [
          '463e2763d885f958fc66cdd22800f0a487197d0a82e377b49f80af87c897b065',
          'bfefacdb0e5d0fd7df3a311a94de062b26b80c61fbc97508b79992671ef7ca7f'
        ],
        [
          '7985fdfd127c0567c6f53ec1bb63ec3158e597c40bfe747c83cddfc910641917',
          '603c12daf3d9862ef2b25fe1de289aed24ed291e0ec6708703a5bd567f32ed03'
        ],
        [
          '74a1ad6b5f76e39db2dd249410eac7f99e74c59cb83d2d0ed5ff1543da7703e9',
          'cc6157ef18c9c63cd6193d83631bbea0093e0968942e8c33d5737fd790e0db08'
        ],
        [
          '30682a50703375f602d416664ba19b7fc9bab42c72747463a71d0896b22f6da3',
          '553e04f6b018b4fa6c8f39e7f311d3176290d0e0f19ca73f17714d9977a22ff8'
        ],
        [
          '9e2158f0d7c0d5f26c3791efefa79597654e7a2b2464f52b1ee6c1347769ef57',
          '712fcdd1b9053f09003a3481fa7762e9ffd7c8ef35a38509e2fbf2629008373'
        ],
        [
          '176e26989a43c9cfeba4029c202538c28172e566e3c4fce7322857f3be327d66',
          'ed8cc9d04b29eb877d270b4878dc43c19aefd31f4eee09ee7b47834c1fa4b1c3'
        ],
        [
          '75d46efea3771e6e68abb89a13ad747ecf1892393dfc4f1b7004788c50374da8',
          '9852390a99507679fd0b86fd2b39a868d7efc22151346e1a3ca4726586a6bed8'
        ],
        [
          '809a20c67d64900ffb698c4c825f6d5f2310fb0451c869345b7319f645605721',
          '9e994980d9917e22b76b061927fa04143d096ccc54963e6a5ebfa5f3f8e286c1'
        ],
        [
          '1b38903a43f7f114ed4500b4eac7083fdefece1cf29c63528d563446f972c180',
          '4036edc931a60ae889353f77fd53de4a2708b26b6f5da72ad3394119daf408f9'
        ]
      ]
    }
  };
  
  },{}],123:[function(require,module,exports){
  'use strict';
  
  var utils = exports;
  var BN = require('bn.js');
  var minAssert = require('minimalistic-assert');
  var minUtils = require('minimalistic-crypto-utils');
  
  utils.assert = minAssert;
  utils.toArray = minUtils.toArray;
  utils.zero2 = minUtils.zero2;
  utils.toHex = minUtils.toHex;
  utils.encode = minUtils.encode;
  
  // Represent num in a w-NAF form
  function getNAF(num, w) {
    var naf = [];
    var ws = 1 << (w + 1);
    var k = num.clone();
    while (k.cmpn(1) >= 0) {
      var z;
      if (k.isOdd()) {
        var mod = k.andln(ws - 1);
        if (mod > (ws >> 1) - 1)
          z = (ws >> 1) - mod;
        else
          z = mod;
        k.isubn(z);
      } else {
        z = 0;
      }
      naf.push(z);
  
      // Optimization, shift by word if possible
      var shift = (k.cmpn(0) !== 0 && k.andln(ws - 1) === 0) ? (w + 1) : 1;
      for (var i = 1; i < shift; i++)
        naf.push(0);
      k.iushrn(shift);
    }
  
    return naf;
  }
  utils.getNAF = getNAF;
  
  // Represent k1, k2 in a Joint Sparse Form
  function getJSF(k1, k2) {
    var jsf = [
      [],
      []
    ];
  
    k1 = k1.clone();
    k2 = k2.clone();
    var d1 = 0;
    var d2 = 0;
    while (k1.cmpn(-d1) > 0 || k2.cmpn(-d2) > 0) {
  
      // First phase
      var m14 = (k1.andln(3) + d1) & 3;
      var m24 = (k2.andln(3) + d2) & 3;
      if (m14 === 3)
        m14 = -1;
      if (m24 === 3)
        m24 = -1;
      var u1;
      if ((m14 & 1) === 0) {
        u1 = 0;
      } else {
        var m8 = (k1.andln(7) + d1) & 7;
        if ((m8 === 3 || m8 === 5) && m24 === 2)
          u1 = -m14;
        else
          u1 = m14;
      }
      jsf[0].push(u1);
  
      var u2;
      if ((m24 & 1) === 0) {
        u2 = 0;
      } else {
        var m8 = (k2.andln(7) + d2) & 7;
        if ((m8 === 3 || m8 === 5) && m14 === 2)
          u2 = -m24;
        else
          u2 = m24;
      }
      jsf[1].push(u2);
  
      // Second phase
      if (2 * d1 === u1 + 1)
        d1 = 1 - d1;
      if (2 * d2 === u2 + 1)
        d2 = 1 - d2;
      k1.iushrn(1);
      k2.iushrn(1);
    }
  
    return jsf;
  }
  utils.getJSF = getJSF;
  
  function cachedProperty(obj, name, computer) {
    var key = '_' + name;
    obj.prototype[name] = function cachedProperty() {
      return this[key] !== undefined ? this[key] :
             this[key] = computer.call(this);
    };
  }
  utils.cachedProperty = cachedProperty;
  
  function parseBytes(bytes) {
    return typeof bytes === 'string' ? utils.toArray(bytes, 'hex') :
                                       bytes;
  }
  utils.parseBytes = parseBytes;
  
  function intFromLE(bytes) {
    return new BN(bytes, 'hex', 'le');
  }
  utils.intFromLE = intFromLE;
  
  
  },{"bn.js":53,"minimalistic-assert":234,"minimalistic-crypto-utils":235}],124:[function(require,module,exports){
  module.exports={
    "_from": "elliptic@^6.0.0",
    "_id": "elliptic@6.4.0",
    "_inBundle": false,
    "_integrity": "sha1-ysmvh2LIWDYYcAPI3+GT5eLq5d8=",
    "_location": "/elliptic",
    "_phantomChildren": {},
    "_requested": {
      "type": "range",
      "registry": true,
      "raw": "elliptic@^6.0.0",
      "name": "elliptic",
      "escapedName": "elliptic",
      "rawSpec": "^6.0.0",
      "saveSpec": null,
      "fetchSpec": "^6.0.0"
    },
    "_requiredBy": [
      "/browserify-sign",
      "/create-ecdh"
    ],
    "_resolved": "https://registry.npmjs.org/elliptic/-/elliptic-6.4.0.tgz",
    "_shasum": "cac9af8762c85836187003c8dfe193e5e2eae5df",
    "_spec": "elliptic@^6.0.0",
    "_where": "/Users/alexvlasov/Blockchain/web3swift_jsproxy/node_modules/browserify-sign",
    "author": {
      "name": "Fedor Indutny",
      "email": "fedor@indutny.com"
    },
    "bugs": {
      "url": "https://github.com/indutny/elliptic/issues"
    },
    "bundleDependencies": false,
    "dependencies": {
      "bn.js": "^4.4.0",
      "brorand": "^1.0.1",
      "hash.js": "^1.0.0",
      "hmac-drbg": "^1.0.0",
      "inherits": "^2.0.1",
      "minimalistic-assert": "^1.0.0",
      "minimalistic-crypto-utils": "^1.0.0"
    },
    "deprecated": false,
    "description": "EC cryptography",
    "devDependencies": {
      "brfs": "^1.4.3",
      "coveralls": "^2.11.3",
      "grunt": "^0.4.5",
      "grunt-browserify": "^5.0.0",
      "grunt-cli": "^1.2.0",
      "grunt-contrib-connect": "^1.0.0",
      "grunt-contrib-copy": "^1.0.0",
      "grunt-contrib-uglify": "^1.0.1",
      "grunt-mocha-istanbul": "^3.0.1",
      "grunt-saucelabs": "^8.6.2",
      "istanbul": "^0.4.2",
      "jscs": "^2.9.0",
      "jshint": "^2.6.0",
      "mocha": "^2.1.0"
    },
    "files": [
      "lib"
    ],
    "homepage": "https://github.com/indutny/elliptic",
    "keywords": [
      "EC",
      "Elliptic",
      "curve",
      "Cryptography"
    ],
    "license": "MIT",
    "main": "lib/elliptic.js",
    "name": "elliptic",
    "repository": {
      "type": "git",
      "url": "git+ssh://git@github.com/indutny/elliptic.git"
    },
    "scripts": {
      "jscs": "jscs benchmarks/*.js lib/*.js lib/**/*.js lib/**/**/*.js test/index.js",
      "jshint": "jscs benchmarks/*.js lib/*.js lib/**/*.js lib/**/**/*.js test/index.js",
      "lint": "npm run jscs && npm run jshint",
      "test": "npm run lint && npm run unit",
      "unit": "istanbul test _mocha --reporter=spec test/index.js",
      "version": "grunt dist && git add dist/"
    },
    "version": "6.4.0"
  }
  
  },{}],125:[function(require,module,exports){
  'use strict'
  
  const ethjsUtil = require('ethjs-util')
  
  module.exports = {
    incrementHexNumber,
    formatHex,
  }
  
  function incrementHexNumber(hexNum) {
    return formatHex(ethjsUtil.intToHex((parseInt(hexNum, 16) + 1)))
  }
  
  function formatHex (hexNum) {
    let stripped = ethjsUtil.stripHexPrefix(hexNum)
    while (stripped[0] === '0') {
      stripped = stripped.substr(1)
    }
    return `0x${stripped}`
  }
  
  },{"ethjs-util":155}],126:[function(require,module,exports){
  // const EthQuery = require('ethjs-query')
  const EthQuery = require('eth-query')
  const EventEmitter = require('events')
  const pify = require('pify')
  const hexUtils = require('./hexUtils')
  const incrementHexNumber = hexUtils.incrementHexNumber
  const sec = 1000
  const min = 60 * sec
  
  class RpcBlockTracker extends EventEmitter {
  
    constructor(opts = {}) {
      super()
      if (!opts.provider) throw new Error('RpcBlockTracker - no provider specified.')
      this._provider = opts.provider
      this._query = new EthQuery(opts.provider)
      // config
      this._pollingInterval = opts.pollingInterval || 4 * sec
      this._syncingTimeout = opts.syncingTimeout || 1 * min
      // state
      this._trackingBlock = null
      this._trackingBlockTimestamp = null
      this._currentBlock = null
      this._isRunning = false
      // bind methods for cleaner syntax later
      this._performSync = this._performSync.bind(this)
      this._handleNewBlockNotification = this._handleNewBlockNotification.bind(this)
    }
  
    getTrackingBlock () {
      return this._trackingBlock
    }
  
    getCurrentBlock () {
      return this._currentBlock
    }
  
    async awaitCurrentBlock () {
      // return if available
      if (this._currentBlock) return this._currentBlock
      // wait for "sync" event
      await new Promise(resolve => this.once('latest', resolve))
      // return newly set current block
      return this._currentBlock
    }
  
    async start (opts = {}) {
      // abort if already started
      if (this._isRunning) return
      this._isRunning = true
      // if this._currentBlock
      if (opts.fromBlock) {
        // use specified start point
        await this._setTrackingBlock(await this._fetchBlockByNumber(opts.fromBlock))
      } else {
        // or query for latest
        await this._setTrackingBlock(await this._fetchLatestBlock())
      }
      if (this._provider.on) {
        await this._initSubscription()
      } else {
        this._performSync()
          .catch((err) => {
            if (err) console.error(err)
          })
      }
    }
  
    async stop () {
      this._isRunning = false
      if (this._provider.on) {
        await this._removeSubscription()
      }
    }
  
    //
    // private
    //
  
    async _setTrackingBlock (newBlock) {
      if (this._trackingBlock && (this._trackingBlock.hash === newBlock.hash)) return
      // check for large timestamp lapse
      const previous = this._trackingBlockTimestamp
      const now = Date.now()
      // check for desynchronization (computer sleep or no internet)
      if (previous && (now - previous) > this._syncingTimeout) {
        this._trackingBlockTimestamp = null
        await this._warpToLatest()
      } else {
        this._trackingBlock = newBlock
        this._trackingBlockTimestamp = now
        this.emit('block', newBlock)
      }
    }
  
    async _setCurrentBlock (newBlock) {
      if (this._currentBlock && (this._currentBlock.hash === newBlock.hash)) return
      const oldBlock = this._currentBlock
      this._currentBlock = newBlock
      this.emit('latest', newBlock)
      this.emit('sync', { newBlock, oldBlock })
    }
  
    async _warpToLatest() {
      // set latest as tracking block
      await this._setTrackingBlock(await this._fetchLatestBlock())
    }
  
    async _pollForNextBlock () {
      setTimeout(() => this._performSync(), this._pollingInterval)
    }
  
    async _performSync () {
      if (!this._isRunning) return
      const trackingBlock = this.getTrackingBlock()
      if (!trackingBlock) throw new Error('RpcBlockTracker - tracking block is missing')
      const nextNumber = incrementHexNumber(trackingBlock.number)
      try {
  
        const newBlock = await this._fetchBlockByNumber(nextNumber)
        if (newBlock) {
          // set as new tracking block
          await this._setTrackingBlock(newBlock)
          // ask for next block
          this._performSync()
        } else {
          // set tracking block as current block
          await this._setCurrentBlock(trackingBlock)
          // setup poll for next block
          this._pollForNextBlock()
        }
  
      } catch (err) {
  
        // hotfix for https://github.com/ethereumjs/testrpc/issues/290
        if (err.message.includes('index out of range') ||
            err.message.includes("Couldn't find block by reference")) {
          // set tracking block as current block
          await this._setCurrentBlock(trackingBlock)
          // setup poll for next block
          this._pollForNextBlock()
        } else {
          console.error(err)
          this._pollForNextBlock()
        }
  
      }
    }
  
    async _handleNewBlockNotification(err, notification) {
      if (notification.id != this._subscriptionId)
        return // this notification isn't for us
  
      if (err) {
        this.emit('error', err)
        await this._removeSubscription()
      }
  
      await this._setTrackingBlock(await this._fetchBlockByNumber(notification.result.number))
    }
  
    async _initSubscription() {
      this._provider.on('data', this._handleNewBlockNotification)
  
      let result = await pify(this._provider.sendAsync || this._provider.send)({
        jsonrpc: '2.0',
        id: new Date().getTime(),
        method: 'eth_subscribe',
        params: [
          'newHeads'
        ],
      })
  
      this._subscriptionId = result.result
    }
  
    async _removeSubscription() {
      if (!this._subscriptionId) throw new Error("Not subscribed.")
  
      this._provider.removeListener('data', this._handleNewBlockNotification)
  
      await pify(this._provider.sendAsync || this._provider.send)({
        jsonrpc: '2.0',
        id: new Date().getTime(),
        method: 'eth_unsubscribe',
        params: [
          this._subscriptionId
        ],
      })
  
      delete this._subscriptionId
    }
  
    _fetchLatestBlock () {
      return pify(this._query.getBlockByNumber).call(this._query, 'latest', true)
    }
  
    _fetchBlockByNumber (hexNumber) {
      const cleanHex = hexUtils.formatHex(hexNumber)
      return pify(this._query.getBlockByNumber).call(this._query, cleanHex, true)
    }
  
  }
  
  module.exports = RpcBlockTracker
  
   // ââ difficulty: 0x2892ddca
   // ââ extraData: 0xd983010507846765746887676f312e372e348777696e646f7773
   // ââ gasLimit: 0x47e7c4
   // ââ gasUsed: 0x6384
   // ââ hash: 0xf60903687b1559b9c80f2d935b4c4f468ad95c3076928c432ec34f2ef3d4eec9
   // ââ logsBloom: 0x
   // ââ miner: 0x01711853335f857442ef6f349b2467c531731318
   // ââ mixHash: 0xf0d9bec999600eec92e8e4da8fc1182e357468c9ed2f849aa17e0e900412b352
   // ââ nonce: 0xd556d5a5504198e4
   // ââ number: 0x72ac8
   // ââ parentHash: 0xf5239c3ce1085194521435a5052494c02bbb1002b019684dcf368490ea6208e5
   // ââ receiptsRoot: 0x78c6f8236094b392bcc43b47b0dc1ce93ecd2875bfb5e4e4c3431e5af698ff99
   // ââ sha3Uncles: 0x1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347
   // ââ size: 0x2ad
   // ââ stateRoot: 0x0554f145c481df2fa02ecd2da17071672740c3aa948c896f1465e6772f741ac6
   // ââ timestamp: 0x58955844
   // ââ totalDifficulty: 0x751d0dfa03c1
   // ââ transactions
   // â  ââ 0
   // â     ââ blockHash: 0xf60903687b1559b9c80f2d935b4c4f468ad95c3076928c432ec34f2ef3d4eec9
   // â     ââ blockNumber: 0x72ac8
   // â     ââ from: 0x201354729f8d0f8b64e9a0c353c672c6a66b3857
   // â     ââ gas: 0x15f90
   // â     ââ gasPrice: 0x4a817c800
   // â     ââ hash: 0xd5a15d7c2449150db4f74f42a6ca0702150a24c46c5b406a7e1b3e44908ef44d
   // â     ââ input: 0xe1fa8e849bc10d87fb03c6b0603b05a3e29043c7e0b7c927119576a4bec457e96c7d7cde
   // â     ââ nonce: 0x323e
   // â     ââ to: 0xd10e3be2bc8f959bc8c41cf65f60de721cf89adf
   // â     ââ transactionIndex: 0x0
   // â     ââ value: 0x0
   // â     ââ v: 0x29
   // â     ââ r: 0xf35f8ab241e6bb3ccaffd21b268dbfc7fcb5df1c1fb83ee5306207e4a1a3e954
   // â     ââ s: 0x1610cdac2782c91065fd43584cd8974f7f3b4e6d46a2aafe7b101788285bf3f2
   // ââ transactionsRoot: 0xb090c32d840dec1e9752719f21bbae4a73e58333aecb89bc3b8ed559fb2712a3
   // ââ uncles
  
  },{"./hexUtils":125,"eth-query":135,"events":157,"pify":252}],127:[function(require,module,exports){
  (function (Buffer){
  var sha3 = require('js-sha3').keccak_256
  var uts46 = require('idna-uts46-hx')
  
  function namehash (inputName) {
    // Reject empty names:
    var node = ''
    for (var i = 0; i < 32; i++) {
      node += '00'
    }
  
    name = normalize(inputName)
  
    if (name) {
      var labels = name.split('.')
  
      for(var i = labels.length - 1; i >= 0; i--) {
        var labelSha = sha3(labels[i])
        node = sha3(new Buffer(node + labelSha, 'hex'))
      }
    }
  
    return '0x' + node
  }
  
  function normalize(name) {
    return name ? uts46.toUnicode(name, {useStd3ASCII: true, transitional: false}) : name
  }
  
  exports.hash = namehash
  exports.normalize = normalize
  
  }).call(this,require("buffer").Buffer)
  },{"buffer":84,"idna-uts46-hx":177,"js-sha3":128}],128:[function(require,module,exports){
  (function (process,global){
  /**
   * [js-sha3]{@link https://github.com/emn178/js-sha3}
   *
   * @version 0.5.7
   * @author Chen, Yi-Cyuan [emn178@gmail.com]
   * @copyright Chen, Yi-Cyuan 2015-2016
   * @license MIT
   */
  /*jslint bitwise: true */
  (function () {
    'use strict';
  
    var root = typeof window === 'object' ? window : {};
    var NODE_JS = !root.JS_SHA3_NO_NODE_JS && typeof process === 'object' && process.versions && process.versions.node;
    if (NODE_JS) {
      root = global;
    }
    var COMMON_JS = !root.JS_SHA3_NO_COMMON_JS && typeof module === 'object' && module.exports;
    var HEX_CHARS = '0123456789abcdef'.split('');
    var SHAKE_PADDING = [31, 7936, 2031616, 520093696];
    var KECCAK_PADDING = [1, 256, 65536, 16777216];
    var PADDING = [6, 1536, 393216, 100663296];
    var SHIFT = [0, 8, 16, 24];
    var RC = [1, 0, 32898, 0, 32906, 2147483648, 2147516416, 2147483648, 32907, 0, 2147483649,
              0, 2147516545, 2147483648, 32777, 2147483648, 138, 0, 136, 0, 2147516425, 0,
              2147483658, 0, 2147516555, 0, 139, 2147483648, 32905, 2147483648, 32771,
              2147483648, 32770, 2147483648, 128, 2147483648, 32778, 0, 2147483658, 2147483648,
              2147516545, 2147483648, 32896, 2147483648, 2147483649, 0, 2147516424, 2147483648];
    var BITS = [224, 256, 384, 512];
    var SHAKE_BITS = [128, 256];
    var OUTPUT_TYPES = ['hex', 'buffer', 'arrayBuffer', 'array'];
  
    var createOutputMethod = function (bits, padding, outputType) {
      return function (message) {
        return new Keccak(bits, padding, bits).update(message)[outputType]();
      };
    };
  
    var createShakeOutputMethod = function (bits, padding, outputType) {
      return function (message, outputBits) {
        return new Keccak(bits, padding, outputBits).update(message)[outputType]();
      };
    };
  
    var createMethod = function (bits, padding) {
      var method = createOutputMethod(bits, padding, 'hex');
      method.create = function () {
        return new Keccak(bits, padding, bits);
      };
      method.update = function (message) {
        return method.create().update(message);
      };
      for (var i = 0; i < OUTPUT_TYPES.length; ++i) {
        var type = OUTPUT_TYPES[i];
        method[type] = createOutputMethod(bits, padding, type);
      }
      return method;
    };
  
    var createShakeMethod = function (bits, padding) {
      var method = createShakeOutputMethod(bits, padding, 'hex');
      method.create = function (outputBits) {
        return new Keccak(bits, padding, outputBits);
      };
      method.update = function (message, outputBits) {
        return method.create(outputBits).update(message);
      };
      for (var i = 0; i < OUTPUT_TYPES.length; ++i) {
        var type = OUTPUT_TYPES[i];
        method[type] = createShakeOutputMethod(bits, padding, type);
      }
      return method;
    };
  
    var algorithms = [
      {name: 'keccak', padding: KECCAK_PADDING, bits: BITS, createMethod: createMethod},
      {name: 'sha3', padding: PADDING, bits: BITS, createMethod: createMethod},
      {name: 'shake', padding: SHAKE_PADDING, bits: SHAKE_BITS, createMethod: createShakeMethod}
    ];
  
    var methods = {}, methodNames = [];
  
    for (var i = 0; i < algorithms.length; ++i) {
      var algorithm = algorithms[i];
      var bits  = algorithm.bits;
      for (var j = 0; j < bits.length; ++j) {
        var methodName = algorithm.name +'_' + bits[j];
        methodNames.push(methodName);
        methods[methodName] = algorithm.createMethod(bits[j], algorithm.padding);
      }
    }
  
    function Keccak(bits, padding, outputBits) {
      this.blocks = [];
      this.s = [];
      this.padding = padding;
      this.outputBits = outputBits;
      this.reset = true;
      this.block = 0;
      this.start = 0;
      this.blockCount = (1600 - (bits << 1)) >> 5;
      this.byteCount = this.blockCount << 2;
      this.outputBlocks = outputBits >> 5;
      this.extraBytes = (outputBits & 31) >> 3;
  
      for (var i = 0; i < 50; ++i) {
        this.s[i] = 0;
      }
    }
  
    Keccak.prototype.update = function (message) {
      var notString = typeof message !== 'string';
      if (notString && message.constructor === ArrayBuffer) {
        message = new Uint8Array(message);
      }
      var length = message.length, blocks = this.blocks, byteCount = this.byteCount,
        blockCount = this.blockCount, index = 0, s = this.s, i, code;
  
      while (index < length) {
        if (this.reset) {
          this.reset = false;
          blocks[0] = this.block;
          for (i = 1; i < blockCount + 1; ++i) {
            blocks[i] = 0;
          }
        }
        if (notString) {
          for (i = this.start; index < length && i < byteCount; ++index) {
            blocks[i >> 2] |= message[index] << SHIFT[i++ & 3];
          }
        } else {
          for (i = this.start; index < length && i < byteCount; ++index) {
            code = message.charCodeAt(index);
            if (code < 0x80) {
              blocks[i >> 2] |= code << SHIFT[i++ & 3];
            } else if (code < 0x800) {
              blocks[i >> 2] |= (0xc0 | (code >> 6)) << SHIFT[i++ & 3];
              blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];
            } else if (code < 0xd800 || code >= 0xe000) {
              blocks[i >> 2] |= (0xe0 | (code >> 12)) << SHIFT[i++ & 3];
              blocks[i >> 2] |= (0x80 | ((code >> 6) & 0x3f)) << SHIFT[i++ & 3];
              blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];
            } else {
              code = 0x10000 + (((code & 0x3ff) << 10) | (message.charCodeAt(++index) & 0x3ff));
              blocks[i >> 2] |= (0xf0 | (code >> 18)) << SHIFT[i++ & 3];
              blocks[i >> 2] |= (0x80 | ((code >> 12) & 0x3f)) << SHIFT[i++ & 3];
              blocks[i >> 2] |= (0x80 | ((code >> 6) & 0x3f)) << SHIFT[i++ & 3];
              blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];
            }
          }
        }
        this.lastByteIndex = i;
        if (i >= byteCount) {
          this.start = i - byteCount;
          this.block = blocks[blockCount];
          for (i = 0; i < blockCount; ++i) {
            s[i] ^= blocks[i];
          }
          f(s);
          this.reset = true;
        } else {
          this.start = i;
        }
      }
      return this;
    };
  
    Keccak.prototype.finalize = function () {
      var blocks = this.blocks, i = this.lastByteIndex, blockCount = this.blockCount, s = this.s;
      blocks[i >> 2] |= this.padding[i & 3];
      if (this.lastByteIndex === this.byteCount) {
        blocks[0] = blocks[blockCount];
        for (i = 1; i < blockCount + 1; ++i) {
          blocks[i] = 0;
        }
      }
      blocks[blockCount - 1] |= 0x80000000;
      for (i = 0; i < blockCount; ++i) {
        s[i] ^= blocks[i];
      }
      f(s);
    };
  
    Keccak.prototype.toString = Keccak.prototype.hex = function () {
      this.finalize();
  
      var blockCount = this.blockCount, s = this.s, outputBlocks = this.outputBlocks,
          extraBytes = this.extraBytes, i = 0, j = 0;
      var hex = '', block;
      while (j < outputBlocks) {
        for (i = 0; i < blockCount && j < outputBlocks; ++i, ++j) {
          block = s[i];
          hex += HEX_CHARS[(block >> 4) & 0x0F] + HEX_CHARS[block & 0x0F] +
                 HEX_CHARS[(block >> 12) & 0x0F] + HEX_CHARS[(block >> 8) & 0x0F] +
                 HEX_CHARS[(block >> 20) & 0x0F] + HEX_CHARS[(block >> 16) & 0x0F] +
                 HEX_CHARS[(block >> 28) & 0x0F] + HEX_CHARS[(block >> 24) & 0x0F];
        }
        if (j % blockCount === 0) {
          f(s);
          i = 0;
        }
      }
      if (extraBytes) {
        block = s[i];
        if (extraBytes > 0) {
          hex += HEX_CHARS[(block >> 4) & 0x0F] + HEX_CHARS[block & 0x0F];
        }
        if (extraBytes > 1) {
          hex += HEX_CHARS[(block >> 12) & 0x0F] + HEX_CHARS[(block >> 8) & 0x0F];
        }
        if (extraBytes > 2) {
          hex += HEX_CHARS[(block >> 20) & 0x0F] + HEX_CHARS[(block >> 16) & 0x0F];
        }
      }
      return hex;
    };
  
    Keccak.prototype.arrayBuffer = function () {
      this.finalize();
  
      var blockCount = this.blockCount, s = this.s, outputBlocks = this.outputBlocks,
          extraBytes = this.extraBytes, i = 0, j = 0;
      var bytes = this.outputBits >> 3;
      var buffer;
      if (extraBytes) {
        buffer = new ArrayBuffer((outputBlocks + 1) << 2);
      } else {
        buffer = new ArrayBuffer(bytes);
      }
      var array = new Uint32Array(buffer);
      while (j < outputBlocks) {
        for (i = 0; i < blockCount && j < outputBlocks; ++i, ++j) {
          array[j] = s[i];
        }
        if (j % blockCount === 0) {
          f(s);
        }
      }
      if (extraBytes) {
        array[i] = s[i];
        buffer = buffer.slice(0, bytes);
      }
      return buffer;
    };
  
    Keccak.prototype.buffer = Keccak.prototype.arrayBuffer;
  
    Keccak.prototype.digest = Keccak.prototype.array = function () {
      this.finalize();
  
      var blockCount = this.blockCount, s = this.s, outputBlocks = this.outputBlocks,
          extraBytes = this.extraBytes, i = 0, j = 0;
      var array = [], offset, block;
      while (j < outputBlocks) {
        for (i = 0; i < blockCount && j < outputBlocks; ++i, ++j) {
          offset = j << 2;
          block = s[i];
          array[offset] = block & 0xFF;
          array[offset + 1] = (block >> 8) & 0xFF;
          array[offset + 2] = (block >> 16) & 0xFF;
          array[offset + 3] = (block >> 24) & 0xFF;
        }
        if (j % blockCount === 0) {
          f(s);
        }
      }
      if (extraBytes) {
        offset = j << 2;
        block = s[i];
        if (extraBytes > 0) {
          array[offset] = block & 0xFF;
        }
        if (extraBytes > 1) {
          array[offset + 1] = (block >> 8) & 0xFF;
        }
        if (extraBytes > 2) {
          array[offset + 2] = (block >> 16) & 0xFF;
        }
      }
      return array;
    };
  
    var f = function (s) {
      var h, l, n, c0, c1, c2, c3, c4, c5, c6, c7, c8, c9,
          b0, b1, b2, b3, b4, b5, b6, b7, b8, b9, b10, b11, b12, b13, b14, b15, b16, b17,
          b18, b19, b20, b21, b22, b23, b24, b25, b26, b27, b28, b29, b30, b31, b32, b33,
          b34, b35, b36, b37, b38, b39, b40, b41, b42, b43, b44, b45, b46, b47, b48, b49;
      for (n = 0; n < 48; n += 2) {
        c0 = s[0] ^ s[10] ^ s[20] ^ s[30] ^ s[40];
        c1 = s[1] ^ s[11] ^ s[21] ^ s[31] ^ s[41];
        c2 = s[2] ^ s[12] ^ s[22] ^ s[32] ^ s[42];
        c3 = s[3] ^ s[13] ^ s[23] ^ s[33] ^ s[43];
        c4 = s[4] ^ s[14] ^ s[24] ^ s[34] ^ s[44];
        c5 = s[5] ^ s[15] ^ s[25] ^ s[35] ^ s[45];
        c6 = s[6] ^ s[16] ^ s[26] ^ s[36] ^ s[46];
        c7 = s[7] ^ s[17] ^ s[27] ^ s[37] ^ s[47];
        c8 = s[8] ^ s[18] ^ s[28] ^ s[38] ^ s[48];
        c9 = s[9] ^ s[19] ^ s[29] ^ s[39] ^ s[49];
  
        h = c8 ^ ((c2 << 1) | (c3 >>> 31));
        l = c9 ^ ((c3 << 1) | (c2 >>> 31));
        s[0] ^= h;
        s[1] ^= l;
        s[10] ^= h;
        s[11] ^= l;
        s[20] ^= h;
        s[21] ^= l;
        s[30] ^= h;
        s[31] ^= l;
        s[40] ^= h;
        s[41] ^= l;
        h = c0 ^ ((c4 << 1) | (c5 >>> 31));
        l = c1 ^ ((c5 << 1) | (c4 >>> 31));
        s[2] ^= h;
        s[3] ^= l;
        s[12] ^= h;
        s[13] ^= l;
        s[22] ^= h;
        s[23] ^= l;
        s[32] ^= h;
        s[33] ^= l;
        s[42] ^= h;
        s[43] ^= l;
        h = c2 ^ ((c6 << 1) | (c7 >>> 31));
        l = c3 ^ ((c7 << 1) | (c6 >>> 31));
        s[4] ^= h;
        s[5] ^= l;
        s[14] ^= h;
        s[15] ^= l;
        s[24] ^= h;
        s[25] ^= l;
        s[34] ^= h;
        s[35] ^= l;
        s[44] ^= h;
        s[45] ^= l;
        h = c4 ^ ((c8 << 1) | (c9 >>> 31));
        l = c5 ^ ((c9 << 1) | (c8 >>> 31));
        s[6] ^= h;
        s[7] ^= l;
        s[16] ^= h;
        s[17] ^= l;
        s[26] ^= h;
        s[27] ^= l;
        s[36] ^= h;
        s[37] ^= l;
        s[46] ^= h;
        s[47] ^= l;
        h = c6 ^ ((c0 << 1) | (c1 >>> 31));
        l = c7 ^ ((c1 << 1) | (c0 >>> 31));
        s[8] ^= h;
        s[9] ^= l;
        s[18] ^= h;
        s[19] ^= l;
        s[28] ^= h;
        s[29] ^= l;
        s[38] ^= h;
        s[39] ^= l;
        s[48] ^= h;
        s[49] ^= l;
  
        b0 = s[0];
        b1 = s[1];
        b32 = (s[11] << 4) | (s[10] >>> 28);
        b33 = (s[10] << 4) | (s[11] >>> 28);
        b14 = (s[20] << 3) | (s[21] >>> 29);
        b15 = (s[21] << 3) | (s[20] >>> 29);
        b46 = (s[31] << 9) | (s[30] >>> 23);
        b47 = (s[30] << 9) | (s[31] >>> 23);
        b28 = (s[40] << 18) | (s[41] >>> 14);
        b29 = (s[41] << 18) | (s[40] >>> 14);
        b20 = (s[2] << 1) | (s[3] >>> 31);
        b21 = (s[3] << 1) | (s[2] >>> 31);
        b2 = (s[13] << 12) | (s[12] >>> 20);
        b3 = (s[12] << 12) | (s[13] >>> 20);
        b34 = (s[22] << 10) | (s[23] >>> 22);
        b35 = (s[23] << 10) | (s[22] >>> 22);
        b16 = (s[33] << 13) | (s[32] >>> 19);
        b17 = (s[32] << 13) | (s[33] >>> 19);
        b48 = (s[42] << 2) | (s[43] >>> 30);
        b49 = (s[43] << 2) | (s[42] >>> 30);
        b40 = (s[5] << 30) | (s[4] >>> 2);
        b41 = (s[4] << 30) | (s[5] >>> 2);
        b22 = (s[14] << 6) | (s[15] >>> 26);
        b23 = (s[15] << 6) | (s[14] >>> 26);
        b4 = (s[25] << 11) | (s[24] >>> 21);
        b5 = (s[24] << 11) | (s[25] >>> 21);
        b36 = (s[34] << 15) | (s[35] >>> 17);
        b37 = (s[35] << 15) | (s[34] >>> 17);
        b18 = (s[45] << 29) | (s[44] >>> 3);
        b19 = (s[44] << 29) | (s[45] >>> 3);
        b10 = (s[6] << 28) | (s[7] >>> 4);
        b11 = (s[7] << 28) | (s[6] >>> 4);
        b42 = (s[17] << 23) | (s[16] >>> 9);
        b43 = (s[16] << 23) | (s[17] >>> 9);
        b24 = (s[26] << 25) | (s[27] >>> 7);
        b25 = (s[27] << 25) | (s[26] >>> 7);
        b6 = (s[36] << 21) | (s[37] >>> 11);
        b7 = (s[37] << 21) | (s[36] >>> 11);
        b38 = (s[47] << 24) | (s[46] >>> 8);
        b39 = (s[46] << 24) | (s[47] >>> 8);
        b30 = (s[8] << 27) | (s[9] >>> 5);
        b31 = (s[9] << 27) | (s[8] >>> 5);
        b12 = (s[18] << 20) | (s[19] >>> 12);
        b13 = (s[19] << 20) | (s[18] >>> 12);
        b44 = (s[29] << 7) | (s[28] >>> 25);
        b45 = (s[28] << 7) | (s[29] >>> 25);
        b26 = (s[38] << 8) | (s[39] >>> 24);
        b27 = (s[39] << 8) | (s[38] >>> 24);
        b8 = (s[48] << 14) | (s[49] >>> 18);
        b9 = (s[49] << 14) | (s[48] >>> 18);
  
        s[0] = b0 ^ (~b2 & b4);
        s[1] = b1 ^ (~b3 & b5);
        s[10] = b10 ^ (~b12 & b14);
        s[11] = b11 ^ (~b13 & b15);
        s[20] = b20 ^ (~b22 & b24);
        s[21] = b21 ^ (~b23 & b25);
        s[30] = b30 ^ (~b32 & b34);
        s[31] = b31 ^ (~b33 & b35);
        s[40] = b40 ^ (~b42 & b44);
        s[41] = b41 ^ (~b43 & b45);
        s[2] = b2 ^ (~b4 & b6);
        s[3] = b3 ^ (~b5 & b7);
        s[12] = b12 ^ (~b14 & b16);
        s[13] = b13 ^ (~b15 & b17);
        s[22] = b22 ^ (~b24 & b26);
        s[23] = b23 ^ (~b25 & b27);
        s[32] = b32 ^ (~b34 & b36);
        s[33] = b33 ^ (~b35 & b37);
        s[42] = b42 ^ (~b44 & b46);
        s[43] = b43 ^ (~b45 & b47);
        s[4] = b4 ^ (~b6 & b8);
        s[5] = b5 ^ (~b7 & b9);
        s[14] = b14 ^ (~b16 & b18);
        s[15] = b15 ^ (~b17 & b19);
        s[24] = b24 ^ (~b26 & b28);
        s[25] = b25 ^ (~b27 & b29);
        s[34] = b34 ^ (~b36 & b38);
        s[35] = b35 ^ (~b37 & b39);
        s[44] = b44 ^ (~b46 & b48);
        s[45] = b45 ^ (~b47 & b49);
        s[6] = b6 ^ (~b8 & b0);
        s[7] = b7 ^ (~b9 & b1);
        s[16] = b16 ^ (~b18 & b10);
        s[17] = b17 ^ (~b19 & b11);
        s[26] = b26 ^ (~b28 & b20);
        s[27] = b27 ^ (~b29 & b21);
        s[36] = b36 ^ (~b38 & b30);
        s[37] = b37 ^ (~b39 & b31);
        s[46] = b46 ^ (~b48 & b40);
        s[47] = b47 ^ (~b49 & b41);
        s[8] = b8 ^ (~b0 & b2);
        s[9] = b9 ^ (~b1 & b3);
        s[18] = b18 ^ (~b10 & b12);
        s[19] = b19 ^ (~b11 & b13);
        s[28] = b28 ^ (~b20 & b22);
        s[29] = b29 ^ (~b21 & b23);
        s[38] = b38 ^ (~b30 & b32);
        s[39] = b39 ^ (~b31 & b33);
        s[48] = b48 ^ (~b40 & b42);
        s[49] = b49 ^ (~b41 & b43);
  
        s[0] ^= RC[n];
        s[1] ^= RC[n + 1];
      }
    };
  
    if (COMMON_JS) {
      module.exports = methods;
    } else {
      for (var i = 0; i < methodNames.length; ++i) {
        root[methodNames[i]] = methods[methodNames[i]];
      }
    }
  })();
  
  }).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
  },{"_process":257}],129:[function(require,module,exports){
  const RpcEngine = require('json-rpc-engine')
  const providerFromEngine = require('eth-json-rpc-middleware/providerFromEngine')
  const createInfuraMiddleware = require('./index')
  
  
  module.exports = createProvider
  
  function createProvider(opts){
    const engine = new RpcEngine()
    engine.push(createInfuraMiddleware(opts))
    return providerFromEngine(engine)
  }
  
  },{"./index":130,"eth-json-rpc-middleware/providerFromEngine":131,"json-rpc-engine":188}],130:[function(require,module,exports){
  const createAsyncMiddleware = require('json-rpc-engine/src/createAsyncMiddleware')
  const JsonRpcError = require('json-rpc-error')
  const fetch = require('cross-fetch')
  
  const POST_METHODS = ['eth_call', 'eth_estimateGas', 'eth_sendRawTransaction']
  const RETRIABLE_ERRORS = [
    // ignore server overload errors
    'Gateway timeout',
    'ETIMEDOUT',
    'ECONNRESET',
    // ignore server sent html error pages
    // or truncated json responses
    'SyntaxError',
  ]
  
  module.exports = createInfuraMiddleware
  module.exports.fetchConfigFromReq = fetchConfigFromReq
  
  function createInfuraMiddleware(opts = {}) {
    const network = opts.network || 'mainnet'
    const maxAttempts = opts.maxAttempts || 5
    // validate options
    if (!maxAttempts) throw new Error(`Invalid value for 'maxAttempts': "${maxAttempts}" (${typeof maxAttempts})`)
  
    return createAsyncMiddleware(async (req, res, next) => {
      // retry MAX_ATTEMPTS times, if error matches filter
      for (let attempt = 1; attempt <= maxAttempts; attempt++) {
        try {
          // attempt request
          await performFetch(network, req, res)
          // request was successful
          break
        } catch (err) {
          // an error was caught while performing the request
          // if not retriable, resolve with the encountered error
          if (!isRetriableError(err)) {
            // abort with error
            throw err
          }
          // if no more attempts remaining, throw an error
          const remainingAttempts = maxAttempts - attempt
          if (!remainingAttempts) {
            const errMsg = `InfuraProvider - cannot complete request. All retries exhausted.\nOriginal Error:\n${err.toString()}\n\n`
            const retriesExhaustedErr = new Error(errMsg)
            throw retriesExhaustedErr
          }
          // otherwise, ignore error and retry again after timeout
          await timeout(1000)
        }
      }
      // request was handled correctly, end
    })
  }
  
  function timeout(length) {
    return new Promise((resolve) => {
      setTimeout(resolve, length)
    })
  }
  
  function isRetriableError(err) {
    const errMessage = err.toString()
    return RETRIABLE_ERRORS.some(phrase => errMessage.includes(phrase))
  }
  
  async function performFetch(network, req, res){
    const { fetchUrl, fetchParams } = fetchConfigFromReq({ network, req })
    const response = await fetch(fetchUrl, fetchParams)
    const rawData = await response.text()
    // handle errors
    if (!response.ok) {
      switch (response.status) {
        case 405:
          throw new JsonRpcError.MethodNotFound()
  
        case 418:
          throw createRatelimitError()
  
        case 503:
        case 504:
          throw createTimeoutError()
  
        default:
          throw createInternalError(rawData)
      }
    }
  
    // special case for now
    if (req.method === 'eth_getBlockByNumber' && rawData === 'Not Found') {
      res.result = null
      return
    }
  
    // parse JSON
    const data = JSON.parse(rawData)
  
    // finally return result
    res.result = data.result
    res.error = data.error
  }
  
  function fetchConfigFromReq({ network, req }) {
    const cleanReq = normalizeReq(req)
    const { method, params } = cleanReq
  
    const fetchParams = {}
    let fetchUrl = `https://api.infura.io/v1/jsonrpc/${network}`
    const isPostMethod = POST_METHODS.includes(method)
    if (isPostMethod) {
      fetchParams.method = 'POST'
      fetchParams.headers = {
        'Accept': 'application/json',
        'Content-Type': 'application/json'
      },
      fetchParams.body = JSON.stringify(cleanReq)
    } else {
      fetchParams.method = 'GET'
      const paramsString = encodeURIComponent(JSON.stringify(params))
      fetchUrl += `/${method}?params=${paramsString}`
    }
  
    return { fetchUrl, fetchParams }
  }
  
  // strips out extra keys that could be rejected by strict nodes like parity
  function normalizeReq(req) {
    return {
      id: req.id,
      jsonrpc: req.jsonrpc,
      method: req.method,
      params: req.params,
    }
  }
  
  function createRatelimitError () {
    let msg = `Request is being rate limited.`
    return createInternalError(msg)
  }
  
  function createTimeoutError () {
    let msg = `Gateway timeout. The request took too long to process. `
    msg += `This can happen when querying logs over too wide a block range.`
    return createInternalError(msg)
  }
  
  function createInternalError (msg) {
    const err = new Error(msg)
    return new JsonRpcError.InternalError(err)
  }
  
  },{"cross-fetch":96,"json-rpc-engine/src/createAsyncMiddleware":187,"json-rpc-error":189}],131:[function(require,module,exports){
  module.exports = providerFromEngine
  
  function providerFromEngine (engine) {
    const provider = { sendAsync: engine.handle.bind(engine) }
    return provider
  }
  
  },{}],132:[function(require,module,exports){
  var generate = function generate(num, fn) {
    var a = [];
    for (var i = 0; i < num; ++i) {
      a.push(fn(i));
    }return a;
  };
  
  var replicate = function replicate(num, val) {
    return generate(num, function () {
      return val;
    });
  };
  
  var concat = function concat(a, b) {
    return a.concat(b);
  };
  
  var flatten = function flatten(a) {
    var r = [];
    for (var j = 0, J = a.length; j < J; ++j) {
      for (var i = 0, I = a[j].length; i < I; ++i) {
        r.push(a[j][i]);
      }
    }return r;
  };
  
  var chunksOf = function chunksOf(n, a) {
    var b = [];
    for (var i = 0, l = a.length; i < l; i += n) {
      b.push(a.slice(i, i + n));
    }return b;
  };
  
  module.exports = {
    generate: generate,
    replicate: replicate,
    concat: concat,
    flatten: flatten,
    chunksOf: chunksOf
  };
  },{}],133:[function(require,module,exports){
  var A = require("./array.js");
  
  var at = function at(bytes, index) {
    return parseInt(bytes.slice(index * 2 + 2, index * 2 + 4), 16);
  };
  
  var random = function random(bytes) {
    var rnd = void 0;
    if (typeof window !== "undefined" && window.crypto && window.crypto.getRandomValues) rnd = window.crypto.getRandomValues(new Uint8Array(bytes));else if (typeof require !== "undefined") rnd = require("c" + "rypto").randomBytes(bytes);else throw "Safe random numbers not available.";
    var hex = "0x";
    for (var i = 0; i < bytes; ++i) {
      hex += ("00" + rnd[i].toString(16)).slice(-2);
    }return hex;
  };
  
  var length = function length(a) {
    return (a.length - 2) / 2;
  };
  
  var flatten = function flatten(a) {
    return "0x" + a.reduce(function (r, s) {
      return r + s.slice(2);
    }, "");
  };
  
  var slice = function slice(i, j, bs) {
    return "0x" + bs.slice(i * 2 + 2, j * 2 + 2);
  };
  
  var reverse = function reverse(hex) {
    var rev = "0x";
    for (var i = 0, l = length(hex); i < l; ++i) {
      rev += hex.slice((l - i) * 2, (l - i + 1) * 2);
    }
    return rev;
  };
  
  var pad = function pad(l, hex) {
    return hex.length === l * 2 + 2 ? hex : pad(l, "0x" + "0" + hex.slice(2));
  };
  
  var padRight = function padRight(l, hex) {
    return hex.length === l * 2 + 2 ? hex : padRight(l, hex + "0");
  };
  
  var toArray = function toArray(hex) {
    var arr = [];
    for (var i = 2, l = hex.length; i < l; i += 2) {
      arr.push(parseInt(hex.slice(i, i + 2), 16));
    }return arr;
  };
  
  var fromArray = function fromArray(arr) {
    var hex = "0x";
    for (var i = 0, l = arr.length; i < l; ++i) {
      var b = arr[i];
      hex += (b < 16 ? "0" : "") + b.toString(16);
    }
    return hex;
  };
  
  var toUint8Array = function toUint8Array(hex) {
    return new Uint8Array(toArray(hex));
  };
  
  var fromUint8Array = function fromUint8Array(arr) {
    return fromArray([].slice.call(arr, 0));
  };
  
  var fromNumber = function fromNumber(num) {
    var hex = num.toString(16);
    return hex.length % 2 === 0 ? "0x" + hex : "0x0" + hex;
  };
  
  var toNumber = function toNumber(hex) {
    return parseInt(hex.slice(2), 16);
  };
  
  var concat = function concat(a, b) {
    return a.concat(b.slice(2));
  };
  
  var fromNat = function fromNat(bn) {
    return bn === "0x0" ? "0x" : bn.length % 2 === 0 ? bn : "0x0" + bn.slice(2);
  };
  
  var toNat = function toNat(bn) {
    return bn[2] === "0" ? "0x" + bn.slice(3) : bn;
  };
  
  var fromAscii = function fromAscii(ascii) {
    var hex = "0x";
    for (var i = 0; i < ascii.length; ++i) {
      hex += ("00" + ascii.charCodeAt(i).toString(16)).slice(-2);
    }return hex;
  };
  
  var toAscii = function toAscii(hex) {
    var ascii = "";
    for (var i = 2; i < hex.length; i += 2) {
      ascii += String.fromCharCode(parseInt(hex.slice(i, i + 2), 16));
    }return ascii;
  };
  
  // From https://gist.github.com/pascaldekloe/62546103a1576803dade9269ccf76330
  var fromString = function fromString(s) {
    var makeByte = function makeByte(uint8) {
      var b = uint8.toString(16);
      return b.length < 2 ? "0" + b : b;
    };
    var bytes = "0x";
    for (var ci = 0; ci != s.length; ci++) {
      var c = s.charCodeAt(ci);
      if (c < 128) {
        bytes += makeByte(c);
        continue;
      }
      if (c < 2048) {
        bytes += makeByte(c >> 6 | 192);
      } else {
        if (c > 0xd7ff && c < 0xdc00) {
          if (++ci == s.length) return null;
          var c2 = s.charCodeAt(ci);
          if (c2 < 0xdc00 || c2 > 0xdfff) return null;
          c = 0x10000 + ((c & 0x03ff) << 10) + (c2 & 0x03ff);
          bytes += makeByte(c >> 18 | 240);
          bytes += makeByte(c >> 12 & 63 | 128);
        } else {
          // c <= 0xffff
          bytes += makeByte(c >> 12 | 224);
        }
        bytes += makeByte(c >> 6 & 63 | 128);
      }
      bytes += makeByte(c & 63 | 128);
    }
    return bytes;
  };
  
  var toString = function toString(bytes) {
    var s = '';
    var i = 0;
    var l = length(bytes);
    while (i < l) {
      var c = at(bytes, i++);
      if (c > 127) {
        if (c > 191 && c < 224) {
          if (i >= l) return null;
          c = (c & 31) << 6 | at(bytes, i) & 63;
        } else if (c > 223 && c < 240) {
          if (i + 1 >= l) return null;
          c = (c & 15) << 12 | (at(bytes, i) & 63) << 6 | at(bytes, ++i) & 63;
        } else if (c > 239 && c < 248) {
          if (i + 2 >= l) return null;
          c = (c & 7) << 18 | (at(bytes, i) & 63) << 12 | (at(bytes, ++i) & 63) << 6 | at(bytes, ++i) & 63;
        } else return null;
        ++i;
      }
      if (c <= 0xffff) s += String.fromCharCode(c);else if (c <= 0x10ffff) {
        c -= 0x10000;
        s += String.fromCharCode(c >> 10 | 0xd800);
        s += String.fromCharCode(c & 0x3FF | 0xdc00);
      } else return null;
    }
    return s;
  };
  
  module.exports = {
    random: random,
    length: length,
    concat: concat,
    flatten: flatten,
    slice: slice,
    reverse: reverse,
    pad: pad,
    padRight: padRight,
    fromAscii: fromAscii,
    toAscii: toAscii,
    fromString: fromString,
    toString: toString,
    fromNumber: fromNumber,
    toNumber: toNumber,
    fromNat: fromNat,
    toNat: toNat,
    fromArray: fromArray,
    toArray: toArray,
    fromUint8Array: fromUint8Array,
    toUint8Array: toUint8Array
  };
  },{"./array.js":132}],134:[function(require,module,exports){
  // This was ported from https://github.com/emn178/js-sha3, with some minor
  // modifications and pruning. It is licensed under MIT:
  //
  // Copyright 2015-2016 Chen, Yi-Cyuan
  //  
  // Permission is hereby granted, free of charge, to any person obtaining
  // a copy of this software and associated documentation files (the
  // "Software"), to deal in the Software without restriction, including
  // without limitation the rights to use, copy, modify, merge, publish,
  // distribute, sublicense, and/or sell copies of the Software, and to
  // permit persons to whom the Software is furnished to do so, subject to
  // the following conditions:
  // 
  // The above copyright notice and this permission notice shall be
  // included in all copies or substantial portions of the Software.
  // 
  // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
  // EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
  // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
  // NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
  // LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
  // OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
  // WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  
  var HEX_CHARS = '0123456789abcdef'.split('');
  var KECCAK_PADDING = [1, 256, 65536, 16777216];
  var SHIFT = [0, 8, 16, 24];
  var RC = [1, 0, 32898, 0, 32906, 2147483648, 2147516416, 2147483648, 32907, 0, 2147483649, 0, 2147516545, 2147483648, 32777, 2147483648, 138, 0, 136, 0, 2147516425, 0, 2147483658, 0, 2147516555, 0, 139, 2147483648, 32905, 2147483648, 32771, 2147483648, 32770, 2147483648, 128, 2147483648, 32778, 0, 2147483658, 2147483648, 2147516545, 2147483648, 32896, 2147483648, 2147483649, 0, 2147516424, 2147483648];
  
  var Keccak = function Keccak(bits) {
    return {
      blocks: [],
      reset: true,
      block: 0,
      start: 0,
      blockCount: 1600 - (bits << 1) >> 5,
      outputBlocks: bits >> 5,
      s: function (s) {
        return [].concat(s, s, s, s, s);
      }([0, 0, 0, 0, 0, 0, 0, 0, 0, 0])
    };
  };
  
  var update = function update(state, message) {
    var length = message.length,
        blocks = state.blocks,
        byteCount = state.blockCount << 2,
        blockCount = state.blockCount,
        outputBlocks = state.outputBlocks,
        s = state.s,
        index = 0,
        i,
        code;
  
    // update
    while (index < length) {
      if (state.reset) {
        state.reset = false;
        blocks[0] = state.block;
        for (i = 1; i < blockCount + 1; ++i) {
          blocks[i] = 0;
        }
      }
      if (typeof message !== "string") {
        for (i = state.start; index < length && i < byteCount; ++index) {
          blocks[i >> 2] |= message[index] << SHIFT[i++ & 3];
        }
      } else {
        for (i = state.start; index < length && i < byteCount; ++index) {
          code = message.charCodeAt(index);
          if (code < 0x80) {
            blocks[i >> 2] |= code << SHIFT[i++ & 3];
          } else if (code < 0x800) {
            blocks[i >> 2] |= (0xc0 | code >> 6) << SHIFT[i++ & 3];
            blocks[i >> 2] |= (0x80 | code & 0x3f) << SHIFT[i++ & 3];
          } else if (code < 0xd800 || code >= 0xe000) {
            blocks[i >> 2] |= (0xe0 | code >> 12) << SHIFT[i++ & 3];
            blocks[i >> 2] |= (0x80 | code >> 6 & 0x3f) << SHIFT[i++ & 3];
            blocks[i >> 2] |= (0x80 | code & 0x3f) << SHIFT[i++ & 3];
          } else {
            code = 0x10000 + ((code & 0x3ff) << 10 | message.charCodeAt(++index) & 0x3ff);
            blocks[i >> 2] |= (0xf0 | code >> 18) << SHIFT[i++ & 3];
            blocks[i >> 2] |= (0x80 | code >> 12 & 0x3f) << SHIFT[i++ & 3];
            blocks[i >> 2] |= (0x80 | code >> 6 & 0x3f) << SHIFT[i++ & 3];
            blocks[i >> 2] |= (0x80 | code & 0x3f) << SHIFT[i++ & 3];
          }
        }
      }
      state.lastByteIndex = i;
      if (i >= byteCount) {
        state.start = i - byteCount;
        state.block = blocks[blockCount];
        for (i = 0; i < blockCount; ++i) {
          s[i] ^= blocks[i];
        }
        f(s);
        state.reset = true;
      } else {
        state.start = i;
      }
    }
  
    // finalize
    i = state.lastByteIndex;
    blocks[i >> 2] |= KECCAK_PADDING[i & 3];
    if (state.lastByteIndex === byteCount) {
      blocks[0] = blocks[blockCount];
      for (i = 1; i < blockCount + 1; ++i) {
        blocks[i] = 0;
      }
    }
    blocks[blockCount - 1] |= 0x80000000;
    for (i = 0; i < blockCount; ++i) {
      s[i] ^= blocks[i];
    }
    f(s);
  
    // toString
    var hex = '',
        i = 0,
        j = 0,
        block;
    while (j < outputBlocks) {
      for (i = 0; i < blockCount && j < outputBlocks; ++i, ++j) {
        block = s[i];
        hex += HEX_CHARS[block >> 4 & 0x0F] + HEX_CHARS[block & 0x0F] + HEX_CHARS[block >> 12 & 0x0F] + HEX_CHARS[block >> 8 & 0x0F] + HEX_CHARS[block >> 20 & 0x0F] + HEX_CHARS[block >> 16 & 0x0F] + HEX_CHARS[block >> 28 & 0x0F] + HEX_CHARS[block >> 24 & 0x0F];
      }
      if (j % blockCount === 0) {
        f(s);
        i = 0;
      }
    }
    return "0x" + hex;
  };
  
  var f = function f(s) {
    var h, l, n, c0, c1, c2, c3, c4, c5, c6, c7, c8, c9, b0, b1, b2, b3, b4, b5, b6, b7, b8, b9, b10, b11, b12, b13, b14, b15, b16, b17, b18, b19, b20, b21, b22, b23, b24, b25, b26, b27, b28, b29, b30, b31, b32, b33, b34, b35, b36, b37, b38, b39, b40, b41, b42, b43, b44, b45, b46, b47, b48, b49;
  
    for (n = 0; n < 48; n += 2) {
      c0 = s[0] ^ s[10] ^ s[20] ^ s[30] ^ s[40];
      c1 = s[1] ^ s[11] ^ s[21] ^ s[31] ^ s[41];
      c2 = s[2] ^ s[12] ^ s[22] ^ s[32] ^ s[42];
      c3 = s[3] ^ s[13] ^ s[23] ^ s[33] ^ s[43];
      c4 = s[4] ^ s[14] ^ s[24] ^ s[34] ^ s[44];
      c5 = s[5] ^ s[15] ^ s[25] ^ s[35] ^ s[45];
      c6 = s[6] ^ s[16] ^ s[26] ^ s[36] ^ s[46];
      c7 = s[7] ^ s[17] ^ s[27] ^ s[37] ^ s[47];
      c8 = s[8] ^ s[18] ^ s[28] ^ s[38] ^ s[48];
      c9 = s[9] ^ s[19] ^ s[29] ^ s[39] ^ s[49];
  
      h = c8 ^ (c2 << 1 | c3 >>> 31);
      l = c9 ^ (c3 << 1 | c2 >>> 31);
      s[0] ^= h;
      s[1] ^= l;
      s[10] ^= h;
      s[11] ^= l;
      s[20] ^= h;
      s[21] ^= l;
      s[30] ^= h;
      s[31] ^= l;
      s[40] ^= h;
      s[41] ^= l;
      h = c0 ^ (c4 << 1 | c5 >>> 31);
      l = c1 ^ (c5 << 1 | c4 >>> 31);
      s[2] ^= h;
      s[3] ^= l;
      s[12] ^= h;
      s[13] ^= l;
      s[22] ^= h;
      s[23] ^= l;
      s[32] ^= h;
      s[33] ^= l;
      s[42] ^= h;
      s[43] ^= l;
      h = c2 ^ (c6 << 1 | c7 >>> 31);
      l = c3 ^ (c7 << 1 | c6 >>> 31);
      s[4] ^= h;
      s[5] ^= l;
      s[14] ^= h;
      s[15] ^= l;
      s[24] ^= h;
      s[25] ^= l;
      s[34] ^= h;
      s[35] ^= l;
      s[44] ^= h;
      s[45] ^= l;
      h = c4 ^ (c8 << 1 | c9 >>> 31);
      l = c5 ^ (c9 << 1 | c8 >>> 31);
      s[6] ^= h;
      s[7] ^= l;
      s[16] ^= h;
      s[17] ^= l;
      s[26] ^= h;
      s[27] ^= l;
      s[36] ^= h;
      s[37] ^= l;
      s[46] ^= h;
      s[47] ^= l;
      h = c6 ^ (c0 << 1 | c1 >>> 31);
      l = c7 ^ (c1 << 1 | c0 >>> 31);
      s[8] ^= h;
      s[9] ^= l;
      s[18] ^= h;
      s[19] ^= l;
      s[28] ^= h;
      s[29] ^= l;
      s[38] ^= h;
      s[39] ^= l;
      s[48] ^= h;
      s[49] ^= l;
  
      b0 = s[0];
      b1 = s[1];
      b32 = s[11] << 4 | s[10] >>> 28;
      b33 = s[10] << 4 | s[11] >>> 28;
      b14 = s[20] << 3 | s[21] >>> 29;
      b15 = s[21] << 3 | s[20] >>> 29;
      b46 = s[31] << 9 | s[30] >>> 23;
      b47 = s[30] << 9 | s[31] >>> 23;
      b28 = s[40] << 18 | s[41] >>> 14;
      b29 = s[41] << 18 | s[40] >>> 14;
      b20 = s[2] << 1 | s[3] >>> 31;
      b21 = s[3] << 1 | s[2] >>> 31;
      b2 = s[13] << 12 | s[12] >>> 20;
      b3 = s[12] << 12 | s[13] >>> 20;
      b34 = s[22] << 10 | s[23] >>> 22;
      b35 = s[23] << 10 | s[22] >>> 22;
      b16 = s[33] << 13 | s[32] >>> 19;
      b17 = s[32] << 13 | s[33] >>> 19;
      b48 = s[42] << 2 | s[43] >>> 30;
      b49 = s[43] << 2 | s[42] >>> 30;
      b40 = s[5] << 30 | s[4] >>> 2;
      b41 = s[4] << 30 | s[5] >>> 2;
      b22 = s[14] << 6 | s[15] >>> 26;
      b23 = s[15] << 6 | s[14] >>> 26;
      b4 = s[25] << 11 | s[24] >>> 21;
      b5 = s[24] << 11 | s[25] >>> 21;
      b36 = s[34] << 15 | s[35] >>> 17;
      b37 = s[35] << 15 | s[34] >>> 17;
      b18 = s[45] << 29 | s[44] >>> 3;
      b19 = s[44] << 29 | s[45] >>> 3;
      b10 = s[6] << 28 | s[7] >>> 4;
      b11 = s[7] << 28 | s[6] >>> 4;
      b42 = s[17] << 23 | s[16] >>> 9;
      b43 = s[16] << 23 | s[17] >>> 9;
      b24 = s[26] << 25 | s[27] >>> 7;
      b25 = s[27] << 25 | s[26] >>> 7;
      b6 = s[36] << 21 | s[37] >>> 11;
      b7 = s[37] << 21 | s[36] >>> 11;
      b38 = s[47] << 24 | s[46] >>> 8;
      b39 = s[46] << 24 | s[47] >>> 8;
      b30 = s[8] << 27 | s[9] >>> 5;
      b31 = s[9] << 27 | s[8] >>> 5;
      b12 = s[18] << 20 | s[19] >>> 12;
      b13 = s[19] << 20 | s[18] >>> 12;
      b44 = s[29] << 7 | s[28] >>> 25;
      b45 = s[28] << 7 | s[29] >>> 25;
      b26 = s[38] << 8 | s[39] >>> 24;
      b27 = s[39] << 8 | s[38] >>> 24;
      b8 = s[48] << 14 | s[49] >>> 18;
      b9 = s[49] << 14 | s[48] >>> 18;
  
      s[0] = b0 ^ ~b2 & b4;
      s[1] = b1 ^ ~b3 & b5;
      s[10] = b10 ^ ~b12 & b14;
      s[11] = b11 ^ ~b13 & b15;
      s[20] = b20 ^ ~b22 & b24;
      s[21] = b21 ^ ~b23 & b25;
      s[30] = b30 ^ ~b32 & b34;
      s[31] = b31 ^ ~b33 & b35;
      s[40] = b40 ^ ~b42 & b44;
      s[41] = b41 ^ ~b43 & b45;
      s[2] = b2 ^ ~b4 & b6;
      s[3] = b3 ^ ~b5 & b7;
      s[12] = b12 ^ ~b14 & b16;
      s[13] = b13 ^ ~b15 & b17;
      s[22] = b22 ^ ~b24 & b26;
      s[23] = b23 ^ ~b25 & b27;
      s[32] = b32 ^ ~b34 & b36;
      s[33] = b33 ^ ~b35 & b37;
      s[42] = b42 ^ ~b44 & b46;
      s[43] = b43 ^ ~b45 & b47;
      s[4] = b4 ^ ~b6 & b8;
      s[5] = b5 ^ ~b7 & b9;
      s[14] = b14 ^ ~b16 & b18;
      s[15] = b15 ^ ~b17 & b19;
      s[24] = b24 ^ ~b26 & b28;
      s[25] = b25 ^ ~b27 & b29;
      s[34] = b34 ^ ~b36 & b38;
      s[35] = b35 ^ ~b37 & b39;
      s[44] = b44 ^ ~b46 & b48;
      s[45] = b45 ^ ~b47 & b49;
      s[6] = b6 ^ ~b8 & b0;
      s[7] = b7 ^ ~b9 & b1;
      s[16] = b16 ^ ~b18 & b10;
      s[17] = b17 ^ ~b19 & b11;
      s[26] = b26 ^ ~b28 & b20;
      s[27] = b27 ^ ~b29 & b21;
      s[36] = b36 ^ ~b38 & b30;
      s[37] = b37 ^ ~b39 & b31;
      s[46] = b46 ^ ~b48 & b40;
      s[47] = b47 ^ ~b49 & b41;
      s[8] = b8 ^ ~b0 & b2;
      s[9] = b9 ^ ~b1 & b3;
      s[18] = b18 ^ ~b10 & b12;
      s[19] = b19 ^ ~b11 & b13;
      s[28] = b28 ^ ~b20 & b22;
      s[29] = b29 ^ ~b21 & b23;
      s[38] = b38 ^ ~b30 & b32;
      s[39] = b39 ^ ~b31 & b33;
      s[48] = b48 ^ ~b40 & b42;
      s[49] = b49 ^ ~b41 & b43;
  
      s[0] ^= RC[n];
      s[1] ^= RC[n + 1];
    }
  };
  
  var keccak = function keccak(bits) {
    return function (str) {
      var msg;
      if (str.slice(0, 2) === "0x") {
        msg = [];
        for (var i = 2, l = str.length; i < l; i += 2) {
          msg.push(parseInt(str.slice(i, i + 2), 16));
        }
      } else {
        msg = str;
      }
      return update(Keccak(bits, bits), msg);
    };
  };
  
  module.exports = {
    keccak256: keccak(256),
    keccak512: keccak(512),
    keccak256s: keccak(256),
    keccak512s: keccak(512)
  };
  },{}],135:[function(require,module,exports){
  const extend = require('xtend')
  const createRandomId = require('json-rpc-random-id')()
  
  module.exports = EthQuery
  
  
  function EthQuery(provider){
    const self = this
    self.currentProvider = provider
  }
  
  //
  // base queries
  //
  
  // default block
  EthQuery.prototype.getBalance =                          generateFnWithDefaultBlockFor(2, 'eth_getBalance')
  EthQuery.prototype.getCode =                             generateFnWithDefaultBlockFor(2, 'eth_getCode')
  EthQuery.prototype.getTransactionCount =                 generateFnWithDefaultBlockFor(2, 'eth_getTransactionCount')
  EthQuery.prototype.getStorageAt =                        generateFnWithDefaultBlockFor(3, 'eth_getStorageAt')
  EthQuery.prototype.call =                                generateFnWithDefaultBlockFor(2, 'eth_call')
  // standard
  EthQuery.prototype.protocolVersion =                     generateFnFor('eth_protocolVersion')
  EthQuery.prototype.syncing =                             generateFnFor('eth_syncing')
  EthQuery.prototype.coinbase =                            generateFnFor('eth_coinbase')
  EthQuery.prototype.mining =                              generateFnFor('eth_mining')
  EthQuery.prototype.hashrate =                            generateFnFor('eth_hashrate')
  EthQuery.prototype.gasPrice =                            generateFnFor('eth_gasPrice')
  EthQuery.prototype.accounts =                            generateFnFor('eth_accounts')
  EthQuery.prototype.blockNumber =                         generateFnFor('eth_blockNumber')
  EthQuery.prototype.getBlockTransactionCountByHash =      generateFnFor('eth_getBlockTransactionCountByHash')
  EthQuery.prototype.getBlockTransactionCountByNumber =    generateFnFor('eth_getBlockTransactionCountByNumber')
  EthQuery.prototype.getUncleCountByBlockHash =            generateFnFor('eth_getUncleCountByBlockHash')
  EthQuery.prototype.getUncleCountByBlockNumber =          generateFnFor('eth_getUncleCountByBlockNumber')
  EthQuery.prototype.sign =                                generateFnFor('eth_sign')
  EthQuery.prototype.sendTransaction =                     generateFnFor('eth_sendTransaction')
  EthQuery.prototype.sendRawTransaction =                  generateFnFor('eth_sendRawTransaction')
  EthQuery.prototype.estimateGas =                         generateFnFor('eth_estimateGas')
  EthQuery.prototype.getBlockByHash =                      generateFnFor('eth_getBlockByHash')
  EthQuery.prototype.getBlockByNumber =                    generateFnFor('eth_getBlockByNumber')
  EthQuery.prototype.getTransactionByHash =                generateFnFor('eth_getTransactionByHash')
  EthQuery.prototype.getTransactionByBlockHashAndIndex =   generateFnFor('eth_getTransactionByBlockHashAndIndex')
  EthQuery.prototype.getTransactionByBlockNumberAndIndex = generateFnFor('eth_getTransactionByBlockNumberAndIndex')
  EthQuery.prototype.getTransactionReceipt =               generateFnFor('eth_getTransactionReceipt')
  EthQuery.prototype.getUncleByBlockHashAndIndex =         generateFnFor('eth_getUncleByBlockHashAndIndex')
  EthQuery.prototype.getUncleByBlockNumberAndIndex =       generateFnFor('eth_getUncleByBlockNumberAndIndex')
  EthQuery.prototype.getCompilers =                        generateFnFor('eth_getCompilers')
  EthQuery.prototype.compileLLL =                          generateFnFor('eth_compileLLL')
  EthQuery.prototype.compileSolidity =                     generateFnFor('eth_compileSolidity')
  EthQuery.prototype.compileSerpent =                      generateFnFor('eth_compileSerpent')
  EthQuery.prototype.newFilter =                           generateFnFor('eth_newFilter')
  EthQuery.prototype.newBlockFilter =                      generateFnFor('eth_newBlockFilter')
  EthQuery.prototype.newPendingTransactionFilter =         generateFnFor('eth_newPendingTransactionFilter')
  EthQuery.prototype.uninstallFilter =                     generateFnFor('eth_uninstallFilter')
  EthQuery.prototype.getFilterChanges =                    generateFnFor('eth_getFilterChanges')
  EthQuery.prototype.getFilterLogs =                       generateFnFor('eth_getFilterLogs')
  EthQuery.prototype.getLogs =                             generateFnFor('eth_getLogs')
  EthQuery.prototype.getWork =                             generateFnFor('eth_getWork')
  EthQuery.prototype.submitWork =                          generateFnFor('eth_submitWork')
  EthQuery.prototype.submitHashrate =                      generateFnFor('eth_submitHashrate')
  
  // network level
  
  EthQuery.prototype.sendAsync = function(opts, cb){
    const self = this
    self.currentProvider.sendAsync(createPayload(opts), function(err, response){
      if (!err && response.error) err = new Error('EthQuery - RPC Error - '+response.error.message)
      if (err) return cb(err)
      cb(null, response.result)
    })
  }
  
  // util
  
  function generateFnFor(methodName){
    return function(){
      const self = this
      var args = [].slice.call(arguments)
      var cb = args.pop()
      self.sendAsync({
        method: methodName,
        params: args,
      }, cb)
    }
  }
  
  function generateFnWithDefaultBlockFor(argCount, methodName){
    return function(){
      const self = this
      var args = [].slice.call(arguments)
      var cb = args.pop()
      // set optional default block param
      if (args.length < argCount) args.push('latest')
      self.sendAsync({
        method: methodName,
        params: args,
      }, cb)
    }
  }
  
  function createPayload(data){
    return extend({
      // defaults
      id: createRandomId(),
      jsonrpc: '2.0',
      params: [],
      // user-specified
    }, data)
  }
  
  },{"json-rpc-random-id":191,"xtend":423}],136:[function(require,module,exports){
  const ethUtil = require('ethereumjs-util')
  const ethAbi = require('ethereumjs-abi')
  
  module.exports = {
  
    concatSig: function (v, r, s) {
      const rSig = ethUtil.fromSigned(r)
      const sSig = ethUtil.fromSigned(s)
      const vSig = ethUtil.bufferToInt(v)
      const rStr = padWithZeroes(ethUtil.toUnsigned(rSig).toString('hex'), 64)
      const sStr = padWithZeroes(ethUtil.toUnsigned(sSig).toString('hex'), 64)
      const vStr = ethUtil.stripHexPrefix(ethUtil.intToHex(vSig))
      return ethUtil.addHexPrefix(rStr.concat(sStr, vStr)).toString('hex')
    },
  
    normalize: function (input) {
      if (!input) return
  
      if (typeof input === 'number') {
        const buffer = ethUtil.toBuffer(input)
        input = ethUtil.bufferToHex(buffer)
      }
  
      if (typeof input !== 'string') {
        var msg = 'eth-sig-util.normalize() requires hex string or integer input.'
        msg += ' received ' + (typeof input) + ': ' + input
        throw new Error(msg)
      }
  
      return ethUtil.addHexPrefix(input.toLowerCase())
    },
  
    personalSign: function (privateKey, msgParams) {
      var message = ethUtil.toBuffer(msgParams.data)
      var msgHash = ethUtil.hashPersonalMessage(message)
      var sig = ethUtil.ecsign(msgHash, privateKey)
      var serialized = ethUtil.bufferToHex(this.concatSig(sig.v, sig.r, sig.s))
      return serialized
    },
  
    recoverPersonalSignature: function (msgParams) {
      const publicKey = getPublicKeyFor(msgParams)
      const sender = ethUtil.publicToAddress(publicKey)
      const senderHex = ethUtil.bufferToHex(sender)
      return senderHex
    },
  
    extractPublicKey: function (msgParams) {
      const publicKey = getPublicKeyFor(msgParams)
      return '0x' + publicKey.toString('hex')
    },
  
    typedSignatureHash: function (typedData) {
      const hashBuffer = typedSignatureHash(typedData)
      return ethUtil.bufferToHex(hashBuffer)
    },
  
    signTypedData: function (privateKey, msgParams) {
      const msgHash = typedSignatureHash(msgParams.data)
      const sig = ethUtil.ecsign(msgHash, privateKey)
      return ethUtil.bufferToHex(this.concatSig(sig.v, sig.r, sig.s))
    },
  
    recoverTypedSignature: function (msgParams) {
      const msgHash = typedSignatureHash(msgParams.data)
      const publicKey = recoverPublicKey(msgHash, msgParams.sig)
      const sender = ethUtil.publicToAddress(publicKey)
      return ethUtil.bufferToHex(sender)
    }
  
  }
  
  /**
   * @param typedData - Array of data along with types, as per EIP712.
   * @returns Buffer
   */
  function typedSignatureHash(typedData) {
    const error = new Error('Expect argument to be non-empty array')
    if (typeof typedData !== 'object' || !typedData.length) throw error
  
    const data = typedData.map(function (e) {
      return e.type === 'bytes' ? ethUtil.toBuffer(e.value) : e.value
    })
    const types = typedData.map(function (e) { return e.type })
    const schema = typedData.map(function (e) {
      if (!e.name) throw error
      return e.type + ' ' + e.name
    })
  
    return ethAbi.soliditySHA3(
      ['bytes32', 'bytes32'],
      [
        ethAbi.soliditySHA3(new Array(typedData.length).fill('string'), schema),
        ethAbi.soliditySHA3(types, data)
      ]
    )
  }
  
  function recoverPublicKey(hash, sig) {
    const signature = ethUtil.toBuffer(sig)
    const sigParams = ethUtil.fromRpcSig(signature)
    return ethUtil.ecrecover(hash, sigParams.v, sigParams.r, sigParams.s)
  }
  
  function getPublicKeyFor (msgParams) {
    const message = ethUtil.toBuffer(msgParams.data)
    const msgHash = ethUtil.hashPersonalMessage(message)
    return recoverPublicKey(msgHash, msgParams.sig)
  }
  
  
  function padWithZeroes (number, length) {
    var myString = '' + number
    while (myString.length < length) {
      myString = '0' + myString
    }
    return myString
  }
  
  },{"ethereumjs-abi":138,"ethereumjs-util":141}],137:[function(require,module,exports){
  module.exports={
    "genesisGasLimit": {
      "v": 5000,
      "d": "Gas limit of the Genesis block."
    },
    "genesisDifficulty": {
      "v": 17179869184,
      "d": "Difficulty of the Genesis block."
    },
    "genesisNonce": {
      "v": "0x0000000000000042",
      "d": "the geneis nonce"
    },
    "genesisExtraData": {
      "v": "0x11bbe8db4e347b4e8c937c1c8370e4b5ed33adb3db69cbdb7a38e1e50b1b82fa",
      "d": "extra data "
    },
    "genesisHash": {
      "v": "0xd4e56740f876aef8c010b86a40d5f56745a118d0906a34e69aec8c0db1cb8fa3",
      "d": "genesis hash"
    },
    "genesisStateRoot": {
      "v": "0xd7f8974fb5ac78d9ac099b9ad5018bedc2ce0a72dad1827a1709da30580f0544",
      "d": "the genesis state root"
    },
    "minGasLimit": {
      "v": 5000,
      "d": "Minimum the gas limit may ever be."
    },
    "gasLimitBoundDivisor": {
      "v": 1024,
      "d": "The bound divisor of the gas limit, used in update calculations."
    },
    "minimumDifficulty": {
      "v": 131072,
      "d": "The minimum that the difficulty may ever be."
    },
    "difficultyBoundDivisor": {
      "v": 2048,
      "d": "The bound divisor of the difficulty, used in the update calculations."
    },
    "durationLimit": {
      "v": 13,
      "d": "The decision boundary on the blocktime duration used to determine whether difficulty should go up or not."
    },
    "maximumExtraDataSize": {
      "v": 32,
      "d": "Maximum size extra data may be after Genesis."
    },
    "epochDuration": {
      "v": 30000,
      "d": "Duration between proof-of-work epochs."
    },
    "stackLimit": {
      "v": 1024,
      "d": "Maximum size of VM stack allowed."
    },
    "callCreateDepth": {
      "v": 1024,
      "d": "Maximum depth of call/create stack."
    },
  
    "tierStepGas": {
      "v": [0, 2, 3, 5, 8, 10, 20],
      "d": "Once per operation, for a selection of them."
    },
    "expGas": {
      "v": 10,
      "d": "Once per EXP instruction."
    },
    "expByteGas": {
      "v": 10,
      "d": "Times ceil(log256(exponent)) for the EXP instruction."
    },
  
    "sha3Gas": {
      "v": 30,
      "d": "Once per SHA3 operation."
    },
    "sha3WordGas": {
      "v": 6,
      "d": "Once per word of the SHA3 operation's data."
    },
    "sloadGas": {
      "v": 50,
      "d": "Once per SLOAD operation."
    },
    "sstoreSetGas": {
      "v": 20000,
      "d": "Once per SSTORE operation if the zeroness changes from zero."
    },
    "sstoreResetGas": {
      "v": 5000,
      "d": "Once per SSTORE operation if the zeroness does not change from zero."
    },
    "sstoreRefundGas": {
      "v": 15000,
      "d": "Once per SSTORE operation if the zeroness changes to zero."
    },
    "jumpdestGas": {
      "v": 1,
      "d": "Refunded gas, once per SSTORE operation if the zeroness changes to zero."
    },
  
    "logGas": {
      "v": 375,
      "d": "Per LOG* operation."
    },
    "logDataGas": {
      "v": 8,
      "d": "Per byte in a LOG* operation's data."
    },
    "logTopicGas": {
      "v": 375,
      "d": "Multiplied by the * of the LOG*, per LOG transaction. e.g. LOG0 incurs 0 * c_txLogTopicGas, LOG4 incurs 4 * c_txLogTopicGas."
    },
  
    "createGas": {
      "v": 32000,
      "d": "Once per CREATE operation & contract-creation transaction."
    },
  
    "callGas": {
      "v": 40,
      "d": "Once per CALL operation & message call transaction."
    },
    "callStipend": {
      "v": 2300,
      "d": "Free gas given at beginning of call."
    },
    "callValueTransferGas": {
      "v": 9000,
      "d": "Paid for CALL when the value transfor is non-zero."
    },
    "callNewAccountGas": {
      "v": 25000,
      "d": "Paid for CALL when the destination address didn't exist prior."
    },
  
    "suicideRefundGas": {
      "v": 24000,
      "d": "Refunded following a suicide operation."
    },
  
    "memoryGas": {
      "v": 3,
      "d": "Times the address of the (highest referenced byte in memory + 1). NOTE: referencing happens on read, write and in instructions such as RETURN and CALL."
    },
    "quadCoeffDiv": {
      "v": 512,
      "d": "Divisor for the quadratic particle of the memory cost equation."
    },
  
    "createDataGas": {
      "v": 200,
      "d": ""
    },
    "txGas": {
      "v": 21000,
      "d": "Per transaction. NOTE: Not payable on data of calls between transactions."
    },
    "txCreation": {
      "v": 32000,
      "d": "the cost of creating a contract via tx"
    },
    "txDataZeroGas": {
      "v": 4,
      "d": "Per byte of data attached to a transaction that equals zero. NOTE: Not payable on data of calls between transactions."
    },
    "txDataNonZeroGas": {
      "v": 68,
      "d": "Per byte of data attached to a transaction that is not equal to zero. NOTE: Not payable on data of calls between transactions."
    },
  
    "copyGas": {
      "v": 3,
      "d": "Multiplied by the number of 32-byte words that are copied (round up) for any *COPY operation and added."
    },
  
    "ecrecoverGas": {
      "v": 3000,
      "d": ""
    },
    "sha256Gas": {
      "v": 60,
      "d": ""
    },
    "sha256WordGas": {
      "v": 12,
      "d": ""
    },
    "ripemd160Gas": {
      "v": 600,
      "d": ""
    },
    "ripemd160WordGas": {
      "v": 120,
      "d": ""
    },
    "identityGas": {
      "v": 15,
      "d": ""
    },
    "identityWordGas": {
      "v": 3,
      "d": ""
    },
    "minerReward": {
      "v": "5000000000000000000",
      "d": "the amount a miner get rewarded for mining a block"
    },
    "ommerReward": {
      "v": "625000000000000000",
      "d": "The amount of wei a miner of an uncle block gets for being included in the blockchain"
    },
    "niblingReward": {
      "v": "156250000000000000",
      "d": "the amount a miner gets for including a uncle"
    },
    "homeSteadForkNumber": {
      "v": 1150000,
      "d": "the block that the Homestead fork started at"
    },
    "homesteadRepriceForkNumber": {
      "v": 2463000,
      "d": "the block that the Homestead Reprice (EIP150) fork started at"
    },
    "timebombPeriod": {
      "v": 100000,
      "d": "Exponential difficulty timebomb period"
    },
    "freeBlockPeriod": {
      "v": 2
    }
  }
  
  },{}],138:[function(require,module,exports){
  module.exports = require('./lib/index.js')
  
  },{"./lib/index.js":139}],139:[function(require,module,exports){
  (function (Buffer){
  const utils = require('ethereumjs-util')
  const BN = require('bn.js')
  
  var ABI = function () {
  }
  
  // Convert from short to canonical names
  // FIXME: optimise or make this nicer?
  function elementaryName (name) {
    if (name.startsWith('int[')) {
      return 'int256' + name.slice(3)
    } else if (name === 'int') {
      return 'int256'
    } else if (name.startsWith('uint[')) {
      return 'uint256' + name.slice(4)
    } else if (name === 'uint') {
      return 'uint256'
    } else if (name.startsWith('fixed[')) {
      return 'fixed128x128' + name.slice(5)
    } else if (name === 'fixed') {
      return 'fixed128x128'
    } else if (name.startsWith('ufixed[')) {
      return 'ufixed128x128' + name.slice(6)
    } else if (name === 'ufixed') {
      return 'ufixed128x128'
    }
    return name
  }
  
  ABI.eventID = function (name, types) {
    // FIXME: use node.js util.format?
    var sig = name + '(' + types.map(elementaryName).join(',') + ')'
    return utils.sha3(new Buffer(sig))
  }
  
  ABI.methodID = function (name, types) {
    return ABI.eventID(name, types).slice(0, 4)
  }
  
  // Parse N from type<N>
  function parseTypeN (type) {
    return parseInt(/^\D+(\d+)$/.exec(type)[1], 10)
  }
  
  // Parse N,M from type<N>x<M>
  function parseTypeNxM (type) {
    var tmp = /^\D+(\d+)x(\d+)$/.exec(type)
    return [ parseInt(tmp[1], 10), parseInt(tmp[2], 10) ]
  }
  
  // Parse N in type[<N>] where "type" can itself be an array type.
  function parseTypeArray (type) {
    var tmp = type.match(/(.*)\[(.*?)\]$/)
    if (tmp) {
      return tmp[2] === '' ? 'dynamic' : parseInt(tmp[2], 10)
    }
    return null
  }
  
  function parseNumber (arg) {
    var type = typeof arg
    if (type === 'string') {
      if (utils.isHexPrefixed(arg)) {
        return new BN(utils.stripHexPrefix(arg), 16)
      } else {
        return new BN(arg, 10)
      }
    } else if (type === 'number') {
      return new BN(arg)
    } else if (arg.toArray) {
      // assume this is a BN for the moment, replace with BN.isBN soon
      return arg
    } else {
      throw new Error('Argument is not a number')
    }
  }
  
  // someMethod(bytes,uint)
  // someMethod(bytes,uint):(boolean)
  function parseSignature (sig) {
    var tmp = /^(\w+)\((.+)\)$/.exec(sig)
    if (tmp.length !== 3) {
      throw new Error('Invalid method signature')
    }
  
    var args = /^(.+)\):\((.+)$/.exec(tmp[2])
  
    if (args !== null && args.length === 3) {
      return {
        method: tmp[1],
        args: args[1].split(','),
        retargs: args[2].split(',')
      }
    } else {
      return {
        method: tmp[1],
        args: tmp[2].split(',')
      }
    }
  }
  
  // Encodes a single item (can be dynamic array)
  // @returns: Buffer
  function encodeSingle (type, arg) {
    var size, num, ret, i
  
    if (type === 'address') {
      return encodeSingle('uint160', parseNumber(arg))
    } else if (type === 'bool') {
      return encodeSingle('uint8', arg ? 1 : 0)
    } else if (type === 'string') {
      return encodeSingle('bytes', new Buffer(arg, 'utf8'))
    } else if (isArray(type)) {
      // this part handles fixed-length ([2]) and variable length ([]) arrays
      // NOTE: we catch here all calls to arrays, that simplifies the rest
      if (typeof arg.length === 'undefined') {
        throw new Error('Not an array?')
      }
      size = parseTypeArray(type)
      if (size !== 'dynamic' && size !== 0 && arg.length > size) {
        throw new Error('Elements exceed array size: ' + size)
      }
      ret = []
      type = type.slice(0, type.lastIndexOf('['))
      if (typeof arg === 'string') {
        arg = JSON.parse(arg)
      }
      for (i in arg) {
        ret.push(encodeSingle(type, arg[i]))
      }
      if (size === 'dynamic') {
        var length = encodeSingle('uint256', arg.length)
        ret.unshift(length)
      }
      return Buffer.concat(ret)
    } else if (type === 'bytes') {
      arg = new Buffer(arg)
  
      ret = Buffer.concat([ encodeSingle('uint256', arg.length), arg ])
  
      if ((arg.length % 32) !== 0) {
        ret = Buffer.concat([ ret, utils.zeros(32 - (arg.length % 32)) ])
      }
  
      return ret
    } else if (type.startsWith('bytes')) {
      size = parseTypeN(type)
      if (size < 1 || size > 32) {
        throw new Error('Invalid bytes<N> width: ' + size)
      }
  
      return utils.setLengthRight(arg, 32)
    } else if (type.startsWith('uint')) {
      size = parseTypeN(type)
      if ((size % 8) || (size < 8) || (size > 256)) {
        throw new Error('Invalid uint<N> width: ' + size)
      }
  
      num = parseNumber(arg)
      if (num.bitLength() > size) {
        throw new Error('Supplied uint exceeds width: ' + size + ' vs ' + num.bitLength())
      }
  
      if (num < 0) {
        throw new Error('Supplied uint is negative')
      }
  
      return num.toArrayLike(Buffer, 'be', 32)
    } else if (type.startsWith('int')) {
      size = parseTypeN(type)
      if ((size % 8) || (size < 8) || (size > 256)) {
        throw new Error('Invalid int<N> width: ' + size)
      }
  
      num = parseNumber(arg)
      if (num.bitLength() > size) {
        throw new Error('Supplied int exceeds width: ' + size + ' vs ' + num.bitLength())
      }
  
      return num.toTwos(256).toArrayLike(Buffer, 'be', 32)
    } else if (type.startsWith('ufixed')) {
      size = parseTypeNxM(type)
  
      num = parseNumber(arg)
  
      if (num < 0) {
        throw new Error('Supplied ufixed is negative')
      }
  
      return encodeSingle('uint256', num.mul(new BN(2).pow(new BN(size[1]))))
    } else if (type.startsWith('fixed')) {
      size = parseTypeNxM(type)
  
      return encodeSingle('int256', parseNumber(arg).mul(new BN(2).pow(new BN(size[1]))))
    }
  
    throw new Error('Unsupported or invalid type: ' + type)
  }
  
  // Decodes a single item (can be dynamic array)
  // @returns: array
  // FIXME: this method will need a lot of attention at checking limits and validation
  function decodeSingle (parsedType, data, offset) {
    if (typeof parsedType === 'string') {
      parsedType = parseType(parsedType)
    }
    var size, num, ret, i
  
    if (parsedType.name === 'address') {
      return decodeSingle(parsedType.rawType, data, offset).toArrayLike(Buffer, 'be', 20).toString('hex')
    } else if (parsedType.name === 'bool') {
      return decodeSingle(parsedType.rawType, data, offset).toString() === new BN(1).toString()
    } else if (parsedType.name === 'string') {
      var bytes = decodeSingle(parsedType.rawType, data, offset)
      return new Buffer(bytes, 'utf8').toString()
    } else if (parsedType.isArray) {
      // this part handles fixed-length arrays ([2]) and variable length ([]) arrays
      // NOTE: we catch here all calls to arrays, that simplifies the rest
      ret = []
      size = parsedType.size
  
      if (parsedType.size === 'dynamic') {
        offset = decodeSingle('uint256', data, offset).toNumber()
        size = decodeSingle('uint256', data, offset).toNumber()
        offset = offset + 32
      }
      for (i = 0; i < size; i++) {
        var decoded = decodeSingle(parsedType.subArray, data, offset)
        ret.push(decoded)
        offset += parsedType.subArray.memoryUsage
      }
      return ret
    } else if (parsedType.name === 'bytes') {
      offset = decodeSingle('uint256', data, offset).toNumber()
      size = decodeSingle('uint256', data, offset).toNumber()
      return data.slice(offset + 32, offset + 32 + size)
    } else if (parsedType.name.startsWith('bytes')) {
      return data.slice(offset, offset + parsedType.size)
    } else if (parsedType.name.startsWith('uint')) {
      num = new BN(data.slice(offset, offset + 32), 16, 'be')
      if (num.bitLength() > parsedType.size) {
        throw new Error('Decoded int exceeds width: ' + parsedType.size + ' vs ' + num.bitLength())
      }
      return num
    } else if (parsedType.name.startsWith('int')) {
      num = new BN(data.slice(offset, offset + 32), 16, 'be').fromTwos(256)
      if (num.bitLength() > parsedType.size) {
        throw new Error('Decoded uint exceeds width: ' + parsedType.size + ' vs ' + num.bitLength())
      }
  
      return num
    } else if (parsedType.name.startsWith('ufixed')) {
      size = new BN(2).pow(new BN(parsedType.size[1]))
      num = decodeSingle('uint256', data, offset)
      if (!num.mod(size).isZero()) {
        throw new Error('Decimals not supported yet')
      }
      return num.div(size)
    } else if (parsedType.name.startsWith('fixed')) {
      size = new BN(2).pow(new BN(parsedType.size[1]))
      num = decodeSingle('int256', data, offset)
      if (!num.mod(size).isZero()) {
        throw new Error('Decimals not supported yet')
      }
      return num.div(size)
    }
    throw new Error('Unsupported or invalid type: ' + parsedType.name)
  }
  
  // Parse the given type
  // @returns: {} containing the type itself, memory usage and (including size and subArray if applicable)
  function parseType (type) {
    var size
    var ret
    if (isArray(type)) {
      size = parseTypeArray(type)
      var subArray = type.slice(0, type.lastIndexOf('['))
      subArray = parseType(subArray)
      ret = {
        isArray: true,
        name: type,
        size: size,
        memoryUsage: size === 'dynamic' ? 32 : subArray.memoryUsage * size,
        subArray: subArray
      }
      return ret
    } else {
      var rawType
      switch (type) {
        case 'address':
          rawType = 'uint160'
          break
        case 'bool':
          rawType = 'uint8'
          break
        case 'string':
          rawType = 'bytes'
          break
      }
      ret = {
        rawType: rawType,
        name: type,
        memoryUsage: 32
      }
  
      if (type.startsWith('bytes') && type !== 'bytes' || type.startsWith('uint') || type.startsWith('int')) {
        ret.size = parseTypeN(type)
      } else if (type.startsWith('ufixed') || type.startsWith('fixed')) {
        ret.size = parseTypeNxM(type)
      }
  
      if (type.startsWith('bytes') && type !== 'bytes' && (ret.size < 1 || ret.size > 32)) {
        throw new Error('Invalid bytes<N> width: ' + ret.size)
      }
      if ((type.startsWith('uint') || type.startsWith('int')) && (ret.size % 8 || ret.size < 8 || ret.size > 256)) {
        throw new Error('Invalid int/uint<N> width: ' + ret.size)
      }
      return ret
    }
  }
  
  // Is a type dynamic?
  function isDynamic (type) {
    // FIXME: handle all types? I don't think anything is missing now
    return (type === 'string') || (type === 'bytes') || (parseTypeArray(type) === 'dynamic')
  }
  
  // Is a type an array?
  function isArray (type) {
    return type.lastIndexOf(']') === type.length - 1
  }
  
  // Encode a method/event with arguments
  // @types an array of string type names
  // @args  an array of the appropriate values
  ABI.rawEncode = function (types, values) {
    var output = []
    var data = []
  
    var headLength = 0
  
    types.forEach(function (type) {
      if (isArray(type)) {
        var size = parseTypeArray(type)
  
        if (size !== 'dynamic') {
          headLength += 32 * size
        } else {
          headLength += 32
        }
      } else {
        headLength += 32
      }
    })
  
    for (var i = 0; i < types.length; i++) {
      var type = elementaryName(types[i])
      var value = values[i]
      var cur = encodeSingle(type, value)
  
      // Use the head/tail method for storing dynamic data
      if (isDynamic(type)) {
        output.push(encodeSingle('uint256', headLength))
        data.push(cur)
        headLength += cur.length
      } else {
        output.push(cur)
      }
    }
  
    return Buffer.concat(output.concat(data))
  }
  
  ABI.rawDecode = function (types, data) {
    var ret = []
    data = new Buffer(data)
    var offset = 0
    for (var i = 0; i < types.length; i++) {
      var type = elementaryName(types[i])
      var parsed = parseType(type, data, offset)
      var decoded = decodeSingle(parsed, data, offset)
      offset += parsed.memoryUsage
      ret.push(decoded)
    }
    return ret
  }
  
  ABI.simpleEncode = function (method) {
    var args = Array.prototype.slice.call(arguments).slice(1)
    var sig = parseSignature(method)
  
    // FIXME: validate/convert arguments
    if (args.length !== sig.args.length) {
      throw new Error('Argument count mismatch')
    }
  
    return Buffer.concat([ ABI.methodID(sig.method, sig.args), ABI.rawEncode(sig.args, args) ])
  }
  
  ABI.simpleDecode = function (method, data) {
    var sig = parseSignature(method)
  
    // FIXME: validate/convert arguments
    if (!sig.retargs) {
      throw new Error('No return values in method')
    }
  
    return ABI.rawDecode(sig.retargs, data)
  }
  
  function stringify (type, value) {
    if (type.startsWith('address') || type.startsWith('bytes')) {
      return '0x' + value.toString('hex')
    } else {
      return value.toString()
    }
  }
  
  ABI.stringify = function (types, values) {
    var ret = []
  
    for (var i in types) {
      var type = types[i]
      var value = values[i]
  
      // if it is an array type, concat the items
      if (/^[^\[]+\[.*\]$/.test(type)) {
        value = value.map(function (item) {
          return stringify(type, item)
        }).join(', ')
      } else {
        value = stringify(type, value)
      }
  
      ret.push(value)
    }
  
    return ret
  }
  
  ABI.solidityPack = function (types, values) {
    if (types.length !== values.length) {
      throw new Error('Number of types are not matching the values')
    }
  
    var size, num
    var ret = []
  
    for (var i = 0; i < types.length; i++) {
      var type = elementaryName(types[i])
      var value = values[i]
  
      if (type === 'bytes') {
        ret.push(value)
      } else if (type === 'string') {
        ret.push(new Buffer(value, 'utf8'))
      } else if (type === 'bool') {
        ret.push(new Buffer(value ? '01' : '00', 'hex'))
      } else if (type === 'address') {
        ret.push(utils.setLengthLeft(value, 20))
      } else if (type.startsWith('bytes')) {
        size = parseTypeN(type)
        if (size < 1 || size > 32) {
          throw new Error('Invalid bytes<N> width: ' + size)
        }
  
        ret.push(utils.setLengthRight(value, size))
      } else if (type.startsWith('uint')) {
        size = parseTypeN(type)
        if ((size % 8) || (size < 8) || (size > 256)) {
          throw new Error('Invalid uint<N> width: ' + size)
        }
  
        num = parseNumber(value)
        if (num.bitLength() > size) {
          throw new Error('Supplied uint exceeds width: ' + size + ' vs ' + num.bitLength())
        }
  
        ret.push(num.toArrayLike(Buffer, 'be', size / 8))
      } else if (type.startsWith('int')) {
        size = parseTypeN(type)
        if ((size % 8) || (size < 8) || (size > 256)) {
          throw new Error('Invalid int<N> width: ' + size)
        }
  
        num = parseNumber(value)
        if (num.bitLength() > size) {
          throw new Error('Supplied int exceeds width: ' + size + ' vs ' + num.bitLength())
        }
  
        ret.push(num.toTwos(size).toArrayLike(Buffer, 'be', size / 8))
      } else {
        // FIXME: support all other types
        throw new Error('Unsupported or invalid type: ' + type)
      }
    }
  
    return Buffer.concat(ret)
  }
  
  ABI.soliditySHA3 = function (types, values) {
    return utils.sha3(ABI.solidityPack(types, values))
  }
  
  ABI.soliditySHA256 = function (types, values) {
    return utils.sha256(ABI.solidityPack(types, values))
  }
  
  ABI.solidityRIPEMD160 = function (types, values) {
    return utils.ripemd160(ABI.solidityPack(types, values), true)
  }
  
  // Serpent's users are familiar with this encoding
  // - s: string
  // - b: bytes
  // - b<N>: bytes<N>
  // - i: int256
  // - a: int256[]
  
  function isNumeric (c) {
    // FIXME: is this correct? Seems to work
    return (c >= '0') && (c <= '9')
  }
  
  // For a "documentation" refer to https://github.com/ethereum/serpent/blob/develop/preprocess.cpp
  ABI.fromSerpent = function (sig) {
    var ret = []
    for (var i = 0; i < sig.length; i++) {
      var type = sig[i]
      if (type === 's') {
        ret.push('bytes')
      } else if (type === 'b') {
        var tmp = 'bytes'
        var j = i + 1
        while ((j < sig.length) && isNumeric(sig[j])) {
          tmp += sig[j] - '0'
          j++
        }
        i = j - 1
        ret.push(tmp)
      } else if (type === 'i') {
        ret.push('int256')
      } else if (type === 'a') {
        ret.push('int256[]')
      } else {
        throw new Error('Unsupported or invalid type: ' + type)
      }
    }
    return ret
  }
  
  ABI.toSerpent = function (types) {
    var ret = []
    for (var i = 0; i < types.length; i++) {
      var type = types[i]
      if (type === 'bytes') {
        ret.push('s')
      } else if (type.startsWith('bytes')) {
        ret.push('b' + parseTypeN(type))
      } else if (type === 'int256') {
        ret.push('i')
      } else if (type === 'int256[]') {
        ret.push('a')
      } else {
        throw new Error('Unsupported or invalid type: ' + type)
      }
    }
    return ret.join('')
  }
  
  module.exports = ABI
  
  }).call(this,require("buffer").Buffer)
  },{"bn.js":53,"buffer":84,"ethereumjs-util":141}],140:[function(require,module,exports){
  (function (Buffer){
  'use strict';
  
  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
  
  var ethUtil = require('ethereumjs-util');
  var fees = require('ethereum-common/params.json');
  var BN = ethUtil.BN;
  
  // secp256k1n/2
  var N_DIV_2 = new BN('7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0', 16);
  
  /**
   * Creates a new transaction object.
   *
   * @example
   * var rawTx = {
   *   nonce: '00',
   *   gasPrice: '09184e72a000',
   *   gasLimit: '2710',
   *   to: '0000000000000000000000000000000000000000',
   *   value: '00',
   *   data: '7f7465737432000000000000000000000000000000000000000000000000000000600057',
   *   v: '1c',
   *   r: '5e1d3a76fbf824220eafc8c79ad578ad2b67d01b0c2425eb1f1347e8f50882ab',
   *   s: '5bd428537f05f9830e93792f90ea6a3e2d1ee84952dd96edbae9f658f831ab13'
   * };
   * var tx = new Transaction(rawTx);
   *
   * @class
   * @param {Buffer | Array | Object} data a transaction can be initiailized with either a buffer containing the RLP serialized transaction or an array of buffers relating to each of the tx Properties, listed in order below in the example.
   *
   * Or lastly an Object containing the Properties of the transaction like in the Usage example.
   *
   * For Object and Arrays each of the elements can either be a Buffer, a hex-prefixed (0x) String , Number, or an object with a toBuffer method such as Bignum
   *
   * @property {Buffer} raw The raw rlp encoded transaction
   * @param {Buffer} data.nonce nonce number
   * @param {Buffer} data.gasLimit transaction gas limit
   * @param {Buffer} data.gasPrice transaction gas price
   * @param {Buffer} data.to to the to address
   * @param {Buffer} data.value the amount of ether sent
   * @param {Buffer} data.data this will contain the data of the message or the init of a contract
   * @param {Buffer} data.v EC signature parameter
   * @param {Buffer} data.r EC signature parameter
   * @param {Buffer} data.s EC recovery ID
   * @param {Number} data.chainId EIP 155 chainId - mainnet: 1, ropsten: 3
   * */
  
  var Transaction = function () {
    function Transaction(data) {
      _classCallCheck(this, Transaction);
  
      data = data || {};
      // Define Properties
      var fields = [{
        name: 'nonce',
        length: 32,
        allowLess: true,
        default: new Buffer([])
      }, {
        name: 'gasPrice',
        length: 32,
        allowLess: true,
        default: new Buffer([])
      }, {
        name: 'gasLimit',
        alias: 'gas',
        length: 32,
        allowLess: true,
        default: new Buffer([])
      }, {
        name: 'to',
        allowZero: true,
        length: 20,
        default: new Buffer([])
      }, {
        name: 'value',
        length: 32,
        allowLess: true,
        default: new Buffer([])
      }, {
        name: 'data',
        alias: 'input',
        allowZero: true,
        default: new Buffer([])
      }, {
        name: 'v',
        allowZero: true,
        default: new Buffer([0x1c])
      }, {
        name: 'r',
        length: 32,
        allowZero: true,
        allowLess: true,
        default: new Buffer([])
      }, {
        name: 's',
        length: 32,
        allowZero: true,
        allowLess: true,
        default: new Buffer([])
      }];
  
      /**
       * Returns the rlp encoding of the transaction
       * @method serialize
       * @return {Buffer}
       * @memberof Transaction
       * @name serialize
       */
      // attached serialize
      ethUtil.defineProperties(this, fields, data);
  
      /**
       * @property {Buffer} from (read only) sender address of this transaction, mathematically derived from other parameters.
       * @name from
       * @memberof Transaction
       */
      Object.defineProperty(this, 'from', {
        enumerable: true,
        configurable: true,
        get: this.getSenderAddress.bind(this)
      });
  
      // calculate chainId from signature
      var sigV = ethUtil.bufferToInt(this.v);
      var chainId = Math.floor((sigV - 35) / 2);
      if (chainId < 0) chainId = 0;
  
      // set chainId
      this._chainId = chainId || data.chainId || 0;
      this._homestead = true;
    }
  
    /**
     * If the tx's `to` is to the creation address
     * @return {Boolean}
     */
  
  
    Transaction.prototype.toCreationAddress = function toCreationAddress() {
      return this.to.toString('hex') === '';
    };
  
    /**
     * Computes a sha3-256 hash of the serialized tx
     * @param {Boolean} [includeSignature=true] whether or not to include the signature
     * @return {Buffer}
     */
  
  
    Transaction.prototype.hash = function hash(includeSignature) {
      if (includeSignature === undefined) includeSignature = true;
  
      // EIP155 spec:
      // when computing the hash of a transaction for purposes of signing or recovering,
      // instead of hashing only the first six elements (ie. nonce, gasprice, startgas, to, value, data),
      // hash nine elements, with v replaced by CHAIN_ID, r = 0 and s = 0
  
      var items = void 0;
      if (includeSignature) {
        items = this.raw;
      } else {
        if (this._chainId > 0) {
          var raw = this.raw.slice();
          this.v = this._chainId;
          this.r = 0;
          this.s = 0;
          items = this.raw;
          this.raw = raw;
        } else {
          items = this.raw.slice(0, 6);
        }
      }
  
      // create hash
      return ethUtil.rlphash(items);
    };
  
    /**
     * returns the public key of the sender
     * @return {Buffer}
     */
  
  
    Transaction.prototype.getChainId = function getChainId() {
      return this._chainId;
    };
  
    /**
     * returns the sender's address
     * @return {Buffer}
     */
  
  
    Transaction.prototype.getSenderAddress = function getSenderAddress() {
      if (this._from) {
        return this._from;
      }
      var pubkey = this.getSenderPublicKey();
      this._from = ethUtil.publicToAddress(pubkey);
      return this._from;
    };
  
    /**
     * returns the public key of the sender
     * @return {Buffer}
     */
  
  
    Transaction.prototype.getSenderPublicKey = function getSenderPublicKey() {
      if (!this._senderPubKey || !this._senderPubKey.length) {
        if (!this.verifySignature()) throw new Error('Invalid Signature');
      }
      return this._senderPubKey;
    };
  
    /**
     * Determines if the signature is valid
     * @return {Boolean}
     */
  
  
    Transaction.prototype.verifySignature = function verifySignature() {
      var msgHash = this.hash(false);
      // All transaction signatures whose s-value is greater than secp256k1n/2 are considered invalid.
      if (this._homestead && new BN(this.s).cmp(N_DIV_2) === 1) {
        return false;
      }
  
      try {
        var v = ethUtil.bufferToInt(this.v);
        if (this._chainId > 0) {
          v -= this._chainId * 2 + 8;
        }
        this._senderPubKey = ethUtil.ecrecover(msgHash, v, this.r, this.s);
      } catch (e) {
        return false;
      }
  
      return !!this._senderPubKey;
    };
  
    /**
     * sign a transaction with a given a private key
     * @param {Buffer} privateKey
     */
  
  
    Transaction.prototype.sign = function sign(privateKey) {
      var msgHash = this.hash(false);
      var sig = ethUtil.ecsign(msgHash, privateKey);
      if (this._chainId > 0) {
        sig.v += this._chainId * 2 + 8;
      }
      Object.assign(this, sig);
    };
  
    /**
     * The amount of gas paid for the data in this tx
     * @return {BN}
     */
  
  
    Transaction.prototype.getDataFee = function getDataFee() {
      var data = this.raw[5];
      var cost = new BN(0);
      for (var i = 0; i < data.length; i++) {
        data[i] === 0 ? cost.iaddn(fees.txDataZeroGas.v) : cost.iaddn(fees.txDataNonZeroGas.v);
      }
      return cost;
    };
  
    /**
     * the minimum amount of gas the tx must have (DataFee + TxFee + Creation Fee)
     * @return {BN}
     */
  
  
    Transaction.prototype.getBaseFee = function getBaseFee() {
      var fee = this.getDataFee().iaddn(fees.txGas.v);
      if (this._homestead && this.toCreationAddress()) {
        fee.iaddn(fees.txCreation.v);
      }
      return fee;
    };
  
    /**
     * the up front amount that an account must have for this transaction to be valid
     * @return {BN}
     */
  
  
    Transaction.prototype.getUpfrontCost = function getUpfrontCost() {
      return new BN(this.gasLimit).imul(new BN(this.gasPrice)).iadd(new BN(this.value));
    };
  
    /**
     * validates the signature and checks to see if it has enough gas
     * @param {Boolean} [stringError=false] whether to return a string with a dscription of why the validation failed or return a Bloolean
     * @return {Boolean|String}
     */
  
  
    Transaction.prototype.validate = function validate(stringError) {
      var errors = [];
      if (!this.verifySignature()) {
        errors.push('Invalid Signature');
      }
  
      if (this.getBaseFee().cmp(new BN(this.gasLimit)) > 0) {
        errors.push(['gas limit is too low. Need at least ' + this.getBaseFee()]);
      }
  
      if (stringError === undefined || stringError === false) {
        return errors.length === 0;
      } else {
        return errors.join(' ');
      }
    };
  
    return Transaction;
  }();
  
  module.exports = Transaction;
  }).call(this,require("buffer").Buffer)
  },{"buffer":84,"ethereum-common/params.json":137,"ethereumjs-util":141}],141:[function(require,module,exports){
  'use strict';
  
  var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
  
  var createKeccakHash = require('keccak');
  var secp256k1 = require('secp256k1');
  var assert = require('assert');
  var rlp = require('rlp');
  var BN = require('bn.js');
  var createHash = require('create-hash');
  var Buffer = require('safe-buffer').Buffer;
  Object.assign(exports, require('ethjs-util'));
  
  /**
   * the max integer that this VM can handle (a ```BN```)
   * @var {BN} MAX_INTEGER
   */
  exports.MAX_INTEGER = new BN('ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff', 16);
  
  /**
   * 2^256 (a ```BN```)
   * @var {BN} TWO_POW256
   */
  exports.TWO_POW256 = new BN('10000000000000000000000000000000000000000000000000000000000000000', 16);
  
  /**
   * Keccak-256 hash of null (a ```String```)
   * @var {String} KECCAK256_NULL_S
   */
  exports.KECCAK256_NULL_S = 'c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470';
  exports.SHA3_NULL_S = exports.KECCAK256_NULL_S;
  
  /**
   * Keccak-256 hash of null (a ```Buffer```)
   * @var {Buffer} KECCAK256_NULL
   */
  exports.KECCAK256_NULL = Buffer.from(exports.KECCAK256_NULL_S, 'hex');
  exports.SHA3_NULL = exports.KECCAK256_NULL;
  
  /**
   * Keccak-256 of an RLP of an empty array (a ```String```)
   * @var {String} KECCAK256_RLP_ARRAY_S
   */
  exports.KECCAK256_RLP_ARRAY_S = '1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347';
  exports.SHA3_RLP_ARRAY_S = exports.KECCAK256_RLP_ARRAY_S;
  
  /**
   * Keccak-256 of an RLP of an empty array (a ```Buffer```)
   * @var {Buffer} KECCAK256_RLP_ARRAY
   */
  exports.KECCAK256_RLP_ARRAY = Buffer.from(exports.KECCAK256_RLP_ARRAY_S, 'hex');
  exports.SHA3_RLP_ARRAY = exports.KECCAK256_RLP_ARRAY;
  
  /**
   * Keccak-256 hash of the RLP of null  (a ```String```)
   * @var {String} KECCAK256_RLP_S
   */
  exports.KECCAK256_RLP_S = '56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421';
  exports.SHA3_RLP_S = exports.KECCAK256_RLP_S;
  
  /**
   * Keccak-256 hash of the RLP of null (a ```Buffer```)
   * @var {Buffer} KECCAK256_RLP
   */
  exports.KECCAK256_RLP = Buffer.from(exports.KECCAK256_RLP_S, 'hex');
  exports.SHA3_RLP = exports.KECCAK256_RLP;
  
  /**
   * [`BN`](https://github.com/indutny/bn.js)
   * @var {Function}
   */
  exports.BN = BN;
  
  /**
   * [`rlp`](https://github.com/ethereumjs/rlp)
   * @var {Function}
   */
  exports.rlp = rlp;
  
  /**
   * [`secp256k1`](https://github.com/cryptocoinjs/secp256k1-node/)
   * @var {Object}
   */
  exports.secp256k1 = secp256k1;
  
  /**
   * Returns a buffer filled with 0s
   * @method zeros
   * @param {Number} bytes  the number of bytes the buffer should be
   * @return {Buffer}
   */
  exports.zeros = function (bytes) {
    return Buffer.allocUnsafe(bytes).fill(0);
  };
  
  /**
    * Returns a zero address
    * @method zeroAddress
    * @return {String}
    */
  exports.zeroAddress = function () {
    var addressLength = 20;
    var zeroAddress = exports.zeros(addressLength);
    return exports.bufferToHex(zeroAddress);
  };
  
  /**
   * Left Pads an `Array` or `Buffer` with leading zeros till it has `length` bytes.
   * Or it truncates the beginning if it exceeds.
   * @method lsetLength
   * @param {Buffer|Array} msg the value to pad
   * @param {Number} length the number of bytes the output should be
   * @param {Boolean} [right=false] whether to start padding form the left or right
   * @return {Buffer|Array}
   */
  exports.setLengthLeft = exports.setLength = function (msg, length, right) {
    var buf = exports.zeros(length);
    msg = exports.toBuffer(msg);
    if (right) {
      if (msg.length < length) {
        msg.copy(buf);
        return buf;
      }
      return msg.slice(0, length);
    } else {
      if (msg.length < length) {
        msg.copy(buf, length - msg.length);
        return buf;
      }
      return msg.slice(-length);
    }
  };
  
  /**
   * Right Pads an `Array` or `Buffer` with leading zeros till it has `length` bytes.
   * Or it truncates the beginning if it exceeds.
   * @param {Buffer|Array} msg the value to pad
   * @param {Number} length the number of bytes the output should be
   * @return {Buffer|Array}
   */
  exports.setLengthRight = function (msg, length) {
    return exports.setLength(msg, length, true);
  };
  
  /**
   * Trims leading zeros from a `Buffer` or an `Array`
   * @param {Buffer|Array|String} a
   * @return {Buffer|Array|String}
   */
  exports.unpad = exports.stripZeros = function (a) {
    a = exports.stripHexPrefix(a);
    var first = a[0];
    while (a.length > 0 && first.toString() === '0') {
      a = a.slice(1);
      first = a[0];
    }
    return a;
  };
  /**
   * Attempts to turn a value into a `Buffer`. As input it supports `Buffer`, `String`, `Number`, null/undefined, `BN` and other objects with a `toArray()` method.
   * @param {*} v the value
   */
  exports.toBuffer = function (v) {
    if (!Buffer.isBuffer(v)) {
      if (Array.isArray(v)) {
        v = Buffer.from(v);
      } else if (typeof v === 'string') {
        if (exports.isHexString(v)) {
          v = Buffer.from(exports.padToEven(exports.stripHexPrefix(v)), 'hex');
        } else {
          v = Buffer.from(v);
        }
      } else if (typeof v === 'number') {
        v = exports.intToBuffer(v);
      } else if (v === null || v === undefined) {
        v = Buffer.allocUnsafe(0);
      } else if (BN.isBN(v)) {
        v = v.toArrayLike(Buffer);
      } else if (v.toArray) {
        // converts a BN to a Buffer
        v = Buffer.from(v.toArray());
      } else {
        throw new Error('invalid type');
      }
    }
    return v;
  };
  
  /**
   * Converts a `Buffer` to a `Number`
   * @param {Buffer} buf
   * @return {Number}
   * @throws If the input number exceeds 53 bits.
   */
  exports.bufferToInt = function (buf) {
    return new BN(exports.toBuffer(buf)).toNumber();
  };
  
  /**
   * Converts a `Buffer` into a hex `String`
   * @param {Buffer} buf
   * @return {String}
   */
  exports.bufferToHex = function (buf) {
    buf = exports.toBuffer(buf);
    return '0x' + buf.toString('hex');
  };
  
  /**
   * Interprets a `Buffer` as a signed integer and returns a `BN`. Assumes 256-bit numbers.
   * @param {Buffer} num
   * @return {BN}
   */
  exports.fromSigned = function (num) {
    return new BN(num).fromTwos(256);
  };
  
  /**
   * Converts a `BN` to an unsigned integer and returns it as a `Buffer`. Assumes 256-bit numbers.
   * @param {BN} num
   * @return {Buffer}
   */
  exports.toUnsigned = function (num) {
    return Buffer.from(num.toTwos(256).toArray());
  };
  
  /**
   * Creates Keccak hash of the input
   * @param {Buffer|Array|String|Number} a the input data
   * @param {Number} [bits=256] the Keccak width
   * @return {Buffer}
   */
  exports.keccak = function (a, bits) {
    a = exports.toBuffer(a);
    if (!bits) bits = 256;
  
    return createKeccakHash('keccak' + bits).update(a).digest();
  };
  
  /**
   * Creates Keccak-256 hash of the input, alias for keccak(a, 256)
   * @param {Buffer|Array|String|Number} a the input data
   * @return {Buffer}
   */
  exports.keccak256 = function (a) {
    return exports.keccak(a);
  };
  
  /**
   * Creates SHA-3 (Keccak) hash of the input [OBSOLETE]
   * @param {Buffer|Array|String|Number} a the input data
   * @param {Number} [bits=256] the SHA-3 width
   * @return {Buffer}
   */
  exports.sha3 = exports.keccak;
  
  /**
   * Creates SHA256 hash of the input
   * @param {Buffer|Array|String|Number} a the input data
   * @return {Buffer}
   */
  exports.sha256 = function (a) {
    a = exports.toBuffer(a);
    return createHash('sha256').update(a).digest();
  };
  
  /**
   * Creates RIPEMD160 hash of the input
   * @param {Buffer|Array|String|Number} a the input data
   * @param {Boolean} padded whether it should be padded to 256 bits or not
   * @return {Buffer}
   */
  exports.ripemd160 = function (a, padded) {
    a = exports.toBuffer(a);
    var hash = createHash('rmd160').update(a).digest();
    if (padded === true) {
      return exports.setLength(hash, 32);
    } else {
      return hash;
    }
  };
  
  /**
   * Creates SHA-3 hash of the RLP encoded version of the input
   * @param {Buffer|Array|String|Number} a the input data
   * @return {Buffer}
   */
  exports.rlphash = function (a) {
    return exports.keccak(rlp.encode(a));
  };
  
  /**
   * Checks if the private key satisfies the rules of the curve secp256k1.
   * @param {Buffer} privateKey
   * @return {Boolean}
   */
  exports.isValidPrivate = function (privateKey) {
    return secp256k1.privateKeyVerify(privateKey);
  };
  
  /**
   * Checks if the public key satisfies the rules of the curve secp256k1
   * and the requirements of Ethereum.
   * @param {Buffer} publicKey The two points of an uncompressed key, unless sanitize is enabled
   * @param {Boolean} [sanitize=false] Accept public keys in other formats
   * @return {Boolean}
   */
  exports.isValidPublic = function (publicKey, sanitize) {
    if (publicKey.length === 64) {
      // Convert to SEC1 for secp256k1
      return secp256k1.publicKeyVerify(Buffer.concat([Buffer.from([4]), publicKey]));
    }
  
    if (!sanitize) {
      return false;
    }
  
    return secp256k1.publicKeyVerify(publicKey);
  };
  
  /**
   * Returns the ethereum address of a given public key.
   * Accepts "Ethereum public keys" and SEC1 encoded keys.
   * @param {Buffer} pubKey The two points of an uncompressed key, unless sanitize is enabled
   * @param {Boolean} [sanitize=false] Accept public keys in other formats
   * @return {Buffer}
   */
  exports.pubToAddress = exports.publicToAddress = function (pubKey, sanitize) {
    pubKey = exports.toBuffer(pubKey);
    if (sanitize && pubKey.length !== 64) {
      pubKey = secp256k1.publicKeyConvert(pubKey, false).slice(1);
    }
    assert(pubKey.length === 64);
    // Only take the lower 160bits of the hash
    return exports.keccak(pubKey).slice(-20);
  };
  
  /**
   * Returns the ethereum public key of a given private key
   * @param {Buffer} privateKey A private key must be 256 bits wide
   * @return {Buffer}
   */
  var privateToPublic = exports.privateToPublic = function (privateKey) {
    privateKey = exports.toBuffer(privateKey);
    // skip the type flag and use the X, Y points
    return secp256k1.publicKeyCreate(privateKey, false).slice(1);
  };
  
  /**
   * Converts a public key to the Ethereum format.
   * @param {Buffer} publicKey
   * @return {Buffer}
   */
  exports.importPublic = function (publicKey) {
    publicKey = exports.toBuffer(publicKey);
    if (publicKey.length !== 64) {
      publicKey = secp256k1.publicKeyConvert(publicKey, false).slice(1);
    }
    return publicKey;
  };
  
  /**
   * ECDSA sign
   * @param {Buffer} msgHash
   * @param {Buffer} privateKey
   * @return {Object}
   */
  exports.ecsign = function (msgHash, privateKey) {
    var sig = secp256k1.sign(msgHash, privateKey);
  
    var ret = {};
    ret.r = sig.signature.slice(0, 32);
    ret.s = sig.signature.slice(32, 64);
    ret.v = sig.recovery + 27;
    return ret;
  };
  
  /**
   * Returns the keccak-256 hash of `message`, prefixed with the header used by the `eth_sign` RPC call.
   * The output of this function can be fed into `ecsign` to produce the same signature as the `eth_sign`
   * call for a given `message`, or fed to `ecrecover` along with a signature to recover the public key
   * used to produce the signature.
   * @param message
   * @returns {Buffer} hash
   */
  exports.hashPersonalMessage = function (message) {
    var prefix = exports.toBuffer('\x19Ethereum Signed Message:\n' + message.length.toString());
    return exports.keccak(Buffer.concat([prefix, message]));
  };
  
  /**
   * ECDSA public key recovery from signature
   * @param {Buffer} msgHash
   * @param {Number} v
   * @param {Buffer} r
   * @param {Buffer} s
   * @return {Buffer} publicKey
   */
  exports.ecrecover = function (msgHash, v, r, s) {
    var signature = Buffer.concat([exports.setLength(r, 32), exports.setLength(s, 32)], 64);
    var recovery = v - 27;
    if (recovery !== 0 && recovery !== 1) {
      throw new Error('Invalid signature v value');
    }
    var senderPubKey = secp256k1.recover(msgHash, signature, recovery);
    return secp256k1.publicKeyConvert(senderPubKey, false).slice(1);
  };
  
  /**
   * Convert signature parameters into the format of `eth_sign` RPC method
   * @param {Number} v
   * @param {Buffer} r
   * @param {Buffer} s
   * @return {String} sig
   */
  exports.toRpcSig = function (v, r, s) {
    // NOTE: with potential introduction of chainId this might need to be updated
    if (v !== 27 && v !== 28) {
      throw new Error('Invalid recovery id');
    }
  
    // geth (and the RPC eth_sign method) uses the 65 byte format used by Bitcoin
    // FIXME: this might change in the future - https://github.com/ethereum/go-ethereum/issues/2053
    return exports.bufferToHex(Buffer.concat([exports.setLengthLeft(r, 32), exports.setLengthLeft(s, 32), exports.toBuffer(v - 27)]));
  };
  
  /**
   * Convert signature format of the `eth_sign` RPC method to signature parameters
   * NOTE: all because of a bug in geth: https://github.com/ethereum/go-ethereum/issues/2053
   * @param {String} sig
   * @return {Object}
   */
  exports.fromRpcSig = function (sig) {
    sig = exports.toBuffer(sig);
  
    // NOTE: with potential introduction of chainId this might need to be updated
    if (sig.length !== 65) {
      throw new Error('Invalid signature length');
    }
  
    var v = sig[64];
    // support both versions of `eth_sign` responses
    if (v < 27) {
      v += 27;
    }
  
    return {
      v: v,
      r: sig.slice(0, 32),
      s: sig.slice(32, 64)
    };
  };
  
  /**
   * Returns the ethereum address of a given private key
   * @param {Buffer} privateKey A private key must be 256 bits wide
   * @return {Buffer}
   */
  exports.privateToAddress = function (privateKey) {
    return exports.publicToAddress(privateToPublic(privateKey));
  };
  
  /**
   * Checks if the address is a valid. Accepts checksummed addresses too
   * @param {String} address
   * @return {Boolean}
   */
  exports.isValidAddress = function (address) {
    return (/^0x[0-9a-fA-F]{40}$/.test(address)
    );
  };
  
  /**
    * Checks if a given address is a zero address
    * @method isZeroAddress
    * @param {String} address
    * @return {Boolean}
    */
  exports.isZeroAddress = function (address) {
    var zeroAddress = exports.zeroAddress();
    return zeroAddress === exports.addHexPrefix(address);
  };
  
  /**
   * Returns a checksummed address
   * @param {String} address
   * @return {String}
   */
  exports.toChecksumAddress = function (address) {
    address = exports.stripHexPrefix(address).toLowerCase();
    var hash = exports.keccak(address).toString('hex');
    var ret = '0x';
  
    for (var i = 0; i < address.length; i++) {
      if (parseInt(hash[i], 16) >= 8) {
        ret += address[i].toUpperCase();
      } else {
        ret += address[i];
      }
    }
  
    return ret;
  };
  
  /**
   * Checks if the address is a valid checksummed address
   * @param {Buffer} address
   * @return {Boolean}
   */
  exports.isValidChecksumAddress = function (address) {
    return exports.isValidAddress(address) && exports.toChecksumAddress(address) === address;
  };
  
  /**
   * Generates an address of a newly created contract
   * @param {Buffer} from the address which is creating this new address
   * @param {Buffer} nonce the nonce of the from account
   * @return {Buffer}
   */
  exports.generateAddress = function (from, nonce) {
    from = exports.toBuffer(from);
    nonce = new BN(nonce);
  
    if (nonce.isZero()) {
      // in RLP we want to encode null in the case of zero nonce
      // read the RLP documentation for an answer if you dare
      nonce = null;
    } else {
      nonce = Buffer.from(nonce.toArray());
    }
  
    // Only take the lower 160bits of the hash
    return exports.rlphash([from, nonce]).slice(-20);
  };
  
  /**
   * Returns true if the supplied address belongs to a precompiled account (Byzantium)
   * @param {Buffer|String} address
   * @return {Boolean}
   */
  exports.isPrecompiled = function (address) {
    var a = exports.unpad(address);
    return a.length === 1 && a[0] >= 1 && a[0] <= 8;
  };
  
  /**
   * Adds "0x" to a given `String` if it does not already start with "0x"
   * @param {String} str
   * @return {String}
   */
  exports.addHexPrefix = function (str) {
    if (typeof str !== 'string') {
      return str;
    }
  
    return exports.isHexPrefixed(str) ? str : '0x' + str;
  };
  
  /**
   * Validate ECDSA signature
   * @method isValidSignature
   * @param {Buffer} v
   * @param {Buffer} r
   * @param {Buffer} s
   * @param {Boolean} [homestead=true]
   * @return {Boolean}
   */
  
  exports.isValidSignature = function (v, r, s, homestead) {
    var SECP256K1_N_DIV_2 = new BN('7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0', 16);
    var SECP256K1_N = new BN('fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141', 16);
  
    if (r.length !== 32 || s.length !== 32) {
      return false;
    }
  
    if (v !== 27 && v !== 28) {
      return false;
    }
  
    r = new BN(r);
    s = new BN(s);
  
    if (r.isZero() || r.gt(SECP256K1_N) || s.isZero() || s.gt(SECP256K1_N)) {
      return false;
    }
  
    if (homestead === false && new BN(s).cmp(SECP256K1_N_DIV_2) === 1) {
      return false;
    }
  
    return true;
  };
  
  /**
   * Converts a `Buffer` or `Array` to JSON
   * @param {Buffer|Array} ba
   * @return {Array|String|null}
   */
  exports.baToJSON = function (ba) {
    if (Buffer.isBuffer(ba)) {
      return '0x' + ba.toString('hex');
    } else if (ba instanceof Array) {
      var array = [];
      for (var i = 0; i < ba.length; i++) {
        array.push(exports.baToJSON(ba[i]));
      }
      return array;
    }
  };
  
  /**
   * Defines properties on a `Object`. It make the assumption that underlying data is binary.
   * @param {Object} self the `Object` to define properties on
   * @param {Array} fields an array fields to define. Fields can contain:
   * * `name` - the name of the properties
   * * `length` - the number of bytes the field can have
   * * `allowLess` - if the field can be less than the length
   * * `allowEmpty`
   * @param {*} data data to be validated against the definitions
   */
  exports.defineProperties = function (self, fields, data) {
    self.raw = [];
    self._fields = [];
  
    // attach the `toJSON`
    self.toJSON = function (label) {
      if (label) {
        var obj = {};
        self._fields.forEach(function (field) {
          obj[field] = '0x' + self[field].toString('hex');
        });
        return obj;
      }
      return exports.baToJSON(this.raw);
    };
  
    self.serialize = function serialize() {
      return rlp.encode(self.raw);
    };
  
    fields.forEach(function (field, i) {
      self._fields.push(field.name);
      function getter() {
        return self.raw[i];
      }
      function setter(v) {
        v = exports.toBuffer(v);
  
        if (v.toString('hex') === '00' && !field.allowZero) {
          v = Buffer.allocUnsafe(0);
        }
  
        if (field.allowLess && field.length) {
          v = exports.stripZeros(v);
          assert(field.length >= v.length, 'The field ' + field.name + ' must not have more ' + field.length + ' bytes');
        } else if (!(field.allowZero && v.length === 0) && field.length) {
          assert(field.length === v.length, 'The field ' + field.name + ' must have byte length of ' + field.length);
        }
  
        self.raw[i] = v;
      }
  
      Object.defineProperty(self, field.name, {
        enumerable: true,
        configurable: true,
        get: getter,
        set: setter
      });
  
      if (field.default) {
        self[field.name] = field.default;
      }
  
      // attach alias
      if (field.alias) {
        Object.defineProperty(self, field.alias, {
          enumerable: false,
          configurable: true,
          set: setter,
          get: getter
        });
      }
    });
  
    // if the constructor is passed data
    if (data) {
      if (typeof data === 'string') {
        data = Buffer.from(exports.stripHexPrefix(data), 'hex');
      }
  
      if (Buffer.isBuffer(data)) {
        data = rlp.decode(data);
      }
  
      if (Array.isArray(data)) {
        if (data.length > self._fields.length) {
          throw new Error('wrong number of fields in data');
        }
  
        // make sure all the items are buffers
        data.forEach(function (d, i) {
          self[self._fields[i]] = exports.toBuffer(d);
        });
      } else if ((typeof data === 'undefined' ? 'undefined' : _typeof(data)) === 'object') {
        var keys = Object.keys(data);
        fields.forEach(function (field) {
          if (keys.indexOf(field.name) !== -1) self[field.name] = data[field.name];
          if (keys.indexOf(field.alias) !== -1) self[field.alias] = data[field.alias];
        });
      } else {
        throw new Error('invalid data');
      }
    }
  };
  },{"assert":19,"bn.js":53,"create-hash":91,"ethjs-util":155,"keccak":195,"rlp":289,"safe-buffer":290,"secp256k1":295}],142:[function(require,module,exports){
  arguments[4][128][0].apply(exports,arguments)
  },{"_process":257,"dup":128}],143:[function(require,module,exports){
  'use strict';
  var __extends = (this && this.__extends) || (function () {
      var extendStatics = Object.setPrototypeOf ||
          ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
          function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
      return function (d, b) {
          extendStatics(d, b);
          function __() { this.constructor = d; }
          d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
  })();
  var __importStar = (this && this.__importStar) || function (mod) {
      if (mod && mod.__esModule) return mod;
      var result = {};
      if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
      result["default"] = mod;
      return result;
  };
  Object.defineProperty(exports, "__esModule", { value: true });
  // See: https://github.com/ethereum/wiki/wiki/Ethereum-Contract-ABI
  var address_1 = require("./address");
  var bignumber_1 = require("./bignumber");
  var bytes_1 = require("./bytes");
  var utf8_1 = require("./utf8");
  var properties_1 = require("./properties");
  var errors = __importStar(require("./errors"));
  var paramTypeBytes = new RegExp(/^bytes([0-9]*)$/);
  var paramTypeNumber = new RegExp(/^(u?int)([0-9]*)$/);
  var paramTypeArray = new RegExp(/^(.*)\[([0-9]*)\]$/);
  exports.defaultCoerceFunc = function (type, value) {
      var match = type.match(paramTypeNumber);
      if (match && parseInt(match[2]) <= 48) {
          return value.toNumber();
      }
      return value;
  };
  ///////////////////////////////////
  // Parsing for Solidity Signatures
  var regexParen = new RegExp("^([^)(]*)\\((.*)\\)([^)(]*)$");
  var regexIdentifier = new RegExp("^[A-Za-z_][A-Za-z0-9_]*$");
  function verifyType(type) {
      // These need to be transformed to their full description
      if (type.match(/^uint($|[^1-9])/)) {
          type = 'uint256' + type.substring(4);
      }
      else if (type.match(/^int($|[^1-9])/)) {
          type = 'int256' + type.substring(3);
      }
      return type;
  }
  function parseParam(param, allowIndexed) {
      function throwError(i) {
          throw new Error('unexpected character "' + param[i] + '" at position ' + i + ' in "' + param + '"');
      }
      var parent = { type: '', name: '', state: { allowType: true } };
      var node = parent;
      for (var i = 0; i < param.length; i++) {
          var c = param[i];
          switch (c) {
              case '(':
                  if (!node.state.allowParams) {
                      throwError(i);
                  }
                  node.state.allowType = false;
                  node.type = verifyType(node.type);
                  node.components = [{ type: '', name: '', parent: node, state: { allowType: true } }];
                  node = node.components[0];
                  break;
              case ')':
                  delete node.state;
                  if (allowIndexed && node.name === 'indexed') {
                      node.indexed = true;
                      node.name = '';
                  }
                  node.type = verifyType(node.type);
                  var child = node;
                  node = node.parent;
                  if (!node) {
                      throwError(i);
                  }
                  delete child.parent;
                  node.state.allowParams = false;
                  node.state.allowName = true;
                  node.state.allowArray = true;
                  break;
              case ',':
                  delete node.state;
                  if (allowIndexed && node.name === 'indexed') {
                      node.indexed = true;
                      node.name = '';
                  }
                  node.type = verifyType(node.type);
                  var sibling = { type: '', name: '', parent: node.parent, state: { allowType: true } };
                  node.parent.components.push(sibling);
                  delete node.parent;
                  node = sibling;
                  break;
              // Hit a space...
              case ' ':
                  // If reading type, the type is done and may read a param or name
                  if (node.state.allowType) {
                      if (node.type !== '') {
                          node.type = verifyType(node.type);
                          delete node.state.allowType;
                          node.state.allowName = true;
                          node.state.allowParams = true;
                      }
                  }
                  // If reading name, the name is done
                  if (node.state.allowName) {
                      if (node.name !== '') {
                          if (allowIndexed && node.name === 'indexed') {
                              node.indexed = true;
                              node.name = '';
                          }
                          else {
                              node.state.allowName = false;
                          }
                      }
                  }
                  break;
              case '[':
                  if (!node.state.allowArray) {
                      throwError(i);
                  }
                  node.type += c;
                  node.state.allowArray = false;
                  node.state.allowName = false;
                  node.state.readArray = true;
                  break;
              case ']':
                  if (!node.state.readArray) {
                      throwError(i);
                  }
                  node.type += c;
                  node.state.readArray = false;
                  node.state.allowArray = true;
                  node.state.allowName = true;
                  break;
              default:
                  if (node.state.allowType) {
                      node.type += c;
                      node.state.allowParams = true;
                      node.state.allowArray = true;
                  }
                  else if (node.state.allowName) {
                      node.name += c;
                      delete node.state.allowArray;
                  }
                  else if (node.state.readArray) {
                      node.type += c;
                  }
                  else {
                      throwError(i);
                  }
          }
      }
      if (node.parent) {
          throw new Error("unexpected eof");
      }
      delete parent.state;
      if (allowIndexed && node.name === 'indexed') {
          node.indexed = true;
          node.name = '';
      }
      parent.type = verifyType(parent.type);
      return parent;
  }
  // @TODO: Better return type
  function parseSignatureEvent(fragment) {
      var abi = {
          anonymous: false,
          inputs: [],
          name: '',
          type: 'event'
      };
      var match = fragment.match(regexParen);
      if (!match) {
          throw new Error('invalid event: ' + fragment);
      }
      abi.name = match[1].trim();
      splitNesting(match[2]).forEach(function (param) {
          param = parseParam(param, true);
          param.indexed = !!param.indexed;
          abi.inputs.push(param);
      });
      match[3].split(' ').forEach(function (modifier) {
          switch (modifier) {
              case 'anonymous':
                  abi.anonymous = true;
                  break;
              case '':
                  break;
              default:
                  console.log('unknown modifier: ' + modifier);
          }
      });
      if (abi.name && !abi.name.match(regexIdentifier)) {
          throw new Error('invalid identifier: "' + abi.name + '"');
      }
      return abi;
  }
  function parseSignatureFunction(fragment) {
      var abi = {
          constant: false,
          inputs: [],
          name: '',
          outputs: [],
          payable: false,
          stateMutability: null,
          type: 'function'
      };
      var comps = fragment.split(' returns ');
      var left = comps[0].match(regexParen);
      if (!left) {
          throw new Error('invalid signature');
      }
      abi.name = left[1].trim();
      if (!abi.name.match(regexIdentifier)) {
          throw new Error('invalid identifier: "' + left[1] + '"');
      }
      splitNesting(left[2]).forEach(function (param) {
          abi.inputs.push(parseParam(param));
      });
      left[3].split(' ').forEach(function (modifier) {
          switch (modifier) {
              case 'constant':
                  abi.constant = true;
                  break;
              case 'payable':
                  abi.payable = true;
                  break;
              case 'pure':
                  abi.constant = true;
                  abi.stateMutability = 'pure';
                  break;
              case 'view':
                  abi.constant = true;
                  abi.stateMutability = 'view';
                  break;
              case '':
                  break;
              default:
                  console.log('unknown modifier: ' + modifier);
          }
      });
      // We have outputs
      if (comps.length > 1) {
          var right = comps[1].match(regexParen);
          if (right[1].trim() != '' || right[3].trim() != '') {
              throw new Error('unexpected tokens');
          }
          splitNesting(right[2]).forEach(function (param) {
              abi.outputs.push(parseParam(param));
          });
      }
      return abi;
  }
  function parseParamType(type) {
      return parseParam(type, true);
  }
  exports.parseParamType = parseParamType;
  // @TODO: Allow a second boolean to expose names
  function formatParamType(paramType) {
      return getParamCoder(exports.defaultCoerceFunc, paramType).type;
  }
  exports.formatParamType = formatParamType;
  // @TODO: Allow a second boolean to expose names and modifiers
  function formatSignature(fragment) {
      return fragment.name + '(' + fragment.inputs.map(function (i) { return formatParamType(i); }).join(',') + ')';
  }
  exports.formatSignature = formatSignature;
  function parseSignature(fragment) {
      if (typeof (fragment) === 'string') {
          // Make sure the "returns" is surrounded by a space and all whitespace is exactly one space
          fragment = fragment.replace(/\(/g, ' (').replace(/\)/g, ') ').replace(/\s+/g, ' ');
          fragment = fragment.trim();
          if (fragment.substring(0, 6) === 'event ') {
              return parseSignatureEvent(fragment.substring(6).trim());
          }
          else {
              if (fragment.substring(0, 9) === 'function ') {
                  fragment = fragment.substring(9);
              }
              return parseSignatureFunction(fragment.trim());
          }
      }
      throw new Error('unknown signature');
  }
  exports.parseSignature = parseSignature;
  var Coder = /** @class */ (function () {
      function Coder(coerceFunc, name, type, localName, dynamic) {
          this.coerceFunc = coerceFunc;
          this.name = name;
          this.type = type;
          this.localName = localName;
          this.dynamic = dynamic;
      }
      return Coder;
  }());
  // Clones the functionality of an existing Coder, but without a localName
  var CoderAnonymous = /** @class */ (function (_super) {
      __extends(CoderAnonymous, _super);
      function CoderAnonymous(coder) {
          var _this = _super.call(this, coder.coerceFunc, coder.name, coder.type, undefined, coder.dynamic) || this;
          properties_1.defineReadOnly(_this, 'coder', coder);
          return _this;
      }
      CoderAnonymous.prototype.encode = function (value) { return this.coder.encode(value); };
      CoderAnonymous.prototype.decode = function (data, offset) { return this.coder.decode(data, offset); };
      return CoderAnonymous;
  }(Coder));
  var CoderNull = /** @class */ (function (_super) {
      __extends(CoderNull, _super);
      function CoderNull(coerceFunc, localName) {
          return _super.call(this, coerceFunc, 'null', '', localName, false) || this;
      }
      CoderNull.prototype.encode = function (value) {
          return bytes_1.arrayify([]);
      };
      CoderNull.prototype.decode = function (data, offset) {
          if (offset > data.length) {
              throw new Error('invalid null');
          }
          return {
              consumed: 0,
              value: this.coerceFunc('null', undefined)
          };
      };
      return CoderNull;
  }(Coder));
  var CoderNumber = /** @class */ (function (_super) {
      __extends(CoderNumber, _super);
      function CoderNumber(coerceFunc, size, signed, localName) {
          var _this = this;
          var name = ((signed ? 'int' : 'uint') + (size * 8));
          _this = _super.call(this, coerceFunc, name, name, localName, false) || this;
          _this.size = size;
          _this.signed = signed;
          return _this;
      }
      CoderNumber.prototype.encode = function (value) {
          try {
              var v = bignumber_1.bigNumberify(value);
              v = v.toTwos(this.size * 8).maskn(this.size * 8);
              //value = value.toTwos(size * 8).maskn(size * 8);
              if (this.signed) {
                  v = v.fromTwos(this.size * 8).toTwos(256);
              }
              return bytes_1.padZeros(bytes_1.arrayify(v), 32);
          }
          catch (error) {
              errors.throwError('invalid number value', errors.INVALID_ARGUMENT, {
                  arg: this.localName,
                  coderType: this.name,
                  value: value
              });
          }
          return null;
      };
      CoderNumber.prototype.decode = function (data, offset) {
          if (data.length < offset + 32) {
              errors.throwError('insufficient data for ' + this.name + ' type', errors.INVALID_ARGUMENT, {
                  arg: this.localName,
                  coderType: this.name,
                  value: bytes_1.hexlify(data.slice(offset, offset + 32))
              });
          }
          var junkLength = 32 - this.size;
          var value = bignumber_1.bigNumberify(data.slice(offset + junkLength, offset + 32));
          if (this.signed) {
              value = value.fromTwos(this.size * 8);
          }
          else {
              value = value.maskn(this.size * 8);
          }
          return {
              consumed: 32,
              value: this.coerceFunc(this.name, value),
          };
      };
      return CoderNumber;
  }(Coder));
  var uint256Coder = new CoderNumber(function (type, value) { return value; }, 32, false, 'none');
  var CoderBoolean = /** @class */ (function (_super) {
      __extends(CoderBoolean, _super);
      function CoderBoolean(coerceFunc, localName) {
          return _super.call(this, coerceFunc, 'bool', 'bool', localName, false) || this;
      }
      CoderBoolean.prototype.encode = function (value) {
          return uint256Coder.encode(!!value ? 1 : 0);
      };
      CoderBoolean.prototype.decode = function (data, offset) {
          try {
              var result = uint256Coder.decode(data, offset);
          }
          catch (error) {
              if (error.reason === 'insufficient data for uint256 type') {
                  errors.throwError('insufficient data for boolean type', errors.INVALID_ARGUMENT, {
                      arg: this.localName,
                      coderType: 'boolean',
                      value: error.value
                  });
              }
              throw error;
          }
          return {
              consumed: result.consumed,
              value: this.coerceFunc('bool', !result.value.isZero())
          };
      };
      return CoderBoolean;
  }(Coder));
  var CoderFixedBytes = /** @class */ (function (_super) {
      __extends(CoderFixedBytes, _super);
      function CoderFixedBytes(coerceFunc, length, localName) {
          var _this = this;
          var name = ('bytes' + length);
          _this = _super.call(this, coerceFunc, name, name, localName, false) || this;
          _this.length = length;
          return _this;
      }
      CoderFixedBytes.prototype.encode = function (value) {
          var result = new Uint8Array(32);
          try {
              var data = bytes_1.arrayify(value);
              if (data.length > 32) {
                  throw new Error();
              }
              result.set(data);
          }
          catch (error) {
              errors.throwError('invalid ' + this.name + ' value', errors.INVALID_ARGUMENT, {
                  arg: this.localName,
                  coderType: this.name,
                  value: (error.value || value)
              });
          }
          return result;
      };
      CoderFixedBytes.prototype.decode = function (data, offset) {
          if (data.length < offset + 32) {
              errors.throwError('insufficient data for ' + name + ' type', errors.INVALID_ARGUMENT, {
                  arg: this.localName,
                  coderType: this.name,
                  value: bytes_1.hexlify(data.slice(offset, offset + 32))
              });
          }
          return {
              consumed: 32,
              value: this.coerceFunc(this.name, bytes_1.hexlify(data.slice(offset, offset + this.length)))
          };
      };
      return CoderFixedBytes;
  }(Coder));
  var CoderAddress = /** @class */ (function (_super) {
      __extends(CoderAddress, _super);
      function CoderAddress(coerceFunc, localName) {
          return _super.call(this, coerceFunc, 'address', 'address', localName, false) || this;
      }
      CoderAddress.prototype.encode = function (value) {
          var result = new Uint8Array(32);
          try {
              result.set(bytes_1.arrayify(address_1.getAddress(value)), 12);
          }
          catch (error) {
              errors.throwError('invalid address', errors.INVALID_ARGUMENT, {
                  arg: this.localName,
                  coderType: 'address',
                  value: value
              });
          }
          return result;
      };
      CoderAddress.prototype.decode = function (data, offset) {
          if (data.length < offset + 32) {
              errors.throwError('insufficuent data for address type', errors.INVALID_ARGUMENT, {
                  arg: this.localName,
                  coderType: 'address',
                  value: bytes_1.hexlify(data.slice(offset, offset + 32))
              });
          }
          return {
              consumed: 32,
              value: this.coerceFunc('address', address_1.getAddress(bytes_1.hexlify(data.slice(offset + 12, offset + 32))))
          };
      };
      return CoderAddress;
  }(Coder));
  function _encodeDynamicBytes(value) {
      var dataLength = 32 * Math.ceil(value.length / 32);
      var padding = new Uint8Array(dataLength - value.length);
      return bytes_1.concat([
          uint256Coder.encode(value.length),
          value,
          padding
      ]);
  }
  function _decodeDynamicBytes(data, offset, localName) {
      if (data.length < offset + 32) {
          errors.throwError('insufficient data for dynamicBytes length', errors.INVALID_ARGUMENT, {
              arg: localName,
              coderType: 'dynamicBytes',
              value: bytes_1.hexlify(data.slice(offset, offset + 32))
          });
      }
      var length = uint256Coder.decode(data, offset).value;
      try {
          length = length.toNumber();
      }
      catch (error) {
          errors.throwError('dynamic bytes count too large', errors.INVALID_ARGUMENT, {
              arg: localName,
              coderType: 'dynamicBytes',
              value: length.toString()
          });
      }
      if (data.length < offset + 32 + length) {
          errors.throwError('insufficient data for dynamicBytes type', errors.INVALID_ARGUMENT, {
              arg: localName,
              coderType: 'dynamicBytes',
              value: bytes_1.hexlify(data.slice(offset, offset + 32 + length))
          });
      }
      return {
          consumed: 32 + 32 * Math.ceil(length / 32),
          value: data.slice(offset + 32, offset + 32 + length),
      };
  }
  var CoderDynamicBytes = /** @class */ (function (_super) {
      __extends(CoderDynamicBytes, _super);
      function CoderDynamicBytes(coerceFunc, localName) {
          return _super.call(this, coerceFunc, 'bytes', 'bytes', localName, true) || this;
      }
      CoderDynamicBytes.prototype.encode = function (value) {
          try {
              return _encodeDynamicBytes(bytes_1.arrayify(value));
          }
          catch (error) {
              errors.throwError('invalid bytes value', errors.INVALID_ARGUMENT, {
                  arg: this.localName,
                  coderType: 'bytes',
                  value: error.value
              });
          }
          return null;
      };
      CoderDynamicBytes.prototype.decode = function (data, offset) {
          var result = _decodeDynamicBytes(data, offset, this.localName);
          result.value = this.coerceFunc('bytes', bytes_1.hexlify(result.value));
          return result;
      };
      return CoderDynamicBytes;
  }(Coder));
  var CoderString = /** @class */ (function (_super) {
      __extends(CoderString, _super);
      function CoderString(coerceFunc, localName) {
          return _super.call(this, coerceFunc, 'string', 'string', localName, true) || this;
      }
      CoderString.prototype.encode = function (value) {
          if (typeof (value) !== 'string') {
              errors.throwError('invalid string value', errors.INVALID_ARGUMENT, {
                  arg: this.localName,
                  coderType: 'string',
                  value: value
              });
          }
          return _encodeDynamicBytes(utf8_1.toUtf8Bytes(value));
      };
      CoderString.prototype.decode = function (data, offset) {
          var result = _decodeDynamicBytes(data, offset, this.localName);
          result.value = this.coerceFunc('string', utf8_1.toUtf8String(result.value));
          return result;
      };
      return CoderString;
  }(Coder));
  function alignSize(size) {
      return 32 * Math.ceil(size / 32);
  }
  function pack(coders, values) {
      if (Array.isArray(values)) {
          // do nothing
      }
      else if (values && typeof (values) === 'object') {
          var arrayValues = [];
          coders.forEach(function (coder) {
              arrayValues.push(values[coder.localName]);
          });
          values = arrayValues;
      }
      else {
          errors.throwError('invalid tuple value', errors.INVALID_ARGUMENT, {
              coderType: 'tuple',
              value: values
          });
      }
      if (coders.length !== values.length) {
          errors.throwError('types/value length mismatch', errors.INVALID_ARGUMENT, {
              coderType: 'tuple',
              value: values
          });
      }
      var parts = [];
      coders.forEach(function (coder, index) {
          parts.push({ dynamic: coder.dynamic, value: coder.encode(values[index]) });
      });
      var staticSize = 0, dynamicSize = 0;
      parts.forEach(function (part) {
          if (part.dynamic) {
              staticSize += 32;
              dynamicSize += alignSize(part.value.length);
          }
          else {
              staticSize += alignSize(part.value.length);
          }
      });
      var offset = 0, dynamicOffset = staticSize;
      var data = new Uint8Array(staticSize + dynamicSize);
      parts.forEach(function (part) {
          if (part.dynamic) {
              //uint256Coder.encode(dynamicOffset).copy(data, offset);
              data.set(uint256Coder.encode(dynamicOffset), offset);
              offset += 32;
              //part.value.copy(data, dynamicOffset);  @TODO
              data.set(part.value, dynamicOffset);
              dynamicOffset += alignSize(part.value.length);
          }
          else {
              //part.value.copy(data, offset);  @TODO
              data.set(part.value, offset);
              offset += alignSize(part.value.length);
          }
      });
      return data;
  }
  function unpack(coders, data, offset) {
      var baseOffset = offset;
      var consumed = 0;
      var value = [];
      coders.forEach(function (coder) {
          if (coder.dynamic) {
              var dynamicOffset = uint256Coder.decode(data, offset);
              var result = coder.decode(data, baseOffset + dynamicOffset.value.toNumber());
              // The dynamic part is leap-frogged somewhere else; doesn't count towards size
              result.consumed = dynamicOffset.consumed;
          }
          else {
              var result = coder.decode(data, offset);
          }
          if (result.value != undefined) {
              value.push(result.value);
          }
          offset += result.consumed;
          consumed += result.consumed;
      });
      coders.forEach(function (coder, index) {
          var name = coder.localName;
          if (!name) {
              return;
          }
          if (name === 'length') {
              name = '_length';
          }
          if (value[name] != null) {
              return;
          }
          value[name] = value[index];
      });
      return {
          value: value,
          consumed: consumed
      };
  }
  var CoderArray = /** @class */ (function (_super) {
      __extends(CoderArray, _super);
      function CoderArray(coerceFunc, coder, length, localName) {
          var _this = this;
          var type = (coder.type + '[' + (length >= 0 ? length : '') + ']');
          var dynamic = (length === -1 || coder.dynamic);
          _this = _super.call(this, coerceFunc, 'array', type, localName, dynamic) || this;
          _this.coder = coder;
          _this.length = length;
          return _this;
      }
      CoderArray.prototype.encode = function (value) {
          if (!Array.isArray(value)) {
              errors.throwError('expected array value', errors.INVALID_ARGUMENT, {
                  arg: this.localName,
                  coderType: 'array',
                  value: value
              });
          }
          var count = this.length;
          var result = new Uint8Array(0);
          if (count === -1) {
              count = value.length;
              result = uint256Coder.encode(count);
          }
          errors.checkArgumentCount(count, value.length, 'in coder array' + (this.localName ? (" " + this.localName) : ""));
          var coders = [];
          for (var i = 0; i < value.length; i++) {
              coders.push(this.coder);
          }
          return bytes_1.concat([result, pack(coders, value)]);
      };
      CoderArray.prototype.decode = function (data, offset) {
          // @TODO:
          //if (data.length < offset + length * 32) { throw new Error('invalid array'); }
          var consumed = 0;
          var count = this.length;
          if (count === -1) {
              try {
                  var decodedLength = uint256Coder.decode(data, offset);
              }
              catch (error) {
                  errors.throwError('insufficient data for dynamic array length', errors.INVALID_ARGUMENT, {
                      arg: this.localName,
                      coderType: 'array',
                      value: error.value
                  });
              }
              try {
                  count = decodedLength.value.toNumber();
              }
              catch (error) {
                  errors.throwError('array count too large', errors.INVALID_ARGUMENT, {
                      arg: this.localName,
                      coderType: 'array',
                      value: decodedLength.value.toString()
                  });
              }
              consumed += decodedLength.consumed;
              offset += decodedLength.consumed;
          }
          var coders = [];
          for (var i = 0; i < count; i++) {
              coders.push(new CoderAnonymous(this.coder));
          }
          var result = unpack(coders, data, offset);
          result.consumed += consumed;
          result.value = this.coerceFunc(this.type, result.value);
          return result;
      };
      return CoderArray;
  }(Coder));
  var CoderTuple = /** @class */ (function (_super) {
      __extends(CoderTuple, _super);
      function CoderTuple(coerceFunc, coders, localName) {
          var _this = this;
          var dynamic = false;
          var types = [];
          coders.forEach(function (coder) {
              if (coder.dynamic) {
                  dynamic = true;
              }
              types.push(coder.type);
          });
          var type = ('tuple(' + types.join(',') + ')');
          _this = _super.call(this, coerceFunc, 'tuple', type, localName, dynamic) || this;
          _this.coders = coders;
          return _this;
      }
      CoderTuple.prototype.encode = function (value) {
          return pack(this.coders, value);
      };
      CoderTuple.prototype.decode = function (data, offset) {
          var result = unpack(this.coders, data, offset);
          result.value = this.coerceFunc(this.type, result.value);
          return result;
      };
      return CoderTuple;
  }(Coder));
  /*
  function getTypes(coders) {
      var type = coderTuple(coders).type;
      return type.substring(6, type.length - 1);
  }
  */
  function splitNesting(value) {
      var result = [];
      var accum = '';
      var depth = 0;
      for (var offset = 0; offset < value.length; offset++) {
          var c = value[offset];
          if (c === ',' && depth === 0) {
              result.push(accum);
              accum = '';
          }
          else {
              accum += c;
              if (c === '(') {
                  depth++;
              }
              else if (c === ')') {
                  depth--;
                  if (depth === -1) {
                      throw new Error('unbalanced parenthsis');
                  }
              }
          }
      }
      result.push(accum);
      return result;
  }
  // @TODO: Is there a way to return "class"?
  var paramTypeSimple = {
      address: CoderAddress,
      bool: CoderBoolean,
      string: CoderString,
      bytes: CoderDynamicBytes,
  };
  function getTupleParamCoder(coerceFunc, components, localName) {
      if (!components) {
          components = [];
      }
      var coders = [];
      components.forEach(function (component) {
          coders.push(getParamCoder(coerceFunc, component));
      });
      return new CoderTuple(coerceFunc, coders, localName);
  }
  function getParamCoder(coerceFunc, param) {
      var coder = paramTypeSimple[param.type];
      if (coder) {
          return new coder(coerceFunc, param.name);
      }
      var match = param.type.match(paramTypeNumber);
      if (match) {
          var size = parseInt(match[2] || "256");
          if (size === 0 || size > 256 || (size % 8) !== 0) {
              errors.throwError('invalid ' + match[1] + ' bit length', errors.INVALID_ARGUMENT, {
                  arg: 'param',
                  value: param
              });
          }
          return new CoderNumber(coerceFunc, size / 8, (match[1] === 'int'), param.name);
      }
      var match = param.type.match(paramTypeBytes);
      if (match) {
          var size = parseInt(match[1]);
          if (size === 0 || size > 32) {
              errors.throwError('invalid bytes length', errors.INVALID_ARGUMENT, {
                  arg: 'param',
                  value: param
              });
          }
          return new CoderFixedBytes(coerceFunc, size, param.name);
      }
      var match = param.type.match(paramTypeArray);
      if (match) {
          var size = parseInt(match[2] || "-1");
          param = properties_1.jsonCopy(param);
          param.type = match[1];
          return new CoderArray(coerceFunc, getParamCoder(coerceFunc, param), size, param.name);
      }
      if (param.type.substring(0, 5) === 'tuple') {
          return getTupleParamCoder(coerceFunc, param.components, param.name);
      }
      if (param.type === '') {
          return new CoderNull(coerceFunc, param.name);
      }
      errors.throwError('invalid type', errors.INVALID_ARGUMENT, {
          arg: 'type',
          value: param.type
      });
      return null;
  }
  var AbiCoder = /** @class */ (function () {
      function AbiCoder(coerceFunc) {
          errors.checkNew(this, AbiCoder);
          if (!coerceFunc) {
              coerceFunc = exports.defaultCoerceFunc;
          }
          properties_1.defineReadOnly(this, 'coerceFunc', coerceFunc);
      }
      AbiCoder.prototype.encode = function (types, values) {
          if (types.length !== values.length) {
              errors.throwError('types/values length mismatch', errors.INVALID_ARGUMENT, {
                  count: { types: types.length, values: values.length },
                  value: { types: types, values: values }
              });
          }
          var coders = [];
          types.forEach(function (type) {
              // Convert types to type objects
              //   - "uint foo" => { type: "uint", name: "foo" }
              //   - "tuple(uint, uint)" => { type: "tuple", components: [ { type: "uint" }, { type: "uint" }, ] }
              var typeObject = null;
              if (typeof (type) === 'string') {
                  typeObject = parseParam(type);
              }
              else {
                  typeObject = type;
              }
              coders.push(getParamCoder(this.coerceFunc, typeObject));
          }, this);
          return bytes_1.hexlify(new CoderTuple(this.coerceFunc, coders, '_').encode(values));
      };
      AbiCoder.prototype.decode = function (types, data) {
          var coders = [];
          types.forEach(function (type) {
              // See encode for details
              var typeObject = null;
              if (typeof (type) === 'string') {
                  typeObject = parseParam(type);
              }
              else {
                  typeObject = properties_1.jsonCopy(type);
              }
              coders.push(getParamCoder(this.coerceFunc, typeObject));
          }, this);
          return new CoderTuple(this.coerceFunc, coders, '_').decode(bytes_1.arrayify(data), 0).value;
      };
      return AbiCoder;
  }());
  exports.AbiCoder = AbiCoder;
  exports.defaultAbiCoder = new AbiCoder();
  
  },{"./address":144,"./bignumber":145,"./bytes":146,"./errors":147,"./properties":149,"./utf8":152}],144:[function(require,module,exports){
  'use strict';
  var __importDefault = (this && this.__importDefault) || function (mod) {
      return (mod && mod.__esModule) ? mod : { "default": mod };
  };
  Object.defineProperty(exports, "__esModule", { value: true });
  // We use this for base 36 maths
  var bn_js_1 = __importDefault(require("bn.js"));
  var bytes_1 = require("./bytes");
  var keccak256_1 = require("./keccak256");
  var rlp_1 = require("./rlp");
  var errors = require("./errors");
  function getChecksumAddress(address) {
      if (typeof (address) !== 'string' || !address.match(/^0x[0-9A-Fa-f]{40}$/)) {
          errors.throwError('invalid address', errors.INVALID_ARGUMENT, { arg: 'address', value: address });
      }
      address = address.toLowerCase();
      var chars = address.substring(2).split('');
      var hashed = new Uint8Array(40);
      for (var i_1 = 0; i_1 < 40; i_1++) {
          hashed[i_1] = chars[i_1].charCodeAt(0);
      }
      hashed = bytes_1.arrayify(keccak256_1.keccak256(hashed));
      for (var i = 0; i < 40; i += 2) {
          if ((hashed[i >> 1] >> 4) >= 8) {
              chars[i] = chars[i].toUpperCase();
          }
          if ((hashed[i >> 1] & 0x0f) >= 8) {
              chars[i + 1] = chars[i + 1].toUpperCase();
          }
      }
      return '0x' + chars.join('');
  }
  // Shims for environments that are missing some required constants and functions
  var MAX_SAFE_INTEGER = 0x1fffffffffffff;
  function log10(x) {
      if (Math.log10) {
          return Math.log10(x);
      }
      return Math.log(x) / Math.LN10;
  }
  // See: https://en.wikipedia.org/wiki/International_Bank_Account_Number
  // Create lookup table
  var ibanLookup = {};
  for (var i = 0; i < 10; i++) {
      ibanLookup[String(i)] = String(i);
  }
  for (var i = 0; i < 26; i++) {
      ibanLookup[String.fromCharCode(65 + i)] = String(10 + i);
  }
  // How many decimal digits can we process? (for 64-bit float, this is 15)
  var safeDigits = Math.floor(log10(MAX_SAFE_INTEGER));
  function ibanChecksum(address) {
      address = address.toUpperCase();
      address = address.substring(4) + address.substring(0, 2) + '00';
      var expanded = '';
      address.split('').forEach(function (c) {
          expanded += ibanLookup[c];
      });
      // Javascript can handle integers safely up to 15 (decimal) digits
      while (expanded.length >= safeDigits) {
          var block = expanded.substring(0, safeDigits);
          expanded = parseInt(block, 10) % 97 + expanded.substring(block.length);
      }
      var checksum = String(98 - (parseInt(expanded, 10) % 97));
      while (checksum.length < 2) {
          checksum = '0' + checksum;
      }
      return checksum;
  }
  ;
  function getAddress(address) {
      var result = null;
      if (typeof (address) !== 'string') {
          errors.throwError('invalid address', errors.INVALID_ARGUMENT, { arg: 'address', value: address });
      }
      if (address.match(/^(0x)?[0-9a-fA-F]{40}$/)) {
          // Missing the 0x prefix
          if (address.substring(0, 2) !== '0x') {
              address = '0x' + address;
          }
          result = getChecksumAddress(address);
          // It is a checksummed address with a bad checksum
          if (address.match(/([A-F].*[a-f])|([a-f].*[A-F])/) && result !== address) {
              errors.throwError('bad address checksum', errors.INVALID_ARGUMENT, { arg: 'address', value: address });
          }
          // Maybe ICAP? (we only support direct mode)
      }
      else if (address.match(/^XE[0-9]{2}[0-9A-Za-z]{30,31}$/)) {
          // It is an ICAP address with a bad checksum
          if (address.substring(2, 4) !== ibanChecksum(address)) {
              errors.throwError('bad icap checksum', errors.INVALID_ARGUMENT, { arg: 'address', value: address });
          }
          result = (new bn_js_1.default.BN(address.substring(4), 36)).toString(16);
          while (result.length < 40) {
              result = '0' + result;
          }
          result = getChecksumAddress('0x' + result);
      }
      else {
          errors.throwError('invalid address', errors.INVALID_ARGUMENT, { arg: 'address', value: address });
      }
      return result;
  }
  exports.getAddress = getAddress;
  function getIcapAddress(address) {
      var base36 = (new bn_js_1.default.BN(getAddress(address).substring(2), 16)).toString(36).toUpperCase();
      while (base36.length < 30) {
          base36 = '0' + base36;
      }
      return 'XE' + ibanChecksum('XE00' + base36) + base36;
  }
  exports.getIcapAddress = getIcapAddress;
  // http://ethereum.stackexchange.com/questions/760/how-is-the-address-of-an-ethereum-contract-computed
  function getContractAddress(transaction) {
      if (!transaction.from) {
          throw new Error('missing from address');
      }
      var nonce = transaction.nonce;
      return getAddress('0x' + keccak256_1.keccak256(rlp_1.encode([
          getAddress(transaction.from),
          bytes_1.stripZeros(bytes_1.hexlify(nonce))
      ])).substring(26));
  }
  exports.getContractAddress = getContractAddress;
  
  },{"./bytes":146,"./errors":147,"./keccak256":148,"./rlp":150,"bn.js":53}],145:[function(require,module,exports){
  'use strict';
  var __extends = (this && this.__extends) || (function () {
      var extendStatics = Object.setPrototypeOf ||
          ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
          function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
      return function (d, b) {
          extendStatics(d, b);
          function __() { this.constructor = d; }
          d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
  })();
  var __importDefault = (this && this.__importDefault) || function (mod) {
      return (mod && mod.__esModule) ? mod : { "default": mod };
  };
  var __importStar = (this && this.__importStar) || function (mod) {
      if (mod && mod.__esModule) return mod;
      var result = {};
      if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
      result["default"] = mod;
      return result;
  };
  Object.defineProperty(exports, "__esModule", { value: true });
  /**
   *  BigNumber
   *
   *  A wrapper around the BN.js object. We use the BN.js library
   *  because it is used by elliptic, so it is required regardless.
   *
   */
  var bn_js_1 = __importDefault(require("bn.js"));
  var bytes_1 = require("./bytes");
  var properties_1 = require("./properties");
  var types_1 = require("./types");
  var errors = __importStar(require("./errors"));
  var BN_1 = new bn_js_1.default.BN(-1);
  function toHex(bn) {
      var value = bn.toString(16);
      if (value[0] === '-') {
          if ((value.length % 2) === 0) {
              return '-0x0' + value.substring(1);
          }
          return "-0x" + value.substring(1);
      }
      if ((value.length % 2) === 1) {
          return '0x0' + value;
      }
      return '0x' + value;
  }
  function toBN(value) {
      return bigNumberify(value)._bn;
  }
  function toBigNumber(bn) {
      return new BigNumber(toHex(bn));
  }
  var BigNumber = /** @class */ (function (_super) {
      __extends(BigNumber, _super);
      function BigNumber(value) {
          var _this = _super.call(this) || this;
          errors.checkNew(_this, BigNumber);
          if (typeof (value) === 'string') {
              if (bytes_1.isHexString(value)) {
                  if (value == '0x') {
                      value = '0x0';
                  }
                  properties_1.defineReadOnly(_this, '_hex', value);
              }
              else if (value[0] === '-' && bytes_1.isHexString(value.substring(1))) {
                  properties_1.defineReadOnly(_this, '_hex', value);
              }
              else if (value.match(/^-?[0-9]*$/)) {
                  if (value == '') {
                      value = '0';
                  }
                  properties_1.defineReadOnly(_this, '_hex', toHex(new bn_js_1.default.BN(value)));
              }
              else {
                  errors.throwError('invalid BigNumber string value', errors.INVALID_ARGUMENT, { arg: 'value', value: value });
              }
          }
          else if (typeof (value) === 'number') {
              if (parseInt(String(value)) !== value) {
                  errors.throwError('underflow', errors.NUMERIC_FAULT, { operation: 'setValue', fault: 'underflow', value: value, outputValue: parseInt(String(value)) });
              }
              try {
                  properties_1.defineReadOnly(_this, '_hex', toHex(new bn_js_1.default.BN(value)));
              }
              catch (error) {
                  errors.throwError('overflow', errors.NUMERIC_FAULT, { operation: 'setValue', fault: 'overflow', details: error.message });
              }
          }
          else if (value instanceof BigNumber) {
              properties_1.defineReadOnly(_this, '_hex', value._hex);
          }
          else if (value.toHexString) {
              properties_1.defineReadOnly(_this, '_hex', toHex(toBN(value.toHexString())));
          }
          else if (bytes_1.isArrayish(value)) {
              properties_1.defineReadOnly(_this, '_hex', toHex(new bn_js_1.default.BN(bytes_1.hexlify(value).substring(2), 16)));
          }
          else {
              errors.throwError('invalid BigNumber value', errors.INVALID_ARGUMENT, { arg: 'value', value: value });
          }
          return _this;
      }
      Object.defineProperty(BigNumber.prototype, "_bn", {
          get: function () {
              if (this._hex[0] === '-') {
                  return (new bn_js_1.default.BN(this._hex.substring(3), 16)).mul(BN_1);
              }
              return new bn_js_1.default.BN(this._hex.substring(2), 16);
          },
          enumerable: true,
          configurable: true
      });
      BigNumber.prototype.fromTwos = function (value) {
          return toBigNumber(this._bn.fromTwos(value));
      };
      BigNumber.prototype.toTwos = function (value) {
          return toBigNumber(this._bn.toTwos(value));
      };
      BigNumber.prototype.add = function (other) {
          return toBigNumber(this._bn.add(toBN(other)));
      };
      BigNumber.prototype.sub = function (other) {
          return toBigNumber(this._bn.sub(toBN(other)));
      };
      BigNumber.prototype.div = function (other) {
          var o = bigNumberify(other);
          if (o.isZero()) {
              errors.throwError('division by zero', errors.NUMERIC_FAULT, { operation: 'divide', fault: 'division by zero' });
          }
          return toBigNumber(this._bn.div(toBN(other)));
      };
      BigNumber.prototype.mul = function (other) {
          return toBigNumber(this._bn.mul(toBN(other)));
      };
      BigNumber.prototype.mod = function (other) {
          return toBigNumber(this._bn.mod(toBN(other)));
      };
      BigNumber.prototype.pow = function (other) {
          return toBigNumber(this._bn.pow(toBN(other)));
      };
      BigNumber.prototype.maskn = function (value) {
          return toBigNumber(this._bn.maskn(value));
      };
      BigNumber.prototype.eq = function (other) {
          return this._bn.eq(toBN(other));
      };
      BigNumber.prototype.lt = function (other) {
          return this._bn.lt(toBN(other));
      };
      BigNumber.prototype.lte = function (other) {
          return this._bn.lte(toBN(other));
      };
      BigNumber.prototype.gt = function (other) {
          return this._bn.gt(toBN(other));
      };
      BigNumber.prototype.gte = function (other) {
          return this._bn.gte(toBN(other));
      };
      BigNumber.prototype.isZero = function () {
          return this._bn.isZero();
      };
      BigNumber.prototype.toNumber = function () {
          try {
              return this._bn.toNumber();
          }
          catch (error) {
              errors.throwError('overflow', errors.NUMERIC_FAULT, { operation: 'setValue', fault: 'overflow', details: error.message });
          }
          return null;
      };
      BigNumber.prototype.toString = function () {
          return this._bn.toString(10);
      };
      BigNumber.prototype.toHexString = function () {
          return this._hex;
      };
      return BigNumber;
  }(types_1.BigNumber));
  function bigNumberify(value) {
      if (value instanceof BigNumber) {
          return value;
      }
      return new BigNumber(value);
  }
  exports.bigNumberify = bigNumberify;
  exports.ConstantNegativeOne = bigNumberify(-1);
  exports.ConstantZero = bigNumberify(0);
  exports.ConstantOne = bigNumberify(1);
  exports.ConstantTwo = bigNumberify(2);
  exports.ConstantWeiPerEther = bigNumberify('1000000000000000000');
  
  },{"./bytes":146,"./errors":147,"./properties":149,"./types":151,"bn.js":53}],146:[function(require,module,exports){
  "use strict";
  /**
   *  Conversion Utilities
   *
   */
  Object.defineProperty(exports, "__esModule", { value: true });
  var errors = require("./errors");
  exports.AddressZero = '0x0000000000000000000000000000000000000000';
  exports.HashZero = '0x0000000000000000000000000000000000000000000000000000000000000000';
  function isBigNumber(value) {
      return !!value._bn;
  }
  function addSlice(array) {
      if (array.slice) {
          return array;
      }
      array.slice = function () {
          var args = Array.prototype.slice.call(arguments);
          return new Uint8Array(Array.prototype.slice.apply(array, args));
      };
      return array;
  }
  function isArrayish(value) {
      if (!value || parseInt(String(value.length)) != value.length || typeof (value) === 'string') {
          return false;
      }
      for (var i = 0; i < value.length; i++) {
          var v = value[i];
          if (v < 0 || v >= 256 || parseInt(String(v)) != v) {
              return false;
          }
      }
      return true;
  }
  exports.isArrayish = isArrayish;
  function arrayify(value) {
      if (value == null) {
          errors.throwError('cannot convert null value to array', errors.INVALID_ARGUMENT, { arg: 'value', value: value });
      }
      if (isBigNumber(value)) {
          value = value.toHexString();
      }
      if (typeof (value) === 'string') {
          var match = value.match(/^(0x)?[0-9a-fA-F]*$/);
          if (!match) {
              errors.throwError('invalid hexadecimal string', errors.INVALID_ARGUMENT, { arg: 'value', value: value });
          }
          if (match[1] !== '0x') {
              errors.throwError('hex string must have 0x prefix', errors.INVALID_ARGUMENT, { arg: 'value', value: value });
          }
          value = value.substring(2);
          if (value.length % 2) {
              value = '0' + value;
          }
          var result = [];
          for (var i = 0; i < value.length; i += 2) {
              result.push(parseInt(value.substr(i, 2), 16));
          }
          return addSlice(new Uint8Array(result));
      }
      else if (typeof (value) === 'string') {
      }
      if (isArrayish(value)) {
          return addSlice(new Uint8Array(value));
      }
      errors.throwError('invalid arrayify value', null, { arg: 'value', value: value, type: typeof (value) });
      return null;
  }
  exports.arrayify = arrayify;
  function concat(objects) {
      var arrays = [];
      var length = 0;
      for (var i = 0; i < objects.length; i++) {
          var object = arrayify(objects[i]);
          arrays.push(object);
          length += object.length;
      }
      var result = new Uint8Array(length);
      var offset = 0;
      for (var i = 0; i < arrays.length; i++) {
          result.set(arrays[i], offset);
          offset += arrays[i].length;
      }
      return addSlice(result);
  }
  exports.concat = concat;
  function stripZeros(value) {
      var result = arrayify(value);
      if (result.length === 0) {
          return result;
      }
      // Find the first non-zero entry
      var start = 0;
      while (result[start] === 0) {
          start++;
      }
      // If we started with zeros, strip them
      if (start) {
          result = result.slice(start);
      }
      return result;
  }
  exports.stripZeros = stripZeros;
  function padZeros(value, length) {
      value = arrayify(value);
      if (length < value.length) {
          throw new Error('cannot pad');
      }
      var result = new Uint8Array(length);
      result.set(value, length - value.length);
      return addSlice(result);
  }
  exports.padZeros = padZeros;
  function isHexString(value, length) {
      if (typeof (value) !== 'string' || !value.match(/^0x[0-9A-Fa-f]*$/)) {
          return false;
      }
      if (length && value.length !== 2 + 2 * length) {
          return false;
      }
      return true;
  }
  exports.isHexString = isHexString;
  var HexCharacters = '0123456789abcdef';
  function hexlify(value) {
      if (isBigNumber(value)) {
          return value.toHexString();
      }
      if (typeof (value) === 'number') {
          if (value < 0) {
              errors.throwError('cannot hexlify negative value', errors.INVALID_ARGUMENT, { arg: 'value', value: value });
          }
          var hex = '';
          while (value) {
              hex = HexCharacters[value & 0x0f] + hex;
              value = Math.floor(value / 16);
          }
          if (hex.length) {
              if (hex.length % 2) {
                  hex = '0' + hex;
              }
              return '0x' + hex;
          }
          return '0x00';
      }
      if (typeof (value) === 'string') {
          var match = value.match(/^(0x)?[0-9a-fA-F]*$/);
          if (!match) {
              errors.throwError('invalid hexadecimal string', errors.INVALID_ARGUMENT, { arg: 'value', value: value });
          }
          if (match[1] !== '0x') {
              errors.throwError('hex string must have 0x prefix', errors.INVALID_ARGUMENT, { arg: 'value', value: value });
          }
          if (value.length % 2) {
              value = '0x0' + value.substring(2);
          }
          return value;
      }
      if (isArrayish(value)) {
          var result = [];
          for (var i = 0; i < value.length; i++) {
              var v = value[i];
              result.push(HexCharacters[(v & 0xf0) >> 4] + HexCharacters[v & 0x0f]);
          }
          return '0x' + result.join('');
      }
      errors.throwError('invalid hexlify value', null, { arg: 'value', value: value });
      return 'never';
  }
  exports.hexlify = hexlify;
  function hexDataLength(data) {
      if (!isHexString(data) || (data.length % 2) !== 0) {
          return null;
      }
      return (data.length - 2) / 2;
  }
  exports.hexDataLength = hexDataLength;
  function hexDataSlice(data, offset, length) {
      if (!isHexString(data)) {
          errors.throwError('invalid hex data', errors.INVALID_ARGUMENT, { arg: 'value', value: data });
      }
      if ((data.length % 2) !== 0) {
          errors.throwError('hex data length must be even', errors.INVALID_ARGUMENT, { arg: 'value', value: data });
      }
      offset = 2 + 2 * offset;
      if (length != null) {
          return '0x' + data.substring(offset, offset + 2 * length);
      }
      return '0x' + data.substring(offset);
  }
  exports.hexDataSlice = hexDataSlice;
  function hexStripZeros(value) {
      if (!isHexString(value)) {
          errors.throwError('invalid hex string', errors.INVALID_ARGUMENT, { arg: 'value', value: value });
      }
      while (value.length > 3 && value.substring(0, 3) === '0x0') {
          value = '0x' + value.substring(3);
      }
      return value;
  }
  exports.hexStripZeros = hexStripZeros;
  function hexZeroPad(value, length) {
      if (!isHexString(value)) {
          errors.throwError('invalid hex string', errors.INVALID_ARGUMENT, { arg: 'value', value: value });
      }
      while (value.length < 2 * length + 2) {
          value = '0x0' + value.substring(2);
      }
      return value;
  }
  exports.hexZeroPad = hexZeroPad;
  function isSignature(value) {
      return (value && value.r != null && value.s != null);
  }
  function splitSignature(signature) {
      var v = 0;
      var r = '0x', s = '0x';
      if (isSignature(signature)) {
          if (signature.v == null && signature.recoveryParam == null) {
              errors.throwError('at least on of recoveryParam or v must be specified', errors.INVALID_ARGUMENT, { argument: 'signature', value: signature });
          }
          r = hexZeroPad(signature.r, 32);
          s = hexZeroPad(signature.s, 32);
          v = signature.v;
          if (typeof (v) === 'string') {
              v = parseInt(v, 16);
          }
          var recoveryParam = signature.recoveryParam;
          if (recoveryParam == null && signature.v != null) {
              recoveryParam = 1 - (v % 2);
          }
          v = 27 + recoveryParam;
      }
      else {
          var bytes = arrayify(signature);
          if (bytes.length !== 65) {
              throw new Error('invalid signature');
          }
          r = hexlify(bytes.slice(0, 32));
          s = hexlify(bytes.slice(32, 64));
          v = bytes[64];
          if (v !== 27 && v !== 28) {
              v = 27 + (v % 2);
          }
      }
      return {
          r: r,
          s: s,
          recoveryParam: (v - 27),
          v: v
      };
  }
  exports.splitSignature = splitSignature;
  function joinSignature(signature) {
      signature = splitSignature(signature);
      return hexlify(concat([
          signature.r,
          signature.s,
          (signature.recoveryParam ? '0x1c' : '0x1b')
      ]));
  }
  exports.joinSignature = joinSignature;
  
  },{"./errors":147}],147:[function(require,module,exports){
  'use strict';
  Object.defineProperty(exports, "__esModule", { value: true });
  // Unknown Error
  exports.UNKNOWN_ERROR = 'UNKNOWN_ERROR';
  // Not implemented
  exports.NOT_IMPLEMENTED = 'NOT_IMPLEMENTED';
  // Missing new operator to an object
  //  - name: The name of the class
  exports.MISSING_NEW = 'MISSING_NEW';
  // Call exception
  //  - transaction: the transaction
  //  - address?: the contract address
  //  - args?: The arguments passed into the function
  //  - method?: The Solidity method signature
  //  - errorSignature?: The EIP848 error signature
  //  - errorArgs?: The EIP848 error parameters
  //  - reason: The reason (only for EIP848 "Error(string)")
  exports.CALL_EXCEPTION = 'CALL_EXCEPTION';
  // Response from a server was invalid
  //   - response: The body of the response
  //'BAD_RESPONSE',
  // Invalid argument (e.g. value is incompatible with type) to a function:
  //   - arg: The argument name that was invalid
  //   - value: The value of the argument
  exports.INVALID_ARGUMENT = 'INVALID_ARGUMENT';
  // Missing argument to a function:
  //   - count: The number of arguments received
  //   - expectedCount: The number of arguments expected
  exports.MISSING_ARGUMENT = 'MISSING_ARGUMENT';
  // Too many arguments
  //   - count: The number of arguments received
  //   - expectedCount: The number of arguments expected
  exports.UNEXPECTED_ARGUMENT = 'UNEXPECTED_ARGUMENT';
  // Numeric Fault
  //   - operation: the operation being executed
  //   - fault: the reason this faulted
  exports.NUMERIC_FAULT = 'NUMERIC_FAULT';
  // Unsupported operation
  //   - operation
  exports.UNSUPPORTED_OPERATION = 'UNSUPPORTED_OPERATION';
  var _permanentCensorErrors = false;
  var _censorErrors = false;
  // @TODO: Enum
  function throwError(message, code, params) {
      if (_censorErrors) {
          throw new Error('unknown error');
      }
      if (!code) {
          code = exports.UNKNOWN_ERROR;
      }
      if (!params) {
          params = {};
      }
      var messageDetails = [];
      Object.keys(params).forEach(function (key) {
          try {
              messageDetails.push(key + '=' + JSON.stringify(params[key]));
          }
          catch (error) {
              messageDetails.push(key + '=' + JSON.stringify(params[key].toString()));
          }
      });
      var reason = message;
      if (messageDetails.length) {
          message += ' (' + messageDetails.join(', ') + ')';
      }
      // @TODO: Any??
      var error = new Error(message);
      error.reason = reason;
      error.code = code;
      Object.keys(params).forEach(function (key) {
          error[key] = params[key];
      });
      throw error;
  }
  exports.throwError = throwError;
  function checkNew(self, kind) {
      if (!(self instanceof kind)) {
          throwError('missing new', exports.MISSING_NEW, { name: kind.name });
      }
  }
  exports.checkNew = checkNew;
  function checkArgumentCount(count, expectedCount, suffix) {
      if (!suffix) {
          suffix = '';
      }
      if (count < expectedCount) {
          throwError('missing argument' + suffix, exports.MISSING_ARGUMENT, { count: count, expectedCount: expectedCount });
      }
      if (count > expectedCount) {
          throwError('too many arguments' + suffix, exports.UNEXPECTED_ARGUMENT, { count: count, expectedCount: expectedCount });
      }
  }
  exports.checkArgumentCount = checkArgumentCount;
  function setCensorship(censorship, permanent) {
      if (_permanentCensorErrors) {
          throwError('error censorship permanent', exports.UNSUPPORTED_OPERATION, { operation: 'setCersorship' });
      }
      _censorErrors = !!censorship;
      _permanentCensorErrors = !!permanent;
  }
  exports.setCensorship = setCensorship;
  
  },{}],148:[function(require,module,exports){
  'use strict';
  Object.defineProperty(exports, "__esModule", { value: true });
  var sha3 = require("js-sha3");
  var bytes_1 = require("./bytes");
  function keccak256(data) {
      return '0x' + sha3.keccak_256(bytes_1.arrayify(data));
  }
  exports.keccak256 = keccak256;
  
  },{"./bytes":146,"js-sha3":142}],149:[function(require,module,exports){
  'use strict';
  Object.defineProperty(exports, "__esModule", { value: true });
  function defineReadOnly(object, name, value) {
      Object.defineProperty(object, name, {
          enumerable: true,
          value: value,
          writable: false,
      });
  }
  exports.defineReadOnly = defineReadOnly;
  function defineFrozen(object, name, value) {
      var frozen = JSON.stringify(value);
      Object.defineProperty(object, name, {
          enumerable: true,
          get: function () { return JSON.parse(frozen); }
      });
  }
  exports.defineFrozen = defineFrozen;
  function resolveProperties(object) {
      var result = {};
      var promises = [];
      Object.keys(object).forEach(function (key) {
          var value = object[key];
          if (value instanceof Promise) {
              promises.push(value.then(function (value) {
                  result[key] = value;
                  return null;
              }));
          }
          else {
              result[key] = value;
          }
      });
      return Promise.all(promises).then(function () {
          return result;
      });
  }
  exports.resolveProperties = resolveProperties;
  function shallowCopy(object) {
      var result = {};
      for (var key in object) {
          result[key] = object[key];
      }
      return result;
  }
  exports.shallowCopy = shallowCopy;
  function jsonCopy(object) {
      return JSON.parse(JSON.stringify(object));
  }
  exports.jsonCopy = jsonCopy;
  
  },{}],150:[function(require,module,exports){
  "use strict";
  //See: https://github.com/ethereum/wiki/wiki/RLP
  Object.defineProperty(exports, "__esModule", { value: true });
  var bytes_1 = require("./bytes");
  function arrayifyInteger(value) {
      var result = [];
      while (value) {
          result.unshift(value & 0xff);
          value >>= 8;
      }
      return result;
  }
  function unarrayifyInteger(data, offset, length) {
      var result = 0;
      for (var i = 0; i < length; i++) {
          result = (result * 256) + data[offset + i];
      }
      return result;
  }
  function _encode(object) {
      if (Array.isArray(object)) {
          var payload = [];
          object.forEach(function (child) {
              payload = payload.concat(_encode(child));
          });
          if (payload.length <= 55) {
              payload.unshift(0xc0 + payload.length);
              return payload;
          }
          var length = arrayifyInteger(payload.length);
          length.unshift(0xf7 + length.length);
          return length.concat(payload);
      }
      var data = Array.prototype.slice.call(bytes_1.arrayify(object));
      if (data.length === 1 && data[0] <= 0x7f) {
          return data;
      }
      else if (data.length <= 55) {
          data.unshift(0x80 + data.length);
          return data;
      }
      var length = arrayifyInteger(data.length);
      length.unshift(0xb7 + length.length);
      return length.concat(data);
  }
  function encode(object) {
      return bytes_1.hexlify(_encode(object));
  }
  exports.encode = encode;
  function _decodeChildren(data, offset, childOffset, length) {
      var result = [];
      while (childOffset < offset + 1 + length) {
          var decoded = _decode(data, childOffset);
          result.push(decoded.result);
          childOffset += decoded.consumed;
          if (childOffset > offset + 1 + length) {
              throw new Error('invalid rlp');
          }
      }
      return { consumed: (1 + length), result: result };
  }
  // returns { consumed: number, result: Object }
  function _decode(data, offset) {
      if (data.length === 0) {
          throw new Error('invalid rlp data');
      }
      // Array with extra length prefix
      if (data[offset] >= 0xf8) {
          var lengthLength = data[offset] - 0xf7;
          if (offset + 1 + lengthLength > data.length) {
              throw new Error('too short');
          }
          var length = unarrayifyInteger(data, offset + 1, lengthLength);
          if (offset + 1 + lengthLength + length > data.length) {
              throw new Error('to short');
          }
          return _decodeChildren(data, offset, offset + 1 + lengthLength, lengthLength + length);
      }
      else if (data[offset] >= 0xc0) {
          var length = data[offset] - 0xc0;
          if (offset + 1 + length > data.length) {
              throw new Error('invalid rlp data');
          }
          return _decodeChildren(data, offset, offset + 1, length);
      }
      else if (data[offset] >= 0xb8) {
          var lengthLength = data[offset] - 0xb7;
          if (offset + 1 + lengthLength > data.length) {
              throw new Error('invalid rlp data');
          }
          var length = unarrayifyInteger(data, offset + 1, lengthLength);
          if (offset + 1 + lengthLength + length > data.length) {
              throw new Error('invalid rlp data');
          }
          var result = bytes_1.hexlify(data.slice(offset + 1 + lengthLength, offset + 1 + lengthLength + length));
          return { consumed: (1 + lengthLength + length), result: result };
      }
      else if (data[offset] >= 0x80) {
          var length = data[offset] - 0x80;
          if (offset + 1 + length > data.length) {
              throw new Error('invlaid rlp data');
          }
          var result = bytes_1.hexlify(data.slice(offset + 1, offset + 1 + length));
          return { consumed: (1 + length), result: result };
      }
      return { consumed: 1, result: bytes_1.hexlify(data[offset]) };
  }
  function decode(data) {
      var bytes = bytes_1.arrayify(data);
      var decoded = _decode(bytes, 0);
      if (decoded.consumed !== bytes.length) {
          throw new Error('invalid rlp data');
      }
      return decoded.result;
  }
  exports.decode = decode;
  
  },{"./bytes":146}],151:[function(require,module,exports){
  "use strict";
  ///////////////////////////////
  // Bytes
  Object.defineProperty(exports, "__esModule", { value: true });
  ///////////////////////////////
  // BigNumber
  var BigNumber = /** @class */ (function () {
      function BigNumber() {
      }
      return BigNumber;
  }());
  exports.BigNumber = BigNumber;
  ;
  ;
  ;
  ///////////////////////////////
  // Interface
  var Indexed = /** @class */ (function () {
      function Indexed() {
      }
      return Indexed;
  }());
  exports.Indexed = Indexed;
  /**
   *  Provider
   *
   *  Note: We use an abstract class so we can use instanceof to determine if an
   *        object is a Provider.
   */
  var MinimalProvider = /** @class */ (function () {
      function MinimalProvider() {
      }
      return MinimalProvider;
  }());
  exports.MinimalProvider = MinimalProvider;
  /**
   *  Signer
   *
   *  Note: We use an abstract class so we can use instanceof to determine if an
   *        object is a Signer.
   */
  var Signer = /** @class */ (function () {
      function Signer() {
      }
      return Signer;
  }());
  exports.Signer = Signer;
  ///////////////////////////////
  // HDNode
  var HDNode = /** @class */ (function () {
      function HDNode() {
      }
      return HDNode;
  }());
  exports.HDNode = HDNode;
  
  },{}],152:[function(require,module,exports){
  'use strict';
  Object.defineProperty(exports, "__esModule", { value: true });
  var bytes_1 = require("./bytes");
  var UnicodeNormalizationForm;
  (function (UnicodeNormalizationForm) {
      UnicodeNormalizationForm["current"] = "";
      UnicodeNormalizationForm["NFC"] = "NFC";
      UnicodeNormalizationForm["NFD"] = "NFD";
      UnicodeNormalizationForm["NFKC"] = "NFKC";
      UnicodeNormalizationForm["NFKD"] = "NFKD";
  })(UnicodeNormalizationForm = exports.UnicodeNormalizationForm || (exports.UnicodeNormalizationForm = {}));
  ;
  // http://stackoverflow.com/questions/18729405/how-to-convert-utf8-string-to-byte-array
  function toUtf8Bytes(str, form) {
      if (form === void 0) { form = UnicodeNormalizationForm.current; }
      if (form != UnicodeNormalizationForm.current) {
          str = str.normalize(form);
      }
      var result = [];
      var offset = 0;
      for (var i = 0; i < str.length; i++) {
          var c = str.charCodeAt(i);
          if (c < 128) {
              result[offset++] = c;
          }
          else if (c < 2048) {
              result[offset++] = (c >> 6) | 192;
              result[offset++] = (c & 63) | 128;
          }
          else if (((c & 0xFC00) == 0xD800) && (i + 1) < str.length && ((str.charCodeAt(i + 1) & 0xFC00) == 0xDC00)) {
              // Surrogate Pair
              c = 0x10000 + ((c & 0x03FF) << 10) + (str.charCodeAt(++i) & 0x03FF);
              result[offset++] = (c >> 18) | 240;
              result[offset++] = ((c >> 12) & 63) | 128;
              result[offset++] = ((c >> 6) & 63) | 128;
              result[offset++] = (c & 63) | 128;
          }
          else {
              result[offset++] = (c >> 12) | 224;
              result[offset++] = ((c >> 6) & 63) | 128;
              result[offset++] = (c & 63) | 128;
          }
      }
      return bytes_1.arrayify(result);
  }
  exports.toUtf8Bytes = toUtf8Bytes;
  ;
  // http://stackoverflow.com/questions/13356493/decode-utf-8-with-javascript#13691499
  function toUtf8String(bytes) {
      bytes = bytes_1.arrayify(bytes);
      var result = '';
      var i = 0;
      // Invalid bytes are ignored
      while (i < bytes.length) {
          var c = bytes[i++];
          if (c >> 7 == 0) {
              // 0xxx xxxx
              result += String.fromCharCode(c);
              continue;
          }
          // Invalid starting byte
          if (c >> 6 == 0x02) {
              continue;
          }
          // Multibyte; how many bytes left for thus character?
          var extraLength = null;
          if (c >> 5 == 0x06) {
              extraLength = 1;
          }
          else if (c >> 4 == 0x0e) {
              extraLength = 2;
          }
          else if (c >> 3 == 0x1e) {
              extraLength = 3;
          }
          else if (c >> 2 == 0x3e) {
              extraLength = 4;
          }
          else if (c >> 1 == 0x7e) {
              extraLength = 5;
          }
          else {
              continue;
          }
          // Do we have enough bytes in our data?
          if (i + extraLength > bytes.length) {
              // If there is an invalid unprocessed byte, try to continue
              for (; i < bytes.length; i++) {
                  if (bytes[i] >> 6 != 0x02) {
                      break;
                  }
              }
              if (i != bytes.length)
                  continue;
              // All leftover bytes are valid.
              return result;
          }
          // Remove the UTF-8 prefix from the char (res)
          var res = c & ((1 << (8 - extraLength - 1)) - 1);
          var count;
          for (count = 0; count < extraLength; count++) {
              var nextChar = bytes[i++];
              // Is the char valid multibyte part?
              if (nextChar >> 6 != 0x02) {
                  break;
              }
              ;
              res = (res << 6) | (nextChar & 0x3f);
          }
          if (count != extraLength) {
              i--;
              continue;
          }
          if (res <= 0xffff) {
              result += String.fromCharCode(res);
              continue;
          }
          res -= 0x10000;
          result += String.fromCharCode(((res >> 10) & 0x3ff) + 0xd800, (res & 0x3ff) + 0xdc00);
      }
      return result;
  }
  exports.toUtf8String = toUtf8String;
  
  },{"./bytes":146}],153:[function(require,module,exports){
  'use strict';
  
  var BN = require('bn.js');
  var numberToBN = require('number-to-bn');
  
  var zero = new BN(0);
  var negative1 = new BN(-1);
  
  // complete ethereum unit map
  var unitMap = {
    'noether': '0', // eslint-disable-line
    'wei': '1', // eslint-disable-line
    'kwei': '1000', // eslint-disable-line
    'Kwei': '1000', // eslint-disable-line
    'babbage': '1000', // eslint-disable-line
    'femtoether': '1000', // eslint-disable-line
    'mwei': '1000000', // eslint-disable-line
    'Mwei': '1000000', // eslint-disable-line
    'lovelace': '1000000', // eslint-disable-line
    'picoether': '1000000', // eslint-disable-line
    'gwei': '1000000000', // eslint-disable-line
    'Gwei': '1000000000', // eslint-disable-line
    'shannon': '1000000000', // eslint-disable-line
    'nanoether': '1000000000', // eslint-disable-line
    'nano': '1000000000', // eslint-disable-line
    'szabo': '1000000000000', // eslint-disable-line
    'microether': '1000000000000', // eslint-disable-line
    'micro': '1000000000000', // eslint-disable-line
    'finney': '1000000000000000', // eslint-disable-line
    'milliether': '1000000000000000', // eslint-disable-line
    'milli': '1000000000000000', // eslint-disable-line
    'ether': '1000000000000000000', // eslint-disable-line
    'kether': '1000000000000000000000', // eslint-disable-line
    'grand': '1000000000000000000000', // eslint-disable-line
    'mether': '1000000000000000000000000', // eslint-disable-line
    'gether': '1000000000000000000000000000', // eslint-disable-line
    'tether': '1000000000000000000000000000000' };
  
  /**
   * Returns value of unit in Wei
   *
   * @method getValueOfUnit
   * @param {String} unit the unit to convert to, default ether
   * @returns {BigNumber} value of the unit (in Wei)
   * @throws error if the unit is not correct:w
   */
  function getValueOfUnit(unitInput) {
    var unit = unitInput ? unitInput.toLowerCase() : 'ether';
    var unitValue = unitMap[unit]; // eslint-disable-line
  
    if (typeof unitValue !== 'string') {
      throw new Error('[ethjs-unit] the unit provided ' + unitInput + ' doesn\'t exists, please use the one of the following units ' + JSON.stringify(unitMap, null, 2));
    }
  
    return new BN(unitValue, 10);
  }
  
  function numberToString(arg) {
    if (typeof arg === 'string') {
      if (!arg.match(/^-?[0-9.]+$/)) {
        throw new Error('while converting number to string, invalid number value \'' + arg + '\', should be a number matching (^-?[0-9.]+).');
      }
      return arg;
    } else if (typeof arg === 'number') {
      return String(arg);
    } else if (typeof arg === 'object' && arg.toString && (arg.toTwos || arg.dividedToIntegerBy)) {
      if (arg.toPrecision) {
        return String(arg.toPrecision());
      } else {
        // eslint-disable-line
        return arg.toString(10);
      }
    }
    throw new Error('while converting number to string, invalid number value \'' + arg + '\' type ' + typeof arg + '.');
  }
  
  function fromWei(weiInput, unit, optionsInput) {
    var wei = numberToBN(weiInput); // eslint-disable-line
    var negative = wei.lt(zero); // eslint-disable-line
    var base = getValueOfUnit(unit);
    var baseLength = unitMap[unit].length - 1 || 1;
    var options = optionsInput || {};
  
    if (negative) {
      wei = wei.mul(negative1);
    }
  
    var fraction = wei.mod(base).toString(10); // eslint-disable-line
  
    while (fraction.length < baseLength) {
      fraction = '0' + fraction;
    }
  
    if (!options.pad) {
      fraction = fraction.match(/^([0-9]*[1-9]|0)(0*)/)[1];
    }
  
    var whole = wei.div(base).toString(10); // eslint-disable-line
  
    if (options.commify) {
      whole = whole.replace(/\B(?=(\d{3})+(?!\d))/g, ',');
    }
  
    var value = '' + whole + (fraction == '0' ? '' : '.' + fraction); // eslint-disable-line
  
    if (negative) {
      value = '-' + value;
    }
  
    return value;
  }
  
  function toWei(etherInput, unit) {
    var ether = numberToString(etherInput); // eslint-disable-line
    var base = getValueOfUnit(unit);
    var baseLength = unitMap[unit].length - 1 || 1;
  
    // Is it negative?
    var negative = ether.substring(0, 1) === '-'; // eslint-disable-line
    if (negative) {
      ether = ether.substring(1);
    }
  
    if (ether === '.') {
      throw new Error('[ethjs-unit] while converting number ' + etherInput + ' to wei, invalid value');
    }
  
    // Split it into a whole and fractional part
    var comps = ether.split('.'); // eslint-disable-line
    if (comps.length > 2) {
      throw new Error('[ethjs-unit] while converting number ' + etherInput + ' to wei,  too many decimal points');
    }
  
    var whole = comps[0],
        fraction = comps[1]; // eslint-disable-line
  
    if (!whole) {
      whole = '0';
    }
    if (!fraction) {
      fraction = '0';
    }
    if (fraction.length > baseLength) {
      throw new Error('[ethjs-unit] while converting number ' + etherInput + ' to wei, too many decimal places');
    }
  
    while (fraction.length < baseLength) {
      fraction += '0';
    }
  
    whole = new BN(whole);
    fraction = new BN(fraction);
    var wei = whole.mul(base).add(fraction); // eslint-disable-line
  
    if (negative) {
      wei = wei.mul(negative1);
    }
  
    return new BN(wei.toString(10), 10);
  }
  
  module.exports = {
    unitMap: unitMap,
    numberToString: numberToString,
    getValueOfUnit: getValueOfUnit,
    fromWei: fromWei,
    toWei: toWei
  };
  },{"bn.js":154,"number-to-bn":237}],154:[function(require,module,exports){
  (function (module, exports) {
    'use strict';
  
    // Utils
    function assert (val, msg) {
      if (!val) throw new Error(msg || 'Assertion failed');
    }
  
    // Could use `inherits` module, but don't want to move from single file
    // architecture yet.
    function inherits (ctor, superCtor) {
      ctor.super_ = superCtor;
      var TempCtor = function () {};
      TempCtor.prototype = superCtor.prototype;
      ctor.prototype = new TempCtor();
      ctor.prototype.constructor = ctor;
    }
  
    // BN
  
    function BN (number, base, endian) {
      if (BN.isBN(number)) {
        return number;
      }
  
      this.negative = 0;
      this.words = null;
      this.length = 0;
  
      // Reduction context
      this.red = null;
  
      if (number !== null) {
        if (base === 'le' || base === 'be') {
          endian = base;
          base = 10;
        }
  
        this._init(number || 0, base || 10, endian || 'be');
      }
    }
    if (typeof module === 'object') {
      module.exports = BN;
    } else {
      exports.BN = BN;
    }
  
    BN.BN = BN;
    BN.wordSize = 26;
  
    var Buffer;
    try {
      Buffer = require('buf' + 'fer').Buffer;
    } catch (e) {
    }
  
    BN.isBN = function isBN (num) {
      if (num instanceof BN) {
        return true;
      }
  
      return num !== null && typeof num === 'object' &&
        num.constructor.wordSize === BN.wordSize && Array.isArray(num.words);
    };
  
    BN.max = function max (left, right) {
      if (left.cmp(right) > 0) return left;
      return right;
    };
  
    BN.min = function min (left, right) {
      if (left.cmp(right) < 0) return left;
      return right;
    };
  
    BN.prototype._init = function init (number, base, endian) {
      if (typeof number === 'number') {
        return this._initNumber(number, base, endian);
      }
  
      if (typeof number === 'object') {
        return this._initArray(number, base, endian);
      }
  
      if (base === 'hex') {
        base = 16;
      }
      assert(base === (base | 0) && base >= 2 && base <= 36);
  
      number = number.toString().replace(/\s+/g, '');
      var start = 0;
      if (number[0] === '-') {
        start++;
      }
  
      if (base === 16) {
        this._parseHex(number, start);
      } else {
        this._parseBase(number, base, start);
      }
  
      if (number[0] === '-') {
        this.negative = 1;
      }
  
      this.strip();
  
      if (endian !== 'le') return;
  
      this._initArray(this.toArray(), base, endian);
    };
  
    BN.prototype._initNumber = function _initNumber (number, base, endian) {
      if (number < 0) {
        this.negative = 1;
        number = -number;
      }
      if (number < 0x4000000) {
        this.words = [ number & 0x3ffffff ];
        this.length = 1;
      } else if (number < 0x10000000000000) {
        this.words = [
          number & 0x3ffffff,
          (number / 0x4000000) & 0x3ffffff
        ];
        this.length = 2;
      } else {
        assert(number < 0x20000000000000); // 2 ^ 53 (unsafe)
        this.words = [
          number & 0x3ffffff,
          (number / 0x4000000) & 0x3ffffff,
          1
        ];
        this.length = 3;
      }
  
      if (endian !== 'le') return;
  
      // Reverse the bytes
      this._initArray(this.toArray(), base, endian);
    };
  
    BN.prototype._initArray = function _initArray (number, base, endian) {
      // Perhaps a Uint8Array
      assert(typeof number.length === 'number');
      if (number.length <= 0) {
        this.words = [ 0 ];
        this.length = 1;
        return this;
      }
  
      this.length = Math.ceil(number.length / 3);
      this.words = new Array(this.length);
      for (var i = 0; i < this.length; i++) {
        this.words[i] = 0;
      }
  
      var j, w;
      var off = 0;
      if (endian === 'be') {
        for (i = number.length - 1, j = 0; i >= 0; i -= 3) {
          w = number[i] | (number[i - 1] << 8) | (number[i - 2] << 16);
          this.words[j] |= (w << off) & 0x3ffffff;
          this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;
          off += 24;
          if (off >= 26) {
            off -= 26;
            j++;
          }
        }
      } else if (endian === 'le') {
        for (i = 0, j = 0; i < number.length; i += 3) {
          w = number[i] | (number[i + 1] << 8) | (number[i + 2] << 16);
          this.words[j] |= (w << off) & 0x3ffffff;
          this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;
          off += 24;
          if (off >= 26) {
            off -= 26;
            j++;
          }
        }
      }
      return this.strip();
    };
  
    function parseHex (str, start, end) {
      var r = 0;
      var len = Math.min(str.length, end);
      for (var i = start; i < len; i++) {
        var c = str.charCodeAt(i) - 48;
  
        r <<= 4;
  
        // 'a' - 'f'
        if (c >= 49 && c <= 54) {
          r |= c - 49 + 0xa;
  
        // 'A' - 'F'
        } else if (c >= 17 && c <= 22) {
          r |= c - 17 + 0xa;
  
        // '0' - '9'
        } else {
          r |= c & 0xf;
        }
      }
      return r;
    }
  
    BN.prototype._parseHex = function _parseHex (number, start) {
      // Create possibly bigger array to ensure that it fits the number
      this.length = Math.ceil((number.length - start) / 6);
      this.words = new Array(this.length);
      for (var i = 0; i < this.length; i++) {
        this.words[i] = 0;
      }
  
      var j, w;
      // Scan 24-bit chunks and add them to the number
      var off = 0;
      for (i = number.length - 6, j = 0; i >= start; i -= 6) {
        w = parseHex(number, i, i + 6);
        this.words[j] |= (w << off) & 0x3ffffff;
        // NOTE: `0x3fffff` is intentional here, 26bits max shift + 24bit hex limb
        this.words[j + 1] |= w >>> (26 - off) & 0x3fffff;
        off += 24;
        if (off >= 26) {
          off -= 26;
          j++;
        }
      }
      if (i + 6 !== start) {
        w = parseHex(number, start, i + 6);
        this.words[j] |= (w << off) & 0x3ffffff;
        this.words[j + 1] |= w >>> (26 - off) & 0x3fffff;
      }
      this.strip();
    };
  
    function parseBase (str, start, end, mul) {
      var r = 0;
      var len = Math.min(str.length, end);
      for (var i = start; i < len; i++) {
        var c = str.charCodeAt(i) - 48;
  
        r *= mul;
  
        // 'a'
        if (c >= 49) {
          r += c - 49 + 0xa;
  
        // 'A'
        } else if (c >= 17) {
          r += c - 17 + 0xa;
  
        // '0' - '9'
        } else {
          r += c;
        }
      }
      return r;
    }
  
    BN.prototype._parseBase = function _parseBase (number, base, start) {
      // Initialize as zero
      this.words = [ 0 ];
      this.length = 1;
  
      // Find length of limb in base
      for (var limbLen = 0, limbPow = 1; limbPow <= 0x3ffffff; limbPow *= base) {
        limbLen++;
      }
      limbLen--;
      limbPow = (limbPow / base) | 0;
  
      var total = number.length - start;
      var mod = total % limbLen;
      var end = Math.min(total, total - mod) + start;
  
      var word = 0;
      for (var i = start; i < end; i += limbLen) {
        word = parseBase(number, i, i + limbLen, base);
  
        this.imuln(limbPow);
        if (this.words[0] + word < 0x4000000) {
          this.words[0] += word;
        } else {
          this._iaddn(word);
        }
      }
  
      if (mod !== 0) {
        var pow = 1;
        word = parseBase(number, i, number.length, base);
  
        for (i = 0; i < mod; i++) {
          pow *= base;
        }
  
        this.imuln(pow);
        if (this.words[0] + word < 0x4000000) {
          this.words[0] += word;
        } else {
          this._iaddn(word);
        }
      }
    };
  
    BN.prototype.copy = function copy (dest) {
      dest.words = new Array(this.length);
      for (var i = 0; i < this.length; i++) {
        dest.words[i] = this.words[i];
      }
      dest.length = this.length;
      dest.negative = this.negative;
      dest.red = this.red;
    };
  
    BN.prototype.clone = function clone () {
      var r = new BN(null);
      this.copy(r);
      return r;
    };
  
    BN.prototype._expand = function _expand (size) {
      while (this.length < size) {
        this.words[this.length++] = 0;
      }
      return this;
    };
  
    // Remove leading `0` from `this`
    BN.prototype.strip = function strip () {
      while (this.length > 1 && this.words[this.length - 1] === 0) {
        this.length--;
      }
      return this._normSign();
    };
  
    BN.prototype._normSign = function _normSign () {
      // -0 = 0
      if (this.length === 1 && this.words[0] === 0) {
        this.negative = 0;
      }
      return this;
    };
  
    BN.prototype.inspect = function inspect () {
      return (this.red ? '<BN-R: ' : '<BN: ') + this.toString(16) + '>';
    };
  
    /*
  
    var zeros = [];
    var groupSizes = [];
    var groupBases = [];
  
    var s = '';
    var i = -1;
    while (++i < BN.wordSize) {
      zeros[i] = s;
      s += '0';
    }
    groupSizes[0] = 0;
    groupSizes[1] = 0;
    groupBases[0] = 0;
    groupBases[1] = 0;
    var base = 2 - 1;
    while (++base < 36 + 1) {
      var groupSize = 0;
      var groupBase = 1;
      while (groupBase < (1 << BN.wordSize) / base) {
        groupBase *= base;
        groupSize += 1;
      }
      groupSizes[base] = groupSize;
      groupBases[base] = groupBase;
    }
  
    */
  
    var zeros = [
      '',
      '0',
      '00',
      '000',
      '0000',
      '00000',
      '000000',
      '0000000',
      '00000000',
      '000000000',
      '0000000000',
      '00000000000',
      '000000000000',
      '0000000000000',
      '00000000000000',
      '000000000000000',
      '0000000000000000',
      '00000000000000000',
      '000000000000000000',
      '0000000000000000000',
      '00000000000000000000',
      '000000000000000000000',
      '0000000000000000000000',
      '00000000000000000000000',
      '000000000000000000000000',
      '0000000000000000000000000'
    ];
  
    var groupSizes = [
      0, 0,
      25, 16, 12, 11, 10, 9, 8,
      8, 7, 7, 7, 7, 6, 6,
      6, 6, 6, 6, 6, 5, 5,
      5, 5, 5, 5, 5, 5, 5,
      5, 5, 5, 5, 5, 5, 5
    ];
  
    var groupBases = [
      0, 0,
      33554432, 43046721, 16777216, 48828125, 60466176, 40353607, 16777216,
      43046721, 10000000, 19487171, 35831808, 62748517, 7529536, 11390625,
      16777216, 24137569, 34012224, 47045881, 64000000, 4084101, 5153632,
      6436343, 7962624, 9765625, 11881376, 14348907, 17210368, 20511149,
      24300000, 28629151, 33554432, 39135393, 45435424, 52521875, 60466176
    ];
  
    BN.prototype.toString = function toString (base, padding) {
      base = base || 10;
      padding = padding | 0 || 1;
  
      var out;
      if (base === 16 || base === 'hex') {
        out = '';
        var off = 0;
        var carry = 0;
        for (var i = 0; i < this.length; i++) {
          var w = this.words[i];
          var word = (((w << off) | carry) & 0xffffff).toString(16);
          carry = (w >>> (24 - off)) & 0xffffff;
          if (carry !== 0 || i !== this.length - 1) {
            out = zeros[6 - word.length] + word + out;
          } else {
            out = word + out;
          }
          off += 2;
          if (off >= 26) {
            off -= 26;
            i--;
          }
        }
        if (carry !== 0) {
          out = carry.toString(16) + out;
        }
        while (out.length % padding !== 0) {
          out = '0' + out;
        }
        if (this.negative !== 0) {
          out = '-' + out;
        }
        return out;
      }
  
      if (base === (base | 0) && base >= 2 && base <= 36) {
        // var groupSize = Math.floor(BN.wordSize * Math.LN2 / Math.log(base));
        var groupSize = groupSizes[base];
        // var groupBase = Math.pow(base, groupSize);
        var groupBase = groupBases[base];
        out = '';
        var c = this.clone();
        c.negative = 0;
        while (!c.isZero()) {
          var r = c.modn(groupBase).toString(base);
          c = c.idivn(groupBase);
  
          if (!c.isZero()) {
            out = zeros[groupSize - r.length] + r + out;
          } else {
            out = r + out;
          }
        }
        if (this.isZero()) {
          out = '0' + out;
        }
        while (out.length % padding !== 0) {
          out = '0' + out;
        }
        if (this.negative !== 0) {
          out = '-' + out;
        }
        return out;
      }
  
      assert(false, 'Base should be between 2 and 36');
    };
  
    BN.prototype.toNumber = function toNumber () {
      var ret = this.words[0];
      if (this.length === 2) {
        ret += this.words[1] * 0x4000000;
      } else if (this.length === 3 && this.words[2] === 0x01) {
        // NOTE: at this stage it is known that the top bit is set
        ret += 0x10000000000000 + (this.words[1] * 0x4000000);
      } else if (this.length > 2) {
        assert(false, 'Number can only safely store up to 53 bits');
      }
      return (this.negative !== 0) ? -ret : ret;
    };
  
    BN.prototype.toJSON = function toJSON () {
      return this.toString(16);
    };
  
    BN.prototype.toBuffer = function toBuffer (endian, length) {
      assert(typeof Buffer !== 'undefined');
      return this.toArrayLike(Buffer, endian, length);
    };
  
    BN.prototype.toArray = function toArray (endian, length) {
      return this.toArrayLike(Array, endian, length);
    };
  
    BN.prototype.toArrayLike = function toArrayLike (ArrayType, endian, length) {
      var byteLength = this.byteLength();
      var reqLength = length || Math.max(1, byteLength);
      assert(byteLength <= reqLength, 'byte array longer than desired length');
      assert(reqLength > 0, 'Requested array length <= 0');
  
      this.strip();
      var littleEndian = endian === 'le';
      var res = new ArrayType(reqLength);
  
      var b, i;
      var q = this.clone();
      if (!littleEndian) {
        // Assume big-endian
        for (i = 0; i < reqLength - byteLength; i++) {
          res[i] = 0;
        }
  
        for (i = 0; !q.isZero(); i++) {
          b = q.andln(0xff);
          q.iushrn(8);
  
          res[reqLength - i - 1] = b;
        }
      } else {
        for (i = 0; !q.isZero(); i++) {
          b = q.andln(0xff);
          q.iushrn(8);
  
          res[i] = b;
        }
  
        for (; i < reqLength; i++) {
          res[i] = 0;
        }
      }
  
      return res;
    };
  
    if (Math.clz32) {
      BN.prototype._countBits = function _countBits (w) {
        return 32 - Math.clz32(w);
      };
    } else {
      BN.prototype._countBits = function _countBits (w) {
        var t = w;
        var r = 0;
        if (t >= 0x1000) {
          r += 13;
          t >>>= 13;
        }
        if (t >= 0x40) {
          r += 7;
          t >>>= 7;
        }
        if (t >= 0x8) {
          r += 4;
          t >>>= 4;
        }
        if (t >= 0x02) {
          r += 2;
          t >>>= 2;
        }
        return r + t;
      };
    }
  
    BN.prototype._zeroBits = function _zeroBits (w) {
      // Short-cut
      if (w === 0) return 26;
  
      var t = w;
      var r = 0;
      if ((t & 0x1fff) === 0) {
        r += 13;
        t >>>= 13;
      }
      if ((t & 0x7f) === 0) {
        r += 7;
        t >>>= 7;
      }
      if ((t & 0xf) === 0) {
        r += 4;
        t >>>= 4;
      }
      if ((t & 0x3) === 0) {
        r += 2;
        t >>>= 2;
      }
      if ((t & 0x1) === 0) {
        r++;
      }
      return r;
    };
  
    // Return number of used bits in a BN
    BN.prototype.bitLength = function bitLength () {
      var w = this.words[this.length - 1];
      var hi = this._countBits(w);
      return (this.length - 1) * 26 + hi;
    };
  
    function toBitArray (num) {
      var w = new Array(num.bitLength());
  
      for (var bit = 0; bit < w.length; bit++) {
        var off = (bit / 26) | 0;
        var wbit = bit % 26;
  
        w[bit] = (num.words[off] & (1 << wbit)) >>> wbit;
      }
  
      return w;
    }
  
    // Number of trailing zero bits
    BN.prototype.zeroBits = function zeroBits () {
      if (this.isZero()) return 0;
  
      var r = 0;
      for (var i = 0; i < this.length; i++) {
        var b = this._zeroBits(this.words[i]);
        r += b;
        if (b !== 26) break;
      }
      return r;
    };
  
    BN.prototype.byteLength = function byteLength () {
      return Math.ceil(this.bitLength() / 8);
    };
  
    BN.prototype.toTwos = function toTwos (width) {
      if (this.negative !== 0) {
        return this.abs().inotn(width).iaddn(1);
      }
      return this.clone();
    };
  
    BN.prototype.fromTwos = function fromTwos (width) {
      if (this.testn(width - 1)) {
        return this.notn(width).iaddn(1).ineg();
      }
      return this.clone();
    };
  
    BN.prototype.isNeg = function isNeg () {
      return this.negative !== 0;
    };
  
    // Return negative clone of `this`
    BN.prototype.neg = function neg () {
      return this.clone().ineg();
    };
  
    BN.prototype.ineg = function ineg () {
      if (!this.isZero()) {
        this.negative ^= 1;
      }
  
      return this;
    };
  
    // Or `num` with `this` in-place
    BN.prototype.iuor = function iuor (num) {
      while (this.length < num.length) {
        this.words[this.length++] = 0;
      }
  
      for (var i = 0; i < num.length; i++) {
        this.words[i] = this.words[i] | num.words[i];
      }
  
      return this.strip();
    };
  
    BN.prototype.ior = function ior (num) {
      assert((this.negative | num.negative) === 0);
      return this.iuor(num);
    };
  
    // Or `num` with `this`
    BN.prototype.or = function or (num) {
      if (this.length > num.length) return this.clone().ior(num);
      return num.clone().ior(this);
    };
  
    BN.prototype.uor = function uor (num) {
      if (this.length > num.length) return this.clone().iuor(num);
      return num.clone().iuor(this);
    };
  
    // And `num` with `this` in-place
    BN.prototype.iuand = function iuand (num) {
      // b = min-length(num, this)
      var b;
      if (this.length > num.length) {
        b = num;
      } else {
        b = this;
      }
  
      for (var i = 0; i < b.length; i++) {
        this.words[i] = this.words[i] & num.words[i];
      }
  
      this.length = b.length;
  
      return this.strip();
    };
  
    BN.prototype.iand = function iand (num) {
      assert((this.negative | num.negative) === 0);
      return this.iuand(num);
    };
  
    // And `num` with `this`
    BN.prototype.and = function and (num) {
      if (this.length > num.length) return this.clone().iand(num);
      return num.clone().iand(this);
    };
  
    BN.prototype.uand = function uand (num) {
      if (this.length > num.length) return this.clone().iuand(num);
      return num.clone().iuand(this);
    };
  
    // Xor `num` with `this` in-place
    BN.prototype.iuxor = function iuxor (num) {
      // a.length > b.length
      var a;
      var b;
      if (this.length > num.length) {
        a = this;
        b = num;
      } else {
        a = num;
        b = this;
      }
  
      for (var i = 0; i < b.length; i++) {
        this.words[i] = a.words[i] ^ b.words[i];
      }
  
      if (this !== a) {
        for (; i < a.length; i++) {
          this.words[i] = a.words[i];
        }
      }
  
      this.length = a.length;
  
      return this.strip();
    };
  
    BN.prototype.ixor = function ixor (num) {
      assert((this.negative | num.negative) === 0);
      return this.iuxor(num);
    };
  
    // Xor `num` with `this`
    BN.prototype.xor = function xor (num) {
      if (this.length > num.length) return this.clone().ixor(num);
      return num.clone().ixor(this);
    };
  
    BN.prototype.uxor = function uxor (num) {
      if (this.length > num.length) return this.clone().iuxor(num);
      return num.clone().iuxor(this);
    };
  
    // Not ``this`` with ``width`` bitwidth
    BN.prototype.inotn = function inotn (width) {
      assert(typeof width === 'number' && width >= 0);
  
      var bytesNeeded = Math.ceil(width / 26) | 0;
      var bitsLeft = width % 26;
  
      // Extend the buffer with leading zeroes
      this._expand(bytesNeeded);
  
      if (bitsLeft > 0) {
        bytesNeeded--;
      }
  
      // Handle complete words
      for (var i = 0; i < bytesNeeded; i++) {
        this.words[i] = ~this.words[i] & 0x3ffffff;
      }
  
      // Handle the residue
      if (bitsLeft > 0) {
        this.words[i] = ~this.words[i] & (0x3ffffff >> (26 - bitsLeft));
      }
  
      // And remove leading zeroes
      return this.strip();
    };
  
    BN.prototype.notn = function notn (width) {
      return this.clone().inotn(width);
    };
  
    // Set `bit` of `this`
    BN.prototype.setn = function setn (bit, val) {
      assert(typeof bit === 'number' && bit >= 0);
  
      var off = (bit / 26) | 0;
      var wbit = bit % 26;
  
      this._expand(off + 1);
  
      if (val) {
        this.words[off] = this.words[off] | (1 << wbit);
      } else {
        this.words[off] = this.words[off] & ~(1 << wbit);
      }
  
      return this.strip();
    };
  
    // Add `num` to `this` in-place
    BN.prototype.iadd = function iadd (num) {
      var r;
  
      // negative + positive
      if (this.negative !== 0 && num.negative === 0) {
        this.negative = 0;
        r = this.isub(num);
        this.negative ^= 1;
        return this._normSign();
  
      // positive + negative
      } else if (this.negative === 0 && num.negative !== 0) {
        num.negative = 0;
        r = this.isub(num);
        num.negative = 1;
        return r._normSign();
      }
  
      // a.length > b.length
      var a, b;
      if (this.length > num.length) {
        a = this;
        b = num;
      } else {
        a = num;
        b = this;
      }
  
      var carry = 0;
      for (var i = 0; i < b.length; i++) {
        r = (a.words[i] | 0) + (b.words[i] | 0) + carry;
        this.words[i] = r & 0x3ffffff;
        carry = r >>> 26;
      }
      for (; carry !== 0 && i < a.length; i++) {
        r = (a.words[i] | 0) + carry;
        this.words[i] = r & 0x3ffffff;
        carry = r >>> 26;
      }
  
      this.length = a.length;
      if (carry !== 0) {
        this.words[this.length] = carry;
        this.length++;
      // Copy the rest of the words
      } else if (a !== this) {
        for (; i < a.length; i++) {
          this.words[i] = a.words[i];
        }
      }
  
      return this;
    };
  
    // Add `num` to `this`
    BN.prototype.add = function add (num) {
      var res;
      if (num.negative !== 0 && this.negative === 0) {
        num.negative = 0;
        res = this.sub(num);
        num.negative ^= 1;
        return res;
      } else if (num.negative === 0 && this.negative !== 0) {
        this.negative = 0;
        res = num.sub(this);
        this.negative = 1;
        return res;
      }
  
      if (this.length > num.length) return this.clone().iadd(num);
  
      return num.clone().iadd(this);
    };
  
    // Subtract `num` from `this` in-place
    BN.prototype.isub = function isub (num) {
      // this - (-num) = this + num
      if (num.negative !== 0) {
        num.negative = 0;
        var r = this.iadd(num);
        num.negative = 1;
        return r._normSign();
  
      // -this - num = -(this + num)
      } else if (this.negative !== 0) {
        this.negative = 0;
        this.iadd(num);
        this.negative = 1;
        return this._normSign();
      }
  
      // At this point both numbers are positive
      var cmp = this.cmp(num);
  
      // Optimization - zeroify
      if (cmp === 0) {
        this.negative = 0;
        this.length = 1;
        this.words[0] = 0;
        return this;
      }
  
      // a > b
      var a, b;
      if (cmp > 0) {
        a = this;
        b = num;
      } else {
        a = num;
        b = this;
      }
  
      var carry = 0;
      for (var i = 0; i < b.length; i++) {
        r = (a.words[i] | 0) - (b.words[i] | 0) + carry;
        carry = r >> 26;
        this.words[i] = r & 0x3ffffff;
      }
      for (; carry !== 0 && i < a.length; i++) {
        r = (a.words[i] | 0) + carry;
        carry = r >> 26;
        this.words[i] = r & 0x3ffffff;
      }
  
      // Copy rest of the words
      if (carry === 0 && i < a.length && a !== this) {
        for (; i < a.length; i++) {
          this.words[i] = a.words[i];
        }
      }
  
      this.length = Math.max(this.length, i);
  
      if (a !== this) {
        this.negative = 1;
      }
  
      return this.strip();
    };
  
    // Subtract `num` from `this`
    BN.prototype.sub = function sub (num) {
      return this.clone().isub(num);
    };
  
    function smallMulTo (self, num, out) {
      out.negative = num.negative ^ self.negative;
      var len = (self.length + num.length) | 0;
      out.length = len;
      len = (len - 1) | 0;
  
      // Peel one iteration (compiler can't do it, because of code complexity)
      var a = self.words[0] | 0;
      var b = num.words[0] | 0;
      var r = a * b;
  
      var lo = r & 0x3ffffff;
      var carry = (r / 0x4000000) | 0;
      out.words[0] = lo;
  
      for (var k = 1; k < len; k++) {
        // Sum all words with the same `i + j = k` and accumulate `ncarry`,
        // note that ncarry could be >= 0x3ffffff
        var ncarry = carry >>> 26;
        var rword = carry & 0x3ffffff;
        var maxJ = Math.min(k, num.length - 1);
        for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {
          var i = (k - j) | 0;
          a = self.words[i] | 0;
          b = num.words[j] | 0;
          r = a * b + rword;
          ncarry += (r / 0x4000000) | 0;
          rword = r & 0x3ffffff;
        }
        out.words[k] = rword | 0;
        carry = ncarry | 0;
      }
      if (carry !== 0) {
        out.words[k] = carry | 0;
      } else {
        out.length--;
      }
  
      return out.strip();
    }
  
    // TODO(indutny): it may be reasonable to omit it for users who don't need
    // to work with 256-bit numbers, otherwise it gives 20% improvement for 256-bit
    // multiplication (like elliptic secp256k1).
    var comb10MulTo = function comb10MulTo (self, num, out) {
      var a = self.words;
      var b = num.words;
      var o = out.words;
      var c = 0;
      var lo;
      var mid;
      var hi;
      var a0 = a[0] | 0;
      var al0 = a0 & 0x1fff;
      var ah0 = a0 >>> 13;
      var a1 = a[1] | 0;
      var al1 = a1 & 0x1fff;
      var ah1 = a1 >>> 13;
      var a2 = a[2] | 0;
      var al2 = a2 & 0x1fff;
      var ah2 = a2 >>> 13;
      var a3 = a[3] | 0;
      var al3 = a3 & 0x1fff;
      var ah3 = a3 >>> 13;
      var a4 = a[4] | 0;
      var al4 = a4 & 0x1fff;
      var ah4 = a4 >>> 13;
      var a5 = a[5] | 0;
      var al5 = a5 & 0x1fff;
      var ah5 = a5 >>> 13;
      var a6 = a[6] | 0;
      var al6 = a6 & 0x1fff;
      var ah6 = a6 >>> 13;
      var a7 = a[7] | 0;
      var al7 = a7 & 0x1fff;
      var ah7 = a7 >>> 13;
      var a8 = a[8] | 0;
      var al8 = a8 & 0x1fff;
      var ah8 = a8 >>> 13;
      var a9 = a[9] | 0;
      var al9 = a9 & 0x1fff;
      var ah9 = a9 >>> 13;
      var b0 = b[0] | 0;
      var bl0 = b0 & 0x1fff;
      var bh0 = b0 >>> 13;
      var b1 = b[1] | 0;
      var bl1 = b1 & 0x1fff;
      var bh1 = b1 >>> 13;
      var b2 = b[2] | 0;
      var bl2 = b2 & 0x1fff;
      var bh2 = b2 >>> 13;
      var b3 = b[3] | 0;
      var bl3 = b3 & 0x1fff;
      var bh3 = b3 >>> 13;
      var b4 = b[4] | 0;
      var bl4 = b4 & 0x1fff;
      var bh4 = b4 >>> 13;
      var b5 = b[5] | 0;
      var bl5 = b5 & 0x1fff;
      var bh5 = b5 >>> 13;
      var b6 = b[6] | 0;
      var bl6 = b6 & 0x1fff;
      var bh6 = b6 >>> 13;
      var b7 = b[7] | 0;
      var bl7 = b7 & 0x1fff;
      var bh7 = b7 >>> 13;
      var b8 = b[8] | 0;
      var bl8 = b8 & 0x1fff;
      var bh8 = b8 >>> 13;
      var b9 = b[9] | 0;
      var bl9 = b9 & 0x1fff;
      var bh9 = b9 >>> 13;
  
      out.negative = self.negative ^ num.negative;
      out.length = 19;
      /* k = 0 */
      lo = Math.imul(al0, bl0);
      mid = Math.imul(al0, bh0);
      mid = (mid + Math.imul(ah0, bl0)) | 0;
      hi = Math.imul(ah0, bh0);
      var w0 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
      c = (((hi + (mid >>> 13)) | 0) + (w0 >>> 26)) | 0;
      w0 &= 0x3ffffff;
      /* k = 1 */
      lo = Math.imul(al1, bl0);
      mid = Math.imul(al1, bh0);
      mid = (mid + Math.imul(ah1, bl0)) | 0;
      hi = Math.imul(ah1, bh0);
      lo = (lo + Math.imul(al0, bl1)) | 0;
      mid = (mid + Math.imul(al0, bh1)) | 0;
      mid = (mid + Math.imul(ah0, bl1)) | 0;
      hi = (hi + Math.imul(ah0, bh1)) | 0;
      var w1 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
      c = (((hi + (mid >>> 13)) | 0) + (w1 >>> 26)) | 0;
      w1 &= 0x3ffffff;
      /* k = 2 */
      lo = Math.imul(al2, bl0);
      mid = Math.imul(al2, bh0);
      mid = (mid + Math.imul(ah2, bl0)) | 0;
      hi = Math.imul(ah2, bh0);
      lo = (lo + Math.imul(al1, bl1)) | 0;
      mid = (mid + Math.imul(al1, bh1)) | 0;
      mid = (mid + Math.imul(ah1, bl1)) | 0;
      hi = (hi + Math.imul(ah1, bh1)) | 0;
      lo = (lo + Math.imul(al0, bl2)) | 0;
      mid = (mid + Math.imul(al0, bh2)) | 0;
      mid = (mid + Math.imul(ah0, bl2)) | 0;
      hi = (hi + Math.imul(ah0, bh2)) | 0;
      var w2 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
      c = (((hi + (mid >>> 13)) | 0) + (w2 >>> 26)) | 0;
      w2 &= 0x3ffffff;
      /* k = 3 */
      lo = Math.imul(al3, bl0);
      mid = Math.imul(al3, bh0);
      mid = (mid + Math.imul(ah3, bl0)) | 0;
      hi = Math.imul(ah3, bh0);
      lo = (lo + Math.imul(al2, bl1)) | 0;
      mid = (mid + Math.imul(al2, bh1)) | 0;
      mid = (mid + Math.imul(ah2, bl1)) | 0;
      hi = (hi + Math.imul(ah2, bh1)) | 0;
      lo = (lo + Math.imul(al1, bl2)) | 0;
      mid = (mid + Math.imul(al1, bh2)) | 0;
      mid = (mid + Math.imul(ah1, bl2)) | 0;
      hi = (hi + Math.imul(ah1, bh2)) | 0;
      lo = (lo + Math.imul(al0, bl3)) | 0;
      mid = (mid + Math.imul(al0, bh3)) | 0;
      mid = (mid + Math.imul(ah0, bl3)) | 0;
      hi = (hi + Math.imul(ah0, bh3)) | 0;
      var w3 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
      c = (((hi + (mid >>> 13)) | 0) + (w3 >>> 26)) | 0;
      w3 &= 0x3ffffff;
      /* k = 4 */
      lo = Math.imul(al4, bl0);
      mid = Math.imul(al4, bh0);
      mid = (mid + Math.imul(ah4, bl0)) | 0;
      hi = Math.imul(ah4, bh0);
      lo = (lo + Math.imul(al3, bl1)) | 0;
      mid = (mid + Math.imul(al3, bh1)) | 0;
      mid = (mid + Math.imul(ah3, bl1)) | 0;
      hi = (hi + Math.imul(ah3, bh1)) | 0;
      lo = (lo + Math.imul(al2, bl2)) | 0;
      mid = (mid + Math.imul(al2, bh2)) | 0;
      mid = (mid + Math.imul(ah2, bl2)) | 0;
      hi = (hi + Math.imul(ah2, bh2)) | 0;
      lo = (lo + Math.imul(al1, bl3)) | 0;
      mid = (mid + Math.imul(al1, bh3)) | 0;
      mid = (mid + Math.imul(ah1, bl3)) | 0;
      hi = (hi + Math.imul(ah1, bh3)) | 0;
      lo = (lo + Math.imul(al0, bl4)) | 0;
      mid = (mid + Math.imul(al0, bh4)) | 0;
      mid = (mid + Math.imul(ah0, bl4)) | 0;
      hi = (hi + Math.imul(ah0, bh4)) | 0;
      var w4 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
      c = (((hi + (mid >>> 13)) | 0) + (w4 >>> 26)) | 0;
      w4 &= 0x3ffffff;
      /* k = 5 */
      lo = Math.imul(al5, bl0);
      mid = Math.imul(al5, bh0);
      mid = (mid + Math.imul(ah5, bl0)) | 0;
      hi = Math.imul(ah5, bh0);
      lo = (lo + Math.imul(al4, bl1)) | 0;
      mid = (mid + Math.imul(al4, bh1)) | 0;
      mid = (mid + Math.imul(ah4, bl1)) | 0;
      hi = (hi + Math.imul(ah4, bh1)) | 0;
      lo = (lo + Math.imul(al3, bl2)) | 0;
      mid = (mid + Math.imul(al3, bh2)) | 0;
      mid = (mid + Math.imul(ah3, bl2)) | 0;
      hi = (hi + Math.imul(ah3, bh2)) | 0;
      lo = (lo + Math.imul(al2, bl3)) | 0;
      mid = (mid + Math.imul(al2, bh3)) | 0;
      mid = (mid + Math.imul(ah2, bl3)) | 0;
      hi = (hi + Math.imul(ah2, bh3)) | 0;
      lo = (lo + Math.imul(al1, bl4)) | 0;
      mid = (mid + Math.imul(al1, bh4)) | 0;
      mid = (mid + Math.imul(ah1, bl4)) | 0;
      hi = (hi + Math.imul(ah1, bh4)) | 0;
      lo = (lo + Math.imul(al0, bl5)) | 0;
      mid = (mid + Math.imul(al0, bh5)) | 0;
      mid = (mid + Math.imul(ah0, bl5)) | 0;
      hi = (hi + Math.imul(ah0, bh5)) | 0;
      var w5 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
      c = (((hi + (mid >>> 13)) | 0) + (w5 >>> 26)) | 0;
      w5 &= 0x3ffffff;
      /* k = 6 */
      lo = Math.imul(al6, bl0);
      mid = Math.imul(al6, bh0);
      mid = (mid + Math.imul(ah6, bl0)) | 0;
      hi = Math.imul(ah6, bh0);
      lo = (lo + Math.imul(al5, bl1)) | 0;
      mid = (mid + Math.imul(al5, bh1)) | 0;
      mid = (mid + Math.imul(ah5, bl1)) | 0;
      hi = (hi + Math.imul(ah5, bh1)) | 0;
      lo = (lo + Math.imul(al4, bl2)) | 0;
      mid = (mid + Math.imul(al4, bh2)) | 0;
      mid = (mid + Math.imul(ah4, bl2)) | 0;
      hi = (hi + Math.imul(ah4, bh2)) | 0;
      lo = (lo + Math.imul(al3, bl3)) | 0;
      mid = (mid + Math.imul(al3, bh3)) | 0;
      mid = (mid + Math.imul(ah3, bl3)) | 0;
      hi = (hi + Math.imul(ah3, bh3)) | 0;
      lo = (lo + Math.imul(al2, bl4)) | 0;
      mid = (mid + Math.imul(al2, bh4)) | 0;
      mid = (mid + Math.imul(ah2, bl4)) | 0;
      hi = (hi + Math.imul(ah2, bh4)) | 0;
      lo = (lo + Math.imul(al1, bl5)) | 0;
      mid = (mid + Math.imul(al1, bh5)) | 0;
      mid = (mid + Math.imul(ah1, bl5)) | 0;
      hi = (hi + Math.imul(ah1, bh5)) | 0;
      lo = (lo + Math.imul(al0, bl6)) | 0;
      mid = (mid + Math.imul(al0, bh6)) | 0;
      mid = (mid + Math.imul(ah0, bl6)) | 0;
      hi = (hi + Math.imul(ah0, bh6)) | 0;
      var w6 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
      c = (((hi + (mid >>> 13)) | 0) + (w6 >>> 26)) | 0;
      w6 &= 0x3ffffff;
      /* k = 7 */
      lo = Math.imul(al7, bl0);
      mid = Math.imul(al7, bh0);
      mid = (mid + Math.imul(ah7, bl0)) | 0;
      hi = Math.imul(ah7, bh0);
      lo = (lo + Math.imul(al6, bl1)) | 0;
      mid = (mid + Math.imul(al6, bh1)) | 0;
      mid = (mid + Math.imul(ah6, bl1)) | 0;
      hi = (hi + Math.imul(ah6, bh1)) | 0;
      lo = (lo + Math.imul(al5, bl2)) | 0;
      mid = (mid + Math.imul(al5, bh2)) | 0;
      mid = (mid + Math.imul(ah5, bl2)) | 0;
      hi = (hi + Math.imul(ah5, bh2)) | 0;
      lo = (lo + Math.imul(al4, bl3)) | 0;
      mid = (mid + Math.imul(al4, bh3)) | 0;
      mid = (mid + Math.imul(ah4, bl3)) | 0;
      hi = (hi + Math.imul(ah4, bh3)) | 0;
      lo = (lo + Math.imul(al3, bl4)) | 0;
      mid = (mid + Math.imul(al3, bh4)) | 0;
      mid = (mid + Math.imul(ah3, bl4)) | 0;
      hi = (hi + Math.imul(ah3, bh4)) | 0;
      lo = (lo + Math.imul(al2, bl5)) | 0;
      mid = (mid + Math.imul(al2, bh5)) | 0;
      mid = (mid + Math.imul(ah2, bl5)) | 0;
      hi = (hi + Math.imul(ah2, bh5)) | 0;
      lo = (lo + Math.imul(al1, bl6)) | 0;
      mid = (mid + Math.imul(al1, bh6)) | 0;
      mid = (mid + Math.imul(ah1, bl6)) | 0;
      hi = (hi + Math.imul(ah1, bh6)) | 0;
      lo = (lo + Math.imul(al0, bl7)) | 0;
      mid = (mid + Math.imul(al0, bh7)) | 0;
      mid = (mid + Math.imul(ah0, bl7)) | 0;
      hi = (hi + Math.imul(ah0, bh7)) | 0;
      var w7 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
      c = (((hi + (mid >>> 13)) | 0) + (w7 >>> 26)) | 0;
      w7 &= 0x3ffffff;
      /* k = 8 */
      lo = Math.imul(al8, bl0);
      mid = Math.imul(al8, bh0);
      mid = (mid + Math.imul(ah8, bl0)) | 0;
      hi = Math.imul(ah8, bh0);
      lo = (lo + Math.imul(al7, bl1)) | 0;
      mid = (mid + Math.imul(al7, bh1)) | 0;
      mid = (mid + Math.imul(ah7, bl1)) | 0;
      hi = (hi + Math.imul(ah7, bh1)) | 0;
      lo = (lo + Math.imul(al6, bl2)) | 0;
      mid = (mid + Math.imul(al6, bh2)) | 0;
      mid = (mid + Math.imul(ah6, bl2)) | 0;
      hi = (hi + Math.imul(ah6, bh2)) | 0;
      lo = (lo + Math.imul(al5, bl3)) | 0;
      mid = (mid + Math.imul(al5, bh3)) | 0;
      mid = (mid + Math.imul(ah5, bl3)) | 0;
      hi = (hi + Math.imul(ah5, bh3)) | 0;
      lo = (lo + Math.imul(al4, bl4)) | 0;
      mid = (mid + Math.imul(al4, bh4)) | 0;
      mid = (mid + Math.imul(ah4, bl4)) | 0;
      hi = (hi + Math.imul(ah4, bh4)) | 0;
      lo = (lo + Math.imul(al3, bl5)) | 0;
      mid = (mid + Math.imul(al3, bh5)) | 0;
      mid = (mid + Math.imul(ah3, bl5)) | 0;
      hi = (hi + Math.imul(ah3, bh5)) | 0;
      lo = (lo + Math.imul(al2, bl6)) | 0;
      mid = (mid + Math.imul(al2, bh6)) | 0;
      mid = (mid + Math.imul(ah2, bl6)) | 0;
      hi = (hi + Math.imul(ah2, bh6)) | 0;
      lo = (lo + Math.imul(al1, bl7)) | 0;
      mid = (mid + Math.imul(al1, bh7)) | 0;
      mid = (mid + Math.imul(ah1, bl7)) | 0;
      hi = (hi + Math.imul(ah1, bh7)) | 0;
      lo = (lo + Math.imul(al0, bl8)) | 0;
      mid = (mid + Math.imul(al0, bh8)) | 0;
      mid = (mid + Math.imul(ah0, bl8)) | 0;
      hi = (hi + Math.imul(ah0, bh8)) | 0;
      var w8 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
      c = (((hi + (mid >>> 13)) | 0) + (w8 >>> 26)) | 0;
      w8 &= 0x3ffffff;
      /* k = 9 */
      lo = Math.imul(al9, bl0);
      mid = Math.imul(al9, bh0);
      mid = (mid + Math.imul(ah9, bl0)) | 0;
      hi = Math.imul(ah9, bh0);
      lo = (lo + Math.imul(al8, bl1)) | 0;
      mid = (mid + Math.imul(al8, bh1)) | 0;
      mid = (mid + Math.imul(ah8, bl1)) | 0;
      hi = (hi + Math.imul(ah8, bh1)) | 0;
      lo = (lo + Math.imul(al7, bl2)) | 0;
      mid = (mid + Math.imul(al7, bh2)) | 0;
      mid = (mid + Math.imul(ah7, bl2)) | 0;
      hi = (hi + Math.imul(ah7, bh2)) | 0;
      lo = (lo + Math.imul(al6, bl3)) | 0;
      mid = (mid + Math.imul(al6, bh3)) | 0;
      mid = (mid + Math.imul(ah6, bl3)) | 0;
      hi = (hi + Math.imul(ah6, bh3)) | 0;
      lo = (lo + Math.imul(al5, bl4)) | 0;
      mid = (mid + Math.imul(al5, bh4)) | 0;
      mid = (mid + Math.imul(ah5, bl4)) | 0;
      hi = (hi + Math.imul(ah5, bh4)) | 0;
      lo = (lo + Math.imul(al4, bl5)) | 0;
      mid = (mid + Math.imul(al4, bh5)) | 0;
      mid = (mid + Math.imul(ah4, bl5)) | 0;
      hi = (hi + Math.imul(ah4, bh5)) | 0;
      lo = (lo + Math.imul(al3, bl6)) | 0;
      mid = (mid + Math.imul(al3, bh6)) | 0;
      mid = (mid + Math.imul(ah3, bl6)) | 0;
      hi = (hi + Math.imul(ah3, bh6)) | 0;
      lo = (lo + Math.imul(al2, bl7)) | 0;
      mid = (mid + Math.imul(al2, bh7)) | 0;
      mid = (mid + Math.imul(ah2, bl7)) | 0;
      hi = (hi + Math.imul(ah2, bh7)) | 0;
      lo = (lo + Math.imul(al1, bl8)) | 0;
      mid = (mid + Math.imul(al1, bh8)) | 0;
      mid = (mid + Math.imul(ah1, bl8)) | 0;
      hi = (hi + Math.imul(ah1, bh8)) | 0;
      lo = (lo + Math.imul(al0, bl9)) | 0;
      mid = (mid + Math.imul(al0, bh9)) | 0;
      mid = (mid + Math.imul(ah0, bl9)) | 0;
      hi = (hi + Math.imul(ah0, bh9)) | 0;
      var w9 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
      c = (((hi + (mid >>> 13)) | 0) + (w9 >>> 26)) | 0;
      w9 &= 0x3ffffff;
      /* k = 10 */
      lo = Math.imul(al9, bl1);
      mid = Math.imul(al9, bh1);
      mid = (mid + Math.imul(ah9, bl1)) | 0;
      hi = Math.imul(ah9, bh1);
      lo = (lo + Math.imul(al8, bl2)) | 0;
      mid = (mid + Math.imul(al8, bh2)) | 0;
      mid = (mid + Math.imul(ah8, bl2)) | 0;
      hi = (hi + Math.imul(ah8, bh2)) | 0;
      lo = (lo + Math.imul(al7, bl3)) | 0;
      mid = (mid + Math.imul(al7, bh3)) | 0;
      mid = (mid + Math.imul(ah7, bl3)) | 0;
      hi = (hi + Math.imul(ah7, bh3)) | 0;
      lo = (lo + Math.imul(al6, bl4)) | 0;
      mid = (mid + Math.imul(al6, bh4)) | 0;
      mid = (mid + Math.imul(ah6, bl4)) | 0;
      hi = (hi + Math.imul(ah6, bh4)) | 0;
      lo = (lo + Math.imul(al5, bl5)) | 0;
      mid = (mid + Math.imul(al5, bh5)) | 0;
      mid = (mid + Math.imul(ah5, bl5)) | 0;
      hi = (hi + Math.imul(ah5, bh5)) | 0;
      lo = (lo + Math.imul(al4, bl6)) | 0;
      mid = (mid + Math.imul(al4, bh6)) | 0;
      mid = (mid + Math.imul(ah4, bl6)) | 0;
      hi = (hi + Math.imul(ah4, bh6)) | 0;
      lo = (lo + Math.imul(al3, bl7)) | 0;
      mid = (mid + Math.imul(al3, bh7)) | 0;
      mid = (mid + Math.imul(ah3, bl7)) | 0;
      hi = (hi + Math.imul(ah3, bh7)) | 0;
      lo = (lo + Math.imul(al2, bl8)) | 0;
      mid = (mid + Math.imul(al2, bh8)) | 0;
      mid = (mid + Math.imul(ah2, bl8)) | 0;
      hi = (hi + Math.imul(ah2, bh8)) | 0;
      lo = (lo + Math.imul(al1, bl9)) | 0;
      mid = (mid + Math.imul(al1, bh9)) | 0;
      mid = (mid + Math.imul(ah1, bl9)) | 0;
      hi = (hi + Math.imul(ah1, bh9)) | 0;
      var w10 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
      c = (((hi + (mid >>> 13)) | 0) + (w10 >>> 26)) | 0;
      w10 &= 0x3ffffff;
      /* k = 11 */
      lo = Math.imul(al9, bl2);
      mid = Math.imul(al9, bh2);
      mid = (mid + Math.imul(ah9, bl2)) | 0;
      hi = Math.imul(ah9, bh2);
      lo = (lo + Math.imul(al8, bl3)) | 0;
      mid = (mid + Math.imul(al8, bh3)) | 0;
      mid = (mid + Math.imul(ah8, bl3)) | 0;
      hi = (hi + Math.imul(ah8, bh3)) | 0;
      lo = (lo + Math.imul(al7, bl4)) | 0;
      mid = (mid + Math.imul(al7, bh4)) | 0;
      mid = (mid + Math.imul(ah7, bl4)) | 0;
      hi = (hi + Math.imul(ah7, bh4)) | 0;
      lo = (lo + Math.imul(al6, bl5)) | 0;
      mid = (mid + Math.imul(al6, bh5)) | 0;
      mid = (mid + Math.imul(ah6, bl5)) | 0;
      hi = (hi + Math.imul(ah6, bh5)) | 0;
      lo = (lo + Math.imul(al5, bl6)) | 0;
      mid = (mid + Math.imul(al5, bh6)) | 0;
      mid = (mid + Math.imul(ah5, bl6)) | 0;
      hi = (hi + Math.imul(ah5, bh6)) | 0;
      lo = (lo + Math.imul(al4, bl7)) | 0;
      mid = (mid + Math.imul(al4, bh7)) | 0;
      mid = (mid + Math.imul(ah4, bl7)) | 0;
      hi = (hi + Math.imul(ah4, bh7)) | 0;
      lo = (lo + Math.imul(al3, bl8)) | 0;
      mid = (mid + Math.imul(al3, bh8)) | 0;
      mid = (mid + Math.imul(ah3, bl8)) | 0;
      hi = (hi + Math.imul(ah3, bh8)) | 0;
      lo = (lo + Math.imul(al2, bl9)) | 0;
      mid = (mid + Math.imul(al2, bh9)) | 0;
      mid = (mid + Math.imul(ah2, bl9)) | 0;
      hi = (hi + Math.imul(ah2, bh9)) | 0;
      var w11 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
      c = (((hi + (mid >>> 13)) | 0) + (w11 >>> 26)) | 0;
      w11 &= 0x3ffffff;
      /* k = 12 */
      lo = Math.imul(al9, bl3);
      mid = Math.imul(al9, bh3);
      mid = (mid + Math.imul(ah9, bl3)) | 0;
      hi = Math.imul(ah9, bh3);
      lo = (lo + Math.imul(al8, bl4)) | 0;
      mid = (mid + Math.imul(al8, bh4)) | 0;
      mid = (mid + Math.imul(ah8, bl4)) | 0;
      hi = (hi + Math.imul(ah8, bh4)) | 0;
      lo = (lo + Math.imul(al7, bl5)) | 0;
      mid = (mid + Math.imul(al7, bh5)) | 0;
      mid = (mid + Math.imul(ah7, bl5)) | 0;
      hi = (hi + Math.imul(ah7, bh5)) | 0;
      lo = (lo + Math.imul(al6, bl6)) | 0;
      mid = (mid + Math.imul(al6, bh6)) | 0;
      mid = (mid + Math.imul(ah6, bl6)) | 0;
      hi = (hi + Math.imul(ah6, bh6)) | 0;
      lo = (lo + Math.imul(al5, bl7)) | 0;
      mid = (mid + Math.imul(al5, bh7)) | 0;
      mid = (mid + Math.imul(ah5, bl7)) | 0;
      hi = (hi + Math.imul(ah5, bh7)) | 0;
      lo = (lo + Math.imul(al4, bl8)) | 0;
      mid = (mid + Math.imul(al4, bh8)) | 0;
      mid = (mid + Math.imul(ah4, bl8)) | 0;
      hi = (hi + Math.imul(ah4, bh8)) | 0;
      lo = (lo + Math.imul(al3, bl9)) | 0;
      mid = (mid + Math.imul(al3, bh9)) | 0;
      mid = (mid + Math.imul(ah3, bl9)) | 0;
      hi = (hi + Math.imul(ah3, bh9)) | 0;
      var w12 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
      c = (((hi + (mid >>> 13)) | 0) + (w12 >>> 26)) | 0;
      w12 &= 0x3ffffff;
      /* k = 13 */
      lo = Math.imul(al9, bl4);
      mid = Math.imul(al9, bh4);
      mid = (mid + Math.imul(ah9, bl4)) | 0;
      hi = Math.imul(ah9, bh4);
      lo = (lo + Math.imul(al8, bl5)) | 0;
      mid = (mid + Math.imul(al8, bh5)) | 0;
      mid = (mid + Math.imul(ah8, bl5)) | 0;
      hi = (hi + Math.imul(ah8, bh5)) | 0;
      lo = (lo + Math.imul(al7, bl6)) | 0;
      mid = (mid + Math.imul(al7, bh6)) | 0;
      mid = (mid + Math.imul(ah7, bl6)) | 0;
      hi = (hi + Math.imul(ah7, bh6)) | 0;
      lo = (lo + Math.imul(al6, bl7)) | 0;
      mid = (mid + Math.imul(al6, bh7)) | 0;
      mid = (mid + Math.imul(ah6, bl7)) | 0;
      hi = (hi + Math.imul(ah6, bh7)) | 0;
      lo = (lo + Math.imul(al5, bl8)) | 0;
      mid = (mid + Math.imul(al5, bh8)) | 0;
      mid = (mid + Math.imul(ah5, bl8)) | 0;
      hi = (hi + Math.imul(ah5, bh8)) | 0;
      lo = (lo + Math.imul(al4, bl9)) | 0;
      mid = (mid + Math.imul(al4, bh9)) | 0;
      mid = (mid + Math.imul(ah4, bl9)) | 0;
      hi = (hi + Math.imul(ah4, bh9)) | 0;
      var w13 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
      c = (((hi + (mid >>> 13)) | 0) + (w13 >>> 26)) | 0;
      w13 &= 0x3ffffff;
      /* k = 14 */
      lo = Math.imul(al9, bl5);
      mid = Math.imul(al9, bh5);
      mid = (mid + Math.imul(ah9, bl5)) | 0;
      hi = Math.imul(ah9, bh5);
      lo = (lo + Math.imul(al8, bl6)) | 0;
      mid = (mid + Math.imul(al8, bh6)) | 0;
      mid = (mid + Math.imul(ah8, bl6)) | 0;
      hi = (hi + Math.imul(ah8, bh6)) | 0;
      lo = (lo + Math.imul(al7, bl7)) | 0;
      mid = (mid + Math.imul(al7, bh7)) | 0;
      mid = (mid + Math.imul(ah7, bl7)) | 0;
      hi = (hi + Math.imul(ah7, bh7)) | 0;
      lo = (lo + Math.imul(al6, bl8)) | 0;
      mid = (mid + Math.imul(al6, bh8)) | 0;
      mid = (mid + Math.imul(ah6, bl8)) | 0;
      hi = (hi + Math.imul(ah6, bh8)) | 0;
      lo = (lo + Math.imul(al5, bl9)) | 0;
      mid = (mid + Math.imul(al5, bh9)) | 0;
      mid = (mid + Math.imul(ah5, bl9)) | 0;
      hi = (hi + Math.imul(ah5, bh9)) | 0;
      var w14 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
      c = (((hi + (mid >>> 13)) | 0) + (w14 >>> 26)) | 0;
      w14 &= 0x3ffffff;
      /* k = 15 */
      lo = Math.imul(al9, bl6);
      mid = Math.imul(al9, bh6);
      mid = (mid + Math.imul(ah9, bl6)) | 0;
      hi = Math.imul(ah9, bh6);
      lo = (lo + Math.imul(al8, bl7)) | 0;
      mid = (mid + Math.imul(al8, bh7)) | 0;
      mid = (mid + Math.imul(ah8, bl7)) | 0;
      hi = (hi + Math.imul(ah8, bh7)) | 0;
      lo = (lo + Math.imul(al7, bl8)) | 0;
      mid = (mid + Math.imul(al7, bh8)) | 0;
      mid = (mid + Math.imul(ah7, bl8)) | 0;
      hi = (hi + Math.imul(ah7, bh8)) | 0;
      lo = (lo + Math.imul(al6, bl9)) | 0;
      mid = (mid + Math.imul(al6, bh9)) | 0;
      mid = (mid + Math.imul(ah6, bl9)) | 0;
      hi = (hi + Math.imul(ah6, bh9)) | 0;
      var w15 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
      c = (((hi + (mid >>> 13)) | 0) + (w15 >>> 26)) | 0;
      w15 &= 0x3ffffff;
      /* k = 16 */
      lo = Math.imul(al9, bl7);
      mid = Math.imul(al9, bh7);
      mid = (mid + Math.imul(ah9, bl7)) | 0;
      hi = Math.imul(ah9, bh7);
      lo = (lo + Math.imul(al8, bl8)) | 0;
      mid = (mid + Math.imul(al8, bh8)) | 0;
      mid = (mid + Math.imul(ah8, bl8)) | 0;
      hi = (hi + Math.imul(ah8, bh8)) | 0;
      lo = (lo + Math.imul(al7, bl9)) | 0;
      mid = (mid + Math.imul(al7, bh9)) | 0;
      mid = (mid + Math.imul(ah7, bl9)) | 0;
      hi = (hi + Math.imul(ah7, bh9)) | 0;
      var w16 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
      c = (((hi + (mid >>> 13)) | 0) + (w16 >>> 26)) | 0;
      w16 &= 0x3ffffff;
      /* k = 17 */
      lo = Math.imul(al9, bl8);
      mid = Math.imul(al9, bh8);
      mid = (mid + Math.imul(ah9, bl8)) | 0;
      hi = Math.imul(ah9, bh8);
      lo = (lo + Math.imul(al8, bl9)) | 0;
      mid = (mid + Math.imul(al8, bh9)) | 0;
      mid = (mid + Math.imul(ah8, bl9)) | 0;
      hi = (hi + Math.imul(ah8, bh9)) | 0;
      var w17 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
      c = (((hi + (mid >>> 13)) | 0) + (w17 >>> 26)) | 0;
      w17 &= 0x3ffffff;
      /* k = 18 */
      lo = Math.imul(al9, bl9);
      mid = Math.imul(al9, bh9);
      mid = (mid + Math.imul(ah9, bl9)) | 0;
      hi = Math.imul(ah9, bh9);
      var w18 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
      c = (((hi + (mid >>> 13)) | 0) + (w18 >>> 26)) | 0;
      w18 &= 0x3ffffff;
      o[0] = w0;
      o[1] = w1;
      o[2] = w2;
      o[3] = w3;
      o[4] = w4;
      o[5] = w5;
      o[6] = w6;
      o[7] = w7;
      o[8] = w8;
      o[9] = w9;
      o[10] = w10;
      o[11] = w11;
      o[12] = w12;
      o[13] = w13;
      o[14] = w14;
      o[15] = w15;
      o[16] = w16;
      o[17] = w17;
      o[18] = w18;
      if (c !== 0) {
        o[19] = c;
        out.length++;
      }
      return out;
    };
  
    // Polyfill comb
    if (!Math.imul) {
      comb10MulTo = smallMulTo;
    }
  
    function bigMulTo (self, num, out) {
      out.negative = num.negative ^ self.negative;
      out.length = self.length + num.length;
  
      var carry = 0;
      var hncarry = 0;
      for (var k = 0; k < out.length - 1; k++) {
        // Sum all words with the same `i + j = k` and accumulate `ncarry`,
        // note that ncarry could be >= 0x3ffffff
        var ncarry = hncarry;
        hncarry = 0;
        var rword = carry & 0x3ffffff;
        var maxJ = Math.min(k, num.length - 1);
        for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {
          var i = k - j;
          var a = self.words[i] | 0;
          var b = num.words[j] | 0;
          var r = a * b;
  
          var lo = r & 0x3ffffff;
          ncarry = (ncarry + ((r / 0x4000000) | 0)) | 0;
          lo = (lo + rword) | 0;
          rword = lo & 0x3ffffff;
          ncarry = (ncarry + (lo >>> 26)) | 0;
  
          hncarry += ncarry >>> 26;
          ncarry &= 0x3ffffff;
        }
        out.words[k] = rword;
        carry = ncarry;
        ncarry = hncarry;
      }
      if (carry !== 0) {
        out.words[k] = carry;
      } else {
        out.length--;
      }
  
      return out.strip();
    }
  
    function jumboMulTo (self, num, out) {
      var fftm = new FFTM();
      return fftm.mulp(self, num, out);
    }
  
    BN.prototype.mulTo = function mulTo (num, out) {
      var res;
      var len = this.length + num.length;
      if (this.length === 10 && num.length === 10) {
        res = comb10MulTo(this, num, out);
      } else if (len < 63) {
        res = smallMulTo(this, num, out);
      } else if (len < 1024) {
        res = bigMulTo(this, num, out);
      } else {
        res = jumboMulTo(this, num, out);
      }
  
      return res;
    };
  
    // Cooley-Tukey algorithm for FFT
    // slightly revisited to rely on looping instead of recursion
  
    function FFTM (x, y) {
      this.x = x;
      this.y = y;
    }
  
    FFTM.prototype.makeRBT = function makeRBT (N) {
      var t = new Array(N);
      var l = BN.prototype._countBits(N) - 1;
      for (var i = 0; i < N; i++) {
        t[i] = this.revBin(i, l, N);
      }
  
      return t;
    };
  
    // Returns binary-reversed representation of `x`
    FFTM.prototype.revBin = function revBin (x, l, N) {
      if (x === 0 || x === N - 1) return x;
  
      var rb = 0;
      for (var i = 0; i < l; i++) {
        rb |= (x & 1) << (l - i - 1);
        x >>= 1;
      }
  
      return rb;
    };
  
    // Performs "tweedling" phase, therefore 'emulating'
    // behaviour of the recursive algorithm
    FFTM.prototype.permute = function permute (rbt, rws, iws, rtws, itws, N) {
      for (var i = 0; i < N; i++) {
        rtws[i] = rws[rbt[i]];
        itws[i] = iws[rbt[i]];
      }
    };
  
    FFTM.prototype.transform = function transform (rws, iws, rtws, itws, N, rbt) {
      this.permute(rbt, rws, iws, rtws, itws, N);
  
      for (var s = 1; s < N; s <<= 1) {
        var l = s << 1;
  
        var rtwdf = Math.cos(2 * Math.PI / l);
        var itwdf = Math.sin(2 * Math.PI / l);
  
        for (var p = 0; p < N; p += l) {
          var rtwdf_ = rtwdf;
          var itwdf_ = itwdf;
  
          for (var j = 0; j < s; j++) {
            var re = rtws[p + j];
            var ie = itws[p + j];
  
            var ro = rtws[p + j + s];
            var io = itws[p + j + s];
  
            var rx = rtwdf_ * ro - itwdf_ * io;
  
            io = rtwdf_ * io + itwdf_ * ro;
            ro = rx;
  
            rtws[p + j] = re + ro;
            itws[p + j] = ie + io;
  
            rtws[p + j + s] = re - ro;
            itws[p + j + s] = ie - io;
  
            /* jshint maxdepth : false */
            if (j !== l) {
              rx = rtwdf * rtwdf_ - itwdf * itwdf_;
  
              itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;
              rtwdf_ = rx;
            }
          }
        }
      }
    };
  
    FFTM.prototype.guessLen13b = function guessLen13b (n, m) {
      var N = Math.max(m, n) | 1;
      var odd = N & 1;
      var i = 0;
      for (N = N / 2 | 0; N; N = N >>> 1) {
        i++;
      }
  
      return 1 << i + 1 + odd;
    };
  
    FFTM.prototype.conjugate = function conjugate (rws, iws, N) {
      if (N <= 1) return;
  
      for (var i = 0; i < N / 2; i++) {
        var t = rws[i];
  
        rws[i] = rws[N - i - 1];
        rws[N - i - 1] = t;
  
        t = iws[i];
  
        iws[i] = -iws[N - i - 1];
        iws[N - i - 1] = -t;
      }
    };
  
    FFTM.prototype.normalize13b = function normalize13b (ws, N) {
      var carry = 0;
      for (var i = 0; i < N / 2; i++) {
        var w = Math.round(ws[2 * i + 1] / N) * 0x2000 +
          Math.round(ws[2 * i] / N) +
          carry;
  
        ws[i] = w & 0x3ffffff;
  
        if (w < 0x4000000) {
          carry = 0;
        } else {
          carry = w / 0x4000000 | 0;
        }
      }
  
      return ws;
    };
  
    FFTM.prototype.convert13b = function convert13b (ws, len, rws, N) {
      var carry = 0;
      for (var i = 0; i < len; i++) {
        carry = carry + (ws[i] | 0);
  
        rws[2 * i] = carry & 0x1fff; carry = carry >>> 13;
        rws[2 * i + 1] = carry & 0x1fff; carry = carry >>> 13;
      }
  
      // Pad with zeroes
      for (i = 2 * len; i < N; ++i) {
        rws[i] = 0;
      }
  
      assert(carry === 0);
      assert((carry & ~0x1fff) === 0);
    };
  
    FFTM.prototype.stub = function stub (N) {
      var ph = new Array(N);
      for (var i = 0; i < N; i++) {
        ph[i] = 0;
      }
  
      return ph;
    };
  
    FFTM.prototype.mulp = function mulp (x, y, out) {
      var N = 2 * this.guessLen13b(x.length, y.length);
  
      var rbt = this.makeRBT(N);
  
      var _ = this.stub(N);
  
      var rws = new Array(N);
      var rwst = new Array(N);
      var iwst = new Array(N);
  
      var nrws = new Array(N);
      var nrwst = new Array(N);
      var niwst = new Array(N);
  
      var rmws = out.words;
      rmws.length = N;
  
      this.convert13b(x.words, x.length, rws, N);
      this.convert13b(y.words, y.length, nrws, N);
  
      this.transform(rws, _, rwst, iwst, N, rbt);
      this.transform(nrws, _, nrwst, niwst, N, rbt);
  
      for (var i = 0; i < N; i++) {
        var rx = rwst[i] * nrwst[i] - iwst[i] * niwst[i];
        iwst[i] = rwst[i] * niwst[i] + iwst[i] * nrwst[i];
        rwst[i] = rx;
      }
  
      this.conjugate(rwst, iwst, N);
      this.transform(rwst, iwst, rmws, _, N, rbt);
      this.conjugate(rmws, _, N);
      this.normalize13b(rmws, N);
  
      out.negative = x.negative ^ y.negative;
      out.length = x.length + y.length;
      return out.strip();
    };
  
    // Multiply `this` by `num`
    BN.prototype.mul = function mul (num) {
      var out = new BN(null);
      out.words = new Array(this.length + num.length);
      return this.mulTo(num, out);
    };
  
    // Multiply employing FFT
    BN.prototype.mulf = function mulf (num) {
      var out = new BN(null);
      out.words = new Array(this.length + num.length);
      return jumboMulTo(this, num, out);
    };
  
    // In-place Multiplication
    BN.prototype.imul = function imul (num) {
      return this.clone().mulTo(num, this);
    };
  
    BN.prototype.imuln = function imuln (num) {
      assert(typeof num === 'number');
      assert(num < 0x4000000);
  
      // Carry
      var carry = 0;
      for (var i = 0; i < this.length; i++) {
        var w = (this.words[i] | 0) * num;
        var lo = (w & 0x3ffffff) + (carry & 0x3ffffff);
        carry >>= 26;
        carry += (w / 0x4000000) | 0;
        // NOTE: lo is 27bit maximum
        carry += lo >>> 26;
        this.words[i] = lo & 0x3ffffff;
      }
  
      if (carry !== 0) {
        this.words[i] = carry;
        this.length++;
      }
  
      return this;
    };
  
    BN.prototype.muln = function muln (num) {
      return this.clone().imuln(num);
    };
  
    // `this` * `this`
    BN.prototype.sqr = function sqr () {
      return this.mul(this);
    };
  
    // `this` * `this` in-place
    BN.prototype.isqr = function isqr () {
      return this.imul(this.clone());
    };
  
    // Math.pow(`this`, `num`)
    BN.prototype.pow = function pow (num) {
      var w = toBitArray(num);
      if (w.length === 0) return new BN(1);
  
      // Skip leading zeroes
      var res = this;
      for (var i = 0; i < w.length; i++, res = res.sqr()) {
        if (w[i] !== 0) break;
      }
  
      if (++i < w.length) {
        for (var q = res.sqr(); i < w.length; i++, q = q.sqr()) {
          if (w[i] === 0) continue;
  
          res = res.mul(q);
        }
      }
  
      return res;
    };
  
    // Shift-left in-place
    BN.prototype.iushln = function iushln (bits) {
      assert(typeof bits === 'number' && bits >= 0);
      var r = bits % 26;
      var s = (bits - r) / 26;
      var carryMask = (0x3ffffff >>> (26 - r)) << (26 - r);
      var i;
  
      if (r !== 0) {
        var carry = 0;
  
        for (i = 0; i < this.length; i++) {
          var newCarry = this.words[i] & carryMask;
          var c = ((this.words[i] | 0) - newCarry) << r;
          this.words[i] = c | carry;
          carry = newCarry >>> (26 - r);
        }
  
        if (carry) {
          this.words[i] = carry;
          this.length++;
        }
      }
  
      if (s !== 0) {
        for (i = this.length - 1; i >= 0; i--) {
          this.words[i + s] = this.words[i];
        }
  
        for (i = 0; i < s; i++) {
          this.words[i] = 0;
        }
  
        this.length += s;
      }
  
      return this.strip();
    };
  
    BN.prototype.ishln = function ishln (bits) {
      // TODO(indutny): implement me
      assert(this.negative === 0);
      return this.iushln(bits);
    };
  
    // Shift-right in-place
    // NOTE: `hint` is a lowest bit before trailing zeroes
    // NOTE: if `extended` is present - it will be filled with destroyed bits
    BN.prototype.iushrn = function iushrn (bits, hint, extended) {
      assert(typeof bits === 'number' && bits >= 0);
      var h;
      if (hint) {
        h = (hint - (hint % 26)) / 26;
      } else {
        h = 0;
      }
  
      var r = bits % 26;
      var s = Math.min((bits - r) / 26, this.length);
      var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);
      var maskedWords = extended;
  
      h -= s;
      h = Math.max(0, h);
  
      // Extended mode, copy masked part
      if (maskedWords) {
        for (var i = 0; i < s; i++) {
          maskedWords.words[i] = this.words[i];
        }
        maskedWords.length = s;
      }
  
      if (s === 0) {
        // No-op, we should not move anything at all
      } else if (this.length > s) {
        this.length -= s;
        for (i = 0; i < this.length; i++) {
          this.words[i] = this.words[i + s];
        }
      } else {
        this.words[0] = 0;
        this.length = 1;
      }
  
      var carry = 0;
      for (i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--) {
        var word = this.words[i] | 0;
        this.words[i] = (carry << (26 - r)) | (word >>> r);
        carry = word & mask;
      }
  
      // Push carried bits as a mask
      if (maskedWords && carry !== 0) {
        maskedWords.words[maskedWords.length++] = carry;
      }
  
      if (this.length === 0) {
        this.words[0] = 0;
        this.length = 1;
      }
  
      return this.strip();
    };
  
    BN.prototype.ishrn = function ishrn (bits, hint, extended) {
      // TODO(indutny): implement me
      assert(this.negative === 0);
      return this.iushrn(bits, hint, extended);
    };
  
    // Shift-left
    BN.prototype.shln = function shln (bits) {
      return this.clone().ishln(bits);
    };
  
    BN.prototype.ushln = function ushln (bits) {
      return this.clone().iushln(bits);
    };
  
    // Shift-right
    BN.prototype.shrn = function shrn (bits) {
      return this.clone().ishrn(bits);
    };
  
    BN.prototype.ushrn = function ushrn (bits) {
      return this.clone().iushrn(bits);
    };
  
    // Test if n bit is set
    BN.prototype.testn = function testn (bit) {
      assert(typeof bit === 'number' && bit >= 0);
      var r = bit % 26;
      var s = (bit - r) / 26;
      var q = 1 << r;
  
      // Fast case: bit is much higher than all existing words
      if (this.length <= s) return false;
  
      // Check bit and return
      var w = this.words[s];
  
      return !!(w & q);
    };
  
    // Return only lowers bits of number (in-place)
    BN.prototype.imaskn = function imaskn (bits) {
      assert(typeof bits === 'number' && bits >= 0);
      var r = bits % 26;
      var s = (bits - r) / 26;
  
      assert(this.negative === 0, 'imaskn works only with positive numbers');
  
      if (this.length <= s) {
        return this;
      }
  
      if (r !== 0) {
        s++;
      }
      this.length = Math.min(s, this.length);
  
      if (r !== 0) {
        var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);
        this.words[this.length - 1] &= mask;
      }
  
      return this.strip();
    };
  
    // Return only lowers bits of number
    BN.prototype.maskn = function maskn (bits) {
      return this.clone().imaskn(bits);
    };
  
    // Add plain number `num` to `this`
    BN.prototype.iaddn = function iaddn (num) {
      assert(typeof num === 'number');
      assert(num < 0x4000000);
      if (num < 0) return this.isubn(-num);
  
      // Possible sign change
      if (this.negative !== 0) {
        if (this.length === 1 && (this.words[0] | 0) < num) {
          this.words[0] = num - (this.words[0] | 0);
          this.negative = 0;
          return this;
        }
  
        this.negative = 0;
        this.isubn(num);
        this.negative = 1;
        return this;
      }
  
      // Add without checks
      return this._iaddn(num);
    };
  
    BN.prototype._iaddn = function _iaddn (num) {
      this.words[0] += num;
  
      // Carry
      for (var i = 0; i < this.length && this.words[i] >= 0x4000000; i++) {
        this.words[i] -= 0x4000000;
        if (i === this.length - 1) {
          this.words[i + 1] = 1;
        } else {
          this.words[i + 1]++;
        }
      }
      this.length = Math.max(this.length, i + 1);
  
      return this;
    };
  
    // Subtract plain number `num` from `this`
    BN.prototype.isubn = function isubn (num) {
      assert(typeof num === 'number');
      assert(num < 0x4000000);
      if (num < 0) return this.iaddn(-num);
  
      if (this.negative !== 0) {
        this.negative = 0;
        this.iaddn(num);
        this.negative = 1;
        return this;
      }
  
      this.words[0] -= num;
  
      if (this.length === 1 && this.words[0] < 0) {
        this.words[0] = -this.words[0];
        this.negative = 1;
      } else {
        // Carry
        for (var i = 0; i < this.length && this.words[i] < 0; i++) {
          this.words[i] += 0x4000000;
          this.words[i + 1] -= 1;
        }
      }
  
      return this.strip();
    };
  
    BN.prototype.addn = function addn (num) {
      return this.clone().iaddn(num);
    };
  
    BN.prototype.subn = function subn (num) {
      return this.clone().isubn(num);
    };
  
    BN.prototype.iabs = function iabs () {
      this.negative = 0;
  
      return this;
    };
  
    BN.prototype.abs = function abs () {
      return this.clone().iabs();
    };
  
    BN.prototype._ishlnsubmul = function _ishlnsubmul (num, mul, shift) {
      var len = num.length + shift;
      var i;
  
      this._expand(len);
  
      var w;
      var carry = 0;
      for (i = 0; i < num.length; i++) {
        w = (this.words[i + shift] | 0) + carry;
        var right = (num.words[i] | 0) * mul;
        w -= right & 0x3ffffff;
        carry = (w >> 26) - ((right / 0x4000000) | 0);
        this.words[i + shift] = w & 0x3ffffff;
      }
      for (; i < this.length - shift; i++) {
        w = (this.words[i + shift] | 0) + carry;
        carry = w >> 26;
        this.words[i + shift] = w & 0x3ffffff;
      }
  
      if (carry === 0) return this.strip();
  
      // Subtraction overflow
      assert(carry === -1);
      carry = 0;
      for (i = 0; i < this.length; i++) {
        w = -(this.words[i] | 0) + carry;
        carry = w >> 26;
        this.words[i] = w & 0x3ffffff;
      }
      this.negative = 1;
  
      return this.strip();
    };
  
    BN.prototype._wordDiv = function _wordDiv (num, mode) {
      var shift = this.length - num.length;
  
      var a = this.clone();
      var b = num;
  
      // Normalize
      var bhi = b.words[b.length - 1] | 0;
      var bhiBits = this._countBits(bhi);
      shift = 26 - bhiBits;
      if (shift !== 0) {
        b = b.ushln(shift);
        a.iushln(shift);
        bhi = b.words[b.length - 1] | 0;
      }
  
      // Initialize quotient
      var m = a.length - b.length;
      var q;
  
      if (mode !== 'mod') {
        q = new BN(null);
        q.length = m + 1;
        q.words = new Array(q.length);
        for (var i = 0; i < q.length; i++) {
          q.words[i] = 0;
        }
      }
  
      var diff = a.clone()._ishlnsubmul(b, 1, m);
      if (diff.negative === 0) {
        a = diff;
        if (q) {
          q.words[m] = 1;
        }
      }
  
      for (var j = m - 1; j >= 0; j--) {
        var qj = (a.words[b.length + j] | 0) * 0x4000000 +
          (a.words[b.length + j - 1] | 0);
  
        // NOTE: (qj / bhi) is (0x3ffffff * 0x4000000 + 0x3ffffff) / 0x2000000 max
        // (0x7ffffff)
        qj = Math.min((qj / bhi) | 0, 0x3ffffff);
  
        a._ishlnsubmul(b, qj, j);
        while (a.negative !== 0) {
          qj--;
          a.negative = 0;
          a._ishlnsubmul(b, 1, j);
          if (!a.isZero()) {
            a.negative ^= 1;
          }
        }
        if (q) {
          q.words[j] = qj;
        }
      }
      if (q) {
        q.strip();
      }
      a.strip();
  
      // Denormalize
      if (mode !== 'div' && shift !== 0) {
        a.iushrn(shift);
      }
  
      return {
        div: q || null,
        mod: a
      };
    };
  
    // NOTE: 1) `mode` can be set to `mod` to request mod only,
    //       to `div` to request div only, or be absent to
    //       request both div & mod
    //       2) `positive` is true if unsigned mod is requested
    BN.prototype.divmod = function divmod (num, mode, positive) {
      assert(!num.isZero());
  
      if (this.isZero()) {
        return {
          div: new BN(0),
          mod: new BN(0)
        };
      }
  
      var div, mod, res;
      if (this.negative !== 0 && num.negative === 0) {
        res = this.neg().divmod(num, mode);
  
        if (mode !== 'mod') {
          div = res.div.neg();
        }
  
        if (mode !== 'div') {
          mod = res.mod.neg();
          if (positive && mod.negative !== 0) {
            mod.iadd(num);
          }
        }
  
        return {
          div: div,
          mod: mod
        };
      }
  
      if (this.negative === 0 && num.negative !== 0) {
        res = this.divmod(num.neg(), mode);
  
        if (mode !== 'mod') {
          div = res.div.neg();
        }
  
        return {
          div: div,
          mod: res.mod
        };
      }
  
      if ((this.negative & num.negative) !== 0) {
        res = this.neg().divmod(num.neg(), mode);
  
        if (mode !== 'div') {
          mod = res.mod.neg();
          if (positive && mod.negative !== 0) {
            mod.isub(num);
          }
        }
  
        return {
          div: res.div,
          mod: mod
        };
      }
  
      // Both numbers are positive at this point
  
      // Strip both numbers to approximate shift value
      if (num.length > this.length || this.cmp(num) < 0) {
        return {
          div: new BN(0),
          mod: this
        };
      }
  
      // Very short reduction
      if (num.length === 1) {
        if (mode === 'div') {
          return {
            div: this.divn(num.words[0]),
            mod: null
          };
        }
  
        if (mode === 'mod') {
          return {
            div: null,
            mod: new BN(this.modn(num.words[0]))
          };
        }
  
        return {
          div: this.divn(num.words[0]),
          mod: new BN(this.modn(num.words[0]))
        };
      }
  
      return this._wordDiv(num, mode);
    };
  
    // Find `this` / `num`
    BN.prototype.div = function div (num) {
      return this.divmod(num, 'div', false).div;
    };
  
    // Find `this` % `num`
    BN.prototype.mod = function mod (num) {
      return this.divmod(num, 'mod', false).mod;
    };
  
    BN.prototype.umod = function umod (num) {
      return this.divmod(num, 'mod', true).mod;
    };
  
    // Find Round(`this` / `num`)
    BN.prototype.divRound = function divRound (num) {
      var dm = this.divmod(num);
  
      // Fast case - exact division
      if (dm.mod.isZero()) return dm.div;
  
      var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;
  
      var half = num.ushrn(1);
      var r2 = num.andln(1);
      var cmp = mod.cmp(half);
  
      // Round down
      if (cmp < 0 || r2 === 1 && cmp === 0) return dm.div;
  
      // Round up
      return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);
    };
  
    BN.prototype.modn = function modn (num) {
      assert(num <= 0x3ffffff);
      var p = (1 << 26) % num;
  
      var acc = 0;
      for (var i = this.length - 1; i >= 0; i--) {
        acc = (p * acc + (this.words[i] | 0)) % num;
      }
  
      return acc;
    };
  
    // In-place division by number
    BN.prototype.idivn = function idivn (num) {
      assert(num <= 0x3ffffff);
  
      var carry = 0;
      for (var i = this.length - 1; i >= 0; i--) {
        var w = (this.words[i] | 0) + carry * 0x4000000;
        this.words[i] = (w / num) | 0;
        carry = w % num;
      }
  
      return this.strip();
    };
  
    BN.prototype.divn = function divn (num) {
      return this.clone().idivn(num);
    };
  
    BN.prototype.egcd = function egcd (p) {
      assert(p.negative === 0);
      assert(!p.isZero());
  
      var x = this;
      var y = p.clone();
  
      if (x.negative !== 0) {
        x = x.umod(p);
      } else {
        x = x.clone();
      }
  
      // A * x + B * y = x
      var A = new BN(1);
      var B = new BN(0);
  
      // C * x + D * y = y
      var C = new BN(0);
      var D = new BN(1);
  
      var g = 0;
  
      while (x.isEven() && y.isEven()) {
        x.iushrn(1);
        y.iushrn(1);
        ++g;
      }
  
      var yp = y.clone();
      var xp = x.clone();
  
      while (!x.isZero()) {
        for (var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
        if (i > 0) {
          x.iushrn(i);
          while (i-- > 0) {
            if (A.isOdd() || B.isOdd()) {
              A.iadd(yp);
              B.isub(xp);
            }
  
            A.iushrn(1);
            B.iushrn(1);
          }
        }
  
        for (var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
        if (j > 0) {
          y.iushrn(j);
          while (j-- > 0) {
            if (C.isOdd() || D.isOdd()) {
              C.iadd(yp);
              D.isub(xp);
            }
  
            C.iushrn(1);
            D.iushrn(1);
          }
        }
  
        if (x.cmp(y) >= 0) {
          x.isub(y);
          A.isub(C);
          B.isub(D);
        } else {
          y.isub(x);
          C.isub(A);
          D.isub(B);
        }
      }
  
      return {
        a: C,
        b: D,
        gcd: y.iushln(g)
      };
    };
  
    // This is reduced incarnation of the binary EEA
    // above, designated to invert members of the
    // _prime_ fields F(p) at a maximal speed
    BN.prototype._invmp = function _invmp (p) {
      assert(p.negative === 0);
      assert(!p.isZero());
  
      var a = this;
      var b = p.clone();
  
      if (a.negative !== 0) {
        a = a.umod(p);
      } else {
        a = a.clone();
      }
  
      var x1 = new BN(1);
      var x2 = new BN(0);
  
      var delta = b.clone();
  
      while (a.cmpn(1) > 0 && b.cmpn(1) > 0) {
        for (var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
        if (i > 0) {
          a.iushrn(i);
          while (i-- > 0) {
            if (x1.isOdd()) {
              x1.iadd(delta);
            }
  
            x1.iushrn(1);
          }
        }
  
        for (var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
        if (j > 0) {
          b.iushrn(j);
          while (j-- > 0) {
            if (x2.isOdd()) {
              x2.iadd(delta);
            }
  
            x2.iushrn(1);
          }
        }
  
        if (a.cmp(b) >= 0) {
          a.isub(b);
          x1.isub(x2);
        } else {
          b.isub(a);
          x2.isub(x1);
        }
      }
  
      var res;
      if (a.cmpn(1) === 0) {
        res = x1;
      } else {
        res = x2;
      }
  
      if (res.cmpn(0) < 0) {
        res.iadd(p);
      }
  
      return res;
    };
  
    BN.prototype.gcd = function gcd (num) {
      if (this.isZero()) return num.abs();
      if (num.isZero()) return this.abs();
  
      var a = this.clone();
      var b = num.clone();
      a.negative = 0;
      b.negative = 0;
  
      // Remove common factor of two
      for (var shift = 0; a.isEven() && b.isEven(); shift++) {
        a.iushrn(1);
        b.iushrn(1);
      }
  
      do {
        while (a.isEven()) {
          a.iushrn(1);
        }
        while (b.isEven()) {
          b.iushrn(1);
        }
  
        var r = a.cmp(b);
        if (r < 0) {
          // Swap `a` and `b` to make `a` always bigger than `b`
          var t = a;
          a = b;
          b = t;
        } else if (r === 0 || b.cmpn(1) === 0) {
          break;
        }
  
        a.isub(b);
      } while (true);
  
      return b.iushln(shift);
    };
  
    // Invert number in the field F(num)
    BN.prototype.invm = function invm (num) {
      return this.egcd(num).a.umod(num);
    };
  
    BN.prototype.isEven = function isEven () {
      return (this.words[0] & 1) === 0;
    };
  
    BN.prototype.isOdd = function isOdd () {
      return (this.words[0] & 1) === 1;
    };
  
    // And first word and num
    BN.prototype.andln = function andln (num) {
      return this.words[0] & num;
    };
  
    // Increment at the bit position in-line
    BN.prototype.bincn = function bincn (bit) {
      assert(typeof bit === 'number');
      var r = bit % 26;
      var s = (bit - r) / 26;
      var q = 1 << r;
  
      // Fast case: bit is much higher than all existing words
      if (this.length <= s) {
        this._expand(s + 1);
        this.words[s] |= q;
        return this;
      }
  
      // Add bit and propagate, if needed
      var carry = q;
      for (var i = s; carry !== 0 && i < this.length; i++) {
        var w = this.words[i] | 0;
        w += carry;
        carry = w >>> 26;
        w &= 0x3ffffff;
        this.words[i] = w;
      }
      if (carry !== 0) {
        this.words[i] = carry;
        this.length++;
      }
      return this;
    };
  
    BN.prototype.isZero = function isZero () {
      return this.length === 1 && this.words[0] === 0;
    };
  
    BN.prototype.cmpn = function cmpn (num) {
      var negative = num < 0;
  
      if (this.negative !== 0 && !negative) return -1;
      if (this.negative === 0 && negative) return 1;
  
      this.strip();
  
      var res;
      if (this.length > 1) {
        res = 1;
      } else {
        if (negative) {
          num = -num;
        }
  
        assert(num <= 0x3ffffff, 'Number is too big');
  
        var w = this.words[0] | 0;
        res = w === num ? 0 : w < num ? -1 : 1;
      }
      if (this.negative !== 0) return -res | 0;
      return res;
    };
  
    // Compare two numbers and return:
    // 1 - if `this` > `num`
    // 0 - if `this` == `num`
    // -1 - if `this` < `num`
    BN.prototype.cmp = function cmp (num) {
      if (this.negative !== 0 && num.negative === 0) return -1;
      if (this.negative === 0 && num.negative !== 0) return 1;
  
      var res = this.ucmp(num);
      if (this.negative !== 0) return -res | 0;
      return res;
    };
  
    // Unsigned comparison
    BN.prototype.ucmp = function ucmp (num) {
      // At this point both numbers have the same sign
      if (this.length > num.length) return 1;
      if (this.length < num.length) return -1;
  
      var res = 0;
      for (var i = this.length - 1; i >= 0; i--) {
        var a = this.words[i] | 0;
        var b = num.words[i] | 0;
  
        if (a === b) continue;
        if (a < b) {
          res = -1;
        } else if (a > b) {
          res = 1;
        }
        break;
      }
      return res;
    };
  
    BN.prototype.gtn = function gtn (num) {
      return this.cmpn(num) === 1;
    };
  
    BN.prototype.gt = function gt (num) {
      return this.cmp(num) === 1;
    };
  
    BN.prototype.gten = function gten (num) {
      return this.cmpn(num) >= 0;
    };
  
    BN.prototype.gte = function gte (num) {
      return this.cmp(num) >= 0;
    };
  
    BN.prototype.ltn = function ltn (num) {
      return this.cmpn(num) === -1;
    };
  
    BN.prototype.lt = function lt (num) {
      return this.cmp(num) === -1;
    };
  
    BN.prototype.lten = function lten (num) {
      return this.cmpn(num) <= 0;
    };
  
    BN.prototype.lte = function lte (num) {
      return this.cmp(num) <= 0;
    };
  
    BN.prototype.eqn = function eqn (num) {
      return this.cmpn(num) === 0;
    };
  
    BN.prototype.eq = function eq (num) {
      return this.cmp(num) === 0;
    };
  
    //
    // A reduce context, could be using montgomery or something better, depending
    // on the `m` itself.
    //
    BN.red = function red (num) {
      return new Red(num);
    };
  
    BN.prototype.toRed = function toRed (ctx) {
      assert(!this.red, 'Already a number in reduction context');
      assert(this.negative === 0, 'red works only with positives');
      return ctx.convertTo(this)._forceRed(ctx);
    };
  
    BN.prototype.fromRed = function fromRed () {
      assert(this.red, 'fromRed works only with numbers in reduction context');
      return this.red.convertFrom(this);
    };
  
    BN.prototype._forceRed = function _forceRed (ctx) {
      this.red = ctx;
      return this;
    };
  
    BN.prototype.forceRed = function forceRed (ctx) {
      assert(!this.red, 'Already a number in reduction context');
      return this._forceRed(ctx);
    };
  
    BN.prototype.redAdd = function redAdd (num) {
      assert(this.red, 'redAdd works only with red numbers');
      return this.red.add(this, num);
    };
  
    BN.prototype.redIAdd = function redIAdd (num) {
      assert(this.red, 'redIAdd works only with red numbers');
      return this.red.iadd(this, num);
    };
  
    BN.prototype.redSub = function redSub (num) {
      assert(this.red, 'redSub works only with red numbers');
      return this.red.sub(this, num);
    };
  
    BN.prototype.redISub = function redISub (num) {
      assert(this.red, 'redISub works only with red numbers');
      return this.red.isub(this, num);
    };
  
    BN.prototype.redShl = function redShl (num) {
      assert(this.red, 'redShl works only with red numbers');
      return this.red.shl(this, num);
    };
  
    BN.prototype.redMul = function redMul (num) {
      assert(this.red, 'redMul works only with red numbers');
      this.red._verify2(this, num);
      return this.red.mul(this, num);
    };
  
    BN.prototype.redIMul = function redIMul (num) {
      assert(this.red, 'redMul works only with red numbers');
      this.red._verify2(this, num);
      return this.red.imul(this, num);
    };
  
    BN.prototype.redSqr = function redSqr () {
      assert(this.red, 'redSqr works only with red numbers');
      this.red._verify1(this);
      return this.red.sqr(this);
    };
  
    BN.prototype.redISqr = function redISqr () {
      assert(this.red, 'redISqr works only with red numbers');
      this.red._verify1(this);
      return this.red.isqr(this);
    };
  
    // Square root over p
    BN.prototype.redSqrt = function redSqrt () {
      assert(this.red, 'redSqrt works only with red numbers');
      this.red._verify1(this);
      return this.red.sqrt(this);
    };
  
    BN.prototype.redInvm = function redInvm () {
      assert(this.red, 'redInvm works only with red numbers');
      this.red._verify1(this);
      return this.red.invm(this);
    };
  
    // Return negative clone of `this` % `red modulo`
    BN.prototype.redNeg = function redNeg () {
      assert(this.red, 'redNeg works only with red numbers');
      this.red._verify1(this);
      return this.red.neg(this);
    };
  
    BN.prototype.redPow = function redPow (num) {
      assert(this.red && !num.red, 'redPow(normalNum)');
      this.red._verify1(this);
      return this.red.pow(this, num);
    };
  
    // Prime numbers with efficient reduction
    var primes = {
      k256: null,
      p224: null,
      p192: null,
      p25519: null
    };
  
    // Pseudo-Mersenne prime
    function MPrime (name, p) {
      // P = 2 ^ N - K
      this.name = name;
      this.p = new BN(p, 16);
      this.n = this.p.bitLength();
      this.k = new BN(1).iushln(this.n).isub(this.p);
  
      this.tmp = this._tmp();
    }
  
    MPrime.prototype._tmp = function _tmp () {
      var tmp = new BN(null);
      tmp.words = new Array(Math.ceil(this.n / 13));
      return tmp;
    };
  
    MPrime.prototype.ireduce = function ireduce (num) {
      // Assumes that `num` is less than `P^2`
      // num = HI * (2 ^ N - K) + HI * K + LO = HI * K + LO (mod P)
      var r = num;
      var rlen;
  
      do {
        this.split(r, this.tmp);
        r = this.imulK(r);
        r = r.iadd(this.tmp);
        rlen = r.bitLength();
      } while (rlen > this.n);
  
      var cmp = rlen < this.n ? -1 : r.ucmp(this.p);
      if (cmp === 0) {
        r.words[0] = 0;
        r.length = 1;
      } else if (cmp > 0) {
        r.isub(this.p);
      } else {
        r.strip();
      }
  
      return r;
    };
  
    MPrime.prototype.split = function split (input, out) {
      input.iushrn(this.n, 0, out);
    };
  
    MPrime.prototype.imulK = function imulK (num) {
      return num.imul(this.k);
    };
  
    function K256 () {
      MPrime.call(
        this,
        'k256',
        'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f');
    }
    inherits(K256, MPrime);
  
    K256.prototype.split = function split (input, output) {
      // 256 = 9 * 26 + 22
      var mask = 0x3fffff;
  
      var outLen = Math.min(input.length, 9);
      for (var i = 0; i < outLen; i++) {
        output.words[i] = input.words[i];
      }
      output.length = outLen;
  
      if (input.length <= 9) {
        input.words[0] = 0;
        input.length = 1;
        return;
      }
  
      // Shift by 9 limbs
      var prev = input.words[9];
      output.words[output.length++] = prev & mask;
  
      for (i = 10; i < input.length; i++) {
        var next = input.words[i] | 0;
        input.words[i - 10] = ((next & mask) << 4) | (prev >>> 22);
        prev = next;
      }
      prev >>>= 22;
      input.words[i - 10] = prev;
      if (prev === 0 && input.length > 10) {
        input.length -= 10;
      } else {
        input.length -= 9;
      }
    };
  
    K256.prototype.imulK = function imulK (num) {
      // K = 0x1000003d1 = [ 0x40, 0x3d1 ]
      num.words[num.length] = 0;
      num.words[num.length + 1] = 0;
      num.length += 2;
  
      // bounded at: 0x40 * 0x3ffffff + 0x3d0 = 0x100000390
      var lo = 0;
      for (var i = 0; i < num.length; i++) {
        var w = num.words[i] | 0;
        lo += w * 0x3d1;
        num.words[i] = lo & 0x3ffffff;
        lo = w * 0x40 + ((lo / 0x4000000) | 0);
      }
  
      // Fast length reduction
      if (num.words[num.length - 1] === 0) {
        num.length--;
        if (num.words[num.length - 1] === 0) {
          num.length--;
        }
      }
      return num;
    };
  
    function P224 () {
      MPrime.call(
        this,
        'p224',
        'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001');
    }
    inherits(P224, MPrime);
  
    function P192 () {
      MPrime.call(
        this,
        'p192',
        'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff');
    }
    inherits(P192, MPrime);
  
    function P25519 () {
      // 2 ^ 255 - 19
      MPrime.call(
        this,
        '25519',
        '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed');
    }
    inherits(P25519, MPrime);
  
    P25519.prototype.imulK = function imulK (num) {
      // K = 0x13
      var carry = 0;
      for (var i = 0; i < num.length; i++) {
        var hi = (num.words[i] | 0) * 0x13 + carry;
        var lo = hi & 0x3ffffff;
        hi >>>= 26;
  
        num.words[i] = lo;
        carry = hi;
      }
      if (carry !== 0) {
        num.words[num.length++] = carry;
      }
      return num;
    };
  
    // Exported mostly for testing purposes, use plain name instead
    BN._prime = function prime (name) {
      // Cached version of prime
      if (primes[name]) return primes[name];
  
      var prime;
      if (name === 'k256') {
        prime = new K256();
      } else if (name === 'p224') {
        prime = new P224();
      } else if (name === 'p192') {
        prime = new P192();
      } else if (name === 'p25519') {
        prime = new P25519();
      } else {
        throw new Error('Unknown prime ' + name);
      }
      primes[name] = prime;
  
      return prime;
    };
  
    //
    // Base reduction engine
    //
    function Red (m) {
      if (typeof m === 'string') {
        var prime = BN._prime(m);
        this.m = prime.p;
        this.prime = prime;
      } else {
        assert(m.gtn(1), 'modulus must be greater than 1');
        this.m = m;
        this.prime = null;
      }
    }
  
    Red.prototype._verify1 = function _verify1 (a) {
      assert(a.negative === 0, 'red works only with positives');
      assert(a.red, 'red works only with red numbers');
    };
  
    Red.prototype._verify2 = function _verify2 (a, b) {
      assert((a.negative | b.negative) === 0, 'red works only with positives');
      assert(a.red && a.red === b.red,
        'red works only with red numbers');
    };
  
    Red.prototype.imod = function imod (a) {
      if (this.prime) return this.prime.ireduce(a)._forceRed(this);
      return a.umod(this.m)._forceRed(this);
    };
  
    Red.prototype.neg = function neg (a) {
      if (a.isZero()) {
        return a.clone();
      }
  
      return this.m.sub(a)._forceRed(this);
    };
  
    Red.prototype.add = function add (a, b) {
      this._verify2(a, b);
  
      var res = a.add(b);
      if (res.cmp(this.m) >= 0) {
        res.isub(this.m);
      }
      return res._forceRed(this);
    };
  
    Red.prototype.iadd = function iadd (a, b) {
      this._verify2(a, b);
  
      var res = a.iadd(b);
      if (res.cmp(this.m) >= 0) {
        res.isub(this.m);
      }
      return res;
    };
  
    Red.prototype.sub = function sub (a, b) {
      this._verify2(a, b);
  
      var res = a.sub(b);
      if (res.cmpn(0) < 0) {
        res.iadd(this.m);
      }
      return res._forceRed(this);
    };
  
    Red.prototype.isub = function isub (a, b) {
      this._verify2(a, b);
  
      var res = a.isub(b);
      if (res.cmpn(0) < 0) {
        res.iadd(this.m);
      }
      return res;
    };
  
    Red.prototype.shl = function shl (a, num) {
      this._verify1(a);
      return this.imod(a.ushln(num));
    };
  
    Red.prototype.imul = function imul (a, b) {
      this._verify2(a, b);
      return this.imod(a.imul(b));
    };
  
    Red.prototype.mul = function mul (a, b) {
      this._verify2(a, b);
      return this.imod(a.mul(b));
    };
  
    Red.prototype.isqr = function isqr (a) {
      return this.imul(a, a.clone());
    };
  
    Red.prototype.sqr = function sqr (a) {
      return this.mul(a, a);
    };
  
    Red.prototype.sqrt = function sqrt (a) {
      if (a.isZero()) return a.clone();
  
      var mod3 = this.m.andln(3);
      assert(mod3 % 2 === 1);
  
      // Fast case
      if (mod3 === 3) {
        var pow = this.m.add(new BN(1)).iushrn(2);
        return this.pow(a, pow);
      }
  
      // Tonelli-Shanks algorithm (Totally unoptimized and slow)
      //
      // Find Q and S, that Q * 2 ^ S = (P - 1)
      var q = this.m.subn(1);
      var s = 0;
      while (!q.isZero() && q.andln(1) === 0) {
        s++;
        q.iushrn(1);
      }
      assert(!q.isZero());
  
      var one = new BN(1).toRed(this);
      var nOne = one.redNeg();
  
      // Find quadratic non-residue
      // NOTE: Max is such because of generalized Riemann hypothesis.
      var lpow = this.m.subn(1).iushrn(1);
      var z = this.m.bitLength();
      z = new BN(2 * z * z).toRed(this);
  
      while (this.pow(z, lpow).cmp(nOne) !== 0) {
        z.redIAdd(nOne);
      }
  
      var c = this.pow(z, q);
      var r = this.pow(a, q.addn(1).iushrn(1));
      var t = this.pow(a, q);
      var m = s;
      while (t.cmp(one) !== 0) {
        var tmp = t;
        for (var i = 0; tmp.cmp(one) !== 0; i++) {
          tmp = tmp.redSqr();
        }
        assert(i < m);
        var b = this.pow(c, new BN(1).iushln(m - i - 1));
  
        r = r.redMul(b);
        c = b.redSqr();
        t = t.redMul(c);
        m = i;
      }
  
      return r;
    };
  
    Red.prototype.invm = function invm (a) {
      var inv = a._invmp(this.m);
      if (inv.negative !== 0) {
        inv.negative = 0;
        return this.imod(inv).redNeg();
      } else {
        return this.imod(inv);
      }
    };
  
    Red.prototype.pow = function pow (a, num) {
      if (num.isZero()) return new BN(1);
      if (num.cmpn(1) === 0) return a.clone();
  
      var windowSize = 4;
      var wnd = new Array(1 << windowSize);
      wnd[0] = new BN(1).toRed(this);
      wnd[1] = a;
      for (var i = 2; i < wnd.length; i++) {
        wnd[i] = this.mul(wnd[i - 1], a);
      }
  
      var res = wnd[0];
      var current = 0;
      var currentLen = 0;
      var start = num.bitLength() % 26;
      if (start === 0) {
        start = 26;
      }
  
      for (i = num.length - 1; i >= 0; i--) {
        var word = num.words[i];
        for (var j = start - 1; j >= 0; j--) {
          var bit = (word >> j) & 1;
          if (res !== wnd[0]) {
            res = this.sqr(res);
          }
  
          if (bit === 0 && current === 0) {
            currentLen = 0;
            continue;
          }
  
          current <<= 1;
          current |= bit;
          currentLen++;
          if (currentLen !== windowSize && (i !== 0 || j !== 0)) continue;
  
          res = this.mul(res, wnd[current]);
          currentLen = 0;
          current = 0;
        }
        start = 26;
      }
  
      return res;
    };
  
    Red.prototype.convertTo = function convertTo (num) {
      var r = num.umod(this.m);
  
      return r === num ? r.clone() : r;
    };
  
    Red.prototype.convertFrom = function convertFrom (num) {
      var res = num.clone();
      res.red = null;
      return res;
    };
  
    //
    // Montgomery method engine
    //
  
    BN.mont = function mont (num) {
      return new Mont(num);
    };
  
    function Mont (m) {
      Red.call(this, m);
  
      this.shift = this.m.bitLength();
      if (this.shift % 26 !== 0) {
        this.shift += 26 - (this.shift % 26);
      }
  
      this.r = new BN(1).iushln(this.shift);
      this.r2 = this.imod(this.r.sqr());
      this.rinv = this.r._invmp(this.m);
  
      this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);
      this.minv = this.minv.umod(this.r);
      this.minv = this.r.sub(this.minv);
    }
    inherits(Mont, Red);
  
    Mont.prototype.convertTo = function convertTo (num) {
      return this.imod(num.ushln(this.shift));
    };
  
    Mont.prototype.convertFrom = function convertFrom (num) {
      var r = this.imod(num.mul(this.rinv));
      r.red = null;
      return r;
    };
  
    Mont.prototype.imul = function imul (a, b) {
      if (a.isZero() || b.isZero()) {
        a.words[0] = 0;
        a.length = 1;
        return a;
      }
  
      var t = a.imul(b);
      var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
      var u = t.isub(c).iushrn(this.shift);
      var res = u;
  
      if (u.cmp(this.m) >= 0) {
        res = u.isub(this.m);
      } else if (u.cmpn(0) < 0) {
        res = u.iadd(this.m);
      }
  
      return res._forceRed(this);
    };
  
    Mont.prototype.mul = function mul (a, b) {
      if (a.isZero() || b.isZero()) return new BN(0)._forceRed(this);
  
      var t = a.mul(b);
      var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
      var u = t.isub(c).iushrn(this.shift);
      var res = u;
      if (u.cmp(this.m) >= 0) {
        res = u.isub(this.m);
      } else if (u.cmpn(0) < 0) {
        res = u.iadd(this.m);
      }
  
      return res._forceRed(this);
    };
  
    Mont.prototype.invm = function invm (a) {
      // (AR)^-1 * R^2 = (A^-1 * R^-1) * R^2 = A^-1 * R
      var res = this.imod(a._invmp(this.m).mul(this.r2));
      return res._forceRed(this);
    };
  })(typeof module === 'undefined' || module, this);
  
  },{}],155:[function(require,module,exports){
  (function (Buffer){
  'use strict';
  
  var isHexPrefixed = require('is-hex-prefixed');
  var stripHexPrefix = require('strip-hex-prefix');
  
  /**
   * Pads a `String` to have an even length
   * @param {String} value
   * @return {String} output
   */
  function padToEven(value) {
    var a = value; // eslint-disable-line
  
    if (typeof a !== 'string') {
      throw new Error('[ethjs-util] while padding to even, value must be string, is currently ' + typeof a + ', while padToEven.');
    }
  
    if (a.length % 2) {
      a = '0' + a;
    }
  
    return a;
  }
  
  /**
   * Converts a `Number` into a hex `String`
   * @param {Number} i
   * @return {String}
   */
  function intToHex(i) {
    var hex = i.toString(16); // eslint-disable-line
  
    return '0x' + hex;
  }
  
  /**
   * Converts an `Number` to a `Buffer`
   * @param {Number} i
   * @return {Buffer}
   */
  function intToBuffer(i) {
    var hex = intToHex(i);
  
    return new Buffer(padToEven(hex.slice(2)), 'hex');
  }
  
  /**
   * Get the binary size of a string
   * @param {String} str
   * @return {Number}
   */
  function getBinarySize(str) {
    if (typeof str !== 'string') {
      throw new Error('[ethjs-util] while getting binary size, method getBinarySize requires input \'str\' to be type String, got \'' + typeof str + '\'.');
    }
  
    return Buffer.byteLength(str, 'utf8');
  }
  
  /**
   * Returns TRUE if the first specified array contains all elements
   * from the second one. FALSE otherwise.
   *
   * @param {array} superset
   * @param {array} subset
   *
   * @returns {boolean}
   */
  function arrayContainsArray(superset, subset, some) {
    if (Array.isArray(superset) !== true) {
      throw new Error('[ethjs-util] method arrayContainsArray requires input \'superset\' to be an array got type \'' + typeof superset + '\'');
    }
    if (Array.isArray(subset) !== true) {
      throw new Error('[ethjs-util] method arrayContainsArray requires input \'subset\' to be an array got type \'' + typeof subset + '\'');
    }
  
    return subset[Boolean(some) && 'some' || 'every'](function (value) {
      return superset.indexOf(value) >= 0;
    });
  }
  
  /**
   * Should be called to get utf8 from it's hex representation
   *
   * @method toUtf8
   * @param {String} string in hex
   * @returns {String} ascii string representation of hex value
   */
  function toUtf8(hex) {
    var bufferValue = new Buffer(padToEven(stripHexPrefix(hex).replace(/^0+|0+$/g, '')), 'hex');
  
    return bufferValue.toString('utf8');
  }
  
  /**
   * Should be called to get ascii from it's hex representation
   *
   * @method toAscii
   * @param {String} string in hex
   * @returns {String} ascii string representation of hex value
   */
  function toAscii(hex) {
    var str = ''; // eslint-disable-line
    var i = 0,
        l = hex.length; // eslint-disable-line
  
    if (hex.substring(0, 2) === '0x') {
      i = 2;
    }
  
    for (; i < l; i += 2) {
      var code = parseInt(hex.substr(i, 2), 16);
      str += String.fromCharCode(code);
    }
  
    return str;
  }
  
  /**
   * Should be called to get hex representation (prefixed by 0x) of utf8 string
   *
   * @method fromUtf8
   * @param {String} string
   * @param {Number} optional padding
   * @returns {String} hex representation of input string
   */
  function fromUtf8(stringValue) {
    var str = new Buffer(stringValue, 'utf8');
  
    return '0x' + padToEven(str.toString('hex')).replace(/^0+|0+$/g, '');
  }
  
  /**
   * Should be called to get hex representation (prefixed by 0x) of ascii string
   *
   * @method fromAscii
   * @param {String} string
   * @param {Number} optional padding
   * @returns {String} hex representation of input string
   */
  function fromAscii(stringValue) {
    var hex = ''; // eslint-disable-line
    for (var i = 0; i < stringValue.length; i++) {
      // eslint-disable-line
      var code = stringValue.charCodeAt(i);
      var n = code.toString(16);
      hex += n.length < 2 ? '0' + n : n;
    }
  
    return '0x' + hex;
  }
  
  /**
   * getKeys([{a: 1, b: 2}, {a: 3, b: 4}], 'a') => [1, 3]
   *
   * @method getKeys get specific key from inner object array of objects
   * @param {String} params
   * @param {String} key
   * @param {Boolean} allowEmpty
   * @returns {Array} output just a simple array of output keys
   */
  function getKeys(params, key, allowEmpty) {
    if (!Array.isArray(params)) {
      throw new Error('[ethjs-util] method getKeys expecting type Array as \'params\' input, got \'' + typeof params + '\'');
    }
    if (typeof key !== 'string') {
      throw new Error('[ethjs-util] method getKeys expecting type String for input \'key\' got \'' + typeof key + '\'.');
    }
  
    var result = []; // eslint-disable-line
  
    for (var i = 0; i < params.length; i++) {
      // eslint-disable-line
      var value = params[i][key]; // eslint-disable-line
      if (allowEmpty && !value) {
        value = '';
      } else if (typeof value !== 'string') {
        throw new Error('invalid abi');
      }
      result.push(value);
    }
  
    return result;
  }
  
  /**
   * Is the string a hex string.
   *
   * @method check if string is hex string of specific length
   * @param {String} value
   * @param {Number} length
   * @returns {Boolean} output the string is a hex string
   */
  function isHexString(value, length) {
    if (typeof value !== 'string' || !value.match(/^0x[0-9A-Fa-f]*$/)) {
      return false;
    }
  
    if (length && value.length !== 2 + 2 * length) {
      return false;
    }
  
    return true;
  }
  
  module.exports = {
    arrayContainsArray: arrayContainsArray,
    intToBuffer: intToBuffer,
    getBinarySize: getBinarySize,
    isHexPrefixed: isHexPrefixed,
    stripHexPrefix: stripHexPrefix,
    padToEven: padToEven,
    intToHex: intToHex,
    fromAscii: fromAscii,
    fromUtf8: fromUtf8,
    toAscii: toAscii,
    toUtf8: toUtf8,
    getKeys: getKeys,
    isHexString: isHexString
  };
  }).call(this,require("buffer").Buffer)
  },{"buffer":84,"is-hex-prefixed":185,"strip-hex-prefix":318}],156:[function(require,module,exports){
  'use strict';
  
  //
  // We store our EE objects in a plain object whose properties are event names.
  // If `Object.create(null)` is not supported we prefix the event names with a
  // `~` to make sure that the built-in object properties are not overridden or
  // used as an attack vector.
  // We also assume that `Object.create(null)` is available when the event name
  // is an ES6 Symbol.
  //
  var prefix = typeof Object.create !== 'function' ? '~' : false;
  
  /**
   * Representation of a single EventEmitter function.
   *
   * @param {Function} fn Event handler to be called.
   * @param {Mixed} context Context for function execution.
   * @param {Boolean} once Only emit once
   * @api private
   */
  function EE(fn, context, once) {
    this.fn = fn;
    this.context = context;
    this.once = once || false;
  }
  
  /**
   * Minimal EventEmitter interface that is molded against the Node.js
   * EventEmitter interface.
   *
   * @constructor
   * @api public
   */
  function EventEmitter() { /* Nothing to set */ }
  
  /**
   * Holds the assigned EventEmitters by name.
   *
   * @type {Object}
   * @private
   */
  EventEmitter.prototype._events = undefined;
  
  /**
   * Return a list of assigned event listeners.
   *
   * @param {String} event The events that should be listed.
   * @param {Boolean} exists We only need to know if there are listeners.
   * @returns {Array|Boolean}
   * @api public
   */
  EventEmitter.prototype.listeners = function listeners(event, exists) {
    var evt = prefix ? prefix + event : event
      , available = this._events && this._events[evt];
  
    if (exists) return !!available;
    if (!available) return [];
    if (available.fn) return [available.fn];
  
    for (var i = 0, l = available.length, ee = new Array(l); i < l; i++) {
      ee[i] = available[i].fn;
    }
  
    return ee;
  };
  
  /**
   * Emit an event to all registered event listeners.
   *
   * @param {String} event The name of the event.
   * @returns {Boolean} Indication if we've emitted an event.
   * @api public
   */
  EventEmitter.prototype.emit = function emit(event, a1, a2, a3, a4, a5) {
    var evt = prefix ? prefix + event : event;
  
    if (!this._events || !this._events[evt]) return false;
  
    var listeners = this._events[evt]
      , len = arguments.length
      , args
      , i;
  
    if ('function' === typeof listeners.fn) {
      if (listeners.once) this.removeListener(event, listeners.fn, undefined, true);
  
      switch (len) {
        case 1: return listeners.fn.call(listeners.context), true;
        case 2: return listeners.fn.call(listeners.context, a1), true;
        case 3: return listeners.fn.call(listeners.context, a1, a2), true;
        case 4: return listeners.fn.call(listeners.context, a1, a2, a3), true;
        case 5: return listeners.fn.call(listeners.context, a1, a2, a3, a4), true;
        case 6: return listeners.fn.call(listeners.context, a1, a2, a3, a4, a5), true;
      }
  
      for (i = 1, args = new Array(len -1); i < len; i++) {
        args[i - 1] = arguments[i];
      }
  
      listeners.fn.apply(listeners.context, args);
    } else {
      var length = listeners.length
        , j;
  
      for (i = 0; i < length; i++) {
        if (listeners[i].once) this.removeListener(event, listeners[i].fn, undefined, true);
  
        switch (len) {
          case 1: listeners[i].fn.call(listeners[i].context); break;
          case 2: listeners[i].fn.call(listeners[i].context, a1); break;
          case 3: listeners[i].fn.call(listeners[i].context, a1, a2); break;
          default:
            if (!args) for (j = 1, args = new Array(len -1); j < len; j++) {
              args[j - 1] = arguments[j];
            }
  
            listeners[i].fn.apply(listeners[i].context, args);
        }
      }
    }
  
    return true;
  };
  
  /**
   * Register a new EventListener for the given event.
   *
   * @param {String} event Name of the event.
   * @param {Function} fn Callback function.
   * @param {Mixed} context The context of the function.
   * @api public
   */
  EventEmitter.prototype.on = function on(event, fn, context) {
    var listener = new EE(fn, context || this)
      , evt = prefix ? prefix + event : event;
  
    if (!this._events) this._events = prefix ? {} : Object.create(null);
    if (!this._events[evt]) this._events[evt] = listener;
    else {
      if (!this._events[evt].fn) this._events[evt].push(listener);
      else this._events[evt] = [
        this._events[evt], listener
      ];
    }
  
    return this;
  };
  
  /**
   * Add an EventListener that's only called once.
   *
   * @param {String} event Name of the event.
   * @param {Function} fn Callback function.
   * @param {Mixed} context The context of the function.
   * @api public
   */
  EventEmitter.prototype.once = function once(event, fn, context) {
    var listener = new EE(fn, context || this, true)
      , evt = prefix ? prefix + event : event;
  
    if (!this._events) this._events = prefix ? {} : Object.create(null);
    if (!this._events[evt]) this._events[evt] = listener;
    else {
      if (!this._events[evt].fn) this._events[evt].push(listener);
      else this._events[evt] = [
        this._events[evt], listener
      ];
    }
  
    return this;
  };
  
  /**
   * Remove event listeners.
   *
   * @param {String} event The event we want to remove.
   * @param {Function} fn The listener that we need to find.
   * @param {Mixed} context Only remove listeners matching this context.
   * @param {Boolean} once Only remove once listeners.
   * @api public
   */
  EventEmitter.prototype.removeListener = function removeListener(event, fn, context, once) {
    var evt = prefix ? prefix + event : event;
  
    if (!this._events || !this._events[evt]) return this;
  
    var listeners = this._events[evt]
      , events = [];
  
    if (fn) {
      if (listeners.fn) {
        if (
             listeners.fn !== fn
          || (once && !listeners.once)
          || (context && listeners.context !== context)
        ) {
          events.push(listeners);
        }
      } else {
        for (var i = 0, length = listeners.length; i < length; i++) {
          if (
               listeners[i].fn !== fn
            || (once && !listeners[i].once)
            || (context && listeners[i].context !== context)
          ) {
            events.push(listeners[i]);
          }
        }
      }
    }
  
    //
    // Reset the array, or remove it completely if we have no more listeners.
    //
    if (events.length) {
      this._events[evt] = events.length === 1 ? events[0] : events;
    } else {
      delete this._events[evt];
    }
  
    return this;
  };
  
  /**
   * Remove all listeners or only the listeners for the specified event.
   *
   * @param {String} event The event want to remove all listeners for.
   * @api public
   */
  EventEmitter.prototype.removeAllListeners = function removeAllListeners(event) {
    if (!this._events) return this;
  
    if (event) delete this._events[prefix ? prefix + event : event];
    else this._events = prefix ? {} : Object.create(null);
  
    return this;
  };
  
  //
  // Alias methods names because people roll like that.
  //
  EventEmitter.prototype.off = EventEmitter.prototype.removeListener;
  EventEmitter.prototype.addListener = EventEmitter.prototype.on;
  
  //
  // This function doesn't apply anymore.
  //
  EventEmitter.prototype.setMaxListeners = function setMaxListeners() {
    return this;
  };
  
  //
  // Expose the prefix.
  //
  EventEmitter.prefixed = prefix;
  
  //
  // Expose the module.
  //
  if ('undefined' !== typeof module) {
    module.exports = EventEmitter;
  }
  
  },{}],157:[function(require,module,exports){
  // Copyright Joyent, Inc. and other Node contributors.
  //
  // Permission is hereby granted, free of charge, to any person obtaining a
  // copy of this software and associated documentation files (the
  // "Software"), to deal in the Software without restriction, including
  // without limitation the rights to use, copy, modify, merge, publish,
  // distribute, sublicense, and/or sell copies of the Software, and to permit
  // persons to whom the Software is furnished to do so, subject to the
  // following conditions:
  //
  // The above copyright notice and this permission notice shall be included
  // in all copies or substantial portions of the Software.
  //
  // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
  // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
  // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
  // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
  // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
  // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
  // USE OR OTHER DEALINGS IN THE SOFTWARE.
  
  function EventEmitter() {
    this._events = this._events || {};
    this._maxListeners = this._maxListeners || undefined;
  }
  module.exports = EventEmitter;
  
  // Backwards-compat with node 0.10.x
  EventEmitter.EventEmitter = EventEmitter;
  
  EventEmitter.prototype._events = undefined;
  EventEmitter.prototype._maxListeners = undefined;
  
  // By default EventEmitters will print a warning if more than 10 listeners are
  // added to it. This is a useful default which helps finding memory leaks.
  EventEmitter.defaultMaxListeners = 10;
  
  // Obviously not all Emitters should be limited to 10. This function allows
  // that to be increased. Set to zero for unlimited.
  EventEmitter.prototype.setMaxListeners = function(n) {
    if (!isNumber(n) || n < 0 || isNaN(n))
      throw TypeError('n must be a positive number');
    this._maxListeners = n;
    return this;
  };
  
  EventEmitter.prototype.emit = function(type) {
    var er, handler, len, args, i, listeners;
  
    if (!this._events)
      this._events = {};
  
    // If there is no 'error' event listener then throw.
    if (type === 'error') {
      if (!this._events.error ||
          (isObject(this._events.error) && !this._events.error.length)) {
        er = arguments[1];
        if (er instanceof Error) {
          throw er; // Unhandled 'error' event
        } else {
          // At least give some kind of context to the user
          var err = new Error('Uncaught, unspecified "error" event. (' + er + ')');
          err.context = er;
          throw err;
        }
      }
    }
  
    handler = this._events[type];
  
    if (isUndefined(handler))
      return false;
  
    if (isFunction(handler)) {
      switch (arguments.length) {
        // fast cases
        case 1:
          handler.call(this);
          break;
        case 2:
          handler.call(this, arguments[1]);
          break;
        case 3:
          handler.call(this, arguments[1], arguments[2]);
          break;
        // slower
        default:
          args = Array.prototype.slice.call(arguments, 1);
          handler.apply(this, args);
      }
    } else if (isObject(handler)) {
      args = Array.prototype.slice.call(arguments, 1);
      listeners = handler.slice();
      len = listeners.length;
      for (i = 0; i < len; i++)
        listeners[i].apply(this, args);
    }
  
    return true;
  };
  
  EventEmitter.prototype.addListener = function(type, listener) {
    var m;
  
    if (!isFunction(listener))
      throw TypeError('listener must be a function');
  
    if (!this._events)
      this._events = {};
  
    // To avoid recursion in the case that type === "newListener"! Before
    // adding it to the listeners, first emit "newListener".
    if (this._events.newListener)
      this.emit('newListener', type,
                isFunction(listener.listener) ?
                listener.listener : listener);
  
    if (!this._events[type])
      // Optimize the case of one listener. Don't need the extra array object.
      this._events[type] = listener;
    else if (isObject(this._events[type]))
      // If we've already got an array, just append.
      this._events[type].push(listener);
    else
      // Adding the second element, need to change to array.
      this._events[type] = [this._events[type], listener];
  
    // Check for listener leak
    if (isObject(this._events[type]) && !this._events[type].warned) {
      if (!isUndefined(this._maxListeners)) {
        m = this._maxListeners;
      } else {
        m = EventEmitter.defaultMaxListeners;
      }
  
      if (m && m > 0 && this._events[type].length > m) {
        this._events[type].warned = true;
        console.error('(node) warning: possible EventEmitter memory ' +
                      'leak detected. %d listeners added. ' +
                      'Use emitter.setMaxListeners() to increase limit.',
                      this._events[type].length);
        if (typeof console.trace === 'function') {
          // not supported in IE 10
          console.trace();
        }
      }
    }
  
    return this;
  };
  
  EventEmitter.prototype.on = EventEmitter.prototype.addListener;
  
  EventEmitter.prototype.once = function(type, listener) {
    if (!isFunction(listener))
      throw TypeError('listener must be a function');
  
    var fired = false;
  
    function g() {
      this.removeListener(type, g);
  
      if (!fired) {
        fired = true;
        listener.apply(this, arguments);
      }
    }
  
    g.listener = listener;
    this.on(type, g);
  
    return this;
  };
  
  // emits a 'removeListener' event iff the listener was removed
  EventEmitter.prototype.removeListener = function(type, listener) {
    var list, position, length, i;
  
    if (!isFunction(listener))
      throw TypeError('listener must be a function');
  
    if (!this._events || !this._events[type])
      return this;
  
    list = this._events[type];
    length = list.length;
    position = -1;
  
    if (list === listener ||
        (isFunction(list.listener) && list.listener === listener)) {
      delete this._events[type];
      if (this._events.removeListener)
        this.emit('removeListener', type, listener);
  
    } else if (isObject(list)) {
      for (i = length; i-- > 0;) {
        if (list[i] === listener ||
            (list[i].listener && list[i].listener === listener)) {
          position = i;
          break;
        }
      }
  
      if (position < 0)
        return this;
  
      if (list.length === 1) {
        list.length = 0;
        delete this._events[type];
      } else {
        list.splice(position, 1);
      }
  
      if (this._events.removeListener)
        this.emit('removeListener', type, listener);
    }
  
    return this;
  };
  
  EventEmitter.prototype.removeAllListeners = function(type) {
    var key, listeners;
  
    if (!this._events)
      return this;
  
    // not listening for removeListener, no need to emit
    if (!this._events.removeListener) {
      if (arguments.length === 0)
        this._events = {};
      else if (this._events[type])
        delete this._events[type];
      return this;
    }
  
    // emit removeListener for all listeners on all events
    if (arguments.length === 0) {
      for (key in this._events) {
        if (key === 'removeListener') continue;
        this.removeAllListeners(key);
      }
      this.removeAllListeners('removeListener');
      this._events = {};
      return this;
    }
  
    listeners = this._events[type];
  
    if (isFunction(listeners)) {
      this.removeListener(type, listeners);
    } else if (listeners) {
      // LIFO order
      while (listeners.length)
        this.removeListener(type, listeners[listeners.length - 1]);
    }
    delete this._events[type];
  
    return this;
  };
  
  EventEmitter.prototype.listeners = function(type) {
    var ret;
    if (!this._events || !this._events[type])
      ret = [];
    else if (isFunction(this._events[type]))
      ret = [this._events[type]];
    else
      ret = this._events[type].slice();
    return ret;
  };
  
  EventEmitter.prototype.listenerCount = function(type) {
    if (this._events) {
      var evlistener = this._events[type];
  
      if (isFunction(evlistener))
        return 1;
      else if (evlistener)
        return evlistener.length;
    }
    return 0;
  };
  
  EventEmitter.listenerCount = function(emitter, type) {
    return emitter.listenerCount(type);
  };
  
  function isFunction(arg) {
    return typeof arg === 'function';
  }
  
  function isNumber(arg) {
    return typeof arg === 'number';
  }
  
  function isObject(arg) {
    return typeof arg === 'object' && arg !== null;
  }
  
  function isUndefined(arg) {
    return arg === void 0;
  }
  
  },{}],158:[function(require,module,exports){
  var Buffer = require('safe-buffer').Buffer
  var MD5 = require('md5.js')
  
  /* eslint-disable camelcase */
  function EVP_BytesToKey (password, salt, keyBits, ivLen) {
    if (!Buffer.isBuffer(password)) password = Buffer.from(password, 'binary')
    if (salt) {
      if (!Buffer.isBuffer(salt)) salt = Buffer.from(salt, 'binary')
      if (salt.length !== 8) throw new RangeError('salt should be Buffer with 8 byte length')
    }
  
    var keyLen = keyBits / 8
    var key = Buffer.alloc(keyLen)
    var iv = Buffer.alloc(ivLen || 0)
    var tmp = Buffer.alloc(0)
  
    while (keyLen > 0 || ivLen > 0) {
      var hash = new MD5()
      hash.update(tmp)
      hash.update(password)
      if (salt) hash.update(salt)
      tmp = hash.digest()
  
      var used = 0
  
      if (keyLen > 0) {
        var keyStart = key.length - keyLen
        used = Math.min(keyLen, tmp.length)
        tmp.copy(key, keyStart, 0, used)
        keyLen -= used
      }
  
      if (used < tmp.length && ivLen > 0) {
        var ivStart = iv.length - ivLen
        var length = Math.min(ivLen, tmp.length - used)
        tmp.copy(iv, ivStart, used, used + length)
        ivLen -= length
      }
    }
  
    tmp.fill(0)
    return { key: key, iv: iv }
  }
  
  module.exports = EVP_BytesToKey
  
  },{"md5.js":231,"safe-buffer":290}],159:[function(require,module,exports){
  'use strict';
  
  var isCallable = require('is-callable');
  
  var toStr = Object.prototype.toString;
  var hasOwnProperty = Object.prototype.hasOwnProperty;
  
  var forEachArray = function forEachArray(array, iterator, receiver) {
      for (var i = 0, len = array.length; i < len; i++) {
          if (hasOwnProperty.call(array, i)) {
              if (receiver == null) {
                  iterator(array[i], i, array);
              } else {
                  iterator.call(receiver, array[i], i, array);
              }
          }
      }
  };
  
  var forEachString = function forEachString(string, iterator, receiver) {
      for (var i = 0, len = string.length; i < len; i++) {
          // no such thing as a sparse string.
          if (receiver == null) {
              iterator(string.charAt(i), i, string);
          } else {
              iterator.call(receiver, string.charAt(i), i, string);
          }
      }
  };
  
  var forEachObject = function forEachObject(object, iterator, receiver) {
      for (var k in object) {
          if (hasOwnProperty.call(object, k)) {
              if (receiver == null) {
                  iterator(object[k], k, object);
              } else {
                  iterator.call(receiver, object[k], k, object);
              }
          }
      }
  };
  
  var forEach = function forEach(list, iterator, thisArg) {
      if (!isCallable(iterator)) {
          throw new TypeError('iterator must be a function');
      }
  
      var receiver;
      if (arguments.length >= 3) {
          receiver = thisArg;
      }
  
      if (toStr.call(list) === '[object Array]') {
          forEachArray(list, iterator, receiver);
      } else if (typeof list === 'string') {
          forEachString(list, iterator, receiver);
      } else {
          forEachObject(list, iterator, receiver);
      }
  };
  
  module.exports = forEach;
  
  },{"is-callable":182}],160:[function(require,module,exports){
  (function (global){
  var win;
  
  if (typeof window !== "undefined") {
      win = window;
  } else if (typeof global !== "undefined") {
      win = global;
  } else if (typeof self !== "undefined"){
      win = self;
  } else {
      win = {};
  }
  
  module.exports = win;
  
  }).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
  },{}],161:[function(require,module,exports){
  (function (Buffer){
  'use strict'
  var Transform = require('stream').Transform
  var inherits = require('inherits')
  
  function HashBase (blockSize) {
    Transform.call(this)
  
    this._block = new Buffer(blockSize)
    this._blockSize = blockSize
    this._blockOffset = 0
    this._length = [0, 0, 0, 0]
  
    this._finalized = false
  }
  
  inherits(HashBase, Transform)
  
  HashBase.prototype._transform = function (chunk, encoding, callback) {
    var error = null
    try {
      if (encoding !== 'buffer') chunk = new Buffer(chunk, encoding)
      this.update(chunk)
    } catch (err) {
      error = err
    }
  
    callback(error)
  }
  
  HashBase.prototype._flush = function (callback) {
    var error = null
    try {
      this.push(this._digest())
    } catch (err) {
      error = err
    }
  
    callback(error)
  }
  
  HashBase.prototype.update = function (data, encoding) {
    if (!Buffer.isBuffer(data) && typeof data !== 'string') throw new TypeError('Data must be a string or a buffer')
    if (this._finalized) throw new Error('Digest already called')
    if (!Buffer.isBuffer(data)) data = new Buffer(data, encoding || 'binary')
  
    // consume data
    var block = this._block
    var offset = 0
    while (this._blockOffset + data.length - offset >= this._blockSize) {
      for (var i = this._blockOffset; i < this._blockSize;) block[i++] = data[offset++]
      this._update()
      this._blockOffset = 0
    }
    while (offset < data.length) block[this._blockOffset++] = data[offset++]
  
    // update length
    for (var j = 0, carry = data.length * 8; carry > 0; ++j) {
      this._length[j] += carry
      carry = (this._length[j] / 0x0100000000) | 0
      if (carry > 0) this._length[j] -= 0x0100000000 * carry
    }
  
    return this
  }
  
  HashBase.prototype._update = function (data) {
    throw new Error('_update is not implemented')
  }
  
  HashBase.prototype.digest = function (encoding) {
    if (this._finalized) throw new Error('Digest already called')
    this._finalized = true
  
    var digest = this._digest()
    if (encoding !== undefined) digest = digest.toString(encoding)
    return digest
  }
  
  HashBase.prototype._digest = function () {
    throw new Error('_digest is not implemented')
  }
  
  module.exports = HashBase
  
  }).call(this,require("buffer").Buffer)
  },{"buffer":84,"inherits":180,"stream":311}],162:[function(require,module,exports){
  var hash = exports;
  
  hash.utils = require('./hash/utils');
  hash.common = require('./hash/common');
  hash.sha = require('./hash/sha');
  hash.ripemd = require('./hash/ripemd');
  hash.hmac = require('./hash/hmac');
  
  // Proxy hash functions to the main object
  hash.sha1 = hash.sha.sha1;
  hash.sha256 = hash.sha.sha256;
  hash.sha224 = hash.sha.sha224;
  hash.sha384 = hash.sha.sha384;
  hash.sha512 = hash.sha.sha512;
  hash.ripemd160 = hash.ripemd.ripemd160;
  
  },{"./hash/common":163,"./hash/hmac":164,"./hash/ripemd":165,"./hash/sha":166,"./hash/utils":173}],163:[function(require,module,exports){
  'use strict';
  
  var utils = require('./utils');
  var assert = require('minimalistic-assert');
  
  function BlockHash() {
    this.pending = null;
    this.pendingTotal = 0;
    this.blockSize = this.constructor.blockSize;
    this.outSize = this.constructor.outSize;
    this.hmacStrength = this.constructor.hmacStrength;
    this.padLength = this.constructor.padLength / 8;
    this.endian = 'big';
  
    this._delta8 = this.blockSize / 8;
    this._delta32 = this.blockSize / 32;
  }
  exports.BlockHash = BlockHash;
  
  BlockHash.prototype.update = function update(msg, enc) {
    // Convert message to array, pad it, and join into 32bit blocks
    msg = utils.toArray(msg, enc);
    if (!this.pending)
      this.pending = msg;
    else
      this.pending = this.pending.concat(msg);
    this.pendingTotal += msg.length;
  
    // Enough data, try updating
    if (this.pending.length >= this._delta8) {
      msg = this.pending;
  
      // Process pending data in blocks
      var r = msg.length % this._delta8;
      this.pending = msg.slice(msg.length - r, msg.length);
      if (this.pending.length === 0)
        this.pending = null;
  
      msg = utils.join32(msg, 0, msg.length - r, this.endian);
      for (var i = 0; i < msg.length; i += this._delta32)
        this._update(msg, i, i + this._delta32);
    }
  
    return this;
  };
  
  BlockHash.prototype.digest = function digest(enc) {
    this.update(this._pad());
    assert(this.pending === null);
  
    return this._digest(enc);
  };
  
  BlockHash.prototype._pad = function pad() {
    var len = this.pendingTotal;
    var bytes = this._delta8;
    var k = bytes - ((len + this.padLength) % bytes);
    var res = new Array(k + this.padLength);
    res[0] = 0x80;
    for (var i = 1; i < k; i++)
      res[i] = 0;
  
    // Append length
    len <<= 3;
    if (this.endian === 'big') {
      for (var t = 8; t < this.padLength; t++)
        res[i++] = 0;
  
      res[i++] = 0;
      res[i++] = 0;
      res[i++] = 0;
      res[i++] = 0;
      res[i++] = (len >>> 24) & 0xff;
      res[i++] = (len >>> 16) & 0xff;
      res[i++] = (len >>> 8) & 0xff;
      res[i++] = len & 0xff;
    } else {
      res[i++] = len & 0xff;
      res[i++] = (len >>> 8) & 0xff;
      res[i++] = (len >>> 16) & 0xff;
      res[i++] = (len >>> 24) & 0xff;
      res[i++] = 0;
      res[i++] = 0;
      res[i++] = 0;
      res[i++] = 0;
  
      for (t = 8; t < this.padLength; t++)
        res[i++] = 0;
    }
  
    return res;
  };
  
  },{"./utils":173,"minimalistic-assert":234}],164:[function(require,module,exports){
  'use strict';
  
  var utils = require('./utils');
  var assert = require('minimalistic-assert');
  
  function Hmac(hash, key, enc) {
    if (!(this instanceof Hmac))
      return new Hmac(hash, key, enc);
    this.Hash = hash;
    this.blockSize = hash.blockSize / 8;
    this.outSize = hash.outSize / 8;
    this.inner = null;
    this.outer = null;
  
    this._init(utils.toArray(key, enc));
  }
  module.exports = Hmac;
  
  Hmac.prototype._init = function init(key) {
    // Shorten key, if needed
    if (key.length > this.blockSize)
      key = new this.Hash().update(key).digest();
    assert(key.length <= this.blockSize);
  
    // Add padding to key
    for (var i = key.length; i < this.blockSize; i++)
      key.push(0);
  
    for (i = 0; i < key.length; i++)
      key[i] ^= 0x36;
    this.inner = new this.Hash().update(key);
  
    // 0x36 ^ 0x5c = 0x6a
    for (i = 0; i < key.length; i++)
      key[i] ^= 0x6a;
    this.outer = new this.Hash().update(key);
  };
  
  Hmac.prototype.update = function update(msg, enc) {
    this.inner.update(msg, enc);
    return this;
  };
  
  Hmac.prototype.digest = function digest(enc) {
    this.outer.update(this.inner.digest());
    return this.outer.digest(enc);
  };
  
  },{"./utils":173,"minimalistic-assert":234}],165:[function(require,module,exports){
  'use strict';
  
  var utils = require('./utils');
  var common = require('./common');
  
  var rotl32 = utils.rotl32;
  var sum32 = utils.sum32;
  var sum32_3 = utils.sum32_3;
  var sum32_4 = utils.sum32_4;
  var BlockHash = common.BlockHash;
  
  function RIPEMD160() {
    if (!(this instanceof RIPEMD160))
      return new RIPEMD160();
  
    BlockHash.call(this);
  
    this.h = [ 0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476, 0xc3d2e1f0 ];
    this.endian = 'little';
  }
  utils.inherits(RIPEMD160, BlockHash);
  exports.ripemd160 = RIPEMD160;
  
  RIPEMD160.blockSize = 512;
  RIPEMD160.outSize = 160;
  RIPEMD160.hmacStrength = 192;
  RIPEMD160.padLength = 64;
  
  RIPEMD160.prototype._update = function update(msg, start) {
    var A = this.h[0];
    var B = this.h[1];
    var C = this.h[2];
    var D = this.h[3];
    var E = this.h[4];
    var Ah = A;
    var Bh = B;
    var Ch = C;
    var Dh = D;
    var Eh = E;
    for (var j = 0; j < 80; j++) {
      var T = sum32(
        rotl32(
          sum32_4(A, f(j, B, C, D), msg[r[j] + start], K(j)),
          s[j]),
        E);
      A = E;
      E = D;
      D = rotl32(C, 10);
      C = B;
      B = T;
      T = sum32(
        rotl32(
          sum32_4(Ah, f(79 - j, Bh, Ch, Dh), msg[rh[j] + start], Kh(j)),
          sh[j]),
        Eh);
      Ah = Eh;
      Eh = Dh;
      Dh = rotl32(Ch, 10);
      Ch = Bh;
      Bh = T;
    }
    T = sum32_3(this.h[1], C, Dh);
    this.h[1] = sum32_3(this.h[2], D, Eh);
    this.h[2] = sum32_3(this.h[3], E, Ah);
    this.h[3] = sum32_3(this.h[4], A, Bh);
    this.h[4] = sum32_3(this.h[0], B, Ch);
    this.h[0] = T;
  };
  
  RIPEMD160.prototype._digest = function digest(enc) {
    if (enc === 'hex')
      return utils.toHex32(this.h, 'little');
    else
      return utils.split32(this.h, 'little');
  };
  
  function f(j, x, y, z) {
    if (j <= 15)
      return x ^ y ^ z;
    else if (j <= 31)
      return (x & y) | ((~x) & z);
    else if (j <= 47)
      return (x | (~y)) ^ z;
    else if (j <= 63)
      return (x & z) | (y & (~z));
    else
      return x ^ (y | (~z));
  }
  
  function K(j) {
    if (j <= 15)
      return 0x00000000;
    else if (j <= 31)
      return 0x5a827999;
    else if (j <= 47)
      return 0x6ed9eba1;
    else if (j <= 63)
      return 0x8f1bbcdc;
    else
      return 0xa953fd4e;
  }
  
  function Kh(j) {
    if (j <= 15)
      return 0x50a28be6;
    else if (j <= 31)
      return 0x5c4dd124;
    else if (j <= 47)
      return 0x6d703ef3;
    else if (j <= 63)
      return 0x7a6d76e9;
    else
      return 0x00000000;
  }
  
  var r = [
    0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,
    7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8,
    3, 10, 14, 4, 9, 15, 8, 1, 2, 7, 0, 6, 13, 11, 5, 12,
    1, 9, 11, 10, 0, 8, 12, 4, 13, 3, 7, 15, 14, 5, 6, 2,
    4, 0, 5, 9, 7, 12, 2, 10, 14, 1, 3, 8, 11, 6, 15, 13
  ];
  
  var rh = [
    5, 14, 7, 0, 9, 2, 11, 4, 13, 6, 15, 8, 1, 10, 3, 12,
    6, 11, 3, 7, 0, 13, 5, 10, 14, 15, 8, 12, 4, 9, 1, 2,
    15, 5, 1, 3, 7, 14, 6, 9, 11, 8, 12, 2, 10, 0, 4, 13,
    8, 6, 4, 1, 3, 11, 15, 0, 5, 12, 2, 13, 9, 7, 10, 14,
    12, 15, 10, 4, 1, 5, 8, 7, 6, 2, 13, 14, 0, 3, 9, 11
  ];
  
  var s = [
    11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8,
    7, 6, 8, 13, 11, 9, 7, 15, 7, 12, 15, 9, 11, 7, 13, 12,
    11, 13, 6, 7, 14, 9, 13, 15, 14, 8, 13, 6, 5, 12, 7, 5,
    11, 12, 14, 15, 14, 15, 9, 8, 9, 14, 5, 6, 8, 6, 5, 12,
    9, 15, 5, 11, 6, 8, 13, 12, 5, 12, 13, 14, 11, 8, 5, 6
  ];
  
  var sh = [
    8, 9, 9, 11, 13, 15, 15, 5, 7, 7, 8, 11, 14, 14, 12, 6,
    9, 13, 15, 7, 12, 8, 9, 11, 7, 7, 12, 7, 6, 15, 13, 11,
    9, 7, 15, 11, 8, 6, 6, 14, 12, 13, 5, 14, 13, 13, 7, 5,
    15, 5, 8, 11, 14, 14, 6, 14, 6, 9, 12, 9, 12, 5, 15, 8,
    8, 5, 12, 9, 12, 5, 14, 6, 8, 13, 6, 5, 15, 13, 11, 11
  ];
  
  },{"./common":163,"./utils":173}],166:[function(require,module,exports){
  'use strict';
  
  exports.sha1 = require('./sha/1');
  exports.sha224 = require('./sha/224');
  exports.sha256 = require('./sha/256');
  exports.sha384 = require('./sha/384');
  exports.sha512 = require('./sha/512');
  
  },{"./sha/1":167,"./sha/224":168,"./sha/256":169,"./sha/384":170,"./sha/512":171}],167:[function(require,module,exports){
  'use strict';
  
  var utils = require('../utils');
  var common = require('../common');
  var shaCommon = require('./common');
  
  var rotl32 = utils.rotl32;
  var sum32 = utils.sum32;
  var sum32_5 = utils.sum32_5;
  var ft_1 = shaCommon.ft_1;
  var BlockHash = common.BlockHash;
  
  var sha1_K = [
    0x5A827999, 0x6ED9EBA1,
    0x8F1BBCDC, 0xCA62C1D6
  ];
  
  function SHA1() {
    if (!(this instanceof SHA1))
      return new SHA1();
  
    BlockHash.call(this);
    this.h = [
      0x67452301, 0xefcdab89, 0x98badcfe,
      0x10325476, 0xc3d2e1f0 ];
    this.W = new Array(80);
  }
  
  utils.inherits(SHA1, BlockHash);
  module.exports = SHA1;
  
  SHA1.blockSize = 512;
  SHA1.outSize = 160;
  SHA1.hmacStrength = 80;
  SHA1.padLength = 64;
  
  SHA1.prototype._update = function _update(msg, start) {
    var W = this.W;
  
    for (var i = 0; i < 16; i++)
      W[i] = msg[start + i];
  
    for(; i < W.length; i++)
      W[i] = rotl32(W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16], 1);
  
    var a = this.h[0];
    var b = this.h[1];
    var c = this.h[2];
    var d = this.h[3];
    var e = this.h[4];
  
    for (i = 0; i < W.length; i++) {
      var s = ~~(i / 20);
      var t = sum32_5(rotl32(a, 5), ft_1(s, b, c, d), e, W[i], sha1_K[s]);
      e = d;
      d = c;
      c = rotl32(b, 30);
      b = a;
      a = t;
    }
  
    this.h[0] = sum32(this.h[0], a);
    this.h[1] = sum32(this.h[1], b);
    this.h[2] = sum32(this.h[2], c);
    this.h[3] = sum32(this.h[3], d);
    this.h[4] = sum32(this.h[4], e);
  };
  
  SHA1.prototype._digest = function digest(enc) {
    if (enc === 'hex')
      return utils.toHex32(this.h, 'big');
    else
      return utils.split32(this.h, 'big');
  };
  
  },{"../common":163,"../utils":173,"./common":172}],168:[function(require,module,exports){
  'use strict';
  
  var utils = require('../utils');
  var SHA256 = require('./256');
  
  function SHA224() {
    if (!(this instanceof SHA224))
      return new SHA224();
  
    SHA256.call(this);
    this.h = [
      0xc1059ed8, 0x367cd507, 0x3070dd17, 0xf70e5939,
      0xffc00b31, 0x68581511, 0x64f98fa7, 0xbefa4fa4 ];
  }
  utils.inherits(SHA224, SHA256);
  module.exports = SHA224;
  
  SHA224.blockSize = 512;
  SHA224.outSize = 224;
  SHA224.hmacStrength = 192;
  SHA224.padLength = 64;
  
  SHA224.prototype._digest = function digest(enc) {
    // Just truncate output
    if (enc === 'hex')
      return utils.toHex32(this.h.slice(0, 7), 'big');
    else
      return utils.split32(this.h.slice(0, 7), 'big');
  };
  
  
  },{"../utils":173,"./256":169}],169:[function(require,module,exports){
  'use strict';
  
  var utils = require('../utils');
  var common = require('../common');
  var shaCommon = require('./common');
  var assert = require('minimalistic-assert');
  
  var sum32 = utils.sum32;
  var sum32_4 = utils.sum32_4;
  var sum32_5 = utils.sum32_5;
  var ch32 = shaCommon.ch32;
  var maj32 = shaCommon.maj32;
  var s0_256 = shaCommon.s0_256;
  var s1_256 = shaCommon.s1_256;
  var g0_256 = shaCommon.g0_256;
  var g1_256 = shaCommon.g1_256;
  
  var BlockHash = common.BlockHash;
  
  var sha256_K = [
    0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5,
    0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,
    0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3,
    0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,
    0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc,
    0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,
    0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7,
    0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,
    0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13,
    0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,
    0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3,
    0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,
    0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5,
    0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,
    0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208,
    0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2
  ];
  
  function SHA256() {
    if (!(this instanceof SHA256))
      return new SHA256();
  
    BlockHash.call(this);
    this.h = [
      0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a,
      0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19
    ];
    this.k = sha256_K;
    this.W = new Array(64);
  }
  utils.inherits(SHA256, BlockHash);
  module.exports = SHA256;
  
  SHA256.blockSize = 512;
  SHA256.outSize = 256;
  SHA256.hmacStrength = 192;
  SHA256.padLength = 64;
  
  SHA256.prototype._update = function _update(msg, start) {
    var W = this.W;
  
    for (var i = 0; i < 16; i++)
      W[i] = msg[start + i];
    for (; i < W.length; i++)
      W[i] = sum32_4(g1_256(W[i - 2]), W[i - 7], g0_256(W[i - 15]), W[i - 16]);
  
    var a = this.h[0];
    var b = this.h[1];
    var c = this.h[2];
    var d = this.h[3];
    var e = this.h[4];
    var f = this.h[5];
    var g = this.h[6];
    var h = this.h[7];
  
    assert(this.k.length === W.length);
    for (i = 0; i < W.length; i++) {
      var T1 = sum32_5(h, s1_256(e), ch32(e, f, g), this.k[i], W[i]);
      var T2 = sum32(s0_256(a), maj32(a, b, c));
      h = g;
      g = f;
      f = e;
      e = sum32(d, T1);
      d = c;
      c = b;
      b = a;
      a = sum32(T1, T2);
    }
  
    this.h[0] = sum32(this.h[0], a);
    this.h[1] = sum32(this.h[1], b);
    this.h[2] = sum32(this.h[2], c);
    this.h[3] = sum32(this.h[3], d);
    this.h[4] = sum32(this.h[4], e);
    this.h[5] = sum32(this.h[5], f);
    this.h[6] = sum32(this.h[6], g);
    this.h[7] = sum32(this.h[7], h);
  };
  
  SHA256.prototype._digest = function digest(enc) {
    if (enc === 'hex')
      return utils.toHex32(this.h, 'big');
    else
      return utils.split32(this.h, 'big');
  };
  
  },{"../common":163,"../utils":173,"./common":172,"minimalistic-assert":234}],170:[function(require,module,exports){
  'use strict';
  
  var utils = require('../utils');
  
  var SHA512 = require('./512');
  
  function SHA384() {
    if (!(this instanceof SHA384))
      return new SHA384();
  
    SHA512.call(this);
    this.h = [
      0xcbbb9d5d, 0xc1059ed8,
      0x629a292a, 0x367cd507,
      0x9159015a, 0x3070dd17,
      0x152fecd8, 0xf70e5939,
      0x67332667, 0xffc00b31,
      0x8eb44a87, 0x68581511,
      0xdb0c2e0d, 0x64f98fa7,
      0x47b5481d, 0xbefa4fa4 ];
  }
  utils.inherits(SHA384, SHA512);
  module.exports = SHA384;
  
  SHA384.blockSize = 1024;
  SHA384.outSize = 384;
  SHA384.hmacStrength = 192;
  SHA384.padLength = 128;
  
  SHA384.prototype._digest = function digest(enc) {
    if (enc === 'hex')
      return utils.toHex32(this.h.slice(0, 12), 'big');
    else
      return utils.split32(this.h.slice(0, 12), 'big');
  };
  
  },{"../utils":173,"./512":171}],171:[function(require,module,exports){
  'use strict';
  
  var utils = require('../utils');
  var common = require('../common');
  var assert = require('minimalistic-assert');
  
  var rotr64_hi = utils.rotr64_hi;
  var rotr64_lo = utils.rotr64_lo;
  var shr64_hi = utils.shr64_hi;
  var shr64_lo = utils.shr64_lo;
  var sum64 = utils.sum64;
  var sum64_hi = utils.sum64_hi;
  var sum64_lo = utils.sum64_lo;
  var sum64_4_hi = utils.sum64_4_hi;
  var sum64_4_lo = utils.sum64_4_lo;
  var sum64_5_hi = utils.sum64_5_hi;
  var sum64_5_lo = utils.sum64_5_lo;
  
  var BlockHash = common.BlockHash;
  
  var sha512_K = [
    0x428a2f98, 0xd728ae22, 0x71374491, 0x23ef65cd,
    0xb5c0fbcf, 0xec4d3b2f, 0xe9b5dba5, 0x8189dbbc,
    0x3956c25b, 0xf348b538, 0x59f111f1, 0xb605d019,
    0x923f82a4, 0xaf194f9b, 0xab1c5ed5, 0xda6d8118,
    0xd807aa98, 0xa3030242, 0x12835b01, 0x45706fbe,
    0x243185be, 0x4ee4b28c, 0x550c7dc3, 0xd5ffb4e2,
    0x72be5d74, 0xf27b896f, 0x80deb1fe, 0x3b1696b1,
    0x9bdc06a7, 0x25c71235, 0xc19bf174, 0xcf692694,
    0xe49b69c1, 0x9ef14ad2, 0xefbe4786, 0x384f25e3,
    0x0fc19dc6, 0x8b8cd5b5, 0x240ca1cc, 0x77ac9c65,
    0x2de92c6f, 0x592b0275, 0x4a7484aa, 0x6ea6e483,
    0x5cb0a9dc, 0xbd41fbd4, 0x76f988da, 0x831153b5,
    0x983e5152, 0xee66dfab, 0xa831c66d, 0x2db43210,
    0xb00327c8, 0x98fb213f, 0xbf597fc7, 0xbeef0ee4,
    0xc6e00bf3, 0x3da88fc2, 0xd5a79147, 0x930aa725,
    0x06ca6351, 0xe003826f, 0x14292967, 0x0a0e6e70,
    0x27b70a85, 0x46d22ffc, 0x2e1b2138, 0x5c26c926,
    0x4d2c6dfc, 0x5ac42aed, 0x53380d13, 0x9d95b3df,
    0x650a7354, 0x8baf63de, 0x766a0abb, 0x3c77b2a8,
    0x81c2c92e, 0x47edaee6, 0x92722c85, 0x1482353b,
    0xa2bfe8a1, 0x4cf10364, 0xa81a664b, 0xbc423001,
    0xc24b8b70, 0xd0f89791, 0xc76c51a3, 0x0654be30,
    0xd192e819, 0xd6ef5218, 0xd6990624, 0x5565a910,
    0xf40e3585, 0x5771202a, 0x106aa070, 0x32bbd1b8,
    0x19a4c116, 0xb8d2d0c8, 0x1e376c08, 0x5141ab53,
    0x2748774c, 0xdf8eeb99, 0x34b0bcb5, 0xe19b48a8,
    0x391c0cb3, 0xc5c95a63, 0x4ed8aa4a, 0xe3418acb,
    0x5b9cca4f, 0x7763e373, 0x682e6ff3, 0xd6b2b8a3,
    0x748f82ee, 0x5defb2fc, 0x78a5636f, 0x43172f60,
    0x84c87814, 0xa1f0ab72, 0x8cc70208, 0x1a6439ec,
    0x90befffa, 0x23631e28, 0xa4506ceb, 0xde82bde9,
    0xbef9a3f7, 0xb2c67915, 0xc67178f2, 0xe372532b,
    0xca273ece, 0xea26619c, 0xd186b8c7, 0x21c0c207,
    0xeada7dd6, 0xcde0eb1e, 0xf57d4f7f, 0xee6ed178,
    0x06f067aa, 0x72176fba, 0x0a637dc5, 0xa2c898a6,
    0x113f9804, 0xbef90dae, 0x1b710b35, 0x131c471b,
    0x28db77f5, 0x23047d84, 0x32caab7b, 0x40c72493,
    0x3c9ebe0a, 0x15c9bebc, 0x431d67c4, 0x9c100d4c,
    0x4cc5d4be, 0xcb3e42b6, 0x597f299c, 0xfc657e2a,
    0x5fcb6fab, 0x3ad6faec, 0x6c44198c, 0x4a475817
  ];
  
  function SHA512() {
    if (!(this instanceof SHA512))
      return new SHA512();
  
    BlockHash.call(this);
    this.h = [
      0x6a09e667, 0xf3bcc908,
      0xbb67ae85, 0x84caa73b,
      0x3c6ef372, 0xfe94f82b,
      0xa54ff53a, 0x5f1d36f1,
      0x510e527f, 0xade682d1,
      0x9b05688c, 0x2b3e6c1f,
      0x1f83d9ab, 0xfb41bd6b,
      0x5be0cd19, 0x137e2179 ];
    this.k = sha512_K;
    this.W = new Array(160);
  }
  utils.inherits(SHA512, BlockHash);
  module.exports = SHA512;
  
  SHA512.blockSize = 1024;
  SHA512.outSize = 512;
  SHA512.hmacStrength = 192;
  SHA512.padLength = 128;
  
  SHA512.prototype._prepareBlock = function _prepareBlock(msg, start) {
    var W = this.W;
  
    // 32 x 32bit words
    for (var i = 0; i < 32; i++)
      W[i] = msg[start + i];
    for (; i < W.length; i += 2) {
      var c0_hi = g1_512_hi(W[i - 4], W[i - 3]);  // i - 2
      var c0_lo = g1_512_lo(W[i - 4], W[i - 3]);
      var c1_hi = W[i - 14];  // i - 7
      var c1_lo = W[i - 13];
      var c2_hi = g0_512_hi(W[i - 30], W[i - 29]);  // i - 15
      var c2_lo = g0_512_lo(W[i - 30], W[i - 29]);
      var c3_hi = W[i - 32];  // i - 16
      var c3_lo = W[i - 31];
  
      W[i] = sum64_4_hi(
        c0_hi, c0_lo,
        c1_hi, c1_lo,
        c2_hi, c2_lo,
        c3_hi, c3_lo);
      W[i + 1] = sum64_4_lo(
        c0_hi, c0_lo,
        c1_hi, c1_lo,
        c2_hi, c2_lo,
        c3_hi, c3_lo);
    }
  };
  
  SHA512.prototype._update = function _update(msg, start) {
    this._prepareBlock(msg, start);
  
    var W = this.W;
  
    var ah = this.h[0];
    var al = this.h[1];
    var bh = this.h[2];
    var bl = this.h[3];
    var ch = this.h[4];
    var cl = this.h[5];
    var dh = this.h[6];
    var dl = this.h[7];
    var eh = this.h[8];
    var el = this.h[9];
    var fh = this.h[10];
    var fl = this.h[11];
    var gh = this.h[12];
    var gl = this.h[13];
    var hh = this.h[14];
    var hl = this.h[15];
  
    assert(this.k.length === W.length);
    for (var i = 0; i < W.length; i += 2) {
      var c0_hi = hh;
      var c0_lo = hl;
      var c1_hi = s1_512_hi(eh, el);
      var c1_lo = s1_512_lo(eh, el);
      var c2_hi = ch64_hi(eh, el, fh, fl, gh, gl);
      var c2_lo = ch64_lo(eh, el, fh, fl, gh, gl);
      var c3_hi = this.k[i];
      var c3_lo = this.k[i + 1];
      var c4_hi = W[i];
      var c4_lo = W[i + 1];
  
      var T1_hi = sum64_5_hi(
        c0_hi, c0_lo,
        c1_hi, c1_lo,
        c2_hi, c2_lo,
        c3_hi, c3_lo,
        c4_hi, c4_lo);
      var T1_lo = sum64_5_lo(
        c0_hi, c0_lo,
        c1_hi, c1_lo,
        c2_hi, c2_lo,
        c3_hi, c3_lo,
        c4_hi, c4_lo);
  
      c0_hi = s0_512_hi(ah, al);
      c0_lo = s0_512_lo(ah, al);
      c1_hi = maj64_hi(ah, al, bh, bl, ch, cl);
      c1_lo = maj64_lo(ah, al, bh, bl, ch, cl);
  
      var T2_hi = sum64_hi(c0_hi, c0_lo, c1_hi, c1_lo);
      var T2_lo = sum64_lo(c0_hi, c0_lo, c1_hi, c1_lo);
  
      hh = gh;
      hl = gl;
  
      gh = fh;
      gl = fl;
  
      fh = eh;
      fl = el;
  
      eh = sum64_hi(dh, dl, T1_hi, T1_lo);
      el = sum64_lo(dl, dl, T1_hi, T1_lo);
  
      dh = ch;
      dl = cl;
  
      ch = bh;
      cl = bl;
  
      bh = ah;
      bl = al;
  
      ah = sum64_hi(T1_hi, T1_lo, T2_hi, T2_lo);
      al = sum64_lo(T1_hi, T1_lo, T2_hi, T2_lo);
    }
  
    sum64(this.h, 0, ah, al);
    sum64(this.h, 2, bh, bl);
    sum64(this.h, 4, ch, cl);
    sum64(this.h, 6, dh, dl);
    sum64(this.h, 8, eh, el);
    sum64(this.h, 10, fh, fl);
    sum64(this.h, 12, gh, gl);
    sum64(this.h, 14, hh, hl);
  };
  
  SHA512.prototype._digest = function digest(enc) {
    if (enc === 'hex')
      return utils.toHex32(this.h, 'big');
    else
      return utils.split32(this.h, 'big');
  };
  
  function ch64_hi(xh, xl, yh, yl, zh) {
    var r = (xh & yh) ^ ((~xh) & zh);
    if (r < 0)
      r += 0x100000000;
    return r;
  }
  
  function ch64_lo(xh, xl, yh, yl, zh, zl) {
    var r = (xl & yl) ^ ((~xl) & zl);
    if (r < 0)
      r += 0x100000000;
    return r;
  }
  
  function maj64_hi(xh, xl, yh, yl, zh) {
    var r = (xh & yh) ^ (xh & zh) ^ (yh & zh);
    if (r < 0)
      r += 0x100000000;
    return r;
  }
  
  function maj64_lo(xh, xl, yh, yl, zh, zl) {
    var r = (xl & yl) ^ (xl & zl) ^ (yl & zl);
    if (r < 0)
      r += 0x100000000;
    return r;
  }
  
  function s0_512_hi(xh, xl) {
    var c0_hi = rotr64_hi(xh, xl, 28);
    var c1_hi = rotr64_hi(xl, xh, 2);  // 34
    var c2_hi = rotr64_hi(xl, xh, 7);  // 39
  
    var r = c0_hi ^ c1_hi ^ c2_hi;
    if (r < 0)
      r += 0x100000000;
    return r;
  }
  
  function s0_512_lo(xh, xl) {
    var c0_lo = rotr64_lo(xh, xl, 28);
    var c1_lo = rotr64_lo(xl, xh, 2);  // 34
    var c2_lo = rotr64_lo(xl, xh, 7);  // 39
  
    var r = c0_lo ^ c1_lo ^ c2_lo;
    if (r < 0)
      r += 0x100000000;
    return r;
  }
  
  function s1_512_hi(xh, xl) {
    var c0_hi = rotr64_hi(xh, xl, 14);
    var c1_hi = rotr64_hi(xh, xl, 18);
    var c2_hi = rotr64_hi(xl, xh, 9);  // 41
  
    var r = c0_hi ^ c1_hi ^ c2_hi;
    if (r < 0)
      r += 0x100000000;
    return r;
  }
  
  function s1_512_lo(xh, xl) {
    var c0_lo = rotr64_lo(xh, xl, 14);
    var c1_lo = rotr64_lo(xh, xl, 18);
    var c2_lo = rotr64_lo(xl, xh, 9);  // 41
  
    var r = c0_lo ^ c1_lo ^ c2_lo;
    if (r < 0)
      r += 0x100000000;
    return r;
  }
  
  function g0_512_hi(xh, xl) {
    var c0_hi = rotr64_hi(xh, xl, 1);
    var c1_hi = rotr64_hi(xh, xl, 8);
    var c2_hi = shr64_hi(xh, xl, 7);
  
    var r = c0_hi ^ c1_hi ^ c2_hi;
    if (r < 0)
      r += 0x100000000;
    return r;
  }
  
  function g0_512_lo(xh, xl) {
    var c0_lo = rotr64_lo(xh, xl, 1);
    var c1_lo = rotr64_lo(xh, xl, 8);
    var c2_lo = shr64_lo(xh, xl, 7);
  
    var r = c0_lo ^ c1_lo ^ c2_lo;
    if (r < 0)
      r += 0x100000000;
    return r;
  }
  
  function g1_512_hi(xh, xl) {
    var c0_hi = rotr64_hi(xh, xl, 19);
    var c1_hi = rotr64_hi(xl, xh, 29);  // 61
    var c2_hi = shr64_hi(xh, xl, 6);
  
    var r = c0_hi ^ c1_hi ^ c2_hi;
    if (r < 0)
      r += 0x100000000;
    return r;
  }
  
  function g1_512_lo(xh, xl) {
    var c0_lo = rotr64_lo(xh, xl, 19);
    var c1_lo = rotr64_lo(xl, xh, 29);  // 61
    var c2_lo = shr64_lo(xh, xl, 6);
  
    var r = c0_lo ^ c1_lo ^ c2_lo;
    if (r < 0)
      r += 0x100000000;
    return r;
  }
  
  },{"../common":163,"../utils":173,"minimalistic-assert":234}],172:[function(require,module,exports){
  'use strict';
  
  var utils = require('../utils');
  var rotr32 = utils.rotr32;
  
  function ft_1(s, x, y, z) {
    if (s === 0)
      return ch32(x, y, z);
    if (s === 1 || s === 3)
      return p32(x, y, z);
    if (s === 2)
      return maj32(x, y, z);
  }
  exports.ft_1 = ft_1;
  
  function ch32(x, y, z) {
    return (x & y) ^ ((~x) & z);
  }
  exports.ch32 = ch32;
  
  function maj32(x, y, z) {
    return (x & y) ^ (x & z) ^ (y & z);
  }
  exports.maj32 = maj32;
  
  function p32(x, y, z) {
    return x ^ y ^ z;
  }
  exports.p32 = p32;
  
  function s0_256(x) {
    return rotr32(x, 2) ^ rotr32(x, 13) ^ rotr32(x, 22);
  }
  exports.s0_256 = s0_256;
  
  function s1_256(x) {
    return rotr32(x, 6) ^ rotr32(x, 11) ^ rotr32(x, 25);
  }
  exports.s1_256 = s1_256;
  
  function g0_256(x) {
    return rotr32(x, 7) ^ rotr32(x, 18) ^ (x >>> 3);
  }
  exports.g0_256 = g0_256;
  
  function g1_256(x) {
    return rotr32(x, 17) ^ rotr32(x, 19) ^ (x >>> 10);
  }
  exports.g1_256 = g1_256;
  
  },{"../utils":173}],173:[function(require,module,exports){
  'use strict';
  
  var assert = require('minimalistic-assert');
  var inherits = require('inherits');
  
  exports.inherits = inherits;
  
  function toArray(msg, enc) {
    if (Array.isArray(msg))
      return msg.slice();
    if (!msg)
      return [];
    var res = [];
    if (typeof msg === 'string') {
      if (!enc) {
        for (var i = 0; i < msg.length; i++) {
          var c = msg.charCodeAt(i);
          var hi = c >> 8;
          var lo = c & 0xff;
          if (hi)
            res.push(hi, lo);
          else
            res.push(lo);
        }
      } else if (enc === 'hex') {
        msg = msg.replace(/[^a-z0-9]+/ig, '');
        if (msg.length % 2 !== 0)
          msg = '0' + msg;
        for (i = 0; i < msg.length; i += 2)
          res.push(parseInt(msg[i] + msg[i + 1], 16));
      }
    } else {
      for (i = 0; i < msg.length; i++)
        res[i] = msg[i] | 0;
    }
    return res;
  }
  exports.toArray = toArray;
  
  function toHex(msg) {
    var res = '';
    for (var i = 0; i < msg.length; i++)
      res += zero2(msg[i].toString(16));
    return res;
  }
  exports.toHex = toHex;
  
  function htonl(w) {
    var res = (w >>> 24) |
              ((w >>> 8) & 0xff00) |
              ((w << 8) & 0xff0000) |
              ((w & 0xff) << 24);
    return res >>> 0;
  }
  exports.htonl = htonl;
  
  function toHex32(msg, endian) {
    var res = '';
    for (var i = 0; i < msg.length; i++) {
      var w = msg[i];
      if (endian === 'little')
        w = htonl(w);
      res += zero8(w.toString(16));
    }
    return res;
  }
  exports.toHex32 = toHex32;
  
  function zero2(word) {
    if (word.length === 1)
      return '0' + word;
    else
      return word;
  }
  exports.zero2 = zero2;
  
  function zero8(word) {
    if (word.length === 7)
      return '0' + word;
    else if (word.length === 6)
      return '00' + word;
    else if (word.length === 5)
      return '000' + word;
    else if (word.length === 4)
      return '0000' + word;
    else if (word.length === 3)
      return '00000' + word;
    else if (word.length === 2)
      return '000000' + word;
    else if (word.length === 1)
      return '0000000' + word;
    else
      return word;
  }
  exports.zero8 = zero8;
  
  function join32(msg, start, end, endian) {
    var len = end - start;
    assert(len % 4 === 0);
    var res = new Array(len / 4);
    for (var i = 0, k = start; i < res.length; i++, k += 4) {
      var w;
      if (endian === 'big')
        w = (msg[k] << 24) | (msg[k + 1] << 16) | (msg[k + 2] << 8) | msg[k + 3];
      else
        w = (msg[k + 3] << 24) | (msg[k + 2] << 16) | (msg[k + 1] << 8) | msg[k];
      res[i] = w >>> 0;
    }
    return res;
  }
  exports.join32 = join32;
  
  function split32(msg, endian) {
    var res = new Array(msg.length * 4);
    for (var i = 0, k = 0; i < msg.length; i++, k += 4) {
      var m = msg[i];
      if (endian === 'big') {
        res[k] = m >>> 24;
        res[k + 1] = (m >>> 16) & 0xff;
        res[k + 2] = (m >>> 8) & 0xff;
        res[k + 3] = m & 0xff;
      } else {
        res[k + 3] = m >>> 24;
        res[k + 2] = (m >>> 16) & 0xff;
        res[k + 1] = (m >>> 8) & 0xff;
        res[k] = m & 0xff;
      }
    }
    return res;
  }
  exports.split32 = split32;
  
  function rotr32(w, b) {
    return (w >>> b) | (w << (32 - b));
  }
  exports.rotr32 = rotr32;
  
  function rotl32(w, b) {
    return (w << b) | (w >>> (32 - b));
  }
  exports.rotl32 = rotl32;
  
  function sum32(a, b) {
    return (a + b) >>> 0;
  }
  exports.sum32 = sum32;
  
  function sum32_3(a, b, c) {
    return (a + b + c) >>> 0;
  }
  exports.sum32_3 = sum32_3;
  
  function sum32_4(a, b, c, d) {
    return (a + b + c + d) >>> 0;
  }
  exports.sum32_4 = sum32_4;
  
  function sum32_5(a, b, c, d, e) {
    return (a + b + c + d + e) >>> 0;
  }
  exports.sum32_5 = sum32_5;
  
  function sum64(buf, pos, ah, al) {
    var bh = buf[pos];
    var bl = buf[pos + 1];
  
    var lo = (al + bl) >>> 0;
    var hi = (lo < al ? 1 : 0) + ah + bh;
    buf[pos] = hi >>> 0;
    buf[pos + 1] = lo;
  }
  exports.sum64 = sum64;
  
  function sum64_hi(ah, al, bh, bl) {
    var lo = (al + bl) >>> 0;
    var hi = (lo < al ? 1 : 0) + ah + bh;
    return hi >>> 0;
  }
  exports.sum64_hi = sum64_hi;
  
  function sum64_lo(ah, al, bh, bl) {
    var lo = al + bl;
    return lo >>> 0;
  }
  exports.sum64_lo = sum64_lo;
  
  function sum64_4_hi(ah, al, bh, bl, ch, cl, dh, dl) {
    var carry = 0;
    var lo = al;
    lo = (lo + bl) >>> 0;
    carry += lo < al ? 1 : 0;
    lo = (lo + cl) >>> 0;
    carry += lo < cl ? 1 : 0;
    lo = (lo + dl) >>> 0;
    carry += lo < dl ? 1 : 0;
  
    var hi = ah + bh + ch + dh + carry;
    return hi >>> 0;
  }
  exports.sum64_4_hi = sum64_4_hi;
  
  function sum64_4_lo(ah, al, bh, bl, ch, cl, dh, dl) {
    var lo = al + bl + cl + dl;
    return lo >>> 0;
  }
  exports.sum64_4_lo = sum64_4_lo;
  
  function sum64_5_hi(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {
    var carry = 0;
    var lo = al;
    lo = (lo + bl) >>> 0;
    carry += lo < al ? 1 : 0;
    lo = (lo + cl) >>> 0;
    carry += lo < cl ? 1 : 0;
    lo = (lo + dl) >>> 0;
    carry += lo < dl ? 1 : 0;
    lo = (lo + el) >>> 0;
    carry += lo < el ? 1 : 0;
  
    var hi = ah + bh + ch + dh + eh + carry;
    return hi >>> 0;
  }
  exports.sum64_5_hi = sum64_5_hi;
  
  function sum64_5_lo(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {
    var lo = al + bl + cl + dl + el;
  
    return lo >>> 0;
  }
  exports.sum64_5_lo = sum64_5_lo;
  
  function rotr64_hi(ah, al, num) {
    var r = (al << (32 - num)) | (ah >>> num);
    return r >>> 0;
  }
  exports.rotr64_hi = rotr64_hi;
  
  function rotr64_lo(ah, al, num) {
    var r = (ah << (32 - num)) | (al >>> num);
    return r >>> 0;
  }
  exports.rotr64_lo = rotr64_lo;
  
  function shr64_hi(ah, al, num) {
    return ah >>> num;
  }
  exports.shr64_hi = shr64_hi;
  
  function shr64_lo(ah, al, num) {
    var r = (ah << (32 - num)) | (al >>> num);
    return r >>> 0;
  }
  exports.shr64_lo = shr64_lo;
  
  },{"inherits":180,"minimalistic-assert":234}],174:[function(require,module,exports){
  'use strict';
  
  var hash = require('hash.js');
  var utils = require('minimalistic-crypto-utils');
  var assert = require('minimalistic-assert');
  
  function HmacDRBG(options) {
    if (!(this instanceof HmacDRBG))
      return new HmacDRBG(options);
    this.hash = options.hash;
    this.predResist = !!options.predResist;
  
    this.outLen = this.hash.outSize;
    this.minEntropy = options.minEntropy || this.hash.hmacStrength;
  
    this._reseed = null;
    this.reseedInterval = null;
    this.K = null;
    this.V = null;
  
    var entropy = utils.toArray(options.entropy, options.entropyEnc || 'hex');
    var nonce = utils.toArray(options.nonce, options.nonceEnc || 'hex');
    var pers = utils.toArray(options.pers, options.persEnc || 'hex');
    assert(entropy.length >= (this.minEntropy / 8),
           'Not enough entropy. Minimum is: ' + this.minEntropy + ' bits');
    this._init(entropy, nonce, pers);
  }
  module.exports = HmacDRBG;
  
  HmacDRBG.prototype._init = function init(entropy, nonce, pers) {
    var seed = entropy.concat(nonce).concat(pers);
  
    this.K = new Array(this.outLen / 8);
    this.V = new Array(this.outLen / 8);
    for (var i = 0; i < this.V.length; i++) {
      this.K[i] = 0x00;
      this.V[i] = 0x01;
    }
  
    this._update(seed);
    this._reseed = 1;
    this.reseedInterval = 0x1000000000000;  // 2^48
  };
  
  HmacDRBG.prototype._hmac = function hmac() {
    return new hash.hmac(this.hash, this.K);
  };
  
  HmacDRBG.prototype._update = function update(seed) {
    var kmac = this._hmac()
                   .update(this.V)
                   .update([ 0x00 ]);
    if (seed)
      kmac = kmac.update(seed);
    this.K = kmac.digest();
    this.V = this._hmac().update(this.V).digest();
    if (!seed)
      return;
  
    this.K = this._hmac()
                 .update(this.V)
                 .update([ 0x01 ])
                 .update(seed)
                 .digest();
    this.V = this._hmac().update(this.V).digest();
  };
  
  HmacDRBG.prototype.reseed = function reseed(entropy, entropyEnc, add, addEnc) {
    // Optional entropy enc
    if (typeof entropyEnc !== 'string') {
      addEnc = add;
      add = entropyEnc;
      entropyEnc = null;
    }
  
    entropy = utils.toArray(entropy, entropyEnc);
    add = utils.toArray(add, addEnc);
  
    assert(entropy.length >= (this.minEntropy / 8),
           'Not enough entropy. Minimum is: ' + this.minEntropy + ' bits');
  
    this._update(entropy.concat(add || []));
    this._reseed = 1;
  };
  
  HmacDRBG.prototype.generate = function generate(len, enc, add, addEnc) {
    if (this._reseed > this.reseedInterval)
      throw new Error('Reseed is required');
  
    // Optional encoding
    if (typeof enc !== 'string') {
      addEnc = add;
      add = enc;
      enc = null;
    }
  
    // Optional additional data
    if (add) {
      add = utils.toArray(add, addEnc || 'hex');
      this._update(add);
    }
  
    var temp = [];
    while (temp.length < len) {
      this.V = this._hmac().update(this.V).digest();
      temp = temp.concat(this.V);
    }
  
    var res = temp.slice(0, len);
    this._update(add);
    this._reseed++;
    return utils.encode(res, enc);
  };
  
  },{"hash.js":162,"minimalistic-assert":234,"minimalistic-crypto-utils":235}],175:[function(require,module,exports){
  var http = require('http')
  var url = require('url')
  
  var https = module.exports
  
  for (var key in http) {
    if (http.hasOwnProperty(key)) https[key] = http[key]
  }
  
  https.request = function (params, cb) {
    params = validateParams(params)
    return http.request.call(this, params, cb)
  }
  
  https.get = function (params, cb) {
    params = validateParams(params)
    return http.get.call(this, params, cb)
  }
  
  function validateParams (params) {
    if (typeof params === 'string') {
      params = url.parse(params)
    }
    if (!params.protocol) {
      params.protocol = 'https:'
    }
    if (params.protocol !== 'https:') {
      throw new Error('Protocol "' + params.protocol + '" not supported. Expected "https:"')
    }
    return params
  }
  
  },{"http":312,"url":327}],176:[function(require,module,exports){
  /* This file is generated from the Unicode IDNA table, using
     the build-unicode-tables.py script. Please edit that
     script instead of this file. */
  
  /* istanbul ignore next */
  (function (root, factory) {
    if (typeof define === 'function' && define.amd) {
      define([], function () { return factory(); });
    } else if (typeof exports === 'object') {
      module.exports = factory();
    } else {
      root.uts46_map = factory();
    }
  }(this, function () {
  var blocks = [
    new Uint32Array([2157250,2157314,2157378,2157442,2157506,2157570,2157634,0,2157698,2157762,2157826,2157890,2157954,0,2158018,0]),
    new Uint32Array([2179041,6291456,2179073,6291456,2179105,6291456,2179137,6291456,2179169,6291456,2179201,6291456,2179233,6291456,2179265,6291456]),
    new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,14680064,14680064,14680064,14680064,14680064]),
    new Uint32Array([0,2113729,2197345,2197377,2113825,2197409,2197441,2113921,2197473,2114017,2197505,2197537,2197569,2197601,2197633,2197665]),
    new Uint32Array([6291456,6291456,6291456,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,6291456,23068672,23068672,0,0]),
    new Uint32Array([6291456,6291456,6291456,6291456,0,0,0,0,23068672,23068672,23068672,0,0,0,0,23068672]),
    new Uint32Array([14680064,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,14680064,14680064]),
    new Uint32Array([2196001,2196033,2196065,2196097,2196129,2196161,2196193,2196225,2196257,2196289,2196321,2196353,2196385,2196417,2196449,2196481]),
    new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,23068672,6291456,0,0,0,0,0]),
    new Uint32Array([2097281,2105921,2097729,2106081,0,2097601,2162337,2106017,2133281,2097505,2105889,2097185,2097697,2135777,2097633,2097441]),
    new Uint32Array([2177025,6291456,2177057,6291456,2177089,6291456,2177121,6291456,2177153,6291456,2177185,6291456,2177217,6291456,2177249,6291456]),
    new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,0,6291456,6291456,6291456,6291456,6291456]),
    new Uint32Array([6291456,6291456,6291456,0,6291456,6291456,0,0,0,0,0,6291456,6291456,6291456,6291456,6291456]),
    new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,0,0,0,6291456]),
    new Uint32Array([0,23068672,23068672,23068672,0,6291456,6291456,6291456,6291456,6291456,6291456,0,0,0,0,6291456]),
    new Uint32Array([2134435,2134531,2134627,2134723,2134723,2134819,2134819,2134915,2134915,2135011,2105987,2135107,2135203,2135299,2131587,2135395]),
    new Uint32Array([0,0,0,0,0,0,0,6291456,2168673,2169249,6291456,6291456,6291456,6291456,6291456,6291456]),
    new Uint32Array([2147906,2147970,2148034,2148098,2148162,2148226,2148290,2148354,2147906,2147970,2148034,2148098,2148162,2148226,2148290,2148354]),
    new Uint32Array([2125219,2125315,2152834,2152898,2125411,2152962,2153026,2125506,2125507,2125603,2153090,2153154,2153218,2153282,2153346,2105348]),
    new Uint32Array([2203393,6291456,2203425,6291456,2203457,6291456,2203489,6291456,6291456,6291456,6291456,2203521,6291456,2181281,6291456,6291456]),
    new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,23068672,23068672,6291456,6291456,6291456,6291456,6291456,6291456]),
    new Uint32Array([6291456,23068672,6291456,2145538,23068672,23068672,23068672,23068672,23068672,23068672,23068672,0,0,0,0,6291456]),
    new Uint32Array([2139426,2160834,2160898,2160962,2134242,2161026,2161090,2161154,2161218,2161282,2161346,2161410,2138658,2161474,2161538,2134722]),
    new Uint32Array([2119939,2124930,2125026,2106658,2125218,2128962,2129058,2129154,2129250,2129346,2129442,2108866,2108770,2150466,2150530,2150594]),
    new Uint32Array([2201601,6291456,2201633,6291456,2201665,6291456,2201697,6291456,2201729,6291456,2201761,6291456,2201793,6291456,2201825,6291456]),
    new Uint32Array([2193537,2193569,2193601,2193633,2193665,2193697,2193729,2193761,2193793,2193825,2193857,2193889,2193921,2193953,2193985,2194017]),
    new Uint32Array([6291456,23068672,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456]),
    new Uint32Array([0,6291456,6291456,0,0,0,0,0,0,0,0,0,0,0,0,0]),
    new Uint32Array([2190561,6291456,2190593,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,2190625,6291456,2190657,6291456,23068672]),
    new Uint32Array([2215905,2215937,2215969,2216001,2216033,2216065,2216097,2216129,2216161,2216193,2216225,2216257,2105441,2216289,2216321,2216353]),
    new Uint32Array([23068672,18884130,23068672,23068672,23068672,6291456,23068672,23068672,6291456,6291456,6291456,6291456,6291456,23068672,23068672,23068672]),
    new Uint32Array([23068672,23068672,0,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672]),
    new Uint32Array([6291456,6291456,23068672,23068672,0,0,0,0,0,0,0,0,0,0,0,0]),
    new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672]),
    new Uint32Array([2191233,2191265,2191297,2191329,2191361,2191393,2191425,2117377,2191457,2191489,2191521,2191553,2191585,2191617,2191649,2117953]),
    new Uint32Array([2132227,2132323,2132419,2132419,2132515,2132515,2132611,2132707,2132707,2132803,2132899,2132899,2132995,2132995,2133091,2133187]),
    new Uint32Array([0,0,0,0,0,0,0,0,0,6291456,6291456,6291456,6291456,6291456,6291456,6291456]),
    new Uint32Array([23068672,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,23068672,23068672,23068672,6291456,0,0]),
    new Uint32Array([2112481,2112577,2098177,2098305,2108321,2108289,2100865,2113153,2108481,2113345,2113441,10609889,10610785,10609921,10610817,2222241]),
    new Uint32Array([6291456,6291456,6291456,23068672,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,23068672,23068672,0,0]),
    new Uint32Array([2219969,2157121,2157441,2157505,2157889,2157953,2220001,2158465,2158529,10575617,2156994,2157058,2129923,2130019,2157122,2157186]),
    new Uint32Array([6291456,6291456,6291456,6291456,23068672,23068672,23068672,23068672,23068672,23068672,23068672,0,0,0,0,0]),
    new Uint32Array([2185249,6291456,2185281,6291456,2185313,6291456,2185345,6291456,2185377,6291456,2185409,6291456,2185441,6291456,2185473,6291456]),
    new Uint32Array([0,0,0,0,6291456,6291456,6291456,6291456,0,6291456,6291456,6291456,6291456,6291456,6291456,6291456]),
    new Uint32Array([6291456,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672]),
    new Uint32Array([23068672,23068672,23068672,23068672,23068672,0,0,23068672,23068672,0,0,23068672,23068672,23068672,6291456,0]),
    new Uint32Array([2183361,6291456,2183393,6291456,2183425,6291456,2183457,6291456,2183489,6291456,2183521,6291456,2183553,6291456,2183585,6291456]),
    new Uint32Array([2192161,2192193,2192225,2192257,2192289,2192321,2192353,2192385,2192417,2192449,2192481,2192513,2192545,2192577,2192609,2192641]),
    new Uint32Array([2212001,2212033,2212065,2212097,2212129,2212161,2212193,2212225,2212257,2212289,2212321,2212353,2212385,2212417,2212449,2207265]),
    new Uint32Array([2249825,2249857,2249889,2249921,2249954,2250018,2250082,2250145,2250177,2250209,2250241,2250274,2250337,2250370,2250433,2250465]),
    new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,2147905,2147969,2148033,2148097,2148161,2148225,2148289,2148353]),
    new Uint32Array([10485857,6291456,2197217,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456]),
    new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,0,0,0,0,23068672,23068672]),
    new Uint32Array([0,23068672,23068672,23068672,0,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,0,6291456,6291456]),
    new Uint32Array([2180353,2180385,2144033,2180417,2180449,2180481,2180513,0,0,6291456,6291456,6291456,6291456,6291456,6291456,6291456]),
    new Uint32Array([2112481,2112577,2098177,2098305,2108321,2108289,2100865,2113153,2108481,2113345,2113441,10610209,10610465,10610241,10610753,10609857]),
    new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,23068672,0,0]),
    new Uint32Array([2223842,2223906,2223970,2224034,2224098,2224162,2224226,2224290,2224354,2224418,2224482,2224546,2224610,2224674,2224738,2224802]),
    new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,23068672,23068672,23068672,23068672,6291456,23068672,23068672,23068672,23068672,23068672]),
    new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,0,6291456]),
    new Uint32Array([23068672,23068672,23068672,18923650,23068672,23068672,23068672,23068672,0,23068672,23068672,23068672,23068672,18923714,23068672,23068672]),
    new Uint32Array([2126179,2125538,2126275,2126371,2126467,2125634,2126563,2105603,2105604,2125346,2126659,2126755,2126851,2098179,2098181,2098182]),
    new Uint32Array([2227426,2227490,2227554,2227618,0,0,0,0,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456]),
    new Uint32Array([2192353,2240642,2240642,2240705,2240737,2240737,2240769,2240802,2240866,2240929,2240961,2240993,2241025,2241057,2241089,2241121]),
    new Uint32Array([6291456,2170881,2170913,2170945,6291456,2170977,6291456,2171009,2171041,6291456,6291456,6291456,2171073,6291456,6291456,6291456]),
    new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672]),
    new Uint32Array([2132226,2132514,2163586,2132610,2160386,2133090,2133186,2160450,2160514,2160578,2133570,2106178,2160642,2133858,2160706,2160770]),
    new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,6291456,0,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456]),
    new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,10532162,10532226,10532290,10532354,10532418,10532482,6291456,6291456]),
    new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,0,6291456,6291456,6291456,6291456,6291456,6291456]),
    new Uint32Array([23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,6291456,23068672]),
    new Uint32Array([2098209,2108353,2108193,2108481,2170241,2111713,2105473,2105569,2105601,2112289,2112481,2098305,2108321,0,0,0]),
    new Uint32Array([2209121,2209153,2209185,2209217,2209249,2209281,2209313,2209345,2209377,2209409,2209441,2209473,2207265,2209505,2209537,2209569]),
    new Uint32Array([2189025,6291456,2189057,6291456,2189089,6291456,2189121,6291456,2189153,6291456,2189185,6291456,2189217,6291456,2189249,6291456]),
    new Uint32Array([2173825,2153473,2173857,2173889,2173921,2173953,2173985,2173761,2174017,2174049,2174081,2174113,2174145,2174177,2149057,2233057]),
    new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,2165764,2140004]),
    new Uint32Array([2215105,6291456,2215137,6291456,6291456,2215169,2215201,6291456,6291456,6291456,2215233,2215265,2215297,2215329,2215361,2215393]),
    new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,0,0,6291456,0,6291456,6291456,6291456,6291456,6291456,6291456]),
    new Uint32Array([23068672,23068672,6291456,6291456,6291456,23068672,0,0,0,0,0,0,0,0,0,0]),
    new Uint32Array([10505091,10505187,10505283,10505379,10505475,10505571,10505667,10505763,10505859,10505955,10506051,10506147,10506243,10506339,10506435,10506531]),
    new Uint32Array([2229730,2229794,2229858,2229922,2229986,2230050,2230114,2230178,2230242,2230306,2230370,2230434,2230498,2230562,2230626,2230690]),
    new Uint32Array([2105505,2098241,2108353,2108417,2105825,0,2100897,2111905,2105473,2105569,2105601,2112289,2108193,2112481,2112577,2098177]),
    new Uint32Array([6291456,6291456,6291456,6291456,10502115,10502178,10502211,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456]),
    new Uint32Array([0,23068672,23068672,23068672,0,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,0,0,6291456]),
    new Uint32Array([2190305,6291456,2190337,6291456,2190369,6291456,2190401,6291456,2190433,6291456,2190465,6291456,2190497,6291456,2190529,6291456]),
    new Uint32Array([2173793,2173985,2174017,6291456,2173761,2173697,6291456,2174689,6291456,2174017,2174721,6291456,6291456,2174753,2174785,2174817]),
    new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456]),
    new Uint32Array([2099521,2099105,2120705,2098369,2120801,2103361,2097985,2098433,2121377,2121473,2099169,2099873,2098401,2099393,2152609,2100033]),
    new Uint32Array([2132898,2163842,2163906,2133282,2132034,2131938,2137410,2132802,2132706,2164866,2133282,2160578,2165186,2165186,6291456,6291456]),
    new Uint32Array([10500003,10500099,10500195,10500291,10500387,10500483,10500579,10500675,10500771,10500867,10500963,10501059,10501155,10501251,10501347,10501443]),
    new Uint32Array([2163458,2130978,2131074,2131266,2131362,2163522,2160130,2132066,2131010,2131106,2106018,2131618,2131298,2132034,2131938,2137410]),
    new Uint32Array([2212961,2116993,2212993,2213025,2213057,2213089,2213121,2213153,2213185,2213217,2213249,2209633,2213281,2213313,2213345,2213377]),
    new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,23068672,6291456,6291456,6291456,6291456,6291456,6291456,0,6291456,6291456]),
    new Uint32Array([2113729,2113825,2113921,2114017,2114113,2114209,2114305,2114401,2114497,2114593,2114689,2114785,2114881,2114977,2115073,2115169]),
    new Uint32Array([2238177,2238209,2238241,2238273,2238305,2238337,2238337,2217537,2238369,2238401,2238433,2238465,2215649,2238497,2238529,2238561]),
    new Uint32Array([2108289,2100865,2113153,2108481,2113345,2113441,2098209,2111137,2105505,2098241,2108353,2108417,2105825,2111713,2100897,2111905]),
    new Uint32Array([6291456,6291456,0,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,0,6291456,0,0]),
    new Uint32Array([6291456,0,6291456,2145026,0,6291456,2145090,0,6291456,6291456,0,0,23068672,0,23068672,23068672]),
    new Uint32Array([2099233,2122017,2200673,2098113,2121537,2103201,2200705,2104033,2121857,2121953,2122401,2099649,2099969,2123009,2100129,2100289]),
    new Uint32Array([6291456,23068672,6291456,0,0,0,0,0,0,0,0,0,0,0,0,0]),
    new Uint32Array([6291456,6291456,23068672,23068672,0,0,23068672,23068672,23068672,23068672,23068672,23068672,23068672,0,0,0]),
    new Uint32Array([2187681,2187713,2187745,2187777,2187809,2187841,2187873,2187905,2187937,2187969,2188001,2188033,2188065,2188097,2188129,2188161]),
    new Uint32Array([0,10554498,10554562,10554626,10554690,10554754,10554818,10554882,10554946,10555010,10555074,6291456,6291456,0,0,0]),
    new Uint32Array([2235170,2235234,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456]),
    new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,0,0,0,0,0,0,0]),
    new Uint32Array([2181153,6291456,2188897,6291456,6291456,2188929,6291456,6291456,6291456,6291456,6291456,6291456,2111905,2100865,2188961,2188993]),
    new Uint32Array([2100833,2100897,0,0,2101569,2101697,2101825,2101953,2102081,2102209,10575617,2187041,10502177,10489601,10489697,2112289]),
    new Uint32Array([6291456,2172833,6291456,2172865,2172897,2172929,2172961,6291456,2172993,6291456,2173025,6291456,2173057,6291456,2173089,6291456]),
    new Uint32Array([6291456,0,6291456,6291456,0,6291456,6291456,6291456,6291456,6291456,0,0,23068672,6291456,23068672,23068672]),
    new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,0,0,0,0,0,0,0,2190721]),
    new Uint32Array([23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,6291456,6291456,6291456,6291456,23068672,6291456,6291456]),
    new Uint32Array([2184993,6291456,2185025,6291456,2185057,6291456,2185089,6291456,2185121,6291456,2185153,6291456,2185185,6291456,2185217,6291456]),
    new Uint32Array([2115265,2115361,2115457,2115553,2115649,2115745,2115841,2115937,2116033,2116129,2116225,2116321,2150658,2150722,2200225,6291456]),
    new Uint32Array([2168321,6291456,2168353,6291456,2168385,6291456,2168417,6291456,2168449,6291456,2168481,6291456,2168513,6291456,2168545,6291456]),
    new Uint32Array([23068672,23068672,23068672,6291456,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672]),
    new Uint32Array([6291456,0,6291456,6291456,6291456,6291456,0,0,0,6291456,6291456,0,6291456,0,6291456,6291456]),
    new Uint32Array([6291456,6291456,6291456,2186625,0,0,6291456,6291456,2186657,2186689,2186721,2173505,0,10496067,10496163,10496259]),
    new Uint32Array([2178785,6291456,2178817,6291456,2178849,6291456,2178881,6291456,2178913,6291456,2178945,6291456,2178977,6291456,2179009,6291456]),
    new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,0,0,0,0,0]),
    new Uint32Array([2097152,0,0,0,2097152,0,0,0,0,0,0,0,0,0,0,0]),
    new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,6291456,6291456]),
    new Uint32Array([6291456,0,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456]),
    new Uint32Array([0,0,2197857,2197889,2197921,2197953,2197985,2198017,0,0,2198049,2198081,2198113,2198145,2198177,2198209]),
    new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,2098209,2167297,2111137,6291456]),
    new Uint32Array([2171393,6291456,2171425,6291456,2171457,6291456,2171489,6291456,2171521,6291456,2171553,6291456,2171585,6291456,2171617,6291456]),
    new Uint32Array([2206753,2206785,2195457,2206817,2206849,2206881,2206913,2197153,2197153,2206945,2117857,2206977,2207009,2207041,2207073,2207105]),
    new Uint32Array([0,0,0,0,0,0,0,23068672,0,0,0,0,2144834,2144898,0,2144962]),
    new Uint32Array([23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,0,0,23068672]),
    new Uint32Array([2108193,2112481,2112577,2098177,2098305,2108321,2108289,2100865,2113153,2108481,2113345,2113441,2098209,0,2105505,2098241]),
    new Uint32Array([6291456,6291456,6291456,6291456,0,6291456,6291456,6291456,0,6291456,6291456,6291456,6291456,6291456,6291456,6291456]),
    new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,6291456,0,0,0,6291456,6291456,6291456,6291456,6291456,6291456]),
    new Uint32Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),
    new Uint32Array([6291456,6291456,2202049,6291456,2202081,6291456,2202113,6291456,2202145,6291456,2202177,6291456,2202209,6291456,2202241,6291456]),
    new Uint32Array([10501155,10501251,10501347,10501443,10501539,10501635,10501731,10501827,10501923,10502019,2141731,2105505,2098177,2155586,2166530,0]),
    new Uint32Array([2102081,2102209,2100833,2100737,2098337,2101441,2101569,2101697,2101825,2101953,2102081,2102209,2100833,2100737,2098337,2101441]),
    new Uint32Array([2146882,2146946,2147010,2147074,2147138,2147202,2147266,2147330,2146882,2146946,2147010,2147074,2147138,2147202,2147266,2147330]),
    new Uint32Array([23068672,23068672,23068672,23068672,23068672,23068672,23068672,6291456,6291456,6291456,6291456,6291456,6291456,6291456,0,0]),
    new Uint32Array([10502307,10502403,10502499,10502595,10502691,10502787,10502883,10502979,10503075,10503171,10503267,10503363,10503459,10503555,10503651,10503747]),
    new Uint32Array([2179937,2179969,2180001,2180033,2156545,2180065,2156577,2180097,2180129,2180161,2180193,2180225,2180257,2180289,2156737,2180321]),
    new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,0,6291456,6291456,0,0,0,6291456,0,0,6291456]),
    new Uint32Array([6291456,6291456,6291456,6291456,6291456,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,0]),
    new Uint32Array([2227682,2227746,2227810,2227874,2227938,2228002,2228066,2228130,2228194,2228258,2228322,2228386,2228450,2228514,2228578,2228642]),
    new Uint32Array([2105601,2169121,2108193,2170049,2181025,2181057,2112481,2108321,2108289,2181089,2170497,2100865,2181121,2173601,2173633,2173665]),
    new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,2180641,6291456,6291456,6291456]),
    new Uint32Array([0,6291456,6291456,6291456,0,6291456,0,6291456,0,0,6291456,6291456,0,6291456,6291456,6291456]),
    new Uint32Array([2178273,6291456,2178305,6291456,2178337,6291456,2178369,6291456,2178401,6291456,2178433,6291456,2178465,6291456,2178497,6291456]),
    new Uint32Array([6291456,6291456,23068672,23068672,23068672,6291456,0,0,0,0,0,0,0,0,0,0]),
    new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,14680064,14680064,14680064,14680064,14680064,14680064]),
    new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,6291456,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,6291456]),
    new Uint32Array([2237377,2237409,2236225,2237441,2237473,2217441,2215521,2215553,2217473,2237505,2237537,2209697,2237569,2215585,2237601,2237633]),
    new Uint32Array([2221985,2165601,2165601,2165665,2165665,2222017,2222017,2165729,2165729,2158913,2158913,2158913,2158913,2097281,2097281,2105921]),
    new Uint32Array([23068672,23068672,23068672,23068672,23068672,0,23068672,23068672,23068672,0,23068672,23068672,23068672,23068672,0,0]),
    new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,2149634,6291456,6291456,6291456,6291456,6291456,6291456,6291456]),
    new Uint32Array([2176897,6291456,6291456,23068672,23068672,23068672,23068672,23068672,23068672,23068672,2176929,6291456,2176961,6291456,2176993,6291456]),
    new Uint32Array([2172641,6291456,2172673,6291456,6291456,6291456,6291456,6291456,6291456,6291456,2172705,2172737,6291456,2172769,2172801,6291456]),
    new Uint32Array([2099173,2104196,2121667,2099395,2121763,2152258,2152322,2098946,2152386,2121859,2121955,2099333,2122051,2104324,2099493,2122147]),
    new Uint32Array([6291456,6291456,6291456,2145794,6291456,6291456,6291456,6291456,0,6291456,6291456,6291456,6291456,2145858,6291456,6291456]),
    new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,23068672,23068672,23068672,0,0,6291456,0]),
    new Uint32Array([0,2105921,2097729,0,2097377,0,0,2106017,0,2097505,2105889,2097185,2097697,2135777,2097633,2097441]),
    new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,6291456,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672]),
    new Uint32Array([2239074,2239138,2239201,2239233,2239265,2239297,2239329,2239361,0,2239393,2239425,2239425,2239458,2239521,2239553,2209569]),
    new Uint32Array([14680064,2098209,2111137,2105505,2098241,2108353,2108417,2105825,2111713,2100897,2111905,2105473,2105569,2105601,2112289,2108193]),
    new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,23068672,23068672,23068672,23068672,23068672,23068672,23068672,0,6291456,23068672]),
    new Uint32Array([2108321,2108289,2113153,2098209,2180897,2180929,2180961,2111137,2098241,2108353,2170241,2170273,2180993,2105825,6291456,2105473]),
    new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,2146114,6291456,6291456,6291456,0,0,0]),
    new Uint32Array([2105921,2105921,2105921,2222049,2222049,2130977,2130977,2130977,2130977,2160065,2160065,2160065,2160065,2097729,2097729,2097729]),
    new Uint32Array([2218145,2214785,2207937,2218177,2218209,2192993,2210113,2212769,2218241,2218273,2216129,2218305,2216161,2218337,2218369,2218401]),
    new Uint32Array([0,0,0,2156546,2156610,2156674,2156738,2156802,0,0,0,0,0,2156866,23068672,2156930]),
    new Uint32Array([23068672,23068672,23068672,0,0,0,0,23068672,23068672,0,0,23068672,23068672,23068672,0,0]),
    new Uint32Array([2213409,2213441,2213473,2213505,2213537,2213569,2213601,2213633,2213665,2195681,2213697,2213729,2213761,2213793,2213825,2213857]),
    new Uint32Array([2100033,2099233,2122017,2200673,2098113,2121537,2103201,2200705,2104033,2121857,2121953,2122401,2099649,2099969,2123009,2100129]),
    new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,6291456,0,0,0,0,0,0,0,0,0]),
    new Uint32Array([2201857,6291456,2201889,6291456,2201921,6291456,2201953,6291456,2201985,6291456,2202017,6291456,2176193,2176257,23068672,23068672]),
    new Uint32Array([6291456,6291456,23068672,23068672,0,0,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456]),
    new Uint32Array([2188193,2188225,2188257,2188289,2188321,2188353,2188385,2188417,2188449,2188481,2188513,2188545,2188577,2188609,2188641,0]),
    new Uint32Array([10554529,2221089,0,10502113,10562017,10537921,10538049,2221121,2221153,0,0,0,0,0,0,0]),
    new Uint32Array([2213889,2213921,2213953,2213985,2214017,2214049,2214081,2194177,2214113,2214145,2214177,2214209,2214241,2214273,2214305,2214337]),
    new Uint32Array([2166978,2167042,2099169,0,0,0,0,0,0,0,0,0,0,0,0,0]),
    new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,2180545,6291456,6291456,6291456]),
    new Uint32Array([10518915,10519011,10519107,10519203,2162242,2162306,2159554,2162370,2159362,2159618,2105922,2162434,2159746,2162498,2159810,2159874]),
    new Uint32Array([2161730,2161794,2135586,2161858,2161922,2137186,2131810,2160290,2135170,2161986,2137954,2162050,2162114,2162178,10518723,10518819]),
    new Uint32Array([10506627,10506723,10506819,10506915,10507011,10507107,10507203,10507299,10507395,10507491,10507587,10507683,10507779,10507875,10507971,10508067]),
    new Uint32Array([6291456,23068672,23068672,23068672,0,23068672,23068672,0,0,0,0,0,23068672,23068672,23068672,23068672]),
    new Uint32Array([23068672,23068672,23068672,23068672,6291456,6291456,6291456,6291456,6291456,6291456,6291456,0,0,0,0,0]),
    new Uint32Array([2175873,2175905,2175937,2175969,2176001,2176033,2176065,2176097,2176129,2176161,2176193,2176225,2176257,2176289,2176321,2176353]),
    new Uint32Array([2140006,2140198,2140390,2140582,2140774,23068672,23068672,23068672,23068672,23068672,6291456,6291456,6291456,23068672,23068672,23068672]),
    new Uint32Array([2108193,2112481,2112577,2098177,2098305,2108321,2108289,2100865,2113153,2108481,2113345,2113441,2098209,2111137,2105505,2098241]),
    new Uint32Array([0,23068672,0,0,0,0,0,0,0,2145154,2145218,2145282,6291456,0,2145346,0]),
    new Uint32Array([0,0,0,0,10531458,10495395,2148545,2143201,2173473,2148865,2173505,0,2173537,0,2173569,2149121]),
    new Uint32Array([10537282,10495683,2148738,2148802,2148866,0,6291456,2148930,2186593,2173473,2148737,2148865,2148802,10495779,10495875,10495971]),
    new Uint32Array([23068672,23068672,23068672,23068672,23068672,0,0,0,0,0,0,0,0,0,0,0]),
    new Uint32Array([2215425,2215457,2215489,2215521,2215553,2215585,2215617,2215649,2215681,2215713,2215745,2215777,2192033,2215809,2215841,2215873]),
    new Uint32Array([2242049,2242081,2242113,2242145,2242177,2242209,2242241,2242273,2215937,2242305,2242338,2242401,2242433,2242465,2242497,2216001]),
    new Uint32Array([10554529,2221089,0,0,10562017,10502113,10538049,10537921,2221185,10489601,10489697,10609889,10609921,2141729,2141793,10610273]),
    new Uint32Array([2141923,2142019,2142115,2142211,2142307,2142403,2142499,2142595,2142691,0,0,0,0,0,0,0]),
    new Uint32Array([0,2221185,2221217,10609857,10609857,10489601,10489697,10609889,10609921,2141729,2141793,2221345,2221377,2221409,2221441,2187105]),
    new Uint32Array([6291456,23068672,23068672,23068672,23068672,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456]),
    new Uint32Array([23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,0]),
    new Uint32Array([23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,18923970,23068672,23068672,23068672,0,6291456,6291456]),
    new Uint32Array([2183105,6291456,2183137,6291456,2183169,6291456,2183201,6291456,2183233,6291456,2183265,6291456,2183297,6291456,2183329,6291456]),
    new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,6291456,0,6291456,6291456,6291456,6291456,6291456,6291456,6291456,0]),
    new Uint32Array([23068672,23068672,23068672,23068672,0,0,0,0,0,0,0,0,6291456,6291456,6291456,6291456]),
    new Uint32Array([2134434,2134818,2097666,2097186,2097474,2097698,2105986,2131586,2132450,2131874,2131778,2135970,2135778,2161602,2136162,2161666]),
    new Uint32Array([2236865,2236897,2236930,2236993,2237025,2235681,2237058,2237121,2237153,2237185,2237217,2217281,2237250,2191233,2237313,2237345]),
    new Uint32Array([2190049,6291456,2190081,6291456,2190113,6291456,2190145,6291456,2190177,6291456,2190209,6291456,2190241,6291456,2190273,6291456]),
    new Uint32Array([6291456,6291456,6291456,6291456,6291456,23068672,23068672,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456]),
    new Uint32Array([2101922,2102050,2102178,2102306,10498755,10498851,10498947,10499043,10499139,10499235,10499331,10499427,10499523,10489604,10489732,10489860]),
    new Uint32Array([2166914,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456]),
    new Uint32Array([23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,0,0,0,0,0]),
    new Uint32Array([2181601,2170561,2181633,2181665,2170753,2181697,2172897,2170881,2181729,2170913,2172929,2113441,2181761,2181793,2171009,2173761]),
    new Uint32Array([0,2105921,2097729,2106081,0,2097601,2162337,2106017,2133281,2097505,0,2097185,2097697,2135777,2097633,2097441]),
    new Uint32Array([6291456,6291456,6291456,23068672,23068672,23068672,23068672,23068672,6291456,6291456,6291456,6291456,0,0,0,0]),
    new Uint32Array([2248001,2248033,2248066,2248130,2248193,2248226,2248289,2248322,2248385,2248417,2216673,2248450,2248514,2248577,2248610,2248673]),
    new Uint32Array([6291456,6291456,0,0,0,0,0,0,0,6291456,6291456,6291456,6291456,0,0,0]),
    new Uint32Array([2169729,6291456,2169761,6291456,2169793,6291456,2169825,6291456,2169857,2169889,6291456,2169921,6291456,2143329,6291456,2098305]),
    new Uint32Array([2162178,2163202,2163266,2135170,2136226,2161986,2137954,2159426,2159490,2163330,2159554,2163394,2159682,2139522,2136450,2159746]),
    new Uint32Array([2173953,2173985,0,2174017,2174049,2174081,2174113,2174145,2174177,2149057,2174209,2174241,6291456,6291456,6291456,6291456]),
    new Uint32Array([6291456,6291456,4271169,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,2174273]),
    new Uint32Array([23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672]),
    new Uint32Array([6291456,6291456,0,0,0,0,0,0,0,6291456,0,0,0,0,0,0]),
    new Uint32Array([6291456,6291456,6291456,2190785,0,0,0,0,0,0,0,0,0,0,0,0]),
    new Uint32Array([2189793,6291456,2189825,6291456,2189857,6291456,2189889,6291456,2189921,6291456,2189953,6291456,2189985,6291456,2190017,6291456]),
    new Uint32Array([2105601,2112289,2108193,2112481,2112577,0,2098305,2108321,2108289,2100865,2113153,2108481,2113345,0,2098209,2111137]),
    new Uint32Array([2172129,6291456,2172161,6291456,2172193,6291456,2172225,6291456,2172257,6291456,2172289,6291456,2172321,6291456,2172353,6291456]),
    new Uint32Array([2214753,6291456,2214785,6291456,6291456,2214817,2214849,2214881,2214913,2214945,2214977,2215009,2215041,2215073,2194401,6291456]),
    new Uint32Array([23068672,23068672,23068672,23068672,23068672,6291456,0,0,0,0,0,0,0,0,0,0]),
    new Uint32Array([0,0,0,0,6291456,6291456,6291456,23068672,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456]),
    new Uint32Array([10610305,10610337,10575617,2221761,10610401,10610433,10502177,0,10610465,10610497,10610529,10610561,0,0,0,0]),
    new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,6291456,0,0,0,23068672,0,0,0,0,23068672]),
    new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,2187105,2187137,6291456,6291456,6291456,6291456,6291456]),
    new Uint32Array([2199393,2199425,2199457,2199489,2199521,2199553,2199585,2199617,2199649,2199681,2199713,2199745,2199777,2199809,2199841,0]),
    new Uint32Array([2217249,2217281,2217313,2217345,2217377,2217409,2217441,2217473,2215617,2217505,2217537,2217569,2214753,2217601,2217633,2217665]),
    new Uint32Array([2170273,2170305,6291456,2170337,2170369,6291456,2170401,2170433,2170465,6291456,6291456,6291456,2170497,2170529,6291456,2170561]),
    new Uint32Array([2188673,6291456,2188705,2188737,2188769,6291456,6291456,2188801,6291456,2188833,6291456,2188865,6291456,2180929,2181505,2180897]),
    new Uint32Array([10489988,10490116,10490244,10490372,10490500,10490628,10490756,10490884,0,0,0,0,0,0,0,0]),
    new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,2147393,2147457,2147521,2147585,2147649,2147713,2147777,2147841]),
    new Uint32Array([23068672,23068672,0,23068672,23068672,0,23068672,23068672,23068672,23068672,23068672,0,0,0,0,0]),
    new Uint32Array([2241153,2241185,2241217,2215809,2241250,2241313,2241345,2241377,2217921,2241377,2241409,2215873,2241441,2241473,2241505,2241537]),
    new Uint32Array([23068672,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456]),
    new Uint32Array([2220417,2220417,2220449,2220449,2220481,2220481,2220513,2220513,2220545,2220545,2220577,2220577,2220609,2220609,2220641,2220641]),
    new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,6291456,2144002,0,6291456,6291456,0,0,6291456,6291456,6291456]),
    new Uint32Array([2167105,2167137,2167169,2167201,2167233,2167265,2167297,2167329,2167361,2167393,2167425,2167457,2167489,2167521,2167553,2167585]),
    new Uint32Array([10575521,2098209,2111137,2105505,2098241,2108353,2108417,2105825,2111713,2100897,2111905,2105473,2105569,2105601,2112289,2108193]),
    new Uint32Array([2234146,2234210,2234274,2234338,2234402,2234466,2234530,2234594,2234658,2234722,2234786,2234850,2234914,2234978,2235042,2235106]),
    new Uint32Array([0,0,0,0,0,0,0,2180577,0,0,0,0,0,2180609,0,0]),
    new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,6291456,23068672,23068672,23068672,23068672,23068672,0,0,6291456,6291456]),
    new Uint32Array([2098209,2111137,2105505,2098241,2108353,2108417,2105825,2111713,2100897,2111905,2105473,2105569,2105601,2112289,2108193,2112481]),
    new Uint32Array([23068672,23068672,23068672,23068672,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456]),
    new Uint32Array([2242529,2242561,2242593,2242625,2242657,2242689,2242721,2242753,2207937,2218177,2242785,2242817,2242849,2242882,2242945,2242977]),
    new Uint32Array([2118049,2105345,2118241,2105441,2118433,2118529,2118625,2118721,2118817,2200257,2200289,2191809,2200321,2200353,2200385,2200417]),
    new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,23068672,23068672,23068672,6291456,6291456]),
    new Uint32Array([23068672,23068672,23068672,23068672,23068672,6291456,6291456,6291456,6291456,6291456,6291456,6291456,0,0,0,0]),
    new Uint32Array([2185505,6291456,2185537,6291456,2185569,6291456,2185601,6291456,2185633,6291456,2185665,6291456,2185697,6291456,2185729,6291456]),
    new Uint32Array([2231970,2232034,2232098,2232162,2232226,2232290,2232354,2232418,2232482,2232546,2232610,2232674,2232738,2232802,2232866,2232930]),
    new Uint32Array([2218625,2246402,2246466,2246530,2246594,2246657,2246689,2246689,2218657,2219681,2246721,2246753,2246785,2246818,2246881,2208481]),
    new Uint32Array([2197025,2197057,2197089,2197121,2197153,2197185,0,0,0,0,0,0,0,0,0,0]),
    new Uint32Array([2219137,2216961,2219169,2219201,2219233,2219265,2219297,2217025,2215041,2219329,2217057,2219361,2217089,2219393,2197153,2219426]),
    new Uint32Array([23068672,23068672,23068672,0,0,0,23068672,23068672,23068672,0,23068672,23068672,23068672,23068672,0,0]),
    new Uint32Array([2098305,2108321,2108289,2100865,2113153,2108481,2113345,2113441,2098209,2111137,2105505,2098241,2108353,2108417,2105825,2111713]),
    new Uint32Array([2243522,2243585,2243617,2243649,2243681,2210113,2243713,2243746,2243810,2243874,2243937,2243970,2244033,2244065,2244097,2244129]),
    new Uint32Array([2178017,6291456,2178049,6291456,2178081,6291456,2178113,6291456,2178145,6291456,2178177,6291456,2178209,6291456,2178241,6291456]),
    new Uint32Array([10553858,2165314,10518722,6291456,10518818,0,10518914,2130690,10519010,2130786,10519106,2130882,10519202,2165378,10554050,2165506]),
    new Uint32Array([0,0,2135491,2135587,2135683,2135779,2135875,2135971,2135971,2136067,2136163,2136259,2136355,2136355,2136451,2136547]),
    new Uint32Array([23068672,23068672,23068672,6291456,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,6291456,6291456]),
    new Uint32Array([0,0,0,0,0,0,0,0,0,0,0,0,6291456,6291456,6291456,6291456]),
    new Uint32Array([23068672,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),
    new Uint32Array([2220033,2220033,2220065,2220065,2220065,2220065,2220097,2220097,2220097,2220097,2220129,2220129,2220129,2220129,2220161,2220161]),
    new Uint32Array([6291456,6291456,6291456,0,0,0,0,0,0,0,6291456,6291456,6291456,6291456,6291456,6291456]),
    new Uint32Array([23068672,23068672,23068672,23068672,23068672,0,23068672,0,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672]),
    new Uint32Array([2100897,2100898,2100899,2150018,2100865,2100866,2100867,2100868,2150082,2108481,2109858,2109859,2105569,2105505,2098241,2105601]),
    new Uint32Array([2097217,2097505,2097505,2097505,2097505,2165570,2165570,2165634,2165634,2165698,2165698,2097858,2097858,0,0,2097152]),
    new Uint32Array([23068672,6291456,23068672,23068672,23068672,6291456,6291456,23068672,23068672,6291456,6291456,6291456,6291456,6291456,23068672,23068672]),
    new Uint32Array([23068672,23068672,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,0,0]),
    new Uint32Array([10503843,10503939,10504035,10504131,10504227,10504323,10504419,10504515,10504611,10504707,10504803,10504899,10504995,10491140,10491268,0]),
    new Uint32Array([2173697,2173729,2148801,2173761,2143969,2173793,2173825,2153473,2173857,2173889,2173921,2173953,2173985,2173761,2174017,2174049]),
    new Uint32Array([23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,0,23068672,23068672,23068672,23068672,23068672,23068672,23068672]),
    new Uint32Array([2134145,2097153,2134241,2105953,2132705,2130977,2160065,2131297,2162049,2133089,2160577,2133857,2235297,2220769,2235329,2235361]),
    new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,23068672,23068672,23068672,23068672,23068672,23068672,23068672]),
    new Uint32Array([2222401,2222433,2222465,10531394,2222497,2222529,2222561,0,2222593,2222625,2222657,2222689,2222721,2222753,2222785,0]),
    new Uint32Array([2184481,6291456,2184513,6291456,2184545,6291456,2184577,6291456,2184609,6291456,2184641,6291456,2184673,6291456,2184705,6291456]),
    new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,23068672,23068672,23068672,23068672,6291456,6291456,6291456,6291456,23068672,23068672]),
    new Uint32Array([6291456,6291456,6291456,6291456,6291456,23068672,23068672,0,0,0,0,0,0,0,0,0]),
    new Uint32Array([2105570,2156034,2126947,2156098,2153666,2127043,2127139,2156162,0,2127235,2156226,2156290,2156354,2156418,2127331,2127427]),
    new Uint32Array([2215905,2207041,2153185,2241569,2241601,2241633,2241665,2241697,2241730,2241793,2241825,2241857,2241889,2241921,2241954,2242017]),
    new Uint32Array([2203777,6291456,2203809,6291456,2203841,6291456,2203873,6291456,2203905,6291456,2173121,2180993,2181249,2203937,2181313,0]),
    new Uint32Array([2168577,6291456,2168609,6291456,2168641,6291456,2168673,6291456,2168705,6291456,2168737,6291456,2168769,6291456,2168801,6291456]),
    new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,0,0,6291456,23068672,23068672,6291456]),
    new Uint32Array([23068672,23068672,23068672,23068672,23068672,23068672,0,23068672,23068672,23068672,0,23068672,23068672,23068672,0,0]),
    new Uint32Array([2210113,2195521,2210145,2210177,2210209,2210241,2210273,2210305,2210337,2210369,2210401,2210433,2210465,2210497,2210529,2210561]),
    new Uint32Array([6291456,0,0,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,0]),
    new Uint32Array([2228706,2228770,2228834,2228898,2228962,2229026,2229090,2229154,2229218,2229282,2229346,2229410,2229474,2229538,2229602,2229666]),
    new Uint32Array([23068672,6291456,6291456,6291456,6291456,0,0,0,0,0,0,0,0,0,0,0]),
    new Uint32Array([6291456,6291456,6291456,0,0,0,0,0,0,0,0,0,0,0,0,6291456]),
    new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,0,6291456,6291456,6291456,6291456,18874368,18874368,18874368,0,0]),
    new Uint32Array([2133089,2133281,2133281,2133281,2133281,2160577,2160577,2160577,2160577,2097441,2097441,2097441,2097441,2133857,2133857,2133857]),
    new Uint32Array([6291456,0,0,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456]),
    new Uint32Array([6291456,6291456,6291456,6291456,6291456,0,0,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456]),
    new Uint32Array([2173825,2153473,2173857,2173889,2173921,2173953,2173985,2174017,2174017,2174049,2174081,2174113,2174145,2174177,2149057,2233089]),
    new Uint32Array([2178529,6291456,2178561,6291456,2178593,6291456,2178625,6291456,2178657,6291456,2178689,6291456,2178721,6291456,2178753,6291456]),
    new Uint32Array([2221025,2221025,2221057,2221057,2159329,2159329,2159329,2159329,2097217,2097217,2158914,2158914,2158978,2158978,2159042,2159042]),
    new Uint32Array([2208161,2208193,2208225,2208257,2194433,2208289,2208321,2208353,2208385,2208417,2208449,2208481,2208513,2208545,2208577,2208609]),
    new Uint32Array([2169217,6291456,2169249,6291456,2169281,6291456,2169313,6291456,2169345,6291456,2169377,6291456,2169409,6291456,2169441,6291456]),
    new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,0,0,6291456,6291456,6291456,6291456]),
    new Uint32Array([2133187,2133283,2133283,2133379,2133475,2133571,2133667,2133667,2133763,2133859,2133955,2134051,2134147,2134147,2134243,2134339]),
    new Uint32Array([2197697,2114113,2114209,2197729,2197761,2114305,2197793,2114401,2114497,2197825,2114593,2114689,2114785,2114881,2114977,0]),
    new Uint32Array([2193089,2193121,2193153,2193185,2117665,2117569,2193217,2193249,2193281,2193313,2193345,2193377,2193409,2193441,2193473,2193505]),
    new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,23068672,23068672,23068672,23068672,23068672]),
    new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,0,0,0]),
    new Uint32Array([6291456,6291456,6291456,0,0,0,0,0,0,0,0,0,0,0,0,0]),
    new Uint32Array([6291456,6291456,6291456,0,0,0,0,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456]),
    new Uint32Array([2184225,6291456,2184257,6291456,2184289,6291456,2184321,6291456,2184353,6291456,2184385,6291456,2184417,6291456,2184449,6291456]),
    new Uint32Array([2112577,2098177,2098305,2108321,2108289,2100865,2113153,2108481,2113345,2113441,2100833,6291456,6291456,6291456,6291456,6291456]),
    new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,23068672,23068672,23068672,23068672,23068672,23068672]),
    new Uint32Array([2098657,2098049,2200737,2123489,2123681,2200769,2098625,2100321,2098145,2100449,2098017,2098753,2200801,2200833,2200865,0]),
    new Uint32Array([23068672,23068672,23068672,0,0,0,0,0,0,0,0,23068672,23068672,23068672,23068672,23068672]),
    new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,23068672,23068672,23068672,23068672,23068672,0,0,0,0,0]),
    new Uint32Array([2098305,2108321,2108289,2100865,2113153,2108481,2113345,2113441,2098209,2111137,0,2098241,2108353,2108417,2105825,0]),
    new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,2181153,2105505,2181185,2167617,2180993]),
    new Uint32Array([2160002,2160066,2160130,2160194,2160258,2132066,2131010,2131106,2106018,2131618,2160322,2131298,2132034,2131938,2137410,2132226]),
    new Uint32Array([6291456,6291456,6291456,6291456,0,0,0,0,0,0,0,0,0,0,0,6291456]),
    new Uint32Array([2183617,6291456,2183649,6291456,2183681,6291456,2183713,6291456,2183745,6291456,2183777,6291456,2183809,6291456,2183841,6291456]),
    new Uint32Array([0,6291456,6291456,0,6291456,0,0,6291456,6291456,0,6291456,0,0,6291456,0,0]),
    new Uint32Array([2250977,2251009,2251041,2251073,2195009,2251106,2251169,2251201,2251233,2251265,2251297,2251330,2251394,2251457,2251489,2251521]),
    new Uint32Array([2205729,2205761,2205793,2205825,2205857,2205889,2205921,2205953,2205985,2206017,2206049,2206081,2206113,2206145,2206177,2206209]),
    new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,0,0,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456]),
    new Uint32Array([2143170,2168993,6291456,2169025,6291456,2169057,6291456,2169089,6291456,2143234,2169121,6291456,2169153,6291456,2169185,6291456]),
    new Uint32Array([23068672,23068672,2190689,6291456,0,0,0,0,0,6291456,6291456,6291456,6291456,6291456,6291456,6291456]),
    new Uint32Array([2248706,2248769,2248801,2248833,2248865,2248897,2248929,2248962,2249026,2249090,2249154,2240705,2249217,2249249,2249281,2249313]),
    new Uint32Array([10485857,6291456,6291456,6291456,6291456,6291456,6291456,6291456,10495394,6291456,2098209,6291456,6291456,2097152,6291456,10531394]),
    new Uint32Array([0,6291456,6291456,6291456,6291456,6291456,6291456,0,0,6291456,6291456,6291456,6291456,6291456,6291456,0]),
    new Uint32Array([14680064,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456]),
    new Uint32Array([2173985,2173953,2148481,2173601,2173633,2173665,2173697,2173729,2148801,2173761,2143969,2173793,2173825,2153473,2173857,2173889]),
    new Uint32Array([6291456,2186977,6291456,6291456,6291456,6291456,6291456,10537858,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456]),
    new Uint32Array([2209601,2209633,2209665,2209697,2209729,2209761,2209793,2209825,2209857,2209889,2209921,2209953,2209985,2210017,2210049,2210081]),
    new Uint32Array([10501539,10501635,10501731,10501827,10501923,10502019,2098209,2111137,2105505,2098241,2108353,2108417,2105825,2111713,2100897,2111905]),
    new Uint32Array([2173697,2173729,2148801,2173761,2143969,2173793,2173825,2153473,2173857,2173889,2173921,2173953,2173985,2174017,2174017,2174049]),
    new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,0,6291456,6291456,6291456,6291456,0,0]),
    new Uint32Array([6291456,6291456,23068672,23068672,23068672,0,0,0,0,0,0,0,0,0,0,0]),
    new Uint32Array([2194561,2194593,2194625,2119777,2119873,2194657,2194689,2194721,2194753,2194785,2194817,2194849,2194881,2194913,2194945,2194977]),
    new Uint32Array([2113153,2108481,2113345,2113441,2098209,2111137,2105505,2098241,2108353,2108417,2105825,2111713,2100897,2111905,2105473,2105569]),
    new Uint32Array([2222818,2222882,2222946,2223010,2223074,2223138,2223202,2223266,2223330,2223394,2223458,2223522,2223586,2223650,2223714,2223778]),
    new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,23068672]),
    new Uint32Array([0,2179553,2179585,2179617,2179649,2144001,2179681,2179713,2179745,2179777,2179809,2156705,2179841,2156833,2179873,2179905]),
    new Uint32Array([6291456,23068672,6291456,2145602,23068672,23068672,23068672,23068672,23068672,23068672,0,23068672,23068672,6291456,0,0]),
    new Uint32Array([2196513,2196545,2196577,2196609,2196641,2196673,2196705,2196737,2196769,2196801,2196833,2196865,2196897,2196929,2196961,2196993]),
    new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,0,0,0,6291456,6291456,6291456,6291456,6291456,6291456,6291456]),
    new Uint32Array([2177281,6291456,2177313,6291456,2177345,6291456,2177377,6291456,2177409,6291456,2177441,6291456,2177473,6291456,2177505,6291456]),
    new Uint32Array([2187137,2221473,2221505,2221537,2221569,6291456,6291456,10610209,10610241,10537986,10537986,10537986,10537986,10609857,10609857,10609857]),
    new Uint32Array([2243009,2243041,2216033,2243074,2243137,2243169,2243201,2219617,2243233,2243265,2243297,2243329,2243362,2243425,2243457,2243489]),
    new Uint32Array([10485857,10485857,10485857,10485857,10485857,10485857,10485857,10485857,10485857,10485857,10485857,2097152,4194304,4194304,0,0]),
    new Uint32Array([2143042,6291456,2143106,2143106,2168833,6291456,2168865,6291456,6291456,2168897,6291456,2168929,6291456,2168961,6291456,2143170]),
    new Uint32Array([6291456,6291456,23068672,23068672,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456]),
    new Uint32Array([2204193,2204225,2204257,2204289,2204321,2204353,2204385,2204417,2204449,2204481,2204513,2204545,2204577,2204609,2204641,2204673]),
    new Uint32Array([2202753,6291456,2202785,6291456,2202817,6291456,2202849,6291456,2202881,6291456,2202913,6291456,2202945,6291456,2202977,6291456]),
    new Uint32Array([23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,0,0,23068672,23068672,23068672,23068672,23068672]),
    new Uint32Array([2108353,2108417,2105825,2111713,2100897,2111905,2105473,2105569,2105601,2112289,2108193,2112481,2112577,2098177,2098305,2108321]),
    new Uint32Array([2147394,2147458,2147522,2147586,2147650,2147714,2147778,2147842,2147394,2147458,2147522,2147586,2147650,2147714,2147778,2147842]),
    new Uint32Array([2253313,2253346,2253409,2253441,2253473,2253505,2253537,2253569,2253601,2253634,2219393,2253697,2253729,2253761,2253793,2253825]),
    new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,23068672,23068672,23068672,23068672,6291456,6291456]),
    new Uint32Array([2162562,2162626,2131362,2162690,2159938,2160002,2162754,2162818,2160130,2162882,2160194,2160258,2160834,2160898,2161026,2161090]),
    new Uint32Array([2175361,2175393,2175425,2175457,2175489,2175521,2175553,2175585,2175617,2175649,2175681,2175713,2175745,2175777,2175809,2175841]),
    new Uint32Array([2253858,2253921,2253954,2254018,2254082,2196737,2254145,2196865,2254177,2254209,2254241,2254273,2197025,2254306,0,0]),
    new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,2202113,2204129,2188705,2204161]),
    new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,6291456,0,6291456,0,6291456,6291456,6291456,6291456,0,0]),
    new Uint32Array([2173985,2174017,2174017,2174049,2174081,2174113,2174145,2174177,2149057,2233089,2173697,2173761,2173793,2174113,2173985,2173953]),
    new Uint32Array([2101569,2101697,2101825,2101953,2102081,2102209,2100833,2100737,2098337,2101441,2101569,2101697,2101825,2101953,2102081,2102209]),
    new Uint32Array([2108289,2100865,2113153,2108481,2113345,2113441,2098209,2111137,2105505,2098241,0,2108417,0,2111713,2100897,2111905]),
    new Uint32Array([23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,0,0,0,0,0,0,0,0]),
    new Uint32Array([2175425,2175489,2175809,2175905,2175937,2175937,2176193,2176417,2180865,0,0,0,0,0,0,0]),
    new Uint32Array([6291456,6291456,6291456,6291456,2143298,2143298,2143298,2143362,2143362,2143362,2143426,2143426,2143426,2171105,6291456,2171137]),
    new Uint32Array([2120162,2120258,2151618,2151682,2151746,2151810,2151874,2151938,2152002,2120035,2120131,2120227,2152066,2120323,2152130,2120419]),
    new Uint32Array([23068672,23068672,23068672,23068672,23068672,23068672,0,0,0,0,0,23068672,23068672,23068672,23068672,23068672]),
    new Uint32Array([23068672,23068672,23068672,23068672,23068672,0,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456]),
    new Uint32Array([2195361,2142433,2236065,2236097,2236129,2236161,2118241,2117473,2236193,2236225,2236257,2236289,0,0,0,0]),
    new Uint32Array([2189281,6291456,2189313,6291456,2189345,6291456,2189377,6291456,2189409,6291456,2189441,6291456,2189473,6291456,2189505,6291456]),
    new Uint32Array([6291456,6291456,2145922,6291456,6291456,6291456,6291456,2145986,6291456,6291456,6291456,6291456,2146050,6291456,6291456,6291456]),
    new Uint32Array([2100833,2100737,2098337,2101441,2101569,2101697,2101825,2101953,2102081,2102209,10502113,10562017,10610401,10502177,10610433,10538049]),
    new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,0,2186401,0,2186433,0,2186465,0,2186497]),
    new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,0,0,0,23068672,23068672,23068672]),
    new Uint32Array([0,0,2198241,2198273,2198305,2198337,2198369,2198401,0,0,2198433,2198465,2198497,0,0,0]),
    new Uint32Array([6291456,0,6291456,6291456,6291456,6291456,0,0,6291456,6291456,6291456,6291456,6291456,6291456,6291456,0]),
    new Uint32Array([6291456,6291456,6291456,6291456,6291456,0,6291456,0,23068672,23068672,23068672,23068672,23068672,23068672,0,0]),
    new Uint32Array([6291456,6291456,6291456,6291456,0,6291456,6291456,6291456,6291456,6291456,0,0,23068672,6291456,23068672,23068672]),
    new Uint32Array([0,2105921,2097729,0,2097377,0,0,2106017,2133281,2097505,2105889,0,2097697,2135777,2097633,2097441]),
    new Uint32Array([2197889,2197921,2197953,2197985,2198017,2198049,2198081,2198113,2198145,2198177,2198209,2198241,2198273,2198305,2198337,2198369]),
    new Uint32Array([2132514,2132610,2160386,2133090,2133186,2160450,2160514,2133282,2160578,2133570,2106178,2160642,2133858,2160706,2160770,2134146]),
    new Uint32Array([6291456,6291456,6291456,6291456,6291456,23068672,23068672,0,0,0,0,6291456,6291456,6291456,6291456,6291456]),
    new Uint32Array([6291456,23068672,23068672,6291456,23068672,23068672,6291456,23068672,0,0,0,0,0,0,0,0]),
    new Uint32Array([2184737,6291456,2184769,6291456,2184801,6291456,2184833,6291456,2184865,6291456,2184897,6291456,2184929,6291456,2184961,6291456]),
    new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,6291456,0,6291456,0,6291456,6291456,6291456,6291456,0,6291456]),
    new Uint32Array([6291456,6291456,0,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456]),
    new Uint32Array([23068672,23068672,23068672,23068672,6291456,23068672,23068672,23068672,6291456,23068672,23068672,23068672,23068672,23068672,0,0]),
    new Uint32Array([6291456,6291456,6291456,2186753,6291456,6291456,6291456,6291456,2186785,2186817,2186849,2173569,2186881,10496355,10495395,10575521]),
    new Uint32Array([0,0,2097729,0,0,0,0,2106017,0,2097505,0,2097185,0,2135777,2097633,2097441]),
    new Uint32Array([2189537,6291456,2189569,6291456,2189601,6291456,2189633,6291456,2189665,6291456,2189697,6291456,2189729,6291456,2189761,6291456]),
    new Uint32Array([2202497,6291456,2202529,6291456,2202561,6291456,2202593,6291456,2202625,6291456,2202657,6291456,2202689,6291456,2202721,6291456]),
    new Uint32Array([2245217,2218369,2245249,2245282,2245345,2245377,2245410,2245474,2245537,2245569,2245601,2245633,2245665,2245665,2245697,2245729]),
    new Uint32Array([6291456,0,23068672,23068672,0,0,0,0,0,0,0,0,0,0,0,0]),
    new Uint32Array([6291456,0,0,0,0,0,0,23068672,0,0,0,0,0,0,0,0]),
    new Uint32Array([6291456,6291456,6291456,6291456,6291456,23068672,6291456,23068672,6291456,23068672,6291456,6291456,6291456,6291456,23068672,23068672]),
    new Uint32Array([0,6291456,6291456,6291456,6291456,6291456,6291456,0,0,0,0,0,0,0,0,0]),
    new Uint32Array([2097281,2105921,2097729,2106081,2097377,2097601,2162337,2106017,2133281,2097505,0,2097185,2097697,2135777,2097633,2097441]),
    new Uint32Array([2176641,6291456,2176673,6291456,2176705,6291456,2176737,6291456,2176769,6291456,2176801,6291456,2176833,6291456,2176865,6291456]),
    new Uint32Array([2174145,2174177,2149057,2233089,2173697,2173761,2173793,2174113,2173985,2173953,2174369,2174369,0,0,2100833,2100737]),
    new Uint32Array([2116513,2190817,2190849,2190881,2190913,2190945,2116609,2190977,2191009,2191041,2191073,2117185,2191105,2191137,2191169,2191201]),
    new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,0,0,0,0,0,6291456,6291456,6291456]),
    new Uint32Array([0,0,0,0,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672]),
    new Uint32Array([23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,6291456]),
    new Uint32Array([2167617,2167649,2167681,2167713,2167745,2167777,2167809,6291456,2167841,2167873,2167905,2167937,2167969,2168001,2168033,4240130]),
    new Uint32Array([2165122,2163970,2164034,2164098,2164162,2164226,2164290,2164354,2164418,2164482,2164546,2133122,2134562,2132162,2132834,2136866]),
    new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,0,0,2186209,2186241,2186273,2186305,2186337,2186369,0,0]),
    new Uint32Array([2112481,2112577,2098177,2098305,2108321,2108289,2100865,2113153,2108481,2113345,2113441,14680064,14680064,14680064,14680064,14680064]),
    new Uint32Array([0,0,23068672,6291456,0,6291456,6291456,6291456,6291456,6291456,6291456,0,0,0,6291456,6291456]),
    new Uint32Array([0,10537921,10610689,10610273,10610497,10610529,10610305,10610721,10489601,10489697,10610337,10575617,10554529,2221761,2197217,10496577]),
    new Uint32Array([2105473,2105569,2105601,2112289,0,2112481,2112577,2098177,2098305,2108321,2108289,2100865,2113153,2108481,2113345,2113441]),
    new Uint32Array([2100897,2111905,2105473,2105569,2105601,2112289,2108193,2112481,2112577,2098177,2098305,2108321,2108289,2100865,2113153,2108481]),
    new Uint32Array([2125346,2153410,2153474,2127394,2153538,2153602,2153666,2153730,2105507,2105476,2153794,2153858,2153922,2153986,2154050,2105794]),
    new Uint32Array([2200449,2119681,2200481,2153313,2199873,2199905,2199937,2200513,2200545,2200577,2200609,2119105,2119201,2119297,2119393,2119489]),
    new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,2175777,6291456,6291456,6291456,6291456,6291456,6291456,6291456]),
    new Uint32Array([2222273,2197217,2221473,2221505,2221089,2222305,2200865,2099681,2104481,2222337,2099905,2120737,2222369,2103713,2100225,2098785]),
    new Uint32Array([2201377,6291456,2201409,6291456,2201441,6291456,2201473,6291456,2201505,6291456,2201537,6291456,2201569,6291456,6291456,23068672]),
    new Uint32Array([2174081,2174113,2174145,2174177,2149057,2233057,2148481,2173601,2173633,2173665,2173697,2173729,2148801,2173761,2143969,2173793]),
    new Uint32Array([2200897,6291456,2200929,6291456,2200961,6291456,2200993,6291456,2201025,6291456,2180865,6291456,2201057,6291456,2201089,6291456]),
    new Uint32Array([0,0,0,0,0,23068672,23068672,0,6291456,6291456,6291456,0,0,0,0,0]),
    new Uint32Array([2161154,2161410,2138658,2161474,2161538,2097666,2097186,2097474,2162946,2132450,2163010,2163074,2136162,2163138,2161666,2161730]),
    new Uint32Array([2148481,2173601,2173633,2173665,2173697,2173729,2148801,2173761,2143969,2173793,2173825,2153473,2173857,2173889,2173921,2173953]),
    new Uint32Array([0,0,0,0,0,0,23068672,23068672,0,0,0,0,2145410,2145474,0,6291456]),
    new Uint32Array([2244161,2216065,2212769,2244193,2244225,2244257,2244290,2244353,2244385,2244417,2244449,2218273,2244481,2244514,2244577,2244609]),
    new Uint32Array([2125730,2125699,2125795,2125891,2125987,2154114,2154178,2154242,2154306,2154370,2154434,2154498,2126082,2126178,2126274,2126083]),
    new Uint32Array([2237665,2237697,2237697,2237697,2237730,2237793,2237825,2237857,2237890,2237953,2237985,2238017,2238049,2238081,2238113,2238145]),
    new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,2150146,6291456,6291456,6291456]),
    new Uint32Array([23068672,23068672,23068672,23068672,23068672,0,0,23068672,23068672,0,0,23068672,23068672,23068672,0,0]),
    new Uint32Array([2214369,2238593,2238625,2238657,2238689,2238721,2238753,2238785,2238817,2238850,2238913,2238945,2238977,2235457,2239009,2239041]),
    new Uint32Array([6291456,6291456,6291456,6291456,6291456,0,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,0,0]),
    new Uint32Array([2252066,2252130,2252193,2252225,2252257,2252290,2252353,2252385,2252417,2252449,2252481,2252513,2252545,2252578,2252641,2252673]),
    new Uint32Array([2197697,2114113,2114209,2197729,2197761,2114305,2197793,2114401,2114497,2197825,2114593,2114689,2114785,2114881,2114977,2197857]),
    new Uint32Array([2224866,2224930,2224994,2225058,2225122,2225186,2225250,2225314,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456]),
    new Uint32Array([2219490,2219554,2219617,2219649,2219681,2219714,2219778,2219842,2219905,2219937,0,0,0,0,0,0]),
    new Uint32Array([6291456,23068672,23068672,23068672,0,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,0,0,6291456]),
    new Uint32Array([2113345,2113441,2098209,2111137,2105505,2098241,2108353,2108417,2105825,2111713,2100897,2111905,2105473,2105569,2105601,2112289]),
    new Uint32Array([2174081,2174113,2174145,2174177,2149057,2233089,2173697,2173761,2173793,2174113,2173985,2173953,2148481,2173601,2173633,2173665]),
    new Uint32Array([2220161,2220161,2220193,2220193,2220193,2220193,2220225,2220225,2220225,2220225,2220257,2220257,2220257,2220257,2220289,2220289]),
    new Uint32Array([2192673,2192705,2192737,2192769,2192801,2192833,2192865,2118049,2192897,2117473,2117761,2192929,2192961,2192993,2193025,2193057]),
    new Uint32Array([2179297,6291456,2179329,6291456,2179361,6291456,2179393,6291456,2179425,6291456,2179457,6291456,2179489,6291456,2179521,6291456]),
    new Uint32Array([6291456,6291456,6291456,23068672,6291456,6291456,6291456,0,0,0,0,0,0,0,0,0]),
    new Uint32Array([2235745,2235777,2193633,2235809,2235841,2235873,2235905,2235937,2235969,2116513,2116705,2236001,2200513,2199905,2200545,2236033]),
    new Uint32Array([2113153,2108481,2113345,2113441,2232993,2233025,0,0,2148481,2173601,2173633,2173665,2173697,2173729,2148801,2173761]),
    new Uint32Array([2170593,6291456,2170625,6291456,2170657,6291456,2170689,2170721,6291456,2170753,6291456,6291456,2170785,6291456,2170817,2170849]),
    new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,2166786,2166850,0,0,0,0]),
    new Uint32Array([23068672,6291456,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),
    new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,0,6291456,6291456]),
    new Uint32Array([2100833,2100737,2098337,2101441,2101569,2101697,2101825,2101953,2102081,2102209,10575617,2187041,10502177,10489601,10489697,0]),
    new Uint32Array([0,0,0,0,0,0,0,0,0,0,0,6291456,6291456,6291456,6291456,6291456]),
    new Uint32Array([2134562,2132162,2132834,2136866,2136482,2164610,2164674,2164738,2164802,2132802,2132706,2164866,2132898,2164930,2164994,2165058]),
    new Uint32Array([6291456,6291456,2098337,2101441,10531458,2153473,6291456,6291456,10531522,2100737,2108193,6291456,2106499,2106595,2106691,6291456]),
    new Uint32Array([23068672,23068672,23068672,23068672,23068672,23068672,23068672,0,0,0,0,0,0,0,0,0]),
    new Uint32Array([2233122,2233186,2233250,2233314,2233378,2233442,2233506,2233570,2233634,2233698,2233762,2233826,2233890,2233954,2234018,2234082]),
    new Uint32Array([23068672,6291456,23068672,23068672,23068672,6291456,6291456,23068672,23068672,23068672,23068672,23068672,23068672,23068672,6291456,6291456]),
    new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,0,0]),
    new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,0,0,0,0,6291456,6291456]),
    new Uint32Array([6291456,6291456,6291456,6291456,6291456,0,0,0,0,0,0,0,0,0,0,0]),
    new Uint32Array([2205217,2205249,2205281,2205313,2205345,2205377,2205409,2205441,2205473,2205505,2205537,2205569,2205601,2205633,2205665,2205697]),
    new Uint32Array([6291456,0,6291456,0,0,0,6291456,6291456,6291456,6291456,0,0,23068672,6291456,23068672,23068672]),
    new Uint32Array([2173601,2173761,2174081,2173569,2174241,2174113,2173953,6291456,2174305,6291456,2174337,6291456,2174369,6291456,2174401,6291456]),
    new Uint32Array([6291456,23068672,23068672,23068672,0,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,0,6291456,6291456]),
    new Uint32Array([2152450,2152514,2099653,2104452,2099813,2122243,2099973,2152578,2122339,2122435,2122531,2122627,2122723,2104580,2122819,2152642]),
    new Uint32Array([2236385,2236417,2236449,2236482,2236545,2215425,2236577,2236609,2236641,2236673,2215457,2236705,2236737,2236770,2215489,2236833]),
    new Uint32Array([2163394,2159746,2163458,2131362,2163522,2160130,2163778,2132226,2163842,2132898,2163906,2161410,2138658,2097666,2136162,2163650]),
    new Uint32Array([2218721,2246913,2246946,2216385,2247010,2247074,2215009,2247137,2247169,2216481,2247201,2247233,2247266,2247330,2247330,0]),
    new Uint32Array([2129730,2129762,2129858,2129731,2129827,2156482,2156482,0,0,0,0,0,0,0,0,0]),
    new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,0,0,0,6291456,6291456,6291456]),
    new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,0,6291456,0,0,0,0,0,6291456,0,0]),
    new Uint32Array([2203969,2204001,2181377,2204033,2204065,6291456,2204097,6291456,0,0,0,0,0,0,0,0]),
    new Uint32Array([2169473,6291456,2169505,6291456,2169537,6291456,2169569,6291456,2169601,6291456,2169633,6291456,2169665,6291456,2169697,6291456]),
    new Uint32Array([2141542,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456]),
    new Uint32Array([2220801,2220801,2220801,2220801,2220833,2220833,2220865,2220865,2220865,2220865,2220897,2220897,2220897,2220897,2139873,2139873]),
    new Uint32Array([0,0,0,0,0,23068672,23068672,0,0,0,0,0,0,0,6291456,0]),
    new Uint32Array([2214849,2218433,2218465,2218497,2218529,2218561,2214881,2218593,2218625,2218657,2218689,2218721,2218753,2216545,2218785,2218817]),
    new Uint32Array([23068672,23068672,23068672,23068672,0,0,0,0,0,0,0,0,0,0,0,6291456]),
    new Uint32Array([2136482,2164610,2164674,2164738,2164802,2132802,2132706,2164866,2132898,2164930,2164994,2165058,2165122,2132802,2132706,2164866]),
    new Uint32Array([2207649,2207681,2207713,2207745,2207777,2207809,2207841,2207873,2207905,2207937,2207969,2208001,2208033,2208065,2208097,2208129]),
    new Uint32Array([2123683,2105092,2152706,2123779,2105220,2152770,2100453,2098755,2123906,2124002,2124098,2124194,2124290,2124386,2124482,2124578]),
    new Uint32Array([6291456,6291456,6291456,6291456,0,0,0,6291456,0,0,0,0,0,0,0,10485857]),
    new Uint32Array([6291456,6291456,6291456,6291456,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672]),
    new Uint32Array([10508163,10508259,10508355,10508451,2200129,2200161,2192737,2200193,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456]),
    new Uint32Array([2203553,6291456,2203585,6291456,6291456,6291456,2203617,6291456,2203649,6291456,2203681,6291456,2203713,6291456,2203745,6291456]),
    new Uint32Array([18884449,18884065,23068672,18884417,18884034,18921185,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,18874368]),
    new Uint32Array([2247393,2247426,2247489,2247521,2247553,2247586,2247649,2247681,2247713,2247745,2247777,2247810,2247873,2247905,2247937,2247969]),
    new Uint32Array([6291456,6291456,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,6291456,23068672]),
    new Uint32Array([2134145,2097153,2134241,0,2132705,2130977,2160065,2131297,0,2133089,2160577,2133857,2235297,0,2235329,0]),
    new Uint32Array([2182593,6291456,2182625,6291456,2182657,6291456,2182689,6291456,2182721,6291456,2182753,6291456,2182785,6291456,2182817,6291456]),
    new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,2102402,2102403,6291456,2110050]),
    new Uint32Array([2149890,2108323,2149954,6291456,2113441,6291456,2149057,6291456,2113441,6291456,2105473,2167265,2111137,2105505,6291456,2108353]),
    new Uint32Array([2219105,2219137,2195233,2251554,2251617,2251649,2251681,2251713,2251746,2251810,2251873,2251905,2251937,2251970,2252033,2219169]),
    new Uint32Array([2203009,6291456,2203041,6291456,2203073,6291456,2203105,6291456,2203137,6291456,2203169,6291456,2203201,6291456,2203233,6291456]),
    new Uint32Array([2128195,2128291,2128387,2128483,2128579,2128675,2128771,2128867,2128963,2129059,2129155,2129251,2129347,2129443,2129539,2129635]),
    new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,2140964,2141156,2140966,2141158,2141350]),
    new Uint32Array([0,0,0,0,0,0,0,0,0,0,0,23068672,23068672,23068672,23068672,23068672]),
    new Uint32Array([23068672,23068672,23068672,23068672,23068672,23068672,23068672,6291456,6291456,6291456,6291456,23068672,23068672,23068672,23068672,23068672]),
    new Uint32Array([2225378,2225442,2225506,2225570,2225634,2225698,2225762,2225826,2225890,2225954,2226018,2226082,2226146,2226210,2226274,2226338]),
    new Uint32Array([23068672,23068672,23068672,23068672,23068672,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456]),
    new Uint32Array([23068672,23068672,23068672,23068672,0,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,0,6291456,6291456]),
    new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,0,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456]),
    new Uint32Array([2112577,2098177,2098305,2108321,2108289,2100865,2113153,2108481,2113345,2113441,2098209,2111137,2105505,2098241,2108353,2108417]),
    new Uint32Array([2108353,2108417,0,2105601,2108193,2157121,2157313,2157377,2157441,2100897,6291456,2108419,2173953,2173633,2173633,2173953]),
    new Uint32Array([2111713,2173121,2111905,2098177,2173153,2173185,2173217,2113153,2113345,6291456,6291456,6291456,6291456,6291456,6291456,6291456]),
    new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,0,6291456,6291456,6291456,6291456,2190753]),
    new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,2197249,6291456,2117377,2197281,2197313,6291456,6291456,6291456,6291456,6291456]),
    new Uint32Array([6291456,0,0,0,0,0,0,23068672,0,0,0,0,0,6291456,6291456,6291456]),
    new Uint32Array([2098337,2101441,2101569,2101697,2101825,2101953,2102081,2102209,2100833,2100737,2098337,2101441,2101569,2101697,2101825,2101953]),
    new Uint32Array([23068672,23068672,23068672,23068672,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,0,0,0]),
    new Uint32Array([0,0,0,0,0,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456]),
    new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,0,0,23068672,23068672,23068672]),
    new Uint32Array([2173281,6291456,2173313,6291456,2173345,6291456,2173377,6291456,0,0,10532546,6291456,6291456,6291456,10562017,2173441]),
    new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,23068672,23068672,0,0]),
    new Uint32Array([23068672,23068672,23068672,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456]),
    new Uint32Array([23068672,23068672,23068672,23068672,23068672,23068672,23068672,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456]),
    new Uint32Array([2159426,2159490,2159554,2159362,2159618,2159682,2139522,2136450,2159746,2159810,2159874,2130978,2131074,2131266,2131362,2159938]),
    new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,6291456,0,0,0,0,6291456,6291456,6291456,6291456,6291456]),
    new Uint32Array([2203233,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,2203265,6291456,2203297,6291456,2203329,2203361,6291456]),
    new Uint32Array([6291456,6291456,2148418,2148482,2148546,0,6291456,2148610,2186529,2186561,2148417,2148545,2148482,10495778,2143969,10495778]),
    new Uint32Array([2134146,2139426,2160962,2134242,2161218,2161282,2161346,2161410,2138658,2134722,2134434,2134818,2097666,2097346,2097698,2105986]),
    new Uint32Array([2198881,2198913,2198945,2198977,2199009,2199041,2199073,2199105,2199137,2199169,2199201,2199233,2199265,2199297,2199329,2199361]),
    new Uint32Array([0,23068672,23068672,23068672,0,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,0,6291456]),
    new Uint32Array([10610561,2098209,2111137,2105505,2098241,2108353,2108417,2105825,2111713,2100897,2111905,2105473,2105569,2105601,2112289,2108193]),
    new Uint32Array([2183873,6291456,2183905,6291456,2183937,6291456,2183969,6291456,2184001,6291456,2184033,6291456,2184065,6291456,2184097,6291456]),
    new Uint32Array([2244642,2244706,2244769,2244801,2218305,2244833,2244865,2244897,2244929,2244961,2244993,2245026,2245089,2245122,2245185,0]),
    new Uint32Array([6291456,6291456,2116513,2116609,2116705,2116801,2199873,2199905,2199937,2199969,2190913,2200001,2200033,2200065,2200097,2191009]),
    new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,0,0,2180673,2180705,2180737,2180769,2180801,2180833,0,0]),
    new Uint32Array([2098081,2099521,2099105,2120705,2098369,2120801,2103361,2097985,2098433,2121377,2121473,2099169,2099873,2098401,2099393,2152609]),
    new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,2150402]),
    new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,0,0,2145666,2145730,6291456,6291456]),
    new Uint32Array([2173921,2173953,2173985,2173761,2174017,2174049,2174081,2174113,2174145,2174177,2149057,2233057,2148481,2173601,2173633,2173665]),
    new Uint32Array([2187073,6291456,6291456,6291456,6291456,2098241,2098241,2108353,2100897,2111905,6291456,6291456,6291456,6291456,6291456,6291456]),
    new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,2102404,6291456,6291456,6291456]),
    new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,6291456,2100612,6291456,6291456,6291456,6291456,6291456,6291456,6291456,10485857]),
    new Uint32Array([2149057,2233057,2148481,2173601,2173633,2173665,2173697,2173729,2148801,2173761,2143969,2173793,2173825,2153473,2173857,2173889]),
    new Uint32Array([2217697,2217729,2217761,2217793,2217825,2217857,2217889,2217921,2217953,2215873,2217985,2215905,2218017,2218049,2218081,2218113]),
    new Uint32Array([2211233,2218849,2216673,2218881,2218913,2218945,2218977,2219009,2216833,2219041,2215137,2219073,2216865,2209505,2219105,2216897]),
    new Uint32Array([2240097,2240129,2240161,2240193,2240225,2240257,2240289,2240321,2240353,2240386,2240449,2240481,2240513,2240545,2207905,2240578]),
    new Uint32Array([6291456,6291456,2202273,6291456,2202305,6291456,2202337,6291456,2202369,6291456,2202401,6291456,2202433,6291456,2202465,6291456]),
    new Uint32Array([0,23068672,23068672,18923394,23068672,18923458,18923522,18884099,18923586,18884195,23068672,23068672,23068672,23068672,23068672,23068672]),
    new Uint32Array([2201121,6291456,2201153,6291456,2201185,6291456,2201217,6291456,2201249,6291456,2201281,6291456,2201313,6291456,2201345,6291456]),
    new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,0,0,0,6291456,6291456]),
    new Uint32Array([2211041,2211073,2211105,2211137,2211169,2211201,2211233,2211265,2211297,2211329,2211361,2211393,2211425,2211457,2211489,2211521]),
    new Uint32Array([2181825,6291456,2181857,6291456,2181889,6291456,2181921,6291456,2181953,6291456,2181985,6291456,2182017,6291456,2182049,6291456]),
    new Uint32Array([2162337,2097633,2097633,2097633,2097633,2132705,2132705,2132705,2132705,2097153,2097153,2097153,2097153,2133089,2133089,2133089]),
    new Uint32Array([6291456,6291456,6291456,6291456,0,0,0,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456]),
    new Uint32Array([6291456,2148545,6291456,2173473,6291456,2148865,6291456,2173505,6291456,2173537,6291456,2173569,6291456,2149121,0,0]),
    new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,0,0,0,0,0,0,0,0,0,0]),
    new Uint32Array([23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,6291456,6291456,0,6291456,6291456]),
    new Uint32Array([6291456,6291456,6291456,6291456,23068672,6291456,6291456,6291456,6291456,6291456,6291456,6291456,0,0,0,0]),
    new Uint32Array([2148801,2173761,2143969,2173793,2173825,2153473,2173857,2173889,2173921,2173953,2173985,2174017,2174017,2174049,2174081,2174113]),
    new Uint32Array([23068672,23068672,23068672,23068672,23068672,23068672,23068672,0,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672]),
    new Uint32Array([2207137,2207169,2207201,2207233,2207265,2207297,2207329,2207361,2207393,2207425,2207457,2207489,2207521,2207553,2207585,2207617]),
    new Uint32Array([6291456,6291456,23068672,23068672,23068672,6291456,6291456,0,23068672,23068672,0,0,0,0,0,0]),
    new Uint32Array([2198401,2198433,2198465,2198497,0,2198529,2198561,2198593,2198625,2198657,2198689,2198721,2198753,2198785,2198817,2198849]),
    new Uint32Array([2105505,2098241,2108353,2108417,2105825,2111713,2100897,2111905,2105473,2105569,2105601,2112289,2108193,2112481,2112577,2098177]),
    new Uint32Array([23068672,23068672,23068672,23068672,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,23068672,0,0]),
    new Uint32Array([2216385,2118721,2216417,2216449,2216481,2216513,2216545,2211233,2216577,2216609,2216641,2216673,2216705,2216737,2216737,2216769]),
    new Uint32Array([2216801,2216833,2216865,2216897,2216929,2216961,2216993,2215169,2217025,2217057,2217089,2217121,2217154,2217217,0,0]),
    new Uint32Array([2210593,2191809,2210625,2210657,2210689,2210721,2210753,2210785,2210817,2210849,2191297,2210881,2210913,2210945,2210977,2211009]),
    new Uint32Array([0,0,2105825,0,0,2111905,2105473,0,0,2112289,2108193,2112481,2112577,0,2098305,2108321]),
    new Uint32Array([0,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456]),
    new Uint32Array([0,2097153,2134241,0,2132705,0,0,2131297,0,2133089,0,2133857,0,2220769,0,2235361]),
    new Uint32Array([14680064,14680064,14680064,14680064,14680064,14680064,14680064,14680064,14680064,14680064,14680064,14680064,14680064,6291456,6291456,14680064]),
    new Uint32Array([23068672,23068672,6291456,6291456,6291456,6291456,6291456,6291456,0,0,0,0,0,0,0,0]),
    new Uint32Array([2171873,6291456,2171905,6291456,2171937,6291456,2171969,6291456,2172001,6291456,2172033,6291456,2172065,6291456,2172097,6291456]),
    new Uint32Array([2220929,2220929,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456]),
    new Uint32Array([2133857,2134145,2134145,2134145,2134145,2134241,2134241,2134241,2134241,2105889,2105889,2105889,2105889,2097185,2097185,2097185]),
    new Uint32Array([2173697,2173761,2173793,2174113,2173985,2173953,2148481,2173601,2173633,2173665,2173697,2173729,2148801,2173761,2143969,2173793]),
    new Uint32Array([0,0,0,0,0,0,0,0,0,0,0,0,10499619,10499715,10499811,10499907]),
    new Uint32Array([0,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672]),
    new Uint32Array([6291456,0,0,0,0,0,0,0,0,0,0,0,0,0,0,23068672]),
    new Uint32Array([6291456,6291456,6291456,6291456,0,0,0,0,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456]),
    new Uint32Array([23068672,23068672,23068672,23068672,23068672,23068672,0,0,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672]),
    new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,0,6291456,6291456,0,6291456]),
    new Uint32Array([23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,6291456,6291456,6291456]),
    new Uint32Array([23068672,23068672,23068672,23068672,23068672,0,23068672,23068672,23068672,0,23068672,23068672,23068672,23068672,6291456,6291456]),
    new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,0,0,0,6291456,23068672,23068672]),
    new Uint32Array([23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,0,0,0,6291456,6291456,6291456,6291456,6291456]),
    new Uint32Array([6291456,23068672,23068672,23068672,23068672,23068672,23068672,23068672,2144322,2144386,2144450,2144514,2144578,2144642,2144706,2144770]),
    new Uint32Array([23068672,23068672,23068672,6291456,6291456,23068672,23068672,23068672,23068672,23068672,23068672,23068672,6291456,6291456,6291456,6291456]),
    new Uint32Array([2113153,2108481,2113345,2113441,2098209,2111137,0,2098241,2108353,2108417,2105825,0,0,2111905,2105473,2105569]),
    new Uint32Array([2236321,2236353,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),
    new Uint32Array([2152194,2121283,2103684,2103812,2097986,2098533,2097990,2098693,2098595,2098853,2099013,2103940,2121379,2121475,2121571,2104068]),
    new Uint32Array([2206241,2206273,2206305,2206337,2206369,2206401,2206433,2206465,2206497,2206529,2206561,2206593,2206625,2206657,2206689,2206721]),
    new Uint32Array([6291456,6291456,6291456,6291456,16777216,16777216,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672]),
    new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,6291456,0,0,23068672,23068672,10538818,10538882,6291456,6291456,2150338]),
    new Uint32Array([6291456,6291456,6291456,0,0,0,0,0,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456]),
    new Uint32Array([2214369,2214401,2214433,2214465,2214497,2214529,2214561,2214593,2194977,2214625,2195073,2214657,2214689,2214721,6291456,6291456]),
    new Uint32Array([2097152,2097152,2097152,2097152,0,0,0,0,0,0,0,0,0,0,0,0]),
    new Uint32Array([2182081,6291456,2182113,6291456,2182145,6291456,2182177,6291456,2182209,6291456,2182241,6291456,2182273,6291456,2182305,6291456]),
    new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,2146881,2146945,2147009,2147073,2147137,2147201,2147265,2147329]),
    new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,0,0,6291456,23068672,23068672]),
    new Uint32Array([0,0,0,0,0,0,0,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456]),
    new Uint32Array([2122915,2123011,2123107,2104708,2123203,2123299,2123395,2100133,2104836,2100290,2100293,2104962,2104964,2098052,2123491,2123587]),
    new Uint32Array([23068672,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,0,6291456]),
    new Uint32Array([6291456,2171169,6291456,2171201,6291456,2171233,6291456,2171265,6291456,2171297,6291456,2171329,6291456,6291456,2171361,6291456]),
    new Uint32Array([6291456,6291456,6291456,6291456,0,0,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456]),
    new Uint32Array([0,0,2148994,2149058,2149122,0,6291456,2149186,2186945,2173537,2148993,2149121,2149058,10531458,10496066,0]),
    new Uint32Array([2195009,2195041,2195073,2195105,2195137,2195169,2195201,2195233,2195265,2195297,2195329,2195361,2195393,2195425,2195457,2195489]),
    new Uint32Array([23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,6291456,0,0,6291456,6291456]),
    new Uint32Array([2182849,6291456,2182881,6291456,2182913,6291456,2182945,6291456,2182977,6291456,2183009,6291456,2183041,6291456,2183073,6291456]),
    new Uint32Array([2211553,2210081,2211585,2211617,2211649,2211681,2211713,2211745,2211777,2211809,2209569,2211841,2211873,2211905,2211937,2211969]),
    new Uint32Array([2112577,2098177,2098305,2108321,2108289,2100865,2113153,2108481,2113345,2113441,2166594,2127298,2166658,2142978,2141827,2166722]),
    new Uint32Array([2173985,2173761,2174017,2174049,2174081,2174113,2174145,2174177,2149057,2233057,2148481,2173601,2173633,2173665,2173697,2173729]),
    new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,0,0,2185761,2185793,2185825,2185857,2185889,2185921,0,0]),
    new Uint32Array([6291456,2148481,2173601,2173633,2173665,2173697,2173729,2148801,2173761,2143969,2173793,2173825,2153473,2173857,2173889,2173921]),
    new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,0,0,0,0,0,6291456]),
    new Uint32Array([0,0,0,2220961,2220961,2220961,2220961,2144193,2144193,2159201,2159201,2159265,2159265,2144194,2220993,2220993]),
    new Uint32Array([2192641,2235393,2235425,2152257,2116609,2235457,2235489,2200065,2235521,2235553,2235585,2212449,2235617,2235649,2235681,2235713]),
    new Uint32Array([2194049,2194081,2194113,2194145,2194177,2194209,2194241,2194273,2194305,2194337,2194369,2194401,2194433,2194465,2194497,2194529]),
    new Uint32Array([2196673,2208641,2208673,2208705,2208737,2208769,2208801,2208833,2208865,2208897,2208929,2208961,2208993,2209025,2209057,2209089]),
    new Uint32Array([2191681,2191713,2191745,2191777,2153281,2191809,2191841,2191873,2191905,2191937,2191969,2192001,2192033,2192065,2192097,2192129]),
    new Uint32Array([2230946,2231010,2231074,2231138,2231202,2231266,2231330,2231394,2231458,2231522,2231586,2231650,2231714,2231778,2231842,2231906]),
    new Uint32Array([14680064,14680064,14680064,14680064,14680064,14680064,14680064,14680064,14680064,14680064,14680064,14680064,14680064,14680064,14680064,14680064]),
    new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,2185953,2185985,2186017,2186049,2186081,2186113,2186145,2186177]),
    new Uint32Array([2139811,2139907,2097284,2105860,2105988,2106116,2106244,2097444,2097604,2097155,10485778,10486344,2106372,6291456,0,0]),
    new Uint32Array([2110051,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456]),
    new Uint32Array([0,0,0,0,0,0,0,0,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456]),
    new Uint32Array([2172385,6291456,2172417,6291456,2172449,6291456,2172481,6291456,2172513,6291456,2172545,6291456,2172577,6291456,2172609,6291456]),
    new Uint32Array([0,0,23068672,23068672,6291456,0,0,0,0,0,0,0,0,0,0,0]),
    new Uint32Array([2249345,2249377,2249409,2249441,2249473,2249505,2249537,2249570,2210209,2249633,2249665,2249697,2249729,2249761,2249793,2216769]),
    new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,23068672,23068672,23068672,23068672]),
    new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,0,0,0,0,6291456,6291456,6291456,6291456]),
    new Uint32Array([2187169,2187201,2187233,2187265,2187297,2187329,2187361,2187393,2187425,2187457,2187489,2187521,2187553,2187585,2187617,2187649]),
    new Uint32Array([6291456,6291456,6291456,6291456,6291456,23068672,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456]),
    new Uint32Array([0,0,0,6291456,6291456,0,0,0,6291456,6291456,6291456,0,0,0,6291456,6291456]),
    new Uint32Array([2182337,6291456,2182369,6291456,2182401,6291456,2182433,6291456,2182465,6291456,2182497,6291456,2182529,6291456,2182561,6291456]),
    new Uint32Array([2138179,2138275,2138371,2138467,2134243,2134435,2138563,2138659,2138755,2138851,2138947,2139043,2138947,2138755,2139139,2139235]),
    new Uint32Array([23068672,23068672,23068672,23068672,6291456,6291456,6291456,6291456,0,0,0,0,0,0,0,0]),
    new Uint32Array([0,0,23068672,23068672,0,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456]),
    new Uint32Array([2250498,2250562,2250625,2250657,2208321,2250689,2250721,2250753,2250785,2250817,2250849,2218945,2250881,2250913,2250945,0]),
    new Uint32Array([2170369,2105569,2098305,2108481,2173249,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456]),
    new Uint32Array([23068672,23068672,23068672,23068672,0,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,0,0,6291456]),
    new Uint32Array([2100897,2111905,2105473,2105569,2105601,0,2108193,0,0,0,2098305,2108321,2108289,2100865,2113153,2108481]),
    new Uint32Array([2100897,2100897,2105569,2105569,6291456,2112289,2149826,6291456,6291456,2112481,2112577,2098177,2098177,2098177,6291456,6291456]),
    new Uint32Array([23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,0,0,6291456,6291456,6291456]),
    new Uint32Array([6291456,2169953,2169985,6291456,2170017,6291456,2170049,2170081,6291456,2170113,2170145,2170177,6291456,6291456,2170209,2170241]),
    new Uint32Array([6291456,6291456,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),
    new Uint32Array([0,0,0,0,0,0,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456]),
    new Uint32Array([2220641,2220641,2220673,2220673,2220673,2220673,2220705,2220705,2220705,2220705,2220737,2220737,2220737,2220737,2220769,2220769]),
    new Uint32Array([2127650,2127746,2127842,2127938,2128034,2128130,2128226,2128322,2128418,2127523,2127619,2127715,2127811,2127907,2128003,2128099]),
    new Uint32Array([2143969,2173793,2173825,2153473,2173857,2173889,2173921,2173953,2173985,2173761,2174017,2174049,2174081,2174113,2174145,2174177]),
    new Uint32Array([0,0,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672]),
    new Uint32Array([2204705,2204737,2204769,2204801,2204833,2204865,2204897,2204929,2204961,2204993,2205025,2205057,2205089,2205121,2205153,2205185]),
    new Uint32Array([2176385,6291456,2176417,6291456,2176449,6291456,2176481,6291456,2176513,6291456,2176545,6291456,2176577,6291456,2176609,6291456]),
    new Uint32Array([2195521,2195553,2195585,2195617,2195649,2195681,2117857,2195713,2195745,2195777,2195809,2195841,2195873,2195905,2195937,2195969]),
    new Uint32Array([6291456,6291456,6291456,6291456,6291456,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672]),
    new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,0,0,0,0]),
    new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,0,6291456,6291456,6291456]),
    new Uint32Array([2173921,2173953,2173985,2174017,2174017,2174049,2174081,2174113,2174145,2174177,2149057,2233089,2173697,2173761,2173793,2174113]),
    new Uint32Array([2131586,2132450,2135970,2135778,2161602,2136162,2163650,2161794,2135586,2163714,2137186,2131810,2160290,2135170,2097506,2159554]),
    new Uint32Array([2134145,2097153,2134241,2105953,2132705,2130977,2160065,2131297,2162049,2133089,2160577,2133857,0,0,0,0]),
    new Uint32Array([2116513,2116609,2116705,2116801,2116897,2116993,2117089,2117185,2117281,2117377,2117473,2117569,2117665,2117761,2117857,2117953]),
    new Uint32Array([2100737,2098337,2101441,2101569,2101697,2101825,2101953,2102081,2102209,2100802,2101154,2101282,2101410,2101538,2101666,2101794]),
    new Uint32Array([2100289,2098657,2098049,2200737,2123489,2123681,2200769,2098625,2100321,2098145,2100449,2098017,2098753,2098977,2150241,2150305]),
    new Uint32Array([6291456,6291456,6291456,0,6291456,6291456,6291456,6291456,6291456,2109955,6291456,6291456,0,0,0,0]),
    new Uint32Array([18874368,18874368,18874368,18874368,18874368,18874368,18874368,18874368,18874368,18874368,18874368,18874368,18874368,18874368,18874368,18874368]),
    new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,0,6291456,0,6291456,0,0]),
    new Uint32Array([2130979,2131075,2131075,2131171,2131267,2131363,2131459,2131555,2131651,2131651,2131747,2131843,2131939,2132035,2132131,2132227]),
    new Uint32Array([0,2177793,6291456,2177825,6291456,2177857,6291456,2177889,6291456,2177921,6291456,2177953,6291456,2177985,6291456,6291456]),
    new Uint32Array([6291456,6291456,6291456,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672]),
    new Uint32Array([6291456,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),
    new Uint32Array([2113345,0,2098209,2111137,2105505,2098241,2108353,2108417,2105825,2111713,2100897,2111905,2105473,2105569,2105601,2112289]),
    new Uint32Array([2136643,2136739,2136835,2136931,2137027,2137123,2137219,2137315,2137411,2137507,2137603,2137699,2137795,2137891,2137987,2138083]),
    new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,0]),
    new Uint32Array([2174433,6291456,2174465,6291456,2174497,6291456,2174529,6291456,2174561,6291456,2174593,6291456,2174625,6291456,2174657,6291456]),
    new Uint32Array([0,0,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456]),
    new Uint32Array([2105473,2105569,2105601,2112289,2108193,2112481,2112577,2098177,2098305,2108321,2108289,2100865,2113153,2108481,2113345,2113441]),
    new Uint32Array([10496547,10496643,2105505,2149698,6291456,10496739,10496835,2170273,6291456,2149762,2105825,2111713,2111713,2111713,2111713,2168673]),
    new Uint32Array([6291456,2143490,2143490,2143490,2171649,6291456,2171681,2171713,2171745,6291456,2171777,6291456,2171809,6291456,2171841,6291456]),
    new Uint32Array([2159106,2159106,2159170,2159170,2159234,2159234,2159298,2159298,2159298,2159362,2159362,2159362,2106401,2106401,2106401,2106401]),
    new Uint32Array([2105601,2112289,2108193,2112481,2112577,2098177,2098305,2108321,2108289,2100865,2113153,2108481,2113345,2113441,2098209,2111137]),
    new Uint32Array([2108417,2181217,2181249,2181281,2170433,2170401,2181313,2181345,2181377,2181409,2181441,2181473,2181505,2181537,2170529,2181569]),
    new Uint32Array([2218433,2245761,2245793,2245825,2245857,2245890,2245953,2245986,2209665,2246050,2246113,2246146,2246210,2246274,2246337,2246369]),
    new Uint32Array([2230754,2230818,2230882,0,0,0,0,0,0,0,0,0,0,0,0,0]),
    new Uint32Array([6291456,0,6291456,6291456,6291456,6291456,0,0,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456]),
    new Uint32Array([6291456,0,0,0,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456]),
    new Uint32Array([2184129,6291456,2184161,6291456,2184193,6291456,6291456,6291456,6291456,6291456,2146818,2183361,6291456,6291456,2142978,6291456]),
    new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,6291456,0,0,6291456,6291456,6291456,6291456,6291456,6291456,6291456]),
    new Uint32Array([2135170,2097506,2130691,2130787,2130883,2163970,2164034,2164098,2164162,2164226,2164290,2164354,2164418,2164482,2164546,2133122]),
    new Uint32Array([2108515,2108611,2100740,2108707,2108803,2108899,2108995,2109091,2109187,2109283,2109379,2109475,2109571,2109667,2109763,2100738]),
    new Uint32Array([2102788,2102916,2103044,2120515,2103172,2120611,2120707,2098373,2103300,2120803,2120899,2120995,2103428,2103556,2121091,2121187]),
    new Uint32Array([2158082,2158146,0,2158210,2158274,0,2158338,2158402,2158466,2129922,2158530,2158594,2158658,2158722,2158786,2158850]),
    new Uint32Array([10499619,10499715,10499811,10499907,10500003,10500099,10500195,10500291,10500387,10500483,10500579,10500675,10500771,10500867,10500963,10501059]),
    new Uint32Array([2239585,2239618,2239681,2239713,0,2191969,2239745,2239777,2192033,2239809,2239841,2239874,2239937,2239970,2240033,2240065]),
    new Uint32Array([2252705,2252738,2252801,2252833,2252865,2252897,2252930,2252994,2253057,2253089,2253121,2253154,2253217,2253250,2219361,2219361]),
    new Uint32Array([2105825,2111713,2100897,2111905,2105473,2105569,2105601,2112289,2108193,2112481,2112577,2098177,2098305,2108321,2108289,2100865]),
    new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,6291456,10538050,10538114,10538178,6291456,6291456,6291456,6291456,6291456,6291456]),
    new Uint32Array([2226402,2226466,2226530,2226594,2226658,2226722,2226786,2226850,2226914,2226978,2227042,2227106,2227170,2227234,2227298,2227362]),
    new Uint32Array([23068672,6291456,6291456,6291456,6291456,2144066,2144130,2144194,2144258,6291456,6291456,6291456,6291456,6291456,6291456,6291456]),
    new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,23068672,23068672,23068672,6291456,23068672,23068672]),
    new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,0,0,0,0,0,0,0,0]),
    new Uint32Array([2124674,2124770,2123875,2123971,2124067,2124163,2124259,2124355,2124451,2124547,2124643,2124739,2124835,2124931,2125027,2125123]),
    new Uint32Array([2168065,6291456,2168097,6291456,2168129,6291456,2168161,6291456,2168193,6291456,2168225,6291456,2168257,6291456,2168289,6291456]),
    new Uint32Array([23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,0,0,0,0]),
    new Uint32Array([23068672,23068672,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456]),
    new Uint32Array([6291456,6291456,6291456,2100610,2100611,6291456,2107842,2107843,6291456,6291456,6291456,6291456,10537922,6291456,10537986,6291456]),
    new Uint32Array([2174849,2174881,2174913,2174945,2174977,2175009,2175041,2175073,2175105,2175137,2175169,2175201,2175233,2175265,2175297,2175329]),
    new Uint32Array([2154562,2154626,2154690,2154754,2141858,2154818,2154882,2127298,2154946,2127298,2155010,2155074,2155138,2155202,2155266,2155202]),
    new Uint32Array([23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,6291456,6291456,6291456,6291456,6291456,6291456,23068672,0]),
    new Uint32Array([2200641,2150786,2150850,2150914,2150978,2151042,2106562,2151106,2150562,2151170,2151234,2151298,2151362,2151426,2151490,2151554]),
    new Uint32Array([23068672,23068672,23068672,23068672,23068672,23068672,0,0,0,0,0,0,0,0,6291456,6291456]),
    new Uint32Array([2220289,2220289,2220321,2220321,2220321,2220321,2220353,2220353,2220353,2220353,2220385,2220385,2220385,2220385,2220417,2220417]),
    new Uint32Array([2155330,2155394,0,2155458,2155522,2155586,2105732,0,2155650,2155714,2155778,2125314,2155842,2155906,2126274,2155970]),
    new Uint32Array([23068672,23068672,23068672,23068672,23068672,6291456,6291456,23068672,23068672,6291456,23068672,23068672,23068672,23068672,6291456,6291456]),
    new Uint32Array([6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,6291456,0,0,0,0,0,0]),
    new Uint32Array([2097729,2106017,2106017,2106017,2106017,2131297,2131297,2131297,2131297,2106081,2106081,2162049,2162049,2105953,2105953,2162337]),
    new Uint32Array([2097185,2097697,2097697,2097697,2097697,2135777,2135777,2135777,2135777,2097377,2097377,2097377,2097377,2097601,2097601,2097217]),
    new Uint32Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,23068672]),
    new Uint32Array([2139331,2139427,2139523,2139043,2133571,2132611,2139619,2139715,0,0,0,0,0,0,0,0]),
    new Uint32Array([2174113,2174145,2100897,2098177,2108289,2100865,2173601,2173633,2173985,2174113,2174145,6291456,6291456,6291456,6291456,6291456]),
    new Uint32Array([6291456,6291456,23068672,6291456,6291456,6291456,23068672,6291456,6291456,6291456,6291456,23068672,6291456,6291456,6291456,6291456]),
    new Uint32Array([23068672,23068672,18923778,23068672,23068672,23068672,23068672,18923842,23068672,23068672,23068672,23068672,18923906,23068672,23068672,23068672]),
    new Uint32Array([2134145,2097153,2134241,0,2132705,2130977,2160065,2131297,0,2133089,0,2133857,0,0,0,0]),
    new Uint32Array([6291456,6291456,6291456,6291456,0,0,0,0,0,0,0,0,0,0,0,0]),
    new Uint32Array([2177537,6291456,2177569,6291456,2177601,6291456,2177633,6291456,2177665,6291456,2177697,6291456,2177729,6291456,2177761,6291456]),
    new Uint32Array([2212481,2212513,2212545,2212577,2197121,2212609,2212641,2212673,2212705,2212737,2212769,2212801,2212833,2212865,2212897,2212929]),
    new Uint32Array([6291456,6291456,23068672,23068672,23068672,6291456,6291456,0,0,0,0,0,0,0,0,0]),
    new Uint32Array([2098241,2108353,2170209,2105825,2111713,2100897,2111905,2105473,2105569,2105601,2112289,6291456,2108193,2172417,2112481,2098177]),
    new Uint32Array([6291456,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,23068672,6291456,6291456]),
  ];
  var blockIdxes = new Uint16Array([616,616,565,147,161,411,330,2,131,131,328,454,241,408,86,86,696,113,285,350,325,301,473,214,639,232,447,64,369,598,124,672,567,223,621,154,107,86,86,86,86,86,86,505,86,68,634,86,218,218,218,218,486,218,218,513,188,608,216,86,217,463,668,85,700,360,184,86,86,86,647,402,153,10,346,718,662,260,145,298,117,1,443,342,138,54,563,86,240,572,218,70,387,86,118,460,641,602,86,86,306,218,86,692,86,86,86,86,86,162,707,86,458,26,86,218,638,86,86,86,86,86,65,449,86,86,306,183,86,58,391,667,86,157,131,131,131,131,86,433,131,406,31,218,247,86,86,693,218,581,351,86,438,295,69,462,45,126,173,650,14,295,69,97,168,187,641,78,523,390,69,108,287,664,173,219,83,295,69,108,431,426,173,694,412,115,628,52,257,398,641,118,501,121,69,579,151,423,173,620,464,121,69,382,151,476,173,27,53,121,86,594,578,226,173,86,632,130,86,96,228,268,641,622,563,86,86,21,148,650,131,131,321,43,144,343,381,531,131,131,178,20,86,399,156,375,164,541,30,60,715,198,92,118,131,131,86,86,306,407,86,280,457,196,488,358,131,131,244,86,86,143,86,86,86,86,86,667,563,86,86,86,86,86,86,86,86,86,86,86,86,86,336,363,86,86,336,86,86,380,678,67,86,86,86,678,86,86,86,512,86,307,86,708,86,86,86,86,86,528,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,563,307,86,86,86,86,86,104,450,337,86,720,86,32,450,397,86,86,86,587,218,558,708,708,293,708,86,86,86,86,86,694,205,86,8,86,86,86,86,549,86,667,697,697,679,86,458,460,86,86,650,86,708,543,86,86,86,245,86,86,86,140,218,127,708,708,458,197,131,131,131,131,500,86,86,483,251,86,306,510,515,86,722,86,86,86,65,201,86,86,483,580,470,86,86,86,368,131,131,131,694,114,110,555,86,86,123,721,163,142,713,418,86,317,675,209,218,218,218,371,545,592,629,490,603,199,46,320,525,680,310,279,388,111,42,252,593,607,235,617,410,377,50,548,135,356,17,520,189,116,392,600,349,332,482,699,690,535,119,106,451,71,152,667,131,218,218,265,671,637,492,504,533,683,269,269,658,86,86,86,86,86,86,86,86,86,491,619,86,86,6,86,86,86,86,86,86,86,86,86,86,86,229,86,86,86,86,86,86,86,86,86,86,86,86,667,86,86,171,131,118,131,656,206,234,571,89,334,670,246,311,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,534,86,86,86,86,86,86,82,86,86,86,86,86,430,86,86,86,86,86,86,86,86,86,599,86,324,86,470,69,640,264,131,626,101,174,86,86,667,233,105,73,374,394,221,204,84,28,326,86,86,471,86,86,86,109,573,86,171,200,200,200,200,218,218,86,86,86,86,460,131,131,131,86,506,86,86,86,86,86,220,404,34,614,47,442,305,25,612,338,601,648,7,344,255,131,131,51,86,312,507,563,86,86,86,86,588,86,86,86,86,86,530,511,86,458,3,435,384,556,522,230,527,86,118,86,86,717,86,137,273,79,181,484,23,93,112,655,249,417,703,370,87,98,313,684,585,155,465,596,481,695,18,416,428,61,701,706,282,643,495,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,549,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,549,131,131,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,307,86,86,86,171,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,650,131,422,542,420,263,24,172,86,86,86,86,86,566,86,86,132,540,395,353,494,519,19,485,284,472,131,131,131,16,714,86,211,708,86,86,86,694,698,86,86,483,704,708,218,272,86,86,120,86,159,478,86,307,247,86,86,663,597,459,627,667,86,86,277,455,39,302,86,250,86,86,86,271,99,452,306,281,329,400,200,86,86,362,549,352,646,461,323,586,86,86,4,708,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,717,86,518,86,86,650,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,125,554,480,300,613,72,333,288,561,544,604,48,719,91,169,176,590,224,76,191,29,559,560,231,537,166,477,538,256,437,131,131,469,167,40,0,685,266,441,705,239,642,475,568,640,610,299,673,517,318,385,22,202,180,179,359,424,215,90,66,521,653,467,682,453,409,479,88,131,661,35,303,15,262,666,630,712,131,131,618,659,175,218,195,347,193,227,261,150,165,709,546,294,569,710,270,413,376,524,55,242,38,419,529,170,657,3,304,122,379,278,131,651,86,67,576,458,458,131,131,86,86,86,86,86,86,86,118,309,86,86,547,86,86,86,86,667,650,664,131,131,86,86,56,131,131,131,131,131,131,131,131,86,307,86,86,86,664,238,650,86,86,717,86,118,86,86,315,86,59,86,86,574,549,131,131,340,57,436,86,86,86,86,86,86,458,708,499,691,62,86,650,86,86,694,86,86,86,319,131,131,131,131,131,131,131,131,131,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,171,86,549,694,131,131,131,131,131,131,131,131,131,77,86,86,139,86,502,86,86,86,667,595,131,131,131,86,12,86,13,86,609,131,131,131,131,86,86,86,625,86,669,86,86,182,129,86,5,694,104,86,86,86,86,131,131,86,86,386,171,86,86,86,345,86,324,86,589,86,213,36,131,131,131,131,131,86,86,86,86,104,131,131,131,141,290,80,677,86,86,86,267,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,86,667,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,515,86,86,33,136,669,86,711,515,86,86,550,640,86,104,708,515,86,159,372,717,86,86,444,515,86,86,663,37,86,563,460,86,390,624,702,131,131,131,131,389,59,708,86,86,341,208,708,635,295,69,108,431,508,100,190,131,131,131,131,131,131,131,131,86,86,86,649,516,660,131,131,86,86,86,218,631,708,131,131,131,131,131,131,131,131,131,131,86,86,341,575,238,514,131,131,86,86,86,218,291,708,307,131,86,86,306,367,708,131,131,131,86,378,697,86,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,615,253,86,86,86,292,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,86,86,86,104,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,69,86,341,553,549,86,307,86,86,645,275,455,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,708,131,131,131,131,131,131,86,86,86,86,86,86,667,460,86,86,86,86,86,86,86,86,86,86,86,86,717,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,667,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,171,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,104,86,667,459,131,131,131,131,131,131,86,458,225,86,86,86,516,549,11,390,405,86,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,86,86,86,86,460,44,218,197,711,515,131,131,131,131,664,131,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,307,131,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,308,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,640,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,86,86,86,86,86,86,118,307,104,286,591,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,549,86,86,681,86,86,75,185,314,582,86,358,496,474,86,104,131,86,86,86,86,146,131,131,131,131,131,131,131,131,131,131,131,86,86,86,86,86,171,86,640,131,131,131,131,131,131,131,131,246,503,689,339,674,81,258,415,439,128,562,366,414,246,503,689,583,222,557,316,636,665,186,355,95,670,246,503,689,339,674,557,258,415,439,186,355,95,670,246,503,689,446,644,536,652,331,532,335,440,274,421,297,570,74,425,364,425,606,552,403,509,134,365,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,218,218,218,498,218,218,577,627,551,497,572,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,553,354,236,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,86,86,86,86,86,86,86,86,86,86,86,86,296,455,131,131,456,243,103,86,41,459,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,9,276,158,716,393,564,383,489,401,654,210,654,131,131,131,640,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,86,86,650,86,86,86,86,86,86,717,667,563,563,563,86,549,102,686,133,246,605,86,448,86,86,207,307,131,131,131,641,86,177,611,445,373,194,584,131,131,131,131,131,131,131,131,131,131,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,308,307,171,86,86,86,86,86,86,86,717,86,86,86,86,86,460,131,131,650,86,86,86,694,708,86,86,694,86,458,131,131,131,131,131,131,667,694,289,650,667,131,131,86,640,131,131,664,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,171,131,131,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,460,86,86,86,86,86,86,86,86,86,86,86,86,86,458,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,640,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,466,203,149,429,94,432,160,687,539,63,237,283,192,248,348,259,427,526,396,676,254,468,487,212,327,623,49,633,322,493,434,688,357,361,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131]);
  var mappingStr = "ØµÙÙ Ø§ÙÙÙ Ø¹ÙÙÙ ÙØ³ÙÙØ¬Ù Ø¬ÙØ§ÙÙã­ã­ã¡ã¼ãã«radâs2ã¨ã¹ã¯ã¼ãã­ã­ã°ã©ã ã­ã­ã¯ããã°ã©ã ãã³ã¯ã«ã¼ã¤ã­ãµã³ãã¼ã ãã¼ã»ã³ããã¢ã¹ãã«ãã¡ã©ããããã·ã§ã«ãã¯ã¿ã¼ã«ãã³ã·ã§ã³ããªãã¼ã«ã¬ã³ãã²ã³â²â²â²â²1â10viii(10)(11)(12)(13)(14)(15)(16)(17)(18)(19)(20)â«â«â«â«(ì¤ì )(ì¤í)ã¢ãã¼ãã¢ã«ãã¡ã¢ã³ãã¢ã¤ãã³ã°ã¨ã¼ã«ã¼ã«ã©ããã«ã­ãªã¼ã­ã¥ãªã¼ã®ã«ãã¼ã¯ã­ã¼ããµã¤ã¯ã«ã·ãªã³ã°ãã¼ã¬ã«ãã£ã¼ããã¤ã³ããã¤ã¯ã­ãã¯ã­ã³ã¡ã¬ãã³ãªããã«ã«ã¼ãã«æ ªå¼ä¼ç¤¾kcalmâs2câkgØ§ÙØ¨Ø±ÙØ­ÙØ¯ØµÙØ¹ÙØ±Ø³ÙÙØ±ÛØ§Ù1â41â23â4 ÌÌà¾²à½±à¾à¾³à½±à¾ ÌÍ ÌÌ ÌÌ ÌÍ ÌÌ ÌÌ ÌÍ ÌÌâµâµâµa/ca/sc/oc/utelfax1â71â91â32â31â52â53â54â51â65â61â83â85â87â8xii0â3â®â®â®(1)(2)(3)(4)(5)(6)(7)(8)(9)(a)(b)(c)(d)(e)(f)(g)(h)(i)(j)(k)(l)(m)(n)(o)(p)(q)(r)(s)(t)(u)(v)(w)(x)(y)(z)::====(á)(á)(á)(á)(á)(á)(á)(á)(á)(á)(á)(á)(á)(á)(ê°)(ë)(ë¤)(ë¼)(ë§)(ë°)(ì¬)(ì)(ì)(ì°¨)(ì¹´)(í)(í)(í)(ì£¼)(ä¸)(äº)(ä¸)(å)(äº)(å­)(ä¸)(å«)(ä¹)(å)(æ)(ç«)(æ°´)(æ¨)(é)(å)(æ¥)(æ ª)(æ)(ç¤¾)(å)(ç¹)(è²¡)(ç¥)(å´)(ä»£)(å¼)(å­¦)(ç£)(ä¼)(è³)(å)(ç¥­)(ä¼)(èª)(è³)pte10æ11æ12æergltdã¢ã¼ã«ã¤ã³ãã¦ã©ã³ãªã³ã¹ãªã¼ã ã«ã¤ãªã¬ã­ã³ã¬ã³ãã®ãã¼ã±ã¼ã¹ã³ã«ãã³ã¼ãã»ã³ããã¼ã¹ããããã¤ããã¼ããã¯ã«ãã©ã³ããããã«ããã³ã¹ãã¼ã¸ãã¼ã¿ãã«ããã³ããã¼ã«ãã¼ã³ãã¤ã«ããããã«ã¯ã¤ã¼ãã¤ã¼ã«ã¦ã¢ã³ã«ãã¼10ç¹11ç¹12ç¹13ç¹14ç¹15ç¹16ç¹17ç¹18ç¹19ç¹20ç¹21ç¹22ç¹23ç¹24ç¹hpabardm2dm3khzmhzghzthzmm2cm2km2mm3cm3km3kpampagpalogmilmolppmvâmaâm10æ¥11æ¥12æ¥13æ¥14æ¥15æ¥16æ¥17æ¥18æ¥19æ¥20æ¥21æ¥22æ¥23æ¥24æ¥25æ¥26æ¥27æ¥28æ¥29æ¥30æ¥31æ¥galffiffl×©Ö¼××©Ö¼× ÙÙ ÙÙ ÙÙ ÙÙ ÙÙ ÙÙ°ÙÙÙÙÙÙÙÙÙØªØ¬ÙØªØ­Ø¬ØªØ­ÙØªØ®ÙØªÙØ¬ØªÙØ­ØªÙØ®Ø¬ÙØ­Ø­ÙÙØ­ÙÙØ³Ø­Ø¬Ø³Ø¬Ø­Ø³Ø¬ÙØ³ÙØ­Ø³ÙØ¬Ø³ÙÙØµØ­Ø­ØµÙÙØ´Ø­ÙØ´Ø¬ÙØ´ÙØ®Ø´ÙÙØ¶Ø­ÙØ¶Ø®ÙØ·ÙØ­Ø·ÙÙØ·ÙÙØ¹Ø¬ÙØ¹ÙÙØ¹ÙÙØºÙÙØºÙÙØºÙÙÙØ®ÙÙÙØ­ÙÙÙÙØ­ÙÙØ­ÙÙØ­ÙÙØ¬Ø¬ÙØ®ÙÙÙØ­ÙØ­Ø¬ÙØ­ÙÙØ¬Ø­ÙØ¬ÙÙØ®ÙÙØ¬Ø®ÙÙØ¬ÙÙÙÙØ­ÙÙØ­ÙÙØ¬ÙÙØ¬ÙÙÙÙÙÙÙÙÙÙØ¨Ø®ÙØªØ¬ÙØªØ¬ÙØªØ®ÙØªØ®ÙØªÙÙØªÙÙØ¬ÙÙØ¬Ø­ÙØ¬ÙÙØ³Ø®ÙØµØ­ÙØ´Ø­ÙØ¶Ø­ÙÙØ¬ÙÙÙÙÙØ­ÙÙØ¬ÙÙÙÙÙÙÙÙÙÙÙØ­ÙØ¹ÙÙÙÙÙÙØ¬Ø­ÙØ®ÙÙØ¬ÙÙÙÙØ¬Ø­ÙØ­Ø¬ÙÙØ¬ÙÙÙÙØ¨Ø­ÙØ³Ø®ÙÙØ¬ÙØµÙÛÙÙÛðð¥ð®ðð¥ð¯ðð¥ð°ðð¥ð±ðð¥ð²ð¹ð¥ð®ðºð¥ð®ð¹ð¥ð¯ðºð¥ð¯ãsãppvãæ¬ããä¸ããäºããå®ããç¹ããæããçããåããæã Ì Ì Ì§ssiÌijlÂ·Ê¼ndÅ¾ljnjdz Ì Ì Ì Ì¨ Ì Ì Î¹Õ¥ÖØ§Ù´ÙÙ´ÛÙ´ÙÙ´à¤à¤¼à¤à¤¼à¤à¤¼à¤à¤¼à¤¡à¤¼à¤¢à¤¼à¤«à¤¼à¤¯à¤¼à¦¡à¦¼à¦¢à¦¼à¦¯à¦¼à¨²à¨¼à¨¸à¨¼à¨à¨¼à¨à¨¼à¨à¨¼à¨«à¨¼à¬¡à¬¼à¬¢à¬¼à¹à¸²à»àº²àº«àºàº«àº¡à½à¾·à½à¾·à½à¾·à½à¾·à½à¾·à½à¾µà½±à½²à½±à½´à¾²à¾à¾³à¾à¾à¾·à¾à¾·à¾¡à¾·à¾¦à¾·à¾«à¾·à¾à¾µaÊ¾á¼Î¹á¼Î¹á¼Î¹á¼Î¹á¼Î¹á¼Î¹á¼Î¹á¼Î¹á¼ Î¹á¼¡Î¹á¼¢Î¹á¼£Î¹á¼¤Î¹á¼¥Î¹á¼¦Î¹á¼§Î¹á½ Î¹á½¡Î¹á½¢Î¹á½£Î¹á½¤Î¹á½¥Î¹á½¦Î¹á½§Î¹á½°Î¹Î±Î¹Î¬Î¹á¾¶Î¹ Íá½´Î¹Î·Î¹Î®Î¹á¿Î¹á½¼Î¹ÏÎ¹ÏÎ¹á¿¶Î¹ Ì³!! Ì???!!?rsÂ°cÂ°fnosmtmivixâ«Ì¸ ã ãããã³ã333435ì°¸ê³ ì£¼ì363738394042444546474849503æ4æ5æ6æ7æ8æ9æhgevã®ã¬ãã·ãã«ãããã³ãã«ãã½ãã³ãªã©ã¬ã daauovpciuå¹³ææ­åå¤§æ­£ææ²»naÎ¼akakbmbgbpfnfÎ¼fÎ¼gmgÎ¼lmldlklfmnmÎ¼mpsnsÎ¼smsnvÎ¼vkvpwnwÎ¼wmwkwkÏmÏbqcccddbgyhainkkktlnlxphprsrsvwbstÕ´Õ¶Õ´Õ¥Õ´Õ«Õ¾Õ¶Õ´Õ­×Ö´×²Ö·×©××©××Ö·×Ö¸×Ö¼×Ö¼×Ö¼×Ö¼×Ö¼×Ö¼×Ö¼×Ö¼×Ö¼×Ö¼×Ö¼×Ö¼×Ö¼× Ö¼×¡Ö¼×£Ö¼×¤Ö¼×¦Ö¼×§Ö¼×¨Ö¼×ªÖ¼×Ö¹×Ö¿×Ö¿×¤Ö¿××Ø¦Ø§Ø¦ÛØ¦ÙØ¦ÛØ¦ÛØ¦ÛØ¦ÛØ¦ÙØ¦Ø¬Ø¦Ø­Ø¦ÙØ¦ÙØ¨Ø¬Ø¨ÙØ¨ÙØ¨ÙØªÙØªÙØ«Ø¬Ø«ÙØ«ÙØ«ÙØ®Ø­Ø¶Ø¬Ø¶ÙØ·Ø­Ø¸ÙØºØ¬ÙØ¬ÙØ­ÙÙÙÙÙØ­ÙÙÙÙÙØ§ÙØ¬ÙØ­ÙØ®ÙÙÙÙÙÙÙØ®ÙÙÙÙÙØ¬ÙÙÙÙÙÙØ°Ù°Ø±Ù°ÙÙ°Ø¦Ø±Ø¦Ø²Ø¦ÙØ¨Ø²Ø¨ÙØªØ±ØªØ²ØªÙØ«Ø±Ø«Ø²Ø«ÙÙØ§ÙØ±ÙØ²ÙÙÙØ±ÙØ²Ø¦Ø®Ø¦ÙØ¨ÙØªÙØµØ®ÙÙÙÙ°Ø«ÙØ³ÙØ´ÙØ·ÙØ·ÙØ¹ÙØ¹ÙØºÙØºÙØ³ÙØ³ÙØ´ÙØ´ÙØµÙØµÙØ¶ÙØ¶ÙØ´Ø®Ø´Ø±Ø³Ø±ØµØ±Ø¶Ø±Ø§Ù ÙÙÙÙÙ ÙÙÙÙØ¢ÙØ£ÙØ¥ðð¥0,1,2,3,4,5,6,7,8,9,wzhvsdwcmcmddjã»ãã³ã³Ã Ã¡Ã¢Ã£Ã¤Ã¥Ã¦Ã§Ã¨Ã©ÃªÃ«Ã¬Ã­Ã®Ã¯Ã°Ã±Ã²Ã³Ã´ÃµÃ¶Ã¸Ã¹ÃºÃ»Ã¼Ã½Ã¾ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¡Ä£Ä¥Ä§Ä©Ä«Ä­Ä¯ÄµÄ·ÄºÄ¼Ä¾ÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅÅ¡Å£Å¥Å§Å©Å«Å­Å¯Å±Å³ÅµÅ·Ã¿ÅºÅ¼ÉÆÆÉÆÉÉÆÇÉÉÆÉ É£É©É¨ÆÉ¯É²ÉµÆ¡Æ£Æ¥ÊÆ¨ÊÆ­ÊÆ°ÊÊÆ´Æ¶ÊÆ¹Æ½ÇÇÇÇÇÇÇÇÇÇ¡Ç£Ç¥Ç§Ç©Ç«Ç­Ç¯ÇµÆÆ¿Ç¹Ç»Ç½Ç¿ÈÈÈÈÈÈÈÈÈÈÈÈÈÈÈÈÆÈ£È¥È§È©È«È­È¯È±È³â±¥È¼Æâ±¦ÉÆÊÊÉÉÉÉÉÉ¦É¹É»ÊÊÍ±Í³Ê¹Í·;Ï³Î­Î¯ÏÏÎ²Î³Î´ÎµÎ¶Î¸ÎºÎ»Î½Î¾Î¿ÏÏÏÏÏÏÏÏÏÏÏÏÏÏÏÏ¡Ï£Ï¥Ï§Ï©Ï«Ï­Ï¯Ï¸Ï»Í»Í¼Í½ÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÐ°Ð±Ð²Ð³Ð´ÐµÐ¶Ð·Ð¸Ð¹ÐºÐ»Ð¼Ð½Ð¾Ð¿ÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑ¡Ñ£Ñ¥Ñ§Ñ©Ñ«Ñ­Ñ¯Ñ±Ñ³ÑµÑ·Ñ¹Ñ»Ñ½Ñ¿ÒÒÒÒÒÒÒÒÒÒÒÒÒ¡Ò£Ò¥Ò§Ò©Ò«Ò­Ò¯Ò±Ò³ÒµÒ·Ò¹Ò»Ò½Ò¿ÓÓÓÓÓÓÓÓÓÓÓÓÓÓÓÓ¡Ó£Ó¥Ó§Ó©Ó«Ó­Ó¯Ó±Ó³ÓµÓ·Ó¹Ó»Ó½Ó¿ÔÔÔÔÔÔÔÔÔÔÔÔÔÔÔÔÔ¡Ô£Ô¥Ô§Ô©Ô«Ô­Ô¯Õ¡Õ¢Õ£Õ¤Õ¦Õ§Õ¨Õ©ÕªÕ¬Õ®Õ¯Õ°Õ±Õ²Õ³ÕµÕ·Õ¸Õ¹ÕºÕ»Õ¼Õ½Õ¿ÖÖÖÖÖÖà¼â´§â´­áá°á±á²á³á´áµêÉÉá´Éá´á´á´á´¥ÉÉÉÉ¡É¥Éªáµ»ÊÉ­á¶ÊÉ±É°É³É´É¸ÊÆ«á´ÊÊá¸á¸á¸á¸á¸á¸á¸á¸á¸á¸á¸á¸á¸á¸á¸á¸á¸¡á¸£á¸¥á¸§á¸©á¸«á¸­á¸¯á¸±á¸³á¸µá¸·á¸¹á¸»á¸½á¸¿á¹á¹á¹á¹á¹á¹á¹á¹á¹á¹á¹á¹á¹á¹á¹á¹á¹¡á¹£á¹¥á¹§á¹©á¹«á¹­á¹¯á¹±á¹³á¹µá¹·á¹¹á¹»á¹½á¹¿áºáºáºáºáºáºáºáºáºáºáºáº¡áº£áº¥áº§áº©áº«áº­áº¯áº±áº³áºµáº·áº¹áº»áº½áº¿á»á»á»á»á»á»á»á»á»á»á»á»á»á»á»á»á»¡á»£á»¥á»§á»©á»«á»­á»¯á»±á»³á»µá»·á»¹á»»á»½á»¿á¼á¼á¼á¼á¼á¼á¼°á¼±á¼²á¼³á¼´á¼µá¼¶á¼·á½á½á½á½á½á½á½á½á½á½á¾°á¾±á½²Îá¿á¿á½¶Î°á¿ á¿¡á½ºá¿¥`á½¸â+ââããâ°°â°±â°²â°³â°´â°µâ°¶â°·â°¸â°¹â°ºâ°»â°¼â°½â°¾â°¿â±â±â±â±â±â±â±â±â±â±â±â±â±â±â±â±â±â±â±â±â±â±â±â±â±â±â±â±â±â±â±â±¡É«áµ½É½â±¨â±ªâ±¬â±³â±¶È¿Éâ²â²â²â²â²â²â²â²â²â²â²â²â²â²â²â²â²¡â²£â²¥â²§â²©â²«â²­â²¯â²±â²³â²µâ²·â²¹â²»â²½â²¿â³â³â³â³â³â³â³â³â³â³â³â³â³â³â³â³â³¡â³£â³¬â³®â³³âµ¡æ¯é¾ä¸¨ä¸¶ä¸¿ä¹äºäº äººå¿å¥ååå«å åµååå¹ååå¸åå©åå¶åå£åå£«å¤å¤å¤å¥³å­å®å¯¸å°å°¢å°¸å±®å±±å·å·¥å·±å·¾å¹²å¹ºå¹¿å»´å»¾å¼å¼å½å½¡å½³å¿ææ¶ææ¯æ´æææ¤æ¹æ æ°æ¬ æ­¢æ­¹æ®³æ¯æ¯æ¯æ°æ°çªç¶ç»ç¿çççç¬çççç¦ççç¨ç°ççç¶ç½ç®ç¿ç®çç¢ç³ç¤ºç¦¸ç¦¾ç©´ç«ç«¹ç±³ç³¸ç¼¶ç½ç¾ç¾½èèèè³è¿èè£è¼èèèè®è²è¸èè«è¡è¡è¡£è¥¾è¦è§è¨è°·è±è±è±¸è²èµ¤èµ°è¶³èº«è»è¾è¾°è¾µééééé·ééé¶é¹é¨ééé¢é©éé­é³é é¢¨é£é£é¦é¦é¦¬éª¨é«é«é¬¥é¬¯é¬²é¬¼é­é³¥é¹µé¹¿éº¥éº»é»é»é»é»¹é»½é¼é¼é¼ é¼»é½é½é¾é¾é¾ .ãååááªá¬á­áá°á±á²á³á´áµááá¡ááá¡á¢á£á¤á¥á¦á§á¨á©áªá«á¬á­á®á¯á°á±á²á³á´áµááááááááááááááá á¢á£á§á©á«á¬á­á®á¯á²á¶áááá±á²ááááááááááá¡ä¸ä¸­ä¸ç²ä¸ä¸å¤©å°åå¹¼ç®ì°ç§ç·é©åªå°æ³¨é åå·¦å³å»å®å¤ããã¢ã¨ã°ã±ã²êêêêêêêêêêêêêêêê¡ê£ê¥ê§ê©ê«ê­êêêêêêêêêêêêêêê£ê¥ê§ê©ê«ê­ê¯ê³êµê·ê¹ê»ê½ê¿êêêêêêêêêêêêêêêêê¡ê£ê¥ê§ê©ê«ê­ê¯êºê¼áµ¹ê¿êêêêêêêêêêêêê¡ê£ê¥ê§ê©É¬ÊÊê­êµê·ê¬·ê­á á¡á¢á£á¤á¥á¦á§á¨á©áªá«á¬á­á®á¯á°á±á²á³á´áµá¶á·á¸á¹áºá»á¼á½á¾á¿ááááááááááááááááááááááááááááááááá á¡á¢á£á¤á¥á¦á§á¨á©áªá«á¬á­á®á¯è±æ´è³æ»ä¸²å¥å¥åå¥æ¶ç©ç¾è¿èºè£¸éæ¨æ´ççè½éªé§±äºåµæ¬çè­é¸åµæ¿«èè¥¤æèè å»ææµªç¼éä¾å·åææ«çç§èèè·¯é²é­¯é·ºç¢ç¥¿ç¶ èéè«å£å¼ç± è¾ç¢ç£è³é·å£å±¢æ¨æ·æ¼ç´¯ç¸·éåèååç¨ç¶¾è±éµè®æè«¾ä¸¹å¯§æçç°åç£»ä¾¿å¾©ä¸æ³æ¸ç´¢åå¡çèèªªæ®ºæ²æ¾è¥æ ç¥äº®å©åæ¢ç³§è¯è«éåµåå»¬ææ¿¾ç¤ªé­é©ªéºé»ææ­·è½¢å¹´ææææ¼£ççç§ç·´è¯è¼¦è®é£éåå£å½çè£å»å¿µæ»æ®®ç°¾çµä»¤å¹å¶ºæç²ç©ç¾èé´é¶éé ä¾ç¦®é´é¸æ¡äºåå¯®å°¿æççè¼é¼æé®åæ»æ³æµæºççç¡«ç´é¡æ®é¸å«å´æ·ªè¼ªå¾ææ éå©åå±¥æææ¢¨æ³¥çç¢ç½¹è£è£¡é¢å¿æººåççèºé£é±éºææ·è¨ç¬ ç²ççè­ä»è¶åºååº¦æç³å®æ´æ´è¼»éå»ååå¡æ´åçªçç¤¼ç¥ç¥¥ç¦éç²¾èè«¸é¸é½é£¯é£¼é¤¨é¶´éé·ä¾®å§ååå¤åååå¨å¡å¢¨å±¤ææ¨ææ²ææ¢ææ¢æµ·æ¸æ¼¢ç®ç«ç¢ç¢ç¥ç¥ç¥ç¥ç¦ç¦ç©çªç¯ç¸ç¹ç½²èè­è¹èè¤è¦è¬è¬¹è³è´è¾¶é£é¿é »æµð¤®èä¸¦åµå¨ä¾ååååºååå¢å¢³å¥å¥å©¢å¬¨å»å»å½©å¾­ææææ æ´æææææææ»æ»çç§çµç¯ç±çç»çççç´ççç£çª±ç±»çµç¼¾èè¯è¹è¥è¦èª¿è«è«­è®è¼¸é²éé¶é¼éé é¬ð¢¡ð¢¡ð£ã®ää¹ð¥ð¥³ð§»é½é¾×¢×Ù±Ù»Ù¾ÚÙºÙ¿Ù¹Ú¤Ú¦ÚÚÚÚÚÚÚÚÚÚÚ©Ú¯Ú³Ú±ÚºÚ»ÛÛÚ¾ÛÚ­ÛÛÛãããââ_{}ãããããããã[]#&*-<>\\$%@Ø¡Ø¤Ø©\"'^|~â¦â¦ã»ã¥ã£Â¢Â£Â¬Â¦Â¥â©ââââââ âð¨ð©ðªð«ð¬ð­ð®ð¯ð°ð±ð²ð³ð´ðµð¶ð·ð¸ð¹ðºð»ð¼ð½ð¾ð¿ððððððððððððððððððððððððð ð¡ð¢ð£ð¤ð¥ð¦ð§ð¨ð©ðªð«ð¬ð­ð®ð¯ð°ð±ð²ð³ð´ðµð¶ð·ð¸ð¹ðºð»ð³ð³ð³ð³ð³ð³ð³ð³ð³ð³ð³ð³ð³ð³ð³ð³ð³ð³ð³ð³ð³ð³ð³ð³ð³ð³ð³ð³ð³ð³ð³ð³ð³ ð³¡ð³¢ð³£ð³¤ð³¥ð³¦ð³§ð³¨ð³©ð³ªð³«ð³¬ð³­ð³®ð³¯ð³°ð³±ð³²ð£ð£ð£ð£ð£ð£ð£ð£ð£ð£ð£ð£ð£ð£ð£ð£ð£ð£ð£ð£ð£ð£ð£ð£ð£ð£ð£ð£ð£ð£ð£ð£Ä±È·ââð¤¢ð¤£ð¤¤ð¤¥ð¤¦ð¤§ð¤¨ð¤©ð¤ªð¤«ð¤¬ð¤­ð¤®ð¤¯ð¤°ð¤±ð¤²ð¤³ð¤´ð¤µð¤¶ð¤·ð¤¸ð¤¹ð¤ºð¤»ð¤¼ð¤½ð¤¾ð¤¿ð¥ð¥ð¥ð¥Ù®Ú¡Ù¯å­åå¤è§£äº¤æ ç¡åå¾åæ°åçµè²©å£°å¹æ¼ææéæç¦ç©ºåæºç³å²å¶éå¾å¯ä¸½ä¸¸ä¹ð ¢ä½ ä¾»ååºååãð ºåå¤å·ð ã¹å§ð åå¤ä»å¬ð©åãå»åå·ãååååå³å½å¿ð ¨¬ç°ååð ­£å«å±ååå¸åå¨å¢å¶ååå£åå«å³ååååå´å£®åå´å åå ²å ±å¢¬ð¡¤å£²å£·å¤å¤¢å¥¢ð¡¨ð¡ªå§¬å¨å¨§å§å©¦ã®å¬å¬¾ð¡§å¯å¯å¯³ð¡¬å¯¿å°ãå± å³å²ð¡·¤åµð¡·¦åµ®åµ«åµ¼å·¡å·¢ã ¯å·½å¸¨å¸½å¹©ã¡¢ð¢ã¡¼åº°åº³åº¶ðªð¢±èå¼¢ã£ð£¸ð¦å½¢å½«ã££å¾å¿å¿å¿¹æã¤ºã¤ð¢ææææºæ²æ¤æ¯ææææ±ææð¢¬æ½æ¼æ¨ææ¤ð¢¯±æ¢ææ©ã¨®æ©æ¾ææ·ã©¬æ¬ð£æ£æ¸æã¬ã¬ã«¤ååææè­äæ¡ææð£ã­æºææ¡ð£­æ¢æ æ¤æ¥æ¦£æ§ªæª¨ð££æ«ã°æ¬¡ð£¢§æ­ã±æ­²æ®æ®»ð£ªð¡´ð£«ºæ±ð£²¼æ²¿æ³æ±§æ´æ´¾æµ©æµ¸æ¶ð£´æ´´æ¸¯æ¹®ã´³æ»ð£»æ·¹æ½®ð£½ð£¾æ¿ç¹çã¶çç½ç·ç­ð ¥çð¤£çç¨çð¤ççð¤µð¤ çºçãº¬ç¥ãº¸ççççã¼ç¤ð¤°¶ç¾ð¤²ð¢çð¤¾¡ð¤¾¸ð¥ã¿¼äð¥³ð¥²ð¥ð¥³çççääð¥ç¡ä£ð¥¦ð¥ð¥ç§«ä¯ç©ç©ð¥¥¼ð¥ª§äð¥®«ç¯ç¯ä§ð¥²ç³ä ç³¨ç³£ç´ð¥¾çµ£äç·ç¸ç¹ä´ð¦¨ð¦äð¦ç½ºð¦¾ç¾ç¿ºð¦ð¦£è ð¦¨è°ð£äè²èäè¾åªµð¦§ð¦µð£ð£èè¾ä«èèèå³è±è³è½è¦ð¦¬¼èè£è­è£è½è§èèèèð¦°¶ð¦µ«ð¦³ä«è±è³èð§è¤ð¦¼¬ää¡ð¦¾±ð§ä«èè§è©è©èèè¢è¨è«èè¡è ä¹è¡ ð§§è£è£äµè£ºã»ð§¢®ð§¥¦ä¾äèª ð§²¨è²«è³è´èµ·ð§¼¯ð  è·è¶¼è·°ð £è»ð¨ð¨­éé±éð¨®éé¸ééé¼é¹éð¨¯ºéä¦é·ð¨µ·ä§¦éå¶²é£ð©ð©ä©®ä©¶é ð©äª²ð©é ©ð©¶é£¢ä¬³é¤©é¦§é§é§¾ä¯ð©¬°é±é³½ä³ä³­éµ§ðªä³¸ðªðªðªäµé»¾é¼é¼é¼ðª";
  
  function mapChar(codePoint) {
    if (codePoint >= 0x30000) {
      // High planes are special cased.
      if (codePoint >= 0xE0100 && codePoint <= 0xE01EF)
        return 18874368;
      return 0;
    }
    return blocks[blockIdxes[codePoint >> 4]][codePoint & 15];
  }
  
  return {
    mapStr: mappingStr,
    mapChar: mapChar
  };
  }));
  
  },{}],177:[function(require,module,exports){
  (function(root, factory) {
    /* istanbul ignore next */
    if (typeof define === 'function' && define.amd) {
      define(['punycode', './idna-map'], function(punycode, idna_map) {
        return factory(punycode, idna_map);
      });
    }
    else if (typeof exports === 'object') {
      module.exports = factory(require('punycode'), require('./idna-map'));
    }
    else {
      root.uts46 = factory(root.punycode, root.idna_map);
    }
  }(this, function(punycode, idna_map) {
  
    function mapLabel(label, useStd3ASCII, transitional) {
      var mapped = [];
      var chars = punycode.ucs2.decode(label);
      for (var i = 0; i < chars.length; i++) {
        var cp = chars[i];
        var ch = punycode.ucs2.encode([chars[i]]);
        var composite = idna_map.mapChar(cp);
        var flags = (composite >> 23);
        var kind = (composite >> 21) & 3;
        var index = (composite >> 5) & 0xffff;
        var length = composite & 0x1f;
        var value = idna_map.mapStr.substr(index, length);
        if (kind === 0 || (useStd3ASCII && (flags & 1))) {
          throw new Error("Illegal char " + ch);
        }
        else if (kind === 1) {
          mapped.push(value);
        }
        else if (kind === 2) {
          mapped.push(transitional ? value : ch);
        }
        /* istanbul ignore next */
        else if (kind === 3) {
          mapped.push(ch);
        }
      }
  
      var newLabel = mapped.join("").normalize("NFC");
      return newLabel;
    }
  
    function process(domain, transitional, useStd3ASCII) {
      /* istanbul ignore if */
      if (useStd3ASCII === undefined)
        useStd3ASCII = false;
      var mappedIDNA = mapLabel(domain, useStd3ASCII, transitional);
  
      // Step 3. Break
      var labels = mappedIDNA.split(".");
  
      // Step 4. Convert/Validate
      labels = labels.map(function(label) {
        if (label.startsWith("xn--")) {
          label = punycode.decode(label.substring(4));
          validateLabel(label, useStd3ASCII, false);
        }
        else {
          validateLabel(label, useStd3ASCII, transitional);
        }
        return label;
      });
  
      return labels.join(".");
    }
  
    function validateLabel(label, useStd3ASCII, transitional) {
      // 2. The label must not contain a U+002D HYPHEN-MINUS character in both the
      // third position and fourth positions.
      if (label[2] === '-' && label[3] === '-')
        throw new Error("Failed to validate " + label);
  
      // 3. The label must neither begin nor end with a U+002D HYPHEN-MINUS
      // character.
      if (label.startsWith('-') || label.endsWith('-'))
        throw new Error("Failed to validate " + label);
  
      // 4. The label must not contain a U+002E ( . ) FULL STOP.
      // this should never happen as label is chunked internally by this character
      /* istanbul ignore if */
      if (label.includes('.'))
        throw new Error("Failed to validate " + label);
  
      if (mapLabel(label, useStd3ASCII, transitional) !== label)
        throw new Error("Failed to validate " + label);
  
      // 5. The label must not begin with a combining mark, that is:
      // General_Category=Mark.
      var ch = label.codePointAt(0);
      if (idna_map.mapChar(ch) & (0x2 << 23))
        throw new Error("Label contains illegal character: " + ch);
    }
  
    function toAscii(domain, options) {
      if (options === undefined)
        options = {};
      var transitional = 'transitional' in options ? options.transitional : true;
      var useStd3ASCII = 'useStd3ASCII' in options ? options.useStd3ASCII : false;
      var verifyDnsLength = 'verifyDnsLength' in options ? options.verifyDnsLength : false;
      var labels = process(domain, transitional, useStd3ASCII).split('.');
      var asciiLabels = labels.map(punycode.toASCII);
      var asciiString = asciiLabels.join('.');
      var i;
      if (verifyDnsLength) {
        if (asciiString.length < 1 || asciiString.length > 253) {
          throw new Error("DNS name has wrong length: " + asciiString);
        }
        for (i = 0; i < asciiLabels.length; i++) {//for .. of replacement
          var label = asciiLabels[i];
          if (label.length < 1 || label.length > 63)
            throw new Error("DNS label has wrong length: " + label);
        }
      }
      return asciiString;
    }
  
    function toUnicode(domain, options) {
      if (options === undefined)
        options = {};
      var useStd3ASCII = 'useStd3ASCII' in options ? options.useStd3ASCII : false;
      return process(domain, false, useStd3ASCII);
    }
  
    return {
      toUnicode: toUnicode,
      toAscii: toAscii,
    };
  }));
  
  },{"./idna-map":176,"punycode":265}],178:[function(require,module,exports){
  exports.read = function (buffer, offset, isLE, mLen, nBytes) {
    var e, m
    var eLen = nBytes * 8 - mLen - 1
    var eMax = (1 << eLen) - 1
    var eBias = eMax >> 1
    var nBits = -7
    var i = isLE ? (nBytes - 1) : 0
    var d = isLE ? -1 : 1
    var s = buffer[offset + i]
  
    i += d
  
    e = s & ((1 << (-nBits)) - 1)
    s >>= (-nBits)
    nBits += eLen
    for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {}
  
    m = e & ((1 << (-nBits)) - 1)
    e >>= (-nBits)
    nBits += mLen
    for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {}
  
    if (e === 0) {
      e = 1 - eBias
    } else if (e === eMax) {
      return m ? NaN : ((s ? -1 : 1) * Infinity)
    } else {
      m = m + Math.pow(2, mLen)
      e = e - eBias
    }
    return (s ? -1 : 1) * m * Math.pow(2, e - mLen)
  }
  
  exports.write = function (buffer, value, offset, isLE, mLen, nBytes) {
    var e, m, c
    var eLen = nBytes * 8 - mLen - 1
    var eMax = (1 << eLen) - 1
    var eBias = eMax >> 1
    var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)
    var i = isLE ? 0 : (nBytes - 1)
    var d = isLE ? 1 : -1
    var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0
  
    value = Math.abs(value)
  
    if (isNaN(value) || value === Infinity) {
      m = isNaN(value) ? 1 : 0
      e = eMax
    } else {
      e = Math.floor(Math.log(value) / Math.LN2)
      if (value * (c = Math.pow(2, -e)) < 1) {
        e--
        c *= 2
      }
      if (e + eBias >= 1) {
        value += rt / c
      } else {
        value += rt * Math.pow(2, 1 - eBias)
      }
      if (value * c >= 2) {
        e++
        c /= 2
      }
  
      if (e + eBias >= eMax) {
        m = 0
        e = eMax
      } else if (e + eBias >= 1) {
        m = (value * c - 1) * Math.pow(2, mLen)
        e = e + eBias
      } else {
        m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)
        e = 0
      }
    }
  
    for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}
  
    e = (e << mLen) | m
    eLen += mLen
    for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}
  
    buffer[offset + i - d] |= s * 128
  }
  
  },{}],179:[function(require,module,exports){
  
  var indexOf = [].indexOf;
  
  module.exports = function(arr, obj){
    if (indexOf) return arr.indexOf(obj);
    for (var i = 0; i < arr.length; ++i) {
      if (arr[i] === obj) return i;
    }
    return -1;
  };
  },{}],180:[function(require,module,exports){
  if (typeof Object.create === 'function') {
    // implementation from standard node.js 'util' module
    module.exports = function inherits(ctor, superCtor) {
      ctor.super_ = superCtor
      ctor.prototype = Object.create(superCtor.prototype, {
        constructor: {
          value: ctor,
          enumerable: false,
          writable: true,
          configurable: true
        }
      });
    };
  } else {
    // old school shim for old browsers
    module.exports = function inherits(ctor, superCtor) {
      ctor.super_ = superCtor
      var TempCtor = function () {}
      TempCtor.prototype = superCtor.prototype
      ctor.prototype = new TempCtor()
      ctor.prototype.constructor = ctor
    }
  }
  
  },{}],181:[function(require,module,exports){
  /*!
   * Determine if an object is a Buffer
   *
   * @author   Feross Aboukhadijeh <https://feross.org>
   * @license  MIT
   */
  
  // The _isBuffer check is for Safari 5-7 support, because it's missing
  // Object.prototype.constructor. Remove this eventually
  module.exports = function (obj) {
    return obj != null && (isBuffer(obj) || isSlowBuffer(obj) || !!obj._isBuffer)
  }
  
  function isBuffer (obj) {
    return !!obj.constructor && typeof obj.constructor.isBuffer === 'function' && obj.constructor.isBuffer(obj)
  }
  
  // For Node v0.10 support. Remove this eventually.
  function isSlowBuffer (obj) {
    return typeof obj.readFloatLE === 'function' && typeof obj.slice === 'function' && isBuffer(obj.slice(0, 0))
  }
  
  },{}],182:[function(require,module,exports){
  'use strict';
  
  var fnToStr = Function.prototype.toString;
  
  var constructorRegex = /^\s*class\b/;
  var isES6ClassFn = function isES6ClassFunction(value) {
    try {
      var fnStr = fnToStr.call(value);
      return constructorRegex.test(fnStr);
    } catch (e) {
      return false; // not a function
    }
  };
  
  var tryFunctionObject = function tryFunctionToStr(value) {
    try {
      if (isES6ClassFn(value)) { return false; }
      fnToStr.call(value);
      return true;
    } catch (e) {
      return false;
    }
  };
  var toStr = Object.prototype.toString;
  var fnClass = '[object Function]';
  var genClass = '[object GeneratorFunction]';
  var hasToStringTag = typeof Symbol === 'function' && typeof Symbol.toStringTag === 'symbol';
  
  module.exports = function isCallable(value) {
    if (!value) { return false; }
    if (typeof value !== 'function' && typeof value !== 'object') { return false; }
    if (typeof value === 'function' && !value.prototype) { return true; }
    if (hasToStringTag) { return tryFunctionObject(value); }
    if (isES6ClassFn(value)) { return false; }
    var strClass = toStr.call(value);
    return strClass === fnClass || strClass === genClass;
  };
  
  },{}],183:[function(require,module,exports){
  'use strict';
  var toString = Object.prototype.toString;
  
  module.exports = function (x) {
    return toString.call(x) === '[object Function]';
  };
  
  },{}],184:[function(require,module,exports){
  module.exports = isFunction
  
  var toString = Object.prototype.toString
  
  function isFunction (fn) {
    var string = toString.call(fn)
    return string === '[object Function]' ||
      (typeof fn === 'function' && string !== '[object RegExp]') ||
      (typeof window !== 'undefined' &&
       // IE8 and below
       (fn === window.setTimeout ||
        fn === window.alert ||
        fn === window.confirm ||
        fn === window.prompt))
  };
  
  },{}],185:[function(require,module,exports){
  /**
   * Returns a `Boolean` on whether or not the a `String` starts with '0x'
   * @param {String} str the string input value
   * @return {Boolean} a boolean if it is or is not hex prefixed
   * @throws if the str input is not a string
   */
  module.exports = function isHexPrefixed(str) {
    if (typeof str !== 'string') {
      throw new Error("[is-hex-prefixed] value must be type 'string', is currently type " + (typeof str) + ", while checking isHexPrefixed.");
    }
  
    return str.slice(0, 2) === '0x';
  }
  
  },{}],186:[function(require,module,exports){
  var toString = {}.toString;
  
  module.exports = Array.isArray || function (arr) {
    return toString.call(arr) == '[object Array]';
  };
  
  },{}],187:[function(require,module,exports){
  'use strict';
  
  function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }
  
  var promiseToCallback = require('promise-to-callback');
  
  module.exports = createAsyncMiddleware;
  
  function createAsyncMiddleware(asyncMiddleware) {
    return function (req, res, next, end) {
      var getNextPromise = function () {
        var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
          return regeneratorRuntime.wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  nextDonePromise = getNextDoneCallback();
                  _context.next = 3;
                  return nextDonePromise;
  
                case 3:
                  return _context.abrupt('return', undefined);
  
                case 4:
                case 'end':
                  return _context.stop();
              }
            }
          }, _callee, this);
        }));
  
        return function getNextPromise() {
          return _ref.apply(this, arguments);
        };
      }();
  
      var nextDonePromise = null;
      var finishedPromise = asyncMiddleware(req, res, getNextPromise);
      promiseToCallback(finishedPromise)(function (err) {
        // async middleware ended
        if (nextDonePromise) {
          // next handler was called - complete nextHandler
          promiseToCallback(nextDonePromise)(function (nextErr, nextHandlerSignalDone) {
            // nextErr is only present if something went really wrong
            // if an error is thrown after `await next()` it appears as `err` and not `nextErr`
            if (nextErr) {
              console.error(nextErr);
              return end(nextErr);
            }
            nextHandlerSignalDone(err);
          });
        } else {
          // next handler was not called - complete middleware
          end(err);
        }
      });
  
      function getNextDoneCallback() {
        return new Promise(function (resolve) {
          next(function (cb) {
            return resolve(cb);
          });
        });
      }
    };
  }
  
  },{"promise-to-callback":258}],188:[function(require,module,exports){
  'use strict';
  
  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
  
  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
  
  function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
  
  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
  
  var async = require('async');
  var SafeEventEmitter = require('safe-event-emitter');
  
  var RpcEngine = function (_SafeEventEmitter) {
    _inherits(RpcEngine, _SafeEventEmitter);
  
    function RpcEngine() {
      _classCallCheck(this, RpcEngine);
  
      var _this = _possibleConstructorReturn(this, (RpcEngine.__proto__ || Object.getPrototypeOf(RpcEngine)).call(this));
  
      _this._middleware = [];
      return _this;
    }
  
    //
    // Public
    //
  
    _createClass(RpcEngine, [{
      key: 'push',
      value: function push(middleware) {
        this._middleware.push(middleware);
      }
    }, {
      key: 'handle',
      value: function handle(req, cb) {
        // batch request support
        if (Array.isArray(req)) {
          async.map(req, this._handle.bind(this), cb);
        } else {
          this._handle(req, cb);
        }
      }
  
      //
      // Private
      //
  
    }, {
      key: '_handle',
      value: function _handle(_req, cb) {
        // shallow clone request object
        var req = Object.assign({}, _req);
        // create response obj
        var res = {
          id: req.id,
          jsonrpc: req.jsonrpc
          // process all middleware
        };this._runMiddleware(req, res, function (err) {
          // return response
          cb(err, res);
        });
      }
    }, {
      key: '_runMiddleware',
      value: function _runMiddleware(req, res, onDone) {
        var _this2 = this;
  
        // flow
        async.waterfall([function (cb) {
          return _this2._runMiddlewareDown(req, res, cb);
        }, checkForCompletion, function (returnHandlers, cb) {
          return _this2._runReturnHandlersUp(returnHandlers, cb);
        }], onDone);
  
        function checkForCompletion(_ref, cb) {
          var isComplete = _ref.isComplete,
              returnHandlers = _ref.returnHandlers;
  
          // fail if not completed
          if (!('result' in res) && !('error' in res)) {
            var requestBody = JSON.stringify(req, null, 2);
            var message = 'JsonRpcEngine - response has no error or result for request:\n' + requestBody;
            return cb(new Error(message));
          }
          if (!isComplete) {
            var _requestBody = JSON.stringify(req, null, 2);
            var _message = 'JsonRpcEngine - nothing ended request:\n' + _requestBody;
            return cb(new Error(_message));
          }
          // continue
          return cb(null, returnHandlers);
        }
  
        function runReturnHandlers(returnHandlers, cb) {
          async.eachSeries(returnHandlers, function (handler, next) {
            return handler(next);
          }, onDone);
        }
      }
  
      // walks down stack of middleware
  
    }, {
      key: '_runMiddlewareDown',
      value: function _runMiddlewareDown(req, res, onDone) {
        // for climbing back up the stack
        var allReturnHandlers = [];
        // flag for stack return
        var isComplete = false;
  
        // down stack of middleware, call and collect optional allReturnHandlers
        async.mapSeries(this._middleware, eachMiddleware, completeRequest);
  
        // runs an individual middleware
        function eachMiddleware(middleware, cb) {
          // skip middleware if completed
          if (isComplete) return cb();
          // run individual middleware
          middleware(req, res, next, end);
  
          function next(returnHandler) {
            // add return handler
            allReturnHandlers.push(returnHandler);
            cb();
          }
          function end(err) {
            if (err) return cb(err);
            // mark as completed
            isComplete = true;
            cb();
          }
        }
  
        // returns, indicating whether or not it ended
        function completeRequest(err) {
          if (err) {
            // prepare error message
            res.error = {
              code: err.code || -32603,
              message: err.stack
              // return error-first and res with err
            };return onDone(err, res);
          }
          var returnHandlers = allReturnHandlers.filter(Boolean).reverse();
          onDone(null, { isComplete: isComplete, returnHandlers: returnHandlers });
        }
      }
  
      // climbs the stack calling return handlers
  
    }, {
      key: '_runReturnHandlersUp',
      value: function _runReturnHandlersUp(returnHandlers, cb) {
        async.eachSeries(returnHandlers, function (handler, next) {
          return handler(next);
        }, cb);
      }
    }]);
  
    return RpcEngine;
  }(SafeEventEmitter);
  
  module.exports = RpcEngine;
  
  },{"async":21,"safe-event-emitter":291}],189:[function(require,module,exports){
  module.exports = require('./lib/errors');
  },{"./lib/errors":190}],190:[function(require,module,exports){
  var inherits = require('inherits');
  
  var JsonRpcError = function(message, code, data) {
    if (!(this instanceof JsonRpcError)) {
      return new JsonRpcError(message, code, data);
    }
  
    this.message = message;
    this.code = code;
  
    if (typeof data !== 'undefined') {
      this.data = data;
    }
  };
  
  inherits(JsonRpcError, Error);
  
  var ParseError = function() {
    if (!(this instanceof ParseError)) {
      return new ParseError();
    }
  
    JsonRpcError.call(this, 'Parse error', -32700);
  };
  
  inherits(ParseError, JsonRpcError);
  
  var InvalidRequest = function() {
    if (!(this instanceof InvalidRequest)) {
      return new InvalidRequest();
    }
  
    JsonRpcError.call(this, 'Invalid Request', -32600);
  };
  
  inherits(InvalidRequest, JsonRpcError);
  
  var MethodNotFound = function() {
    if (!(this instanceof MethodNotFound)) {
      return new MethodNotFound();
    }
  
    JsonRpcError.call(this, 'Method not found', -32601);
  };
  
  inherits(MethodNotFound, JsonRpcError);
  
  var InvalidParams = function() {
    if (!(this instanceof InvalidParams)) {
      return new InvalidParams();
    }
  
    JsonRpcError.call(this, 'Invalid params', -32602);
  };
  
  inherits(InvalidParams, JsonRpcError);
  
  var InternalError = function(err) {
    var message;
  
    if (!(this instanceof InternalError)) {
      return new InternalError(err);
    }
  
    if (err && err.message) {
      message = err.message;
    } else {
      message = 'Internal error';
    }
  
    JsonRpcError.call(this, message, -32603);
  };
  
  inherits(InternalError, JsonRpcError);
  
  var ServerError = function(code) {
    if (code < -32099 || code > -32000) {
      throw new Error('Invalid error code');
    }
  
    if (!(this instanceof ServerError)) {
      return new ServerError(code);
    }
  
    JsonRpcError.call(this, 'Server error', code);
  };
  
  inherits(ServerError, JsonRpcError);
  
  JsonRpcError.ParseError = ParseError;
  JsonRpcError.InvalidRequest = InvalidRequest;
  JsonRpcError.MethodNotFound = MethodNotFound;
  JsonRpcError.InvalidParams = InvalidParams;
  JsonRpcError.InternalError = InternalError;
  JsonRpcError.ServerError = ServerError;
  
  module.exports = JsonRpcError;
  
  
  
  },{"inherits":180}],191:[function(require,module,exports){
  module.exports = IdIterator
  
  function IdIterator(opts){
    opts = opts || {}
    var max = opts.max || Number.MAX_SAFE_INTEGER
    var idCounter = typeof opts.start !== 'undefined' ? opts.start : Math.floor(Math.random() * max)
  
    return function createRandomId () {
      idCounter = idCounter % max
      return idCounter++
    }
  
  }
  },{}],192:[function(require,module,exports){
  exports.parse = require('./lib/parse');
  exports.stringify = require('./lib/stringify');
  
  },{"./lib/parse":193,"./lib/stringify":194}],193:[function(require,module,exports){
  var at, // The index of the current character
      ch, // The current character
      escapee = {
          '"':  '"',
          '\\': '\\',
          '/':  '/',
          b:    '\b',
          f:    '\f',
          n:    '\n',
          r:    '\r',
          t:    '\t'
      },
      text,
  
      error = function (m) {
          // Call error when something is wrong.
          throw {
              name:    'SyntaxError',
              message: m,
              at:      at,
              text:    text
          };
      },
      
      next = function (c) {
          // If a c parameter is provided, verify that it matches the current character.
          if (c && c !== ch) {
              error("Expected '" + c + "' instead of '" + ch + "'");
          }
          
          // Get the next character. When there are no more characters,
          // return the empty string.
          
          ch = text.charAt(at);
          at += 1;
          return ch;
      },
      
      number = function () {
          // Parse a number value.
          var number,
              string = '';
          
          if (ch === '-') {
              string = '-';
              next('-');
          }
          while (ch >= '0' && ch <= '9') {
              string += ch;
              next();
          }
          if (ch === '.') {
              string += '.';
              while (next() && ch >= '0' && ch <= '9') {
                  string += ch;
              }
          }
          if (ch === 'e' || ch === 'E') {
              string += ch;
              next();
              if (ch === '-' || ch === '+') {
                  string += ch;
                  next();
              }
              while (ch >= '0' && ch <= '9') {
                  string += ch;
                  next();
              }
          }
          number = +string;
          if (!isFinite(number)) {
              error("Bad number");
          } else {
              return number;
          }
      },
      
      string = function () {
          // Parse a string value.
          var hex,
              i,
              string = '',
              uffff;
          
          // When parsing for string values, we must look for " and \ characters.
          if (ch === '"') {
              while (next()) {
                  if (ch === '"') {
                      next();
                      return string;
                  } else if (ch === '\\') {
                      next();
                      if (ch === 'u') {
                          uffff = 0;
                          for (i = 0; i < 4; i += 1) {
                              hex = parseInt(next(), 16);
                              if (!isFinite(hex)) {
                                  break;
                              }
                              uffff = uffff * 16 + hex;
                          }
                          string += String.fromCharCode(uffff);
                      } else if (typeof escapee[ch] === 'string') {
                          string += escapee[ch];
                      } else {
                          break;
                      }
                  } else {
                      string += ch;
                  }
              }
          }
          error("Bad string");
      },
  
      white = function () {
  
  // Skip whitespace.
  
          while (ch && ch <= ' ') {
              next();
          }
      },
  
      word = function () {
  
  // true, false, or null.
  
          switch (ch) {
          case 't':
              next('t');
              next('r');
              next('u');
              next('e');
              return true;
          case 'f':
              next('f');
              next('a');
              next('l');
              next('s');
              next('e');
              return false;
          case 'n':
              next('n');
              next('u');
              next('l');
              next('l');
              return null;
          }
          error("Unexpected '" + ch + "'");
      },
  
      value,  // Place holder for the value function.
  
      array = function () {
  
  // Parse an array value.
  
          var array = [];
  
          if (ch === '[') {
              next('[');
              white();
              if (ch === ']') {
                  next(']');
                  return array;   // empty array
              }
              while (ch) {
                  array.push(value());
                  white();
                  if (ch === ']') {
                      next(']');
                      return array;
                  }
                  next(',');
                  white();
              }
          }
          error("Bad array");
      },
  
      object = function () {
  
  // Parse an object value.
  
          var key,
              object = {};
  
          if (ch === '{') {
              next('{');
              white();
              if (ch === '}') {
                  next('}');
                  return object;   // empty object
              }
              while (ch) {
                  key = string();
                  white();
                  next(':');
                  if (Object.hasOwnProperty.call(object, key)) {
                      error('Duplicate key "' + key + '"');
                  }
                  object[key] = value();
                  white();
                  if (ch === '}') {
                      next('}');
                      return object;
                  }
                  next(',');
                  white();
              }
          }
          error("Bad object");
      };
  
  value = function () {
  
  // Parse a JSON value. It could be an object, an array, a string, a number,
  // or a word.
  
      white();
      switch (ch) {
      case '{':
          return object();
      case '[':
          return array();
      case '"':
          return string();
      case '-':
          return number();
      default:
          return ch >= '0' && ch <= '9' ? number() : word();
      }
  };
  
  // Return the json_parse function. It will have access to all of the above
  // functions and variables.
  
  module.exports = function (source, reviver) {
      var result;
      
      text = source;
      at = 0;
      ch = ' ';
      result = value();
      white();
      if (ch) {
          error("Syntax error");
      }
  
      // If there is a reviver function, we recursively walk the new structure,
      // passing each name/value pair to the reviver function for possible
      // transformation, starting with a temporary root object that holds the result
      // in an empty key. If there is not a reviver function, we simply return the
      // result.
  
      return typeof reviver === 'function' ? (function walk(holder, key) {
          var k, v, value = holder[key];
          if (value && typeof value === 'object') {
              for (k in value) {
                  if (Object.prototype.hasOwnProperty.call(value, k)) {
                      v = walk(value, k);
                      if (v !== undefined) {
                          value[k] = v;
                      } else {
                          delete value[k];
                      }
                  }
              }
          }
          return reviver.call(holder, key, value);
      }({'': result}, '')) : result;
  };
  
  },{}],194:[function(require,module,exports){
  var cx = /[\u0000\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g,
      escapable = /[\\\"\x00-\x1f\x7f-\x9f\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g,
      gap,
      indent,
      meta = {    // table of character substitutions
          '\b': '\\b',
          '\t': '\\t',
          '\n': '\\n',
          '\f': '\\f',
          '\r': '\\r',
          '"' : '\\"',
          '\\': '\\\\'
      },
      rep;
  
  function quote(string) {
      // If the string contains no control characters, no quote characters, and no
      // backslash characters, then we can safely slap some quotes around it.
      // Otherwise we must also replace the offending characters with safe escape
      // sequences.
      
      escapable.lastIndex = 0;
      return escapable.test(string) ? '"' + string.replace(escapable, function (a) {
          var c = meta[a];
          return typeof c === 'string' ? c :
              '\\u' + ('0000' + a.charCodeAt(0).toString(16)).slice(-4);
      }) + '"' : '"' + string + '"';
  }
  
  function str(key, holder) {
      // Produce a string from holder[key].
      var i,          // The loop counter.
          k,          // The member key.
          v,          // The member value.
          length,
          mind = gap,
          partial,
          value = holder[key];
      
      // If the value has a toJSON method, call it to obtain a replacement value.
      if (value && typeof value === 'object' &&
              typeof value.toJSON === 'function') {
          value = value.toJSON(key);
      }
      
      // If we were called with a replacer function, then call the replacer to
      // obtain a replacement value.
      if (typeof rep === 'function') {
          value = rep.call(holder, key, value);
      }
      
      // What happens next depends on the value's type.
      switch (typeof value) {
          case 'string':
              return quote(value);
          
          case 'number':
              // JSON numbers must be finite. Encode non-finite numbers as null.
              return isFinite(value) ? String(value) : 'null';
          
          case 'boolean':
          case 'null':
              // If the value is a boolean or null, convert it to a string. Note:
              // typeof null does not produce 'null'. The case is included here in
              // the remote chance that this gets fixed someday.
              return String(value);
              
          case 'object':
              if (!value) return 'null';
              gap += indent;
              partial = [];
              
              // Array.isArray
              if (Object.prototype.toString.apply(value) === '[object Array]') {
                  length = value.length;
                  for (i = 0; i < length; i += 1) {
                      partial[i] = str(i, value) || 'null';
                  }
                  
                  // Join all of the elements together, separated with commas, and
                  // wrap them in brackets.
                  v = partial.length === 0 ? '[]' : gap ?
                      '[\n' + gap + partial.join(',\n' + gap) + '\n' + mind + ']' :
                      '[' + partial.join(',') + ']';
                  gap = mind;
                  return v;
              }
              
              // If the replacer is an array, use it to select the members to be
              // stringified.
              if (rep && typeof rep === 'object') {
                  length = rep.length;
                  for (i = 0; i < length; i += 1) {
                      k = rep[i];
                      if (typeof k === 'string') {
                          v = str(k, value);
                          if (v) {
                              partial.push(quote(k) + (gap ? ': ' : ':') + v);
                          }
                      }
                  }
              }
              else {
                  // Otherwise, iterate through all of the keys in the object.
                  for (k in value) {
                      if (Object.prototype.hasOwnProperty.call(value, k)) {
                          v = str(k, value);
                          if (v) {
                              partial.push(quote(k) + (gap ? ': ' : ':') + v);
                          }
                      }
                  }
              }
              
          // Join all of the member texts together, separated with commas,
          // and wrap them in braces.
  
          v = partial.length === 0 ? '{}' : gap ?
              '{\n' + gap + partial.join(',\n' + gap) + '\n' + mind + '}' :
              '{' + partial.join(',') + '}';
          gap = mind;
          return v;
      }
  }
  
  module.exports = function (value, replacer, space) {
      var i;
      gap = '';
      indent = '';
      
      // If the space parameter is a number, make an indent string containing that
      // many spaces.
      if (typeof space === 'number') {
          for (i = 0; i < space; i += 1) {
              indent += ' ';
          }
      }
      // If the space parameter is a string, it will be used as the indent string.
      else if (typeof space === 'string') {
          indent = space;
      }
  
      // If there is a replacer, it must be a function or an array.
      // Otherwise, throw an error.
      rep = replacer;
      if (replacer && typeof replacer !== 'function'
      && (typeof replacer !== 'object' || typeof replacer.length !== 'number')) {
          throw new Error('JSON.stringify');
      }
      
      // Make a fake root object containing our value under the key of ''.
      // Return the result of stringifying the value.
      return str('', {'': value});
  };
  
  },{}],195:[function(require,module,exports){
  'use strict'
  module.exports = require('./lib/api')(require('./lib/keccak'))
  
  },{"./lib/api":196,"./lib/keccak":200}],196:[function(require,module,exports){
  'use strict'
  var createKeccak = require('./keccak')
  var createShake = require('./shake')
  
  module.exports = function (KeccakState) {
    var Keccak = createKeccak(KeccakState)
    var Shake = createShake(KeccakState)
  
    return function (algorithm, options) {
      var hash = typeof algorithm === 'string' ? algorithm.toLowerCase() : algorithm
      switch (hash) {
        case 'keccak224': return new Keccak(1152, 448, null, 224, options)
        case 'keccak256': return new Keccak(1088, 512, null, 256, options)
        case 'keccak384': return new Keccak(832, 768, null, 384, options)
        case 'keccak512': return new Keccak(576, 1024, null, 512, options)
  
        case 'sha3-224': return new Keccak(1152, 448, 0x06, 224, options)
        case 'sha3-256': return new Keccak(1088, 512, 0x06, 256, options)
        case 'sha3-384': return new Keccak(832, 768, 0x06, 384, options)
        case 'sha3-512': return new Keccak(576, 1024, 0x06, 512, options)
  
        case 'shake128': return new Shake(1344, 256, 0x1f, options)
        case 'shake256': return new Shake(1088, 512, 0x1f, options)
  
        default: throw new Error('Invald algorithm: ' + algorithm)
      }
    }
  }
  
  },{"./keccak":197,"./shake":198}],197:[function(require,module,exports){
  'use strict'
  var Buffer = require('safe-buffer').Buffer
  var Transform = require('stream').Transform
  var inherits = require('inherits')
  
  module.exports = function (KeccakState) {
    function Keccak (rate, capacity, delimitedSuffix, hashBitLength, options) {
      Transform.call(this, options)
  
      this._rate = rate
      this._capacity = capacity
      this._delimitedSuffix = delimitedSuffix
      this._hashBitLength = hashBitLength
      this._options = options
  
      this._state = new KeccakState()
      this._state.initialize(rate, capacity)
      this._finalized = false
    }
  
    inherits(Keccak, Transform)
  
    Keccak.prototype._transform = function (chunk, encoding, callback) {
      var error = null
      try {
        this.update(chunk, encoding)
      } catch (err) {
        error = err
      }
  
      callback(error)
    }
  
    Keccak.prototype._flush = function (callback) {
      var error = null
      try {
        this.push(this.digest())
      } catch (err) {
        error = err
      }
  
      callback(error)
    }
  
    Keccak.prototype.update = function (data, encoding) {
      if (!Buffer.isBuffer(data) && typeof data !== 'string') throw new TypeError('Data must be a string or a buffer')
      if (this._finalized) throw new Error('Digest already called')
      if (!Buffer.isBuffer(data)) data = Buffer.from(data, encoding)
  
      this._state.absorb(data)
  
      return this
    }
  
    Keccak.prototype.digest = function (encoding) {
      if (this._finalized) throw new Error('Digest already called')
      this._finalized = true
  
      if (this._delimitedSuffix) this._state.absorbLastFewBits(this._delimitedSuffix)
      var digest = this._state.squeeze(this._hashBitLength / 8)
      if (encoding !== undefined) digest = digest.toString(encoding)
  
      this._resetState()
  
      return digest
    }
  
    // remove result from memory
    Keccak.prototype._resetState = function () {
      this._state.initialize(this._rate, this._capacity)
      return this
    }
  
    // because sometimes we need hash right now and little later
    Keccak.prototype._clone = function () {
      var clone = new Keccak(this._rate, this._capacity, this._delimitedSuffix, this._hashBitLength, this._options)
      this._state.copy(clone._state)
      clone._finalized = this._finalized
  
      return clone
    }
  
    return Keccak
  }
  
  },{"inherits":180,"safe-buffer":290,"stream":311}],198:[function(require,module,exports){
  'use strict'
  var Buffer = require('safe-buffer').Buffer
  var Transform = require('stream').Transform
  var inherits = require('inherits')
  
  module.exports = function (KeccakState) {
    function Shake (rate, capacity, delimitedSuffix, options) {
      Transform.call(this, options)
  
      this._rate = rate
      this._capacity = capacity
      this._delimitedSuffix = delimitedSuffix
      this._options = options
  
      this._state = new KeccakState()
      this._state.initialize(rate, capacity)
      this._finalized = false
    }
  
    inherits(Shake, Transform)
  
    Shake.prototype._transform = function (chunk, encoding, callback) {
      var error = null
      try {
        this.update(chunk, encoding)
      } catch (err) {
        error = err
      }
  
      callback(error)
    }
  
    Shake.prototype._flush = function () {}
  
    Shake.prototype._read = function (size) {
      this.push(this.squeeze(size))
    }
  
    Shake.prototype.update = function (data, encoding) {
      if (!Buffer.isBuffer(data) && typeof data !== 'string') throw new TypeError('Data must be a string or a buffer')
      if (this._finalized) throw new Error('Squeeze already called')
      if (!Buffer.isBuffer(data)) data = Buffer.from(data, encoding)
  
      this._state.absorb(data)
  
      return this
    }
  
    Shake.prototype.squeeze = function (dataByteLength, encoding) {
      if (!this._finalized) {
        this._finalized = true
        this._state.absorbLastFewBits(this._delimitedSuffix)
      }
  
      var data = this._state.squeeze(dataByteLength)
      if (encoding !== undefined) data = data.toString(encoding)
  
      return data
    }
  
    Shake.prototype._resetState = function () {
      this._state.initialize(this._rate, this._capacity)
      return this
    }
  
    Shake.prototype._clone = function () {
      var clone = new Shake(this._rate, this._capacity, this._delimitedSuffix, this._options)
      this._state.copy(clone._state)
      clone._finalized = this._finalized
  
      return clone
    }
  
    return Shake
  }
  
  },{"inherits":180,"safe-buffer":290,"stream":311}],199:[function(require,module,exports){
  'use strict'
  var P1600_ROUND_CONSTANTS = [1, 0, 32898, 0, 32906, 2147483648, 2147516416, 2147483648, 32907, 0, 2147483649, 0, 2147516545, 2147483648, 32777, 2147483648, 138, 0, 136, 0, 2147516425, 0, 2147483658, 0, 2147516555, 0, 139, 2147483648, 32905, 2147483648, 32771, 2147483648, 32770, 2147483648, 128, 2147483648, 32778, 0, 2147483658, 2147483648, 2147516545, 2147483648, 32896, 2147483648, 2147483649, 0, 2147516424, 2147483648]
  
  exports.p1600 = function (s) {
    for (var round = 0; round < 24; ++round) {
      // theta
      var lo0 = s[0] ^ s[10] ^ s[20] ^ s[30] ^ s[40]
      var hi0 = s[1] ^ s[11] ^ s[21] ^ s[31] ^ s[41]
      var lo1 = s[2] ^ s[12] ^ s[22] ^ s[32] ^ s[42]
      var hi1 = s[3] ^ s[13] ^ s[23] ^ s[33] ^ s[43]
      var lo2 = s[4] ^ s[14] ^ s[24] ^ s[34] ^ s[44]
      var hi2 = s[5] ^ s[15] ^ s[25] ^ s[35] ^ s[45]
      var lo3 = s[6] ^ s[16] ^ s[26] ^ s[36] ^ s[46]
      var hi3 = s[7] ^ s[17] ^ s[27] ^ s[37] ^ s[47]
      var lo4 = s[8] ^ s[18] ^ s[28] ^ s[38] ^ s[48]
      var hi4 = s[9] ^ s[19] ^ s[29] ^ s[39] ^ s[49]
  
      var lo = lo4 ^ (lo1 << 1 | hi1 >>> 31)
      var hi = hi4 ^ (hi1 << 1 | lo1 >>> 31)
      var t1slo0 = s[0] ^ lo
      var t1shi0 = s[1] ^ hi
      var t1slo5 = s[10] ^ lo
      var t1shi5 = s[11] ^ hi
      var t1slo10 = s[20] ^ lo
      var t1shi10 = s[21] ^ hi
      var t1slo15 = s[30] ^ lo
      var t1shi15 = s[31] ^ hi
      var t1slo20 = s[40] ^ lo
      var t1shi20 = s[41] ^ hi
      lo = lo0 ^ (lo2 << 1 | hi2 >>> 31)
      hi = hi0 ^ (hi2 << 1 | lo2 >>> 31)
      var t1slo1 = s[2] ^ lo
      var t1shi1 = s[3] ^ hi
      var t1slo6 = s[12] ^ lo
      var t1shi6 = s[13] ^ hi
      var t1slo11 = s[22] ^ lo
      var t1shi11 = s[23] ^ hi
      var t1slo16 = s[32] ^ lo
      var t1shi16 = s[33] ^ hi
      var t1slo21 = s[42] ^ lo
      var t1shi21 = s[43] ^ hi
      lo = lo1 ^ (lo3 << 1 | hi3 >>> 31)
      hi = hi1 ^ (hi3 << 1 | lo3 >>> 31)
      var t1slo2 = s[4] ^ lo
      var t1shi2 = s[5] ^ hi
      var t1slo7 = s[14] ^ lo
      var t1shi7 = s[15] ^ hi
      var t1slo12 = s[24] ^ lo
      var t1shi12 = s[25] ^ hi
      var t1slo17 = s[34] ^ lo
      var t1shi17 = s[35] ^ hi
      var t1slo22 = s[44] ^ lo
      var t1shi22 = s[45] ^ hi
      lo = lo2 ^ (lo4 << 1 | hi4 >>> 31)
      hi = hi2 ^ (hi4 << 1 | lo4 >>> 31)
      var t1slo3 = s[6] ^ lo
      var t1shi3 = s[7] ^ hi
      var t1slo8 = s[16] ^ lo
      var t1shi8 = s[17] ^ hi
      var t1slo13 = s[26] ^ lo
      var t1shi13 = s[27] ^ hi
      var t1slo18 = s[36] ^ lo
      var t1shi18 = s[37] ^ hi
      var t1slo23 = s[46] ^ lo
      var t1shi23 = s[47] ^ hi
      lo = lo3 ^ (lo0 << 1 | hi0 >>> 31)
      hi = hi3 ^ (hi0 << 1 | lo0 >>> 31)
      var t1slo4 = s[8] ^ lo
      var t1shi4 = s[9] ^ hi
      var t1slo9 = s[18] ^ lo
      var t1shi9 = s[19] ^ hi
      var t1slo14 = s[28] ^ lo
      var t1shi14 = s[29] ^ hi
      var t1slo19 = s[38] ^ lo
      var t1shi19 = s[39] ^ hi
      var t1slo24 = s[48] ^ lo
      var t1shi24 = s[49] ^ hi
  
      // rho & pi
      var t2slo0 = t1slo0
      var t2shi0 = t1shi0
      var t2slo16 = (t1shi5 << 4 | t1slo5 >>> 28)
      var t2shi16 = (t1slo5 << 4 | t1shi5 >>> 28)
      var t2slo7 = (t1slo10 << 3 | t1shi10 >>> 29)
      var t2shi7 = (t1shi10 << 3 | t1slo10 >>> 29)
      var t2slo23 = (t1shi15 << 9 | t1slo15 >>> 23)
      var t2shi23 = (t1slo15 << 9 | t1shi15 >>> 23)
      var t2slo14 = (t1slo20 << 18 | t1shi20 >>> 14)
      var t2shi14 = (t1shi20 << 18 | t1slo20 >>> 14)
      var t2slo10 = (t1slo1 << 1 | t1shi1 >>> 31)
      var t2shi10 = (t1shi1 << 1 | t1slo1 >>> 31)
      var t2slo1 = (t1shi6 << 12 | t1slo6 >>> 20)
      var t2shi1 = (t1slo6 << 12 | t1shi6 >>> 20)
      var t2slo17 = (t1slo11 << 10 | t1shi11 >>> 22)
      var t2shi17 = (t1shi11 << 10 | t1slo11 >>> 22)
      var t2slo8 = (t1shi16 << 13 | t1slo16 >>> 19)
      var t2shi8 = (t1slo16 << 13 | t1shi16 >>> 19)
      var t2slo24 = (t1slo21 << 2 | t1shi21 >>> 30)
      var t2shi24 = (t1shi21 << 2 | t1slo21 >>> 30)
      var t2slo20 = (t1shi2 << 30 | t1slo2 >>> 2)
      var t2shi20 = (t1slo2 << 30 | t1shi2 >>> 2)
      var t2slo11 = (t1slo7 << 6 | t1shi7 >>> 26)
      var t2shi11 = (t1shi7 << 6 | t1slo7 >>> 26)
      var t2slo2 = (t1shi12 << 11 | t1slo12 >>> 21)
      var t2shi2 = (t1slo12 << 11 | t1shi12 >>> 21)
      var t2slo18 = (t1slo17 << 15 | t1shi17 >>> 17)
      var t2shi18 = (t1shi17 << 15 | t1slo17 >>> 17)
      var t2slo9 = (t1shi22 << 29 | t1slo22 >>> 3)
      var t2shi9 = (t1slo22 << 29 | t1shi22 >>> 3)
      var t2slo5 = (t1slo3 << 28 | t1shi3 >>> 4)
      var t2shi5 = (t1shi3 << 28 | t1slo3 >>> 4)
      var t2slo21 = (t1shi8 << 23 | t1slo8 >>> 9)
      var t2shi21 = (t1slo8 << 23 | t1shi8 >>> 9)
      var t2slo12 = (t1slo13 << 25 | t1shi13 >>> 7)
      var t2shi12 = (t1shi13 << 25 | t1slo13 >>> 7)
      var t2slo3 = (t1slo18 << 21 | t1shi18 >>> 11)
      var t2shi3 = (t1shi18 << 21 | t1slo18 >>> 11)
      var t2slo19 = (t1shi23 << 24 | t1slo23 >>> 8)
      var t2shi19 = (t1slo23 << 24 | t1shi23 >>> 8)
      var t2slo15 = (t1slo4 << 27 | t1shi4 >>> 5)
      var t2shi15 = (t1shi4 << 27 | t1slo4 >>> 5)
      var t2slo6 = (t1slo9 << 20 | t1shi9 >>> 12)
      var t2shi6 = (t1shi9 << 20 | t1slo9 >>> 12)
      var t2slo22 = (t1shi14 << 7 | t1slo14 >>> 25)
      var t2shi22 = (t1slo14 << 7 | t1shi14 >>> 25)
      var t2slo13 = (t1slo19 << 8 | t1shi19 >>> 24)
      var t2shi13 = (t1shi19 << 8 | t1slo19 >>> 24)
      var t2slo4 = (t1slo24 << 14 | t1shi24 >>> 18)
      var t2shi4 = (t1shi24 << 14 | t1slo24 >>> 18)
  
      // chi
      s[0] = t2slo0 ^ (~t2slo1 & t2slo2)
      s[1] = t2shi0 ^ (~t2shi1 & t2shi2)
      s[10] = t2slo5 ^ (~t2slo6 & t2slo7)
      s[11] = t2shi5 ^ (~t2shi6 & t2shi7)
      s[20] = t2slo10 ^ (~t2slo11 & t2slo12)
      s[21] = t2shi10 ^ (~t2shi11 & t2shi12)
      s[30] = t2slo15 ^ (~t2slo16 & t2slo17)
      s[31] = t2shi15 ^ (~t2shi16 & t2shi17)
      s[40] = t2slo20 ^ (~t2slo21 & t2slo22)
      s[41] = t2shi20 ^ (~t2shi21 & t2shi22)
      s[2] = t2slo1 ^ (~t2slo2 & t2slo3)
      s[3] = t2shi1 ^ (~t2shi2 & t2shi3)
      s[12] = t2slo6 ^ (~t2slo7 & t2slo8)
      s[13] = t2shi6 ^ (~t2shi7 & t2shi8)
      s[22] = t2slo11 ^ (~t2slo12 & t2slo13)
      s[23] = t2shi11 ^ (~t2shi12 & t2shi13)
      s[32] = t2slo16 ^ (~t2slo17 & t2slo18)
      s[33] = t2shi16 ^ (~t2shi17 & t2shi18)
      s[42] = t2slo21 ^ (~t2slo22 & t2slo23)
      s[43] = t2shi21 ^ (~t2shi22 & t2shi23)
      s[4] = t2slo2 ^ (~t2slo3 & t2slo4)
      s[5] = t2shi2 ^ (~t2shi3 & t2shi4)
      s[14] = t2slo7 ^ (~t2slo8 & t2slo9)
      s[15] = t2shi7 ^ (~t2shi8 & t2shi9)
      s[24] = t2slo12 ^ (~t2slo13 & t2slo14)
      s[25] = t2shi12 ^ (~t2shi13 & t2shi14)
      s[34] = t2slo17 ^ (~t2slo18 & t2slo19)
      s[35] = t2shi17 ^ (~t2shi18 & t2shi19)
      s[44] = t2slo22 ^ (~t2slo23 & t2slo24)
      s[45] = t2shi22 ^ (~t2shi23 & t2shi24)
      s[6] = t2slo3 ^ (~t2slo4 & t2slo0)
      s[7] = t2shi3 ^ (~t2shi4 & t2shi0)
      s[16] = t2slo8 ^ (~t2slo9 & t2slo5)
      s[17] = t2shi8 ^ (~t2shi9 & t2shi5)
      s[26] = t2slo13 ^ (~t2slo14 & t2slo10)
      s[27] = t2shi13 ^ (~t2shi14 & t2shi10)
      s[36] = t2slo18 ^ (~t2slo19 & t2slo15)
      s[37] = t2shi18 ^ (~t2shi19 & t2shi15)
      s[46] = t2slo23 ^ (~t2slo24 & t2slo20)
      s[47] = t2shi23 ^ (~t2shi24 & t2shi20)
      s[8] = t2slo4 ^ (~t2slo0 & t2slo1)
      s[9] = t2shi4 ^ (~t2shi0 & t2shi1)
      s[18] = t2slo9 ^ (~t2slo5 & t2slo6)
      s[19] = t2shi9 ^ (~t2shi5 & t2shi6)
      s[28] = t2slo14 ^ (~t2slo10 & t2slo11)
      s[29] = t2shi14 ^ (~t2shi10 & t2shi11)
      s[38] = t2slo19 ^ (~t2slo15 & t2slo16)
      s[39] = t2shi19 ^ (~t2shi15 & t2shi16)
      s[48] = t2slo24 ^ (~t2slo20 & t2slo21)
      s[49] = t2shi24 ^ (~t2shi20 & t2shi21)
  
      // iota
      s[0] ^= P1600_ROUND_CONSTANTS[round * 2]
      s[1] ^= P1600_ROUND_CONSTANTS[round * 2 + 1]
    }
  }
  
  },{}],200:[function(require,module,exports){
  'use strict'
  var Buffer = require('safe-buffer').Buffer
  var keccakState = require('./keccak-state-unroll')
  
  function Keccak () {
    // much faster than `new Array(50)`
    this.state = [
      0, 0, 0, 0, 0,
      0, 0, 0, 0, 0,
      0, 0, 0, 0, 0,
      0, 0, 0, 0, 0,
      0, 0, 0, 0, 0
    ]
  
    this.blockSize = null
    this.count = 0
    this.squeezing = false
  }
  
  Keccak.prototype.initialize = function (rate, capacity) {
    for (var i = 0; i < 50; ++i) this.state[i] = 0
    this.blockSize = rate / 8
    this.count = 0
    this.squeezing = false
  }
  
  Keccak.prototype.absorb = function (data) {
    for (var i = 0; i < data.length; ++i) {
      this.state[~~(this.count / 4)] ^= data[i] << (8 * (this.count % 4))
      this.count += 1
      if (this.count === this.blockSize) {
        keccakState.p1600(this.state)
        this.count = 0
      }
    }
  }
  
  Keccak.prototype.absorbLastFewBits = function (bits) {
    this.state[~~(this.count / 4)] ^= bits << (8 * (this.count % 4))
    if ((bits & 0x80) !== 0 && this.count === (this.blockSize - 1)) keccakState.p1600(this.state)
    this.state[~~((this.blockSize - 1) / 4)] ^= 0x80 << (8 * ((this.blockSize - 1) % 4))
    keccakState.p1600(this.state)
    this.count = 0
    this.squeezing = true
  }
  
  Keccak.prototype.squeeze = function (length) {
    if (!this.squeezing) this.absorbLastFewBits(0x01)
  
    var output = Buffer.alloc(length)
    for (var i = 0; i < length; ++i) {
      output[i] = (this.state[~~(this.count / 4)] >>> (8 * (this.count % 4))) & 0xff
      this.count += 1
      if (this.count === this.blockSize) {
        keccakState.p1600(this.state)
        this.count = 0
      }
    }
  
    return output
  }
  
  Keccak.prototype.copy = function (dest) {
    for (var i = 0; i < 50; ++i) dest.state[i] = this.state[i]
    dest.blockSize = this.blockSize
    dest.count = this.count
    dest.squeezing = this.squeezing
  }
  
  module.exports = Keccak
  
  },{"./keccak-state-unroll":199,"safe-buffer":290}],201:[function(require,module,exports){
  var root = require('./_root');
  
  /** Built-in value references. */
  var Symbol = root.Symbol;
  
  module.exports = Symbol;
  
  },{"./_root":217}],202:[function(require,module,exports){
  var baseTimes = require('./_baseTimes'),
      isArguments = require('./isArguments'),
      isArray = require('./isArray'),
      isBuffer = require('./isBuffer'),
      isIndex = require('./_isIndex'),
      isTypedArray = require('./isTypedArray');
  
  /** Used for built-in method references. */
  var objectProto = Object.prototype;
  
  /** Used to check objects for own properties. */
  var hasOwnProperty = objectProto.hasOwnProperty;
  
  /**
   * Creates an array of the enumerable property names of the array-like `value`.
   *
   * @private
   * @param {*} value The value to query.
   * @param {boolean} inherited Specify returning inherited property names.
   * @returns {Array} Returns the array of property names.
   */
  function arrayLikeKeys(value, inherited) {
    var isArr = isArray(value),
        isArg = !isArr && isArguments(value),
        isBuff = !isArr && !isArg && isBuffer(value),
        isType = !isArr && !isArg && !isBuff && isTypedArray(value),
        skipIndexes = isArr || isArg || isBuff || isType,
        result = skipIndexes ? baseTimes(value.length, String) : [],
        length = result.length;
  
    for (var key in value) {
      if ((inherited || hasOwnProperty.call(value, key)) &&
          !(skipIndexes && (
             // Safari 9 has enumerable `arguments.length` in strict mode.
             key == 'length' ||
             // Node.js 0.10 has enumerable non-index properties on buffers.
             (isBuff && (key == 'offset' || key == 'parent')) ||
             // PhantomJS 2 has enumerable non-index properties on typed arrays.
             (isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset')) ||
             // Skip index properties.
             isIndex(key, length)
          ))) {
        result.push(key);
      }
    }
    return result;
  }
  
  module.exports = arrayLikeKeys;
  
  },{"./_baseTimes":207,"./_isIndex":211,"./isArguments":219,"./isArray":220,"./isBuffer":222,"./isTypedArray":227}],203:[function(require,module,exports){
  var Symbol = require('./_Symbol'),
      getRawTag = require('./_getRawTag'),
      objectToString = require('./_objectToString');
  
  /** `Object#toString` result references. */
  var nullTag = '[object Null]',
      undefinedTag = '[object Undefined]';
  
  /** Built-in value references. */
  var symToStringTag = Symbol ? Symbol.toStringTag : undefined;
  
  /**
   * The base implementation of `getTag` without fallbacks for buggy environments.
   *
   * @private
   * @param {*} value The value to query.
   * @returns {string} Returns the `toStringTag`.
   */
  function baseGetTag(value) {
    if (value == null) {
      return value === undefined ? undefinedTag : nullTag;
    }
    return (symToStringTag && symToStringTag in Object(value))
      ? getRawTag(value)
      : objectToString(value);
  }
  
  module.exports = baseGetTag;
  
  },{"./_Symbol":201,"./_getRawTag":210,"./_objectToString":215}],204:[function(require,module,exports){
  var baseGetTag = require('./_baseGetTag'),
      isObjectLike = require('./isObjectLike');
  
  /** `Object#toString` result references. */
  var argsTag = '[object Arguments]';
  
  /**
   * The base implementation of `_.isArguments`.
   *
   * @private
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is an `arguments` object,
   */
  function baseIsArguments(value) {
    return isObjectLike(value) && baseGetTag(value) == argsTag;
  }
  
  module.exports = baseIsArguments;
  
  },{"./_baseGetTag":203,"./isObjectLike":226}],205:[function(require,module,exports){
  var baseGetTag = require('./_baseGetTag'),
      isLength = require('./isLength'),
      isObjectLike = require('./isObjectLike');
  
  /** `Object#toString` result references. */
  var argsTag = '[object Arguments]',
      arrayTag = '[object Array]',
      boolTag = '[object Boolean]',
      dateTag = '[object Date]',
      errorTag = '[object Error]',
      funcTag = '[object Function]',
      mapTag = '[object Map]',
      numberTag = '[object Number]',
      objectTag = '[object Object]',
      regexpTag = '[object RegExp]',
      setTag = '[object Set]',
      stringTag = '[object String]',
      weakMapTag = '[object WeakMap]';
  
  var arrayBufferTag = '[object ArrayBuffer]',
      dataViewTag = '[object DataView]',
      float32Tag = '[object Float32Array]',
      float64Tag = '[object Float64Array]',
      int8Tag = '[object Int8Array]',
      int16Tag = '[object Int16Array]',
      int32Tag = '[object Int32Array]',
      uint8Tag = '[object Uint8Array]',
      uint8ClampedTag = '[object Uint8ClampedArray]',
      uint16Tag = '[object Uint16Array]',
      uint32Tag = '[object Uint32Array]';
  
  /** Used to identify `toStringTag` values of typed arrays. */
  var typedArrayTags = {};
  typedArrayTags[float32Tag] = typedArrayTags[float64Tag] =
  typedArrayTags[int8Tag] = typedArrayTags[int16Tag] =
  typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =
  typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =
  typedArrayTags[uint32Tag] = true;
  typedArrayTags[argsTag] = typedArrayTags[arrayTag] =
  typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =
  typedArrayTags[dataViewTag] = typedArrayTags[dateTag] =
  typedArrayTags[errorTag] = typedArrayTags[funcTag] =
  typedArrayTags[mapTag] = typedArrayTags[numberTag] =
  typedArrayTags[objectTag] = typedArrayTags[regexpTag] =
  typedArrayTags[setTag] = typedArrayTags[stringTag] =
  typedArrayTags[weakMapTag] = false;
  
  /**
   * The base implementation of `_.isTypedArray` without Node.js optimizations.
   *
   * @private
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
   */
  function baseIsTypedArray(value) {
    return isObjectLike(value) &&
      isLength(value.length) && !!typedArrayTags[baseGetTag(value)];
  }
  
  module.exports = baseIsTypedArray;
  
  },{"./_baseGetTag":203,"./isLength":224,"./isObjectLike":226}],206:[function(require,module,exports){
  var isPrototype = require('./_isPrototype'),
      nativeKeys = require('./_nativeKeys');
  
  /** Used for built-in method references. */
  var objectProto = Object.prototype;
  
  /** Used to check objects for own properties. */
  var hasOwnProperty = objectProto.hasOwnProperty;
  
  /**
   * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.
   *
   * @private
   * @param {Object} object The object to query.
   * @returns {Array} Returns the array of property names.
   */
  function baseKeys(object) {
    if (!isPrototype(object)) {
      return nativeKeys(object);
    }
    var result = [];
    for (var key in Object(object)) {
      if (hasOwnProperty.call(object, key) && key != 'constructor') {
        result.push(key);
      }
    }
    return result;
  }
  
  module.exports = baseKeys;
  
  },{"./_isPrototype":212,"./_nativeKeys":213}],207:[function(require,module,exports){
  /**
   * The base implementation of `_.times` without support for iteratee shorthands
   * or max array length checks.
   *
   * @private
   * @param {number} n The number of times to invoke `iteratee`.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns the array of results.
   */
  function baseTimes(n, iteratee) {
    var index = -1,
        result = Array(n);
  
    while (++index < n) {
      result[index] = iteratee(index);
    }
    return result;
  }
  
  module.exports = baseTimes;
  
  },{}],208:[function(require,module,exports){
  /**
   * The base implementation of `_.unary` without support for storing metadata.
   *
   * @private
   * @param {Function} func The function to cap arguments for.
   * @returns {Function} Returns the new capped function.
   */
  function baseUnary(func) {
    return function(value) {
      return func(value);
    };
  }
  
  module.exports = baseUnary;
  
  },{}],209:[function(require,module,exports){
  (function (global){
  /** Detect free variable `global` from Node.js. */
  var freeGlobal = typeof global == 'object' && global && global.Object === Object && global;
  
  module.exports = freeGlobal;
  
  }).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
  },{}],210:[function(require,module,exports){
  var Symbol = require('./_Symbol');
  
  /** Used for built-in method references. */
  var objectProto = Object.prototype;
  
  /** Used to check objects for own properties. */
  var hasOwnProperty = objectProto.hasOwnProperty;
  
  /**
   * Used to resolve the
   * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
   * of values.
   */
  var nativeObjectToString = objectProto.toString;
  
  /** Built-in value references. */
  var symToStringTag = Symbol ? Symbol.toStringTag : undefined;
  
  /**
   * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
   *
   * @private
   * @param {*} value The value to query.
   * @returns {string} Returns the raw `toStringTag`.
   */
  function getRawTag(value) {
    var isOwn = hasOwnProperty.call(value, symToStringTag),
        tag = value[symToStringTag];
  
    try {
      value[symToStringTag] = undefined;
      var unmasked = true;
    } catch (e) {}
  
    var result = nativeObjectToString.call(value);
    if (unmasked) {
      if (isOwn) {
        value[symToStringTag] = tag;
      } else {
        delete value[symToStringTag];
      }
    }
    return result;
  }
  
  module.exports = getRawTag;
  
  },{"./_Symbol":201}],211:[function(require,module,exports){
  /** Used as references for various `Number` constants. */
  var MAX_SAFE_INTEGER = 9007199254740991;
  
  /** Used to detect unsigned integer values. */
  var reIsUint = /^(?:0|[1-9]\d*)$/;
  
  /**
   * Checks if `value` is a valid array-like index.
   *
   * @private
   * @param {*} value The value to check.
   * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
   * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
   */
  function isIndex(value, length) {
    length = length == null ? MAX_SAFE_INTEGER : length;
    return !!length &&
      (typeof value == 'number' || reIsUint.test(value)) &&
      (value > -1 && value % 1 == 0 && value < length);
  }
  
  module.exports = isIndex;
  
  },{}],212:[function(require,module,exports){
  /** Used for built-in method references. */
  var objectProto = Object.prototype;
  
  /**
   * Checks if `value` is likely a prototype object.
   *
   * @private
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
   */
  function isPrototype(value) {
    var Ctor = value && value.constructor,
        proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;
  
    return value === proto;
  }
  
  module.exports = isPrototype;
  
  },{}],213:[function(require,module,exports){
  var overArg = require('./_overArg');
  
  /* Built-in method references for those with the same name as other `lodash` methods. */
  var nativeKeys = overArg(Object.keys, Object);
  
  module.exports = nativeKeys;
  
  },{"./_overArg":216}],214:[function(require,module,exports){
  var freeGlobal = require('./_freeGlobal');
  
  /** Detect free variable `exports`. */
  var freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;
  
  /** Detect free variable `module`. */
  var freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;
  
  /** Detect the popular CommonJS extension `module.exports`. */
  var moduleExports = freeModule && freeModule.exports === freeExports;
  
  /** Detect free variable `process` from Node.js. */
  var freeProcess = moduleExports && freeGlobal.process;
  
  /** Used to access faster Node.js helpers. */
  var nodeUtil = (function() {
    try {
      return freeProcess && freeProcess.binding && freeProcess.binding('util');
    } catch (e) {}
  }());
  
  module.exports = nodeUtil;
  
  },{"./_freeGlobal":209}],215:[function(require,module,exports){
  /** Used for built-in method references. */
  var objectProto = Object.prototype;
  
  /**
   * Used to resolve the
   * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
   * of values.
   */
  var nativeObjectToString = objectProto.toString;
  
  /**
   * Converts `value` to a string using `Object.prototype.toString`.
   *
   * @private
   * @param {*} value The value to convert.
   * @returns {string} Returns the converted string.
   */
  function objectToString(value) {
    return nativeObjectToString.call(value);
  }
  
  module.exports = objectToString;
  
  },{}],216:[function(require,module,exports){
  /**
   * Creates a unary function that invokes `func` with its argument transformed.
   *
   * @private
   * @param {Function} func The function to wrap.
   * @param {Function} transform The argument transform.
   * @returns {Function} Returns the new function.
   */
  function overArg(func, transform) {
    return function(arg) {
      return func(transform(arg));
    };
  }
  
  module.exports = overArg;
  
  },{}],217:[function(require,module,exports){
  var freeGlobal = require('./_freeGlobal');
  
  /** Detect free variable `self`. */
  var freeSelf = typeof self == 'object' && self && self.Object === Object && self;
  
  /** Used as a reference to the global object. */
  var root = freeGlobal || freeSelf || Function('return this')();
  
  module.exports = root;
  
  },{"./_freeGlobal":209}],218:[function(require,module,exports){
  /**
   * Creates a function that returns `value`.
   *
   * @static
   * @memberOf _
   * @since 2.4.0
   * @category Util
   * @param {*} value The value to return from the new function.
   * @returns {Function} Returns the new constant function.
   * @example
   *
   * var objects = _.times(2, _.constant({ 'a': 1 }));
   *
   * console.log(objects);
   * // => [{ 'a': 1 }, { 'a': 1 }]
   *
   * console.log(objects[0] === objects[1]);
   * // => true
   */
  function constant(value) {
    return function() {
      return value;
    };
  }
  
  module.exports = constant;
  
  },{}],219:[function(require,module,exports){
  var baseIsArguments = require('./_baseIsArguments'),
      isObjectLike = require('./isObjectLike');
  
  /** Used for built-in method references. */
  var objectProto = Object.prototype;
  
  /** Used to check objects for own properties. */
  var hasOwnProperty = objectProto.hasOwnProperty;
  
  /** Built-in value references. */
  var propertyIsEnumerable = objectProto.propertyIsEnumerable;
  
  /**
   * Checks if `value` is likely an `arguments` object.
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is an `arguments` object,
   *  else `false`.
   * @example
   *
   * _.isArguments(function() { return arguments; }());
   * // => true
   *
   * _.isArguments([1, 2, 3]);
   * // => false
   */
  var isArguments = baseIsArguments(function() { return arguments; }()) ? baseIsArguments : function(value) {
    return isObjectLike(value) && hasOwnProperty.call(value, 'callee') &&
      !propertyIsEnumerable.call(value, 'callee');
  };
  
  module.exports = isArguments;
  
  },{"./_baseIsArguments":204,"./isObjectLike":226}],220:[function(require,module,exports){
  /**
   * Checks if `value` is classified as an `Array` object.
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is an array, else `false`.
   * @example
   *
   * _.isArray([1, 2, 3]);
   * // => true
   *
   * _.isArray(document.body.children);
   * // => false
   *
   * _.isArray('abc');
   * // => false
   *
   * _.isArray(_.noop);
   * // => false
   */
  var isArray = Array.isArray;
  
  module.exports = isArray;
  
  },{}],221:[function(require,module,exports){
  var isFunction = require('./isFunction'),
      isLength = require('./isLength');
  
  /**
   * Checks if `value` is array-like. A value is considered array-like if it's
   * not a function and has a `value.length` that's an integer greater than or
   * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
   * @example
   *
   * _.isArrayLike([1, 2, 3]);
   * // => true
   *
   * _.isArrayLike(document.body.children);
   * // => true
   *
   * _.isArrayLike('abc');
   * // => true
   *
   * _.isArrayLike(_.noop);
   * // => false
   */
  function isArrayLike(value) {
    return value != null && isLength(value.length) && !isFunction(value);
  }
  
  module.exports = isArrayLike;
  
  },{"./isFunction":223,"./isLength":224}],222:[function(require,module,exports){
  var root = require('./_root'),
      stubFalse = require('./stubFalse');
  
  /** Detect free variable `exports`. */
  var freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;
  
  /** Detect free variable `module`. */
  var freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;
  
  /** Detect the popular CommonJS extension `module.exports`. */
  var moduleExports = freeModule && freeModule.exports === freeExports;
  
  /** Built-in value references. */
  var Buffer = moduleExports ? root.Buffer : undefined;
  
  /* Built-in method references for those with the same name as other `lodash` methods. */
  var nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined;
  
  /**
   * Checks if `value` is a buffer.
   *
   * @static
   * @memberOf _
   * @since 4.3.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.
   * @example
   *
   * _.isBuffer(new Buffer(2));
   * // => true
   *
   * _.isBuffer(new Uint8Array(2));
   * // => false
   */
  var isBuffer = nativeIsBuffer || stubFalse;
  
  module.exports = isBuffer;
  
  },{"./_root":217,"./stubFalse":230}],223:[function(require,module,exports){
  var baseGetTag = require('./_baseGetTag'),
      isObject = require('./isObject');
  
  /** `Object#toString` result references. */
  var asyncTag = '[object AsyncFunction]',
      funcTag = '[object Function]',
      genTag = '[object GeneratorFunction]',
      proxyTag = '[object Proxy]';
  
  /**
   * Checks if `value` is classified as a `Function` object.
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a function, else `false`.
   * @example
   *
   * _.isFunction(_);
   * // => true
   *
   * _.isFunction(/abc/);
   * // => false
   */
  function isFunction(value) {
    if (!isObject(value)) {
      return false;
    }
    // The use of `Object#toString` avoids issues with the `typeof` operator
    // in Safari 9 which returns 'object' for typed arrays and other constructors.
    var tag = baseGetTag(value);
    return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
  }
  
  module.exports = isFunction;
  
  },{"./_baseGetTag":203,"./isObject":225}],224:[function(require,module,exports){
  /** Used as references for various `Number` constants. */
  var MAX_SAFE_INTEGER = 9007199254740991;
  
  /**
   * Checks if `value` is a valid array-like length.
   *
   * **Note:** This method is loosely based on
   * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
   * @example
   *
   * _.isLength(3);
   * // => true
   *
   * _.isLength(Number.MIN_VALUE);
   * // => false
   *
   * _.isLength(Infinity);
   * // => false
   *
   * _.isLength('3');
   * // => false
   */
  function isLength(value) {
    return typeof value == 'number' &&
      value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
  }
  
  module.exports = isLength;
  
  },{}],225:[function(require,module,exports){
  /**
   * Checks if `value` is the
   * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
   * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is an object, else `false`.
   * @example
   *
   * _.isObject({});
   * // => true
   *
   * _.isObject([1, 2, 3]);
   * // => true
   *
   * _.isObject(_.noop);
   * // => true
   *
   * _.isObject(null);
   * // => false
   */
  function isObject(value) {
    var type = typeof value;
    return value != null && (type == 'object' || type == 'function');
  }
  
  module.exports = isObject;
  
  },{}],226:[function(require,module,exports){
  /**
   * Checks if `value` is object-like. A value is object-like if it's not `null`
   * and has a `typeof` result of "object".
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
   * @example
   *
   * _.isObjectLike({});
   * // => true
   *
   * _.isObjectLike([1, 2, 3]);
   * // => true
   *
   * _.isObjectLike(_.noop);
   * // => false
   *
   * _.isObjectLike(null);
   * // => false
   */
  function isObjectLike(value) {
    return value != null && typeof value == 'object';
  }
  
  module.exports = isObjectLike;
  
  },{}],227:[function(require,module,exports){
  var baseIsTypedArray = require('./_baseIsTypedArray'),
      baseUnary = require('./_baseUnary'),
      nodeUtil = require('./_nodeUtil');
  
  /* Node.js helper references. */
  var nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;
  
  /**
   * Checks if `value` is classified as a typed array.
   *
   * @static
   * @memberOf _
   * @since 3.0.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
   * @example
   *
   * _.isTypedArray(new Uint8Array);
   * // => true
   *
   * _.isTypedArray([]);
   * // => false
   */
  var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;
  
  module.exports = isTypedArray;
  
  },{"./_baseIsTypedArray":205,"./_baseUnary":208,"./_nodeUtil":214}],228:[function(require,module,exports){
  var arrayLikeKeys = require('./_arrayLikeKeys'),
      baseKeys = require('./_baseKeys'),
      isArrayLike = require('./isArrayLike');
  
  /**
   * Creates an array of the own enumerable property names of `object`.
   *
   * **Note:** Non-object values are coerced to objects. See the
   * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
   * for more details.
   *
   * @static
   * @since 0.1.0
   * @memberOf _
   * @category Object
   * @param {Object} object The object to query.
   * @returns {Array} Returns the array of property names.
   * @example
   *
   * function Foo() {
   *   this.a = 1;
   *   this.b = 2;
   * }
   *
   * Foo.prototype.c = 3;
   *
   * _.keys(new Foo);
   * // => ['a', 'b'] (iteration order is not guaranteed)
   *
   * _.keys('hi');
   * // => ['0', '1']
   */
  function keys(object) {
    return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
  }
  
  module.exports = keys;
  
  },{"./_arrayLikeKeys":202,"./_baseKeys":206,"./isArrayLike":221}],229:[function(require,module,exports){
  /**
   * This method returns `undefined`.
   *
   * @static
   * @memberOf _
   * @since 2.3.0
   * @category Util
   * @example
   *
   * _.times(2, _.noop);
   * // => [undefined, undefined]
   */
  function noop() {
    // No operation performed.
  }
  
  module.exports = noop;
  
  },{}],230:[function(require,module,exports){
  /**
   * This method returns `false`.
   *
   * @static
   * @memberOf _
   * @since 4.13.0
   * @category Util
   * @returns {boolean} Returns `false`.
   * @example
   *
   * _.times(2, _.stubFalse);
   * // => [false, false]
   */
  function stubFalse() {
    return false;
  }
  
  module.exports = stubFalse;
  
  },{}],231:[function(require,module,exports){
  (function (Buffer){
  'use strict'
  var inherits = require('inherits')
  var HashBase = require('hash-base')
  
  var ARRAY16 = new Array(16)
  
  function MD5 () {
    HashBase.call(this, 64)
  
    // state
    this._a = 0x67452301
    this._b = 0xefcdab89
    this._c = 0x98badcfe
    this._d = 0x10325476
  }
  
  inherits(MD5, HashBase)
  
  MD5.prototype._update = function () {
    var M = ARRAY16
    for (var i = 0; i < 16; ++i) M[i] = this._block.readInt32LE(i * 4)
  
    var a = this._a
    var b = this._b
    var c = this._c
    var d = this._d
  
    a = fnF(a, b, c, d, M[0], 0xd76aa478, 7)
    d = fnF(d, a, b, c, M[1], 0xe8c7b756, 12)
    c = fnF(c, d, a, b, M[2], 0x242070db, 17)
    b = fnF(b, c, d, a, M[3], 0xc1bdceee, 22)
    a = fnF(a, b, c, d, M[4], 0xf57c0faf, 7)
    d = fnF(d, a, b, c, M[5], 0x4787c62a, 12)
    c = fnF(c, d, a, b, M[6], 0xa8304613, 17)
    b = fnF(b, c, d, a, M[7], 0xfd469501, 22)
    a = fnF(a, b, c, d, M[8], 0x698098d8, 7)
    d = fnF(d, a, b, c, M[9], 0x8b44f7af, 12)
    c = fnF(c, d, a, b, M[10], 0xffff5bb1, 17)
    b = fnF(b, c, d, a, M[11], 0x895cd7be, 22)
    a = fnF(a, b, c, d, M[12], 0x6b901122, 7)
    d = fnF(d, a, b, c, M[13], 0xfd987193, 12)
    c = fnF(c, d, a, b, M[14], 0xa679438e, 17)
    b = fnF(b, c, d, a, M[15], 0x49b40821, 22)
  
    a = fnG(a, b, c, d, M[1], 0xf61e2562, 5)
    d = fnG(d, a, b, c, M[6], 0xc040b340, 9)
    c = fnG(c, d, a, b, M[11], 0x265e5a51, 14)
    b = fnG(b, c, d, a, M[0], 0xe9b6c7aa, 20)
    a = fnG(a, b, c, d, M[5], 0xd62f105d, 5)
    d = fnG(d, a, b, c, M[10], 0x02441453, 9)
    c = fnG(c, d, a, b, M[15], 0xd8a1e681, 14)
    b = fnG(b, c, d, a, M[4], 0xe7d3fbc8, 20)
    a = fnG(a, b, c, d, M[9], 0x21e1cde6, 5)
    d = fnG(d, a, b, c, M[14], 0xc33707d6, 9)
    c = fnG(c, d, a, b, M[3], 0xf4d50d87, 14)
    b = fnG(b, c, d, a, M[8], 0x455a14ed, 20)
    a = fnG(a, b, c, d, M[13], 0xa9e3e905, 5)
    d = fnG(d, a, b, c, M[2], 0xfcefa3f8, 9)
    c = fnG(c, d, a, b, M[7], 0x676f02d9, 14)
    b = fnG(b, c, d, a, M[12], 0x8d2a4c8a, 20)
  
    a = fnH(a, b, c, d, M[5], 0xfffa3942, 4)
    d = fnH(d, a, b, c, M[8], 0x8771f681, 11)
    c = fnH(c, d, a, b, M[11], 0x6d9d6122, 16)
    b = fnH(b, c, d, a, M[14], 0xfde5380c, 23)
    a = fnH(a, b, c, d, M[1], 0xa4beea44, 4)
    d = fnH(d, a, b, c, M[4], 0x4bdecfa9, 11)
    c = fnH(c, d, a, b, M[7], 0xf6bb4b60, 16)
    b = fnH(b, c, d, a, M[10], 0xbebfbc70, 23)
    a = fnH(a, b, c, d, M[13], 0x289b7ec6, 4)
    d = fnH(d, a, b, c, M[0], 0xeaa127fa, 11)
    c = fnH(c, d, a, b, M[3], 0xd4ef3085, 16)
    b = fnH(b, c, d, a, M[6], 0x04881d05, 23)
    a = fnH(a, b, c, d, M[9], 0xd9d4d039, 4)
    d = fnH(d, a, b, c, M[12], 0xe6db99e5, 11)
    c = fnH(c, d, a, b, M[15], 0x1fa27cf8, 16)
    b = fnH(b, c, d, a, M[2], 0xc4ac5665, 23)
  
    a = fnI(a, b, c, d, M[0], 0xf4292244, 6)
    d = fnI(d, a, b, c, M[7], 0x432aff97, 10)
    c = fnI(c, d, a, b, M[14], 0xab9423a7, 15)
    b = fnI(b, c, d, a, M[5], 0xfc93a039, 21)
    a = fnI(a, b, c, d, M[12], 0x655b59c3, 6)
    d = fnI(d, a, b, c, M[3], 0x8f0ccc92, 10)
    c = fnI(c, d, a, b, M[10], 0xffeff47d, 15)
    b = fnI(b, c, d, a, M[1], 0x85845dd1, 21)
    a = fnI(a, b, c, d, M[8], 0x6fa87e4f, 6)
    d = fnI(d, a, b, c, M[15], 0xfe2ce6e0, 10)
    c = fnI(c, d, a, b, M[6], 0xa3014314, 15)
    b = fnI(b, c, d, a, M[13], 0x4e0811a1, 21)
    a = fnI(a, b, c, d, M[4], 0xf7537e82, 6)
    d = fnI(d, a, b, c, M[11], 0xbd3af235, 10)
    c = fnI(c, d, a, b, M[2], 0x2ad7d2bb, 15)
    b = fnI(b, c, d, a, M[9], 0xeb86d391, 21)
  
    this._a = (this._a + a) | 0
    this._b = (this._b + b) | 0
    this._c = (this._c + c) | 0
    this._d = (this._d + d) | 0
  }
  
  MD5.prototype._digest = function () {
    // create padding and handle blocks
    this._block[this._blockOffset++] = 0x80
    if (this._blockOffset > 56) {
      this._block.fill(0, this._blockOffset, 64)
      this._update()
      this._blockOffset = 0
    }
  
    this._block.fill(0, this._blockOffset, 56)
    this._block.writeUInt32LE(this._length[0], 56)
    this._block.writeUInt32LE(this._length[1], 60)
    this._update()
  
    // produce result
    var buffer = new Buffer(16)
    buffer.writeInt32LE(this._a, 0)
    buffer.writeInt32LE(this._b, 4)
    buffer.writeInt32LE(this._c, 8)
    buffer.writeInt32LE(this._d, 12)
    return buffer
  }
  
  function rotl (x, n) {
    return (x << n) | (x >>> (32 - n))
  }
  
  function fnF (a, b, c, d, m, k, s) {
    return (rotl((a + ((b & c) | ((~b) & d)) + m + k) | 0, s) + b) | 0
  }
  
  function fnG (a, b, c, d, m, k, s) {
    return (rotl((a + ((b & d) | (c & (~d))) + m + k) | 0, s) + b) | 0
  }
  
  function fnH (a, b, c, d, m, k, s) {
    return (rotl((a + (b ^ c ^ d) + m + k) | 0, s) + b) | 0
  }
  
  function fnI (a, b, c, d, m, k, s) {
    return (rotl((a + ((c ^ (b | (~d)))) + m + k) | 0, s) + b) | 0
  }
  
  module.exports = MD5
  
  }).call(this,require("buffer").Buffer)
  },{"buffer":84,"hash-base":232,"inherits":180}],232:[function(require,module,exports){
  'use strict'
  var Buffer = require('safe-buffer').Buffer
  var Transform = require('stream').Transform
  var inherits = require('inherits')
  
  function throwIfNotStringOrBuffer (val, prefix) {
    if (!Buffer.isBuffer(val) && typeof val !== 'string') {
      throw new TypeError(prefix + ' must be a string or a buffer')
    }
  }
  
  function HashBase (blockSize) {
    Transform.call(this)
  
    this._block = Buffer.allocUnsafe(blockSize)
    this._blockSize = blockSize
    this._blockOffset = 0
    this._length = [0, 0, 0, 0]
  
    this._finalized = false
  }
  
  inherits(HashBase, Transform)
  
  HashBase.prototype._transform = function (chunk, encoding, callback) {
    var error = null
    try {
      this.update(chunk, encoding)
    } catch (err) {
      error = err
    }
  
    callback(error)
  }
  
  HashBase.prototype._flush = function (callback) {
    var error = null
    try {
      this.push(this.digest())
    } catch (err) {
      error = err
    }
  
    callback(error)
  }
  
  HashBase.prototype.update = function (data, encoding) {
    throwIfNotStringOrBuffer(data, 'Data')
    if (this._finalized) throw new Error('Digest already called')
    if (!Buffer.isBuffer(data)) data = Buffer.from(data, encoding)
  
    // consume data
    var block = this._block
    var offset = 0
    while (this._blockOffset + data.length - offset >= this._blockSize) {
      for (var i = this._blockOffset; i < this._blockSize;) block[i++] = data[offset++]
      this._update()
      this._blockOffset = 0
    }
    while (offset < data.length) block[this._blockOffset++] = data[offset++]
  
    // update length
    for (var j = 0, carry = data.length * 8; carry > 0; ++j) {
      this._length[j] += carry
      carry = (this._length[j] / 0x0100000000) | 0
      if (carry > 0) this._length[j] -= 0x0100000000 * carry
    }
  
    return this
  }
  
  HashBase.prototype._update = function () {
    throw new Error('_update is not implemented')
  }
  
  HashBase.prototype.digest = function (encoding) {
    if (this._finalized) throw new Error('Digest already called')
    this._finalized = true
  
    var digest = this._digest()
    if (encoding !== undefined) digest = digest.toString(encoding)
  
    // reset state
    this._block.fill(0)
    this._blockOffset = 0
    for (var i = 0; i < 4; ++i) this._length[i] = 0
  
    return digest
  }
  
  HashBase.prototype._digest = function () {
    throw new Error('_digest is not implemented')
  }
  
  module.exports = HashBase
  
  },{"inherits":180,"safe-buffer":290,"stream":311}],233:[function(require,module,exports){
  var bn = require('bn.js');
  var brorand = require('brorand');
  
  function MillerRabin(rand) {
    this.rand = rand || new brorand.Rand();
  }
  module.exports = MillerRabin;
  
  MillerRabin.create = function create(rand) {
    return new MillerRabin(rand);
  };
  
  MillerRabin.prototype._randbelow = function _randbelow(n) {
    var len = n.bitLength();
    var min_bytes = Math.ceil(len / 8);
  
    // Generage random bytes until a number less than n is found.
    // This ensures that 0..n-1 have an equal probability of being selected.
    do
      var a = new bn(this.rand.generate(min_bytes));
    while (a.cmp(n) >= 0);
  
    return a;
  };
  
  MillerRabin.prototype._randrange = function _randrange(start, stop) {
    // Generate a random number greater than or equal to start and less than stop.
    var size = stop.sub(start);
    return start.add(this._randbelow(size));
  };
  
  MillerRabin.prototype.test = function test(n, k, cb) {
    var len = n.bitLength();
    var red = bn.mont(n);
    var rone = new bn(1).toRed(red);
  
    if (!k)
      k = Math.max(1, (len / 48) | 0);
  
    // Find d and s, (n - 1) = (2 ^ s) * d;
    var n1 = n.subn(1);
    for (var s = 0; !n1.testn(s); s++) {}
    var d = n.shrn(s);
  
    var rn1 = n1.toRed(red);
  
    var prime = true;
    for (; k > 0; k--) {
      var a = this._randrange(new bn(2), n1);
      if (cb)
        cb(a);
  
      var x = a.toRed(red).redPow(d);
      if (x.cmp(rone) === 0 || x.cmp(rn1) === 0)
        continue;
  
      for (var i = 1; i < s; i++) {
        x = x.redSqr();
  
        if (x.cmp(rone) === 0)
          return false;
        if (x.cmp(rn1) === 0)
          break;
      }
  
      if (i === s)
        return false;
    }
  
    return prime;
  };
  
  MillerRabin.prototype.getDivisor = function getDivisor(n, k) {
    var len = n.bitLength();
    var red = bn.mont(n);
    var rone = new bn(1).toRed(red);
  
    if (!k)
      k = Math.max(1, (len / 48) | 0);
  
    // Find d and s, (n - 1) = (2 ^ s) * d;
    var n1 = n.subn(1);
    for (var s = 0; !n1.testn(s); s++) {}
    var d = n.shrn(s);
  
    var rn1 = n1.toRed(red);
  
    for (; k > 0; k--) {
      var a = this._randrange(new bn(2), n1);
  
      var g = n.gcd(a);
      if (g.cmpn(1) !== 0)
        return g;
  
      var x = a.toRed(red).redPow(d);
      if (x.cmp(rone) === 0 || x.cmp(rn1) === 0)
        continue;
  
      for (var i = 1; i < s; i++) {
        x = x.redSqr();
  
        if (x.cmp(rone) === 0)
          return x.fromRed().subn(1).gcd(n);
        if (x.cmp(rn1) === 0)
          break;
      }
  
      if (i === s) {
        x = x.redSqr();
        return x.fromRed().subn(1).gcd(n);
      }
    }
  
    return false;
  };
  
  },{"bn.js":53,"brorand":54}],234:[function(require,module,exports){
  module.exports = assert;
  
  function assert(val, msg) {
    if (!val)
      throw new Error(msg || 'Assertion failed');
  }
  
  assert.equal = function assertEqual(l, r, msg) {
    if (l != r)
      throw new Error(msg || ('Assertion failed: ' + l + ' != ' + r));
  };
  
  },{}],235:[function(require,module,exports){
  'use strict';
  
  var utils = exports;
  
  function toArray(msg, enc) {
    if (Array.isArray(msg))
      return msg.slice();
    if (!msg)
      return [];
    var res = [];
    if (typeof msg !== 'string') {
      for (var i = 0; i < msg.length; i++)
        res[i] = msg[i] | 0;
      return res;
    }
    if (enc === 'hex') {
      msg = msg.replace(/[^a-z0-9]+/ig, '');
      if (msg.length % 2 !== 0)
        msg = '0' + msg;
      for (var i = 0; i < msg.length; i += 2)
        res.push(parseInt(msg[i] + msg[i + 1], 16));
    } else {
      for (var i = 0; i < msg.length; i++) {
        var c = msg.charCodeAt(i);
        var hi = c >> 8;
        var lo = c & 0xff;
        if (hi)
          res.push(hi, lo);
        else
          res.push(lo);
      }
    }
    return res;
  }
  utils.toArray = toArray;
  
  function zero2(word) {
    if (word.length === 1)
      return '0' + word;
    else
      return word;
  }
  utils.zero2 = zero2;
  
  function toHex(msg) {
    var res = '';
    for (var i = 0; i < msg.length; i++)
      res += zero2(msg[i].toString(16));
    return res;
  }
  utils.toHex = toHex;
  
  utils.encode = function encode(arr, enc) {
    if (enc === 'hex')
      return toHex(arr);
    else
      return arr;
  };
  
  },{}],236:[function(require,module,exports){
  arguments[4][154][0].apply(exports,arguments)
  },{"dup":154}],237:[function(require,module,exports){
  var BN = require('bn.js');
  var stripHexPrefix = require('strip-hex-prefix');
  
  /**
   * Returns a BN object, converts a number value to a BN
   * @param {String|Number|Object} `arg` input a string number, hex string number, number, BigNumber or BN object
   * @return {Object} `output` BN object of the number
   * @throws if the argument is not an array, object that isn't a bignumber, not a string number or number
   */
  module.exports = function numberToBN(arg) {
    if (typeof arg === 'string' || typeof arg === 'number') {
      var multiplier = new BN(1); // eslint-disable-line
      var formattedString = String(arg).toLowerCase().trim();
      var isHexPrefixed = formattedString.substr(0, 2) === '0x' || formattedString.substr(0, 3) === '-0x';
      var stringArg = stripHexPrefix(formattedString); // eslint-disable-line
      if (stringArg.substr(0, 1) === '-') {
        stringArg = stripHexPrefix(stringArg.slice(1));
        multiplier = new BN(-1, 10);
      }
      stringArg = stringArg === '' ? '0' : stringArg;
  
      if ((!stringArg.match(/^-?[0-9]+$/) && stringArg.match(/^[0-9A-Fa-f]+$/))
        || stringArg.match(/^[a-fA-F]+$/)
        || (isHexPrefixed === true && stringArg.match(/^[0-9A-Fa-f]+$/))) {
        return new BN(stringArg, 16).mul(multiplier);
      }
  
      if ((stringArg.match(/^-?[0-9]+$/) || stringArg === '') && isHexPrefixed === false) {
        return new BN(stringArg, 10).mul(multiplier);
      }
    } else if (typeof arg === 'object' && arg.toString && (!arg.pop && !arg.push)) {
      if (arg.toString(10).match(/^-?[0-9]+$/) && (arg.mul || arg.dividedToIntegerBy)) {
        return new BN(arg.toString(10), 10);
      }
    }
  
    throw new Error('[number-to-bn] while converting number ' + JSON.stringify(arg) + ' to BN.js instance, error: invalid number value. Value must be an integer, hex string, BN or BigNumber instance. Note, decimals are not supported.');
  }
  
  },{"bn.js":236,"strip-hex-prefix":318}],238:[function(require,module,exports){
  /*
  object-assign
  (c) Sindre Sorhus
  @license MIT
  */
  
  'use strict';
  /* eslint-disable no-unused-vars */
  var getOwnPropertySymbols = Object.getOwnPropertySymbols;
  var hasOwnProperty = Object.prototype.hasOwnProperty;
  var propIsEnumerable = Object.prototype.propertyIsEnumerable;
  
  function toObject(val) {
    if (val === null || val === undefined) {
      throw new TypeError('Object.assign cannot be called with null or undefined');
    }
  
    return Object(val);
  }
  
  function shouldUseNative() {
    try {
      if (!Object.assign) {
        return false;
      }
  
      // Detect buggy property enumeration order in older V8 versions.
  
      // https://bugs.chromium.org/p/v8/issues/detail?id=4118
      var test1 = new String('abc');  // eslint-disable-line no-new-wrappers
      test1[5] = 'de';
      if (Object.getOwnPropertyNames(test1)[0] === '5') {
        return false;
      }
  
      // https://bugs.chromium.org/p/v8/issues/detail?id=3056
      var test2 = {};
      for (var i = 0; i < 10; i++) {
        test2['_' + String.fromCharCode(i)] = i;
      }
      var order2 = Object.getOwnPropertyNames(test2).map(function (n) {
        return test2[n];
      });
      if (order2.join('') !== '0123456789') {
        return false;
      }
  
      // https://bugs.chromium.org/p/v8/issues/detail?id=3056
      var test3 = {};
      'abcdefghijklmnopqrst'.split('').forEach(function (letter) {
        test3[letter] = letter;
      });
      if (Object.keys(Object.assign({}, test3)).join('') !==
          'abcdefghijklmnopqrst') {
        return false;
      }
  
      return true;
    } catch (err) {
      // We don't expect any of the above to throw, but better to be safe.
      return false;
    }
  }
  
  module.exports = shouldUseNative() ? Object.assign : function (target, source) {
    var from;
    var to = toObject(target);
    var symbols;
  
    for (var s = 1; s < arguments.length; s++) {
      from = Object(arguments[s]);
  
      for (var key in from) {
        if (hasOwnProperty.call(from, key)) {
          to[key] = from[key];
        }
      }
  
      if (getOwnPropertySymbols) {
        symbols = getOwnPropertySymbols(from);
        for (var i = 0; i < symbols.length; i++) {
          if (propIsEnumerable.call(from, symbols[i])) {
            to[symbols[i]] = from[symbols[i]];
          }
        }
      }
    }
  
    return to;
  };
  
  },{}],239:[function(require,module,exports){
  // This file is the concatenation of many js files.
  // See http://github.com/jimhigson/oboe.js for the raw source
  
  // having a local undefined, window, Object etc allows slightly better minification:
  (function  (window, Object, Array, Error, JSON, undefined ) {
  
     // v2.1.3
  
  /*
  
  Copyright (c) 2013, Jim Higson
  
  All rights reserved.
  
  Redistribution and use in source and binary forms, with or without
  modification, are permitted provided that the following conditions are
  met:
  
  1.  Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.
  
  2.  Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer in the
      documentation and/or other materials provided with the distribution.
  
  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
  IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
  TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
  PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
  HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
  TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
  SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  
  */
  
  /** 
   * Partially complete a function.
   * 
   *  var add3 = partialComplete( function add(a,b){return a+b}, 3 );
   *  
   *  add3(4) // gives 7
   *  
   *  function wrap(left, right, cen){return left + " " + cen + " " + right;}
   *  
   *  var pirateGreeting = partialComplete( wrap , "I'm", ", a mighty pirate!" );
   *  
   *  pirateGreeting("Guybrush Threepwood"); 
   *  // gives "I'm Guybrush Threepwood, a mighty pirate!"
   */
  var partialComplete = varArgs(function( fn, args ) {
  
        // this isn't the shortest way to write this but it does
        // avoid creating a new array each time to pass to fn.apply,
        // otherwise could just call boundArgs.concat(callArgs)       
  
        var numBoundArgs = args.length;
  
        return varArgs(function( callArgs ) {
           
           for (var i = 0; i < callArgs.length; i++) {
              args[numBoundArgs + i] = callArgs[i];
           }
           
           args.length = numBoundArgs + callArgs.length;         
                       
           return fn.apply(this, args);
        }); 
     }),
  
  /**
   * Compose zero or more functions:
   * 
   *    compose(f1, f2, f3)(x) = f1(f2(f3(x))))
   * 
   * The last (inner-most) function may take more than one parameter:
   * 
   *    compose(f1, f2, f3)(x,y) = f1(f2(f3(x,y))))
   */
     compose = varArgs(function(fns) {
  
        var fnsList = arrayAsList(fns);
     
        function next(params, curFn) {  
           return [apply(params, curFn)];   
        }
              
        return varArgs(function(startParams){
          
           return foldR(next, startParams, fnsList)[0];
        });
     });
  
  /**
   * A more optimised version of compose that takes exactly two functions
   * @param f1
   * @param f2
   */
  function compose2(f1, f2){
     return function(){
        return f1.call(this,f2.apply(this,arguments));
     }
  }
  
  /**
   * Generic form for a function to get a property from an object
   * 
   *    var o = {
   *       foo:'bar'
   *    }
   *    
   *    var getFoo = attr('foo')
   *    
   *    fetFoo(o) // returns 'bar'
   * 
   * @param {String} key the property name
   */
  function attr(key) {
     return function(o) { return o[key]; };
  }
          
  /**
   * Call a list of functions with the same args until one returns a 
   * truthy result. Similar to the || operator.
   * 
   * So:
   *      lazyUnion([f1,f2,f3 ... fn])( p1, p2 ... pn )
   *      
   * Is equivalent to: 
   *      apply([p1, p2 ... pn], f1) || 
   *      apply([p1, p2 ... pn], f2) || 
   *      apply([p1, p2 ... pn], f3) ... apply(fn, [p1, p2 ... pn])  
   *  
   * @returns the first return value that is given that is truthy.
   */
     var lazyUnion = varArgs(function(fns) {
  
        return varArgs(function(params){
     
           var maybeValue;
     
           for (var i = 0; i < len(fns); i++) {
     
              maybeValue = apply(params, fns[i]);
     
              if( maybeValue ) {
                 return maybeValue;
              }
           }
        });
     });   
  
  /**
   * This file declares various pieces of functional programming.
   * 
   * This isn't a general purpose functional library, to keep things small it
   * has just the parts useful for Oboe.js.
   */
  
  
  /**
   * Call a single function with the given arguments array.
   * Basically, a functional-style version of the OO-style Function#apply for 
   * when we don't care about the context ('this') of the call.
   * 
   * The order of arguments allows partial completion of the arguments array
   */
  function apply(args, fn) {
     return fn.apply(undefined, args);
  }
  
  /**
   * Define variable argument functions but cut out all that tedious messing about 
   * with the arguments object. Delivers the variable-length part of the arguments
   * list as an array.
   * 
   * Eg:
   * 
   * var myFunction = varArgs(
   *    function( fixedArgument, otherFixedArgument, variableNumberOfArguments ){
   *       console.log( variableNumberOfArguments );
   *    }
   * )
   * 
   * myFunction('a', 'b', 1, 2, 3); // logs [1,2,3]
   * 
   * var myOtherFunction = varArgs(function( variableNumberOfArguments ){
   *    console.log( variableNumberOfArguments );
   * })
   * 
   * myFunction(1, 2, 3); // logs [1,2,3]
   * 
   */
  function varArgs(fn){
  
     var numberOfFixedArguments = fn.length -1,
         slice = Array.prototype.slice;          
           
                     
     if( numberOfFixedArguments == 0 ) {
        // an optimised case for when there are no fixed args:   
     
        return function(){
           return fn.call(this, slice.call(arguments));
        }
        
     } else if( numberOfFixedArguments == 1 ) {
        // an optimised case for when there are is one fixed args:
     
        return function(){
           return fn.call(this, arguments[0], slice.call(arguments, 1));
        }
     }
     
     // general case   
  
     // we know how many arguments fn will always take. Create a
     // fixed-size array to hold that many, to be re-used on
     // every call to the returned function
     var argsHolder = Array(fn.length);   
                               
     return function(){
                              
        for (var i = 0; i < numberOfFixedArguments; i++) {
           argsHolder[i] = arguments[i];         
        }
  
        argsHolder[numberOfFixedArguments] = 
           slice.call(arguments, numberOfFixedArguments);
                                  
        return fn.apply( this, argsHolder);      
     }       
  }
  
  
  /**
   * Swap the order of parameters to a binary function
   * 
   * A bit like this flip: http://zvon.org/other/haskell/Outputprelude/flip_f.html
   */
  function flip(fn){
     return function(a, b){
        return fn(b,a);
     }
  }
  
  
  /**
   * Create a function which is the intersection of two other functions.
   * 
   * Like the && operator, if the first is truthy, the second is never called,
   * otherwise the return value from the second is returned.
   */
  function lazyIntersection(fn1, fn2) {
  
     return function (param) {
                                                                
        return fn1(param) && fn2(param);
     };   
  }
  
  /**
   * A function which does nothing
   */
  function noop(){}
  
  /**
   * A function which is always happy
   */
  function always(){return true}
  
  /**
   * Create a function which always returns the same
   * value
   * 
   * var return3 = functor(3);
   * 
   * return3() // gives 3
   * return3() // still gives 3
   * return3() // will always give 3
   */
  function functor(val){
     return function(){
        return val;
     }
  }
  
  /**
   * This file defines some loosely associated syntactic sugar for 
   * Javascript programming 
   */
  
  
  /**
   * Returns true if the given candidate is of type T
   */
  function isOfType(T, maybeSomething){
     return maybeSomething && maybeSomething.constructor === T;
  }
  
  var len = attr('length'),    
      isString = partialComplete(isOfType, String);
  
  /** 
   * I don't like saying this:
   * 
   *    foo !=== undefined
   *    
   * because of the double-negative. I find this:
   * 
   *    defined(foo)
   *    
   * easier to read.
   */ 
  function defined( value ) {
     return value !== undefined;
  }
  
  /**
   * Returns true if object o has a key named like every property in 
   * the properties array. Will give false if any are missing, or if o 
   * is not an object.
   */
  function hasAllProperties(fieldList, o) {
  
     return      (o instanceof Object) 
              &&
                 all(function (field) {         
                    return (field in o);         
                 }, fieldList);
  }
  /**
   * Like cons in Lisp
   */
  function cons(x, xs) {
     
     /* Internally lists are linked 2-element Javascript arrays.
            
        Ideally the return here would be Object.freeze([x,xs])
        so that bugs related to mutation are found fast.
        However, cons is right on the critical path for
        performance and this slows oboe-mark down by
        ~25%. Under theoretical future JS engines that freeze more
        efficiently (possibly even use immutability to
        run faster) this should be considered for
        restoration.
     */
     
     return [x,xs];
  }
  
  /**
   * The empty list
   */
  var emptyList = null,
  
  /**
   * Get the head of a list.
   * 
   * Ie, head(cons(a,b)) = a
   */
      head = attr(0),
  
  /**
   * Get the tail of a list.
   * 
   * Ie, tail(cons(a,b)) = b
   */
      tail = attr(1);
  
  
  /** 
   * Converts an array to a list 
   * 
   *    asList([a,b,c])
   * 
   * is equivalent to:
   *    
   *    cons(a, cons(b, cons(c, emptyList))) 
   **/
  function arrayAsList(inputArray){
  
     return reverseList( 
        inputArray.reduce(
           flip(cons),
           emptyList 
        )
     );
  }
  
  /**
   * A varargs version of arrayAsList. Works a bit like list
   * in LISP.
   * 
   *    list(a,b,c) 
   *    
   * is equivalent to:
   * 
   *    cons(a, cons(b, cons(c, emptyList)))
   */
  var list = varArgs(arrayAsList);
  
  /**
   * Convert a list back to a js native array
   */
  function listAsArray(list){
  
     return foldR( function(arraySoFar, listItem){
        
        arraySoFar.unshift(listItem);
        return arraySoFar;
             
     }, [], list );
     
  }
  
  /**
   * Map a function over a list 
   */
  function map(fn, list) {
  
     return list
              ? cons(fn(head(list)), map(fn,tail(list)))
              : emptyList
              ;
  }
  
  /**
   * foldR implementation. Reduce a list down to a single value.
   * 
   * @pram {Function} fn     (rightEval, curVal) -> result 
   */
  function foldR(fn, startValue, list) {
        
     return list 
              ? fn(foldR(fn, startValue, tail(list)), head(list))
              : startValue
              ;
  }
  
  /**
   * foldR implementation. Reduce a list down to a single value.
   * 
   * @pram {Function} fn     (rightEval, curVal) -> result 
   */
  function foldR1(fn, list) {
        
     return tail(list) 
              ? fn(foldR1(fn, tail(list)), head(list))
              : head(list)
              ;
  }
  
  
  /**
   * Return a list like the one given but with the first instance equal 
   * to item removed 
   */
  function without(list, test, removedFn) {
   
     return withoutInner(list, removedFn || noop);
   
     function withoutInner(subList, removedFn) {
        return subList  
           ?  ( test(head(subList)) 
                    ? (removedFn(head(subList)), tail(subList)) 
                    : cons(head(subList), withoutInner(tail(subList), removedFn))
              )
           : emptyList
           ;
     }               
  }
  
  /** 
   * Returns true if the given function holds for every item in 
   * the list, false otherwise 
   */
  function all(fn, list) {
     
     return !list || 
            ( fn(head(list)) && all(fn, tail(list)) );
  }
  
  /**
   * Call every function in a list of functions with the same arguments
   * 
   * This doesn't make any sense if we're doing pure functional because 
   * it doesn't return anything. Hence, this is only really useful if the
   * functions being called have side-effects. 
   */
  function applyEach(fnList, args) {
  
     if( fnList ) {  
        head(fnList).apply(null, args);
        
        applyEach(tail(fnList), args);
     }
  }
  
  /**
   * Reverse the order of a list
   */
  function reverseList(list){ 
  
     // js re-implementation of 3rd solution from:
     //    http://www.haskell.org/haskellwiki/99_questions/Solutions/5
     function reverseInner( list, reversedAlready ) {
        if( !list ) {
           return reversedAlready;
        }
        
        return reverseInner(tail(list), cons(head(list), reversedAlready))
     }
  
     return reverseInner(list, emptyList);
  }
  
  function first(test, list) {
     return   list &&
                 (test(head(list)) 
                    ? head(list) 
                    : first(test,tail(list))); 
  }
  
  /* 
     This is a slightly hacked-up browser only version of clarinet 
     
        *  some features removed to help keep browser Oboe under 
           the 5k micro-library limit
        *  plug directly into event bus
     
     For the original go here:
        https://github.com/dscape/clarinet
  
     We receive the events:
        STREAM_DATA
        STREAM_END
        
     We emit the events:
        SAX_KEY
        SAX_VALUE_OPEN
        SAX_VALUE_CLOSE      
        FAIL_EVENT      
   */
  
  function clarinet(eventBus) {
    "use strict";
     
    var 
        // shortcut some events on the bus
        emitSaxKey           = eventBus(SAX_KEY).emit,
        emitValueOpen        = eventBus(SAX_VALUE_OPEN).emit,
        emitValueClose       = eventBus(SAX_VALUE_CLOSE).emit,
        emitFail             = eventBus(FAIL_EVENT).emit,
                
        MAX_BUFFER_LENGTH = 64 * 1024
    ,   stringTokenPattern = /[\\"\n]/g
    ,   _n = 0
    
        // states
    ,   BEGIN                = _n++
    ,   VALUE                = _n++ // general stuff
    ,   OPEN_OBJECT          = _n++ // {
    ,   CLOSE_OBJECT         = _n++ // }
    ,   OPEN_ARRAY           = _n++ // [
    ,   CLOSE_ARRAY          = _n++ // ]
    ,   STRING               = _n++ // ""
    ,   OPEN_KEY             = _n++ // , "a"
    ,   CLOSE_KEY            = _n++ // :
    ,   TRUE                 = _n++ // r
    ,   TRUE2                = _n++ // u
    ,   TRUE3                = _n++ // e
    ,   FALSE                = _n++ // a
    ,   FALSE2               = _n++ // l
    ,   FALSE3               = _n++ // s
    ,   FALSE4               = _n++ // e
    ,   NULL                 = _n++ // u
    ,   NULL2                = _n++ // l
    ,   NULL3                = _n++ // l
    ,   NUMBER_DECIMAL_POINT = _n++ // .
    ,   NUMBER_DIGIT         = _n   // [0-9]
  
        // setup initial parser values
    ,   bufferCheckPosition  = MAX_BUFFER_LENGTH
    ,   latestError                
    ,   c                    
    ,   p                    
    ,   textNode             = undefined
    ,   numberNode           = ""     
    ,   slashed              = false
    ,   closed               = false
    ,   state                = BEGIN
    ,   stack                = []
    ,   unicodeS             = null
    ,   unicodeI             = 0
    ,   depth                = 0
    ,   position             = 0
    ,   column               = 0  //mostly for error reporting
    ,   line                 = 1
    ;
  
    function checkBufferLength () {
       
      var maxActual = 0;
       
      if (textNode !== undefined && textNode.length > MAX_BUFFER_LENGTH) {
        emitError("Max buffer length exceeded: textNode");
        maxActual = Math.max(maxActual, textNode.length);
      }
      if (numberNode.length > MAX_BUFFER_LENGTH) {
        emitError("Max buffer length exceeded: numberNode");
        maxActual = Math.max(maxActual, numberNode.length);
      }
       
      bufferCheckPosition = (MAX_BUFFER_LENGTH - maxActual)
                                 + position;
    }
  
    eventBus(STREAM_DATA).on(handleData);
  
     /* At the end of the http content close the clarinet 
      This will provide an error if the total content provided was not 
      valid json, ie if not all arrays, objects and Strings closed properly */
    eventBus(STREAM_END).on(handleStreamEnd);   
  
    function emitError (errorString) {
       if (textNode !== undefined) {
          emitValueOpen(textNode);
          emitValueClose();
          textNode = undefined;
       }
  
       latestError = Error(errorString + "\nLn: "+line+
                                         "\nCol: "+column+
                                         "\nChr: "+c);
       
       emitFail(errorReport(undefined, undefined, latestError));
    }
  
    function handleStreamEnd() {
      if( state == BEGIN ) {
        // Handle the case where the stream closes without ever receiving
        // any input. This isn't an error - response bodies can be blank,
        // particularly for 204 http responses
        
        // Because of how Oboe is currently implemented, we parse a
        // completely empty stream as containing an empty object.
        // This is because Oboe's done event is only fired when the
        // root object of the JSON stream closes.
        
        // This should be decoupled and attached instead to the input stream
        // from the http (or whatever) resource ending.
        // If this decoupling could happen the SAX parser could simply emit
        // zero events on a completely empty input.
        emitValueOpen({});
        emitValueClose();
  
        closed = true;
        return;
      }
    
      if (state !== VALUE || depth !== 0)
        emitError("Unexpected end");
   
      if (textNode !== undefined) {
        emitValueOpen(textNode);
        emitValueClose();
        textNode = undefined;
      }
       
      closed = true;
    }
  
    function whitespace(c){
       return c == '\r' || c == '\n' || c == ' ' || c == '\t';
    }
     
    function handleData (chunk) {
           
      // this used to throw the error but inside Oboe we will have already
      // gotten the error when it was emitted. The important thing is to
      // not continue with the parse.
      if (latestError)
        return;
        
      if (closed) {
         return emitError("Cannot write after close");
      }
  
      var i = 0;
      c = chunk[0]; 
  
      while (c) {
        p = c;
        c = chunk[i++];
        if(!c) break;
  
        position ++;
        if (c == "\n") {
          line ++;
          column = 0;
        } else column ++;
        switch (state) {
  
          case BEGIN:
            if (c === "{") state = OPEN_OBJECT;
            else if (c === "[") state = OPEN_ARRAY;
            else if (!whitespace(c))
              return emitError("Non-whitespace before {[.");
          continue;
  
          case OPEN_KEY:
          case OPEN_OBJECT:
            if (whitespace(c)) continue;
            if(state === OPEN_KEY) stack.push(CLOSE_KEY);
            else {
              if(c === '}') {
                emitValueOpen({});
                emitValueClose();
                state = stack.pop() || VALUE;
                continue;
              } else  stack.push(CLOSE_OBJECT);
            }
            if(c === '"')
               state = STRING;
            else
               return emitError("Malformed object key should start with \" ");
          continue;
  
          case CLOSE_KEY:
          case CLOSE_OBJECT:
            if (whitespace(c)) continue;
  
            if(c===':') {
              if(state === CLOSE_OBJECT) {
                stack.push(CLOSE_OBJECT);
  
                 if (textNode !== undefined) {
                    // was previously (in upstream Clarinet) one event
                    //  - object open came with the text of the first
                    emitValueOpen({});
                    emitSaxKey(textNode);
                    textNode = undefined;
                 }
                 depth++;
              } else {
                 if (textNode !== undefined) {
                    emitSaxKey(textNode);
                    textNode = undefined;
                 }
              }
               state  = VALUE;
            } else if (c==='}') {
               if (textNode !== undefined) {
                  emitValueOpen(textNode);
                  emitValueClose();
                  textNode = undefined;
               }
               emitValueClose();
              depth--;
              state = stack.pop() || VALUE;
            } else if(c===',') {
              if(state === CLOSE_OBJECT)
                stack.push(CLOSE_OBJECT);
               if (textNode !== undefined) {
                  emitValueOpen(textNode);
                  emitValueClose();
                  textNode = undefined;
               }
               state  = OPEN_KEY;
            } else 
               return emitError('Bad object');
          continue;
  
          case OPEN_ARRAY: // after an array there always a value
          case VALUE:
            if (whitespace(c)) continue;
            if(state===OPEN_ARRAY) {
              emitValueOpen([]);
              depth++;             
              state = VALUE;
              if(c === ']') {
                emitValueClose();
                depth--;
                state = stack.pop() || VALUE;
                continue;
              } else {
                stack.push(CLOSE_ARRAY);
              }
            }
                 if(c === '"') state = STRING;
            else if(c === '{') state = OPEN_OBJECT;
            else if(c === '[') state = OPEN_ARRAY;
            else if(c === 't') state = TRUE;
            else if(c === 'f') state = FALSE;
            else if(c === 'n') state = NULL;
            else if(c === '-') { // keep and continue
              numberNode += c;
            } else if(c==='0') {
              numberNode += c;
              state = NUMBER_DIGIT;
            } else if('123456789'.indexOf(c) !== -1) {
              numberNode += c;
              state = NUMBER_DIGIT;
            } else               
              return emitError("Bad value");
          continue;
  
          case CLOSE_ARRAY:
            if(c===',') {
              stack.push(CLOSE_ARRAY);
               if (textNode !== undefined) {
                  emitValueOpen(textNode);
                  emitValueClose();
                  textNode = undefined;
               }
               state  = VALUE;
            } else if (c===']') {
               if (textNode !== undefined) {
                  emitValueOpen(textNode);
                  emitValueClose();
                  textNode = undefined;
               }
               emitValueClose();
              depth--;
              state = stack.pop() || VALUE;
            } else if (whitespace(c))
                continue;
            else 
               return emitError('Bad array');
          continue;
  
          case STRING:
            if (textNode === undefined) {
                textNode = "";
            }
  
            // thanks thejh, this is an about 50% performance improvement.
            var starti              = i-1;
             
            STRING_BIGLOOP: while (true) {
  
              // zero means "no unicode active". 1-4 mean "parse some more". end after 4.
              while (unicodeI > 0) {
                unicodeS += c;
                c = chunk.charAt(i++);
                if (unicodeI === 4) {
                  // TODO this might be slow? well, probably not used too often anyway
                  textNode += String.fromCharCode(parseInt(unicodeS, 16));
                  unicodeI = 0;
                  starti = i-1;
                } else {
                  unicodeI++;
                }
                // we can just break here: no stuff we skipped that still has to be sliced out or so
                if (!c) break STRING_BIGLOOP;
              }
              if (c === '"' && !slashed) {
                state = stack.pop() || VALUE;
                textNode += chunk.substring(starti, i-1);
                break;
              }
              if (c === '\\' && !slashed) {
                slashed = true;
                textNode += chunk.substring(starti, i-1);
                 c = chunk.charAt(i++);
                if (!c) break;
              }
              if (slashed) {
                slashed = false;
                     if (c === 'n') { textNode += '\n'; }
                else if (c === 'r') { textNode += '\r'; }
                else if (c === 't') { textNode += '\t'; }
                else if (c === 'f') { textNode += '\f'; }
                else if (c === 'b') { textNode += '\b'; }
                else if (c === 'u') {
                  // \uxxxx. meh!
                  unicodeI = 1;
                  unicodeS = '';
                } else {
                  textNode += c;
                }
                c = chunk.charAt(i++);
                starti = i-1;
                if (!c) break;
                else continue;
              }
  
              stringTokenPattern.lastIndex = i;
              var reResult = stringTokenPattern.exec(chunk);
              if (!reResult) {
                i = chunk.length+1;
                textNode += chunk.substring(starti, i-1);
                break;
              }
              i = reResult.index+1;
              c = chunk.charAt(reResult.index);
              if (!c) {
                textNode += chunk.substring(starti, i-1);
                break;
              }
            }
          continue;
  
          case TRUE:
            if (!c)  continue; // strange buffers
            if (c==='r') state = TRUE2;
            else
               return emitError( 'Invalid true started with t'+ c);
          continue;
  
          case TRUE2:
            if (!c)  continue;
            if (c==='u') state = TRUE3;
            else
               return emitError('Invalid true started with tr'+ c);
          continue;
  
          case TRUE3:
            if (!c) continue;
            if(c==='e') {
              emitValueOpen(true);
              emitValueClose();
              state = stack.pop() || VALUE;
            } else
               return emitError('Invalid true started with tru'+ c);
          continue;
  
          case FALSE:
            if (!c)  continue;
            if (c==='a') state = FALSE2;
            else
               return emitError('Invalid false started with f'+ c);
          continue;
  
          case FALSE2:
            if (!c)  continue;
            if (c==='l') state = FALSE3;
            else
               return emitError('Invalid false started with fa'+ c);
          continue;
  
          case FALSE3:
            if (!c)  continue;
            if (c==='s') state = FALSE4;
            else
               return emitError('Invalid false started with fal'+ c);
          continue;
  
          case FALSE4:
            if (!c)  continue;
            if (c==='e') {
              emitValueOpen(false);
              emitValueClose();
              state = stack.pop() || VALUE;
            } else
               return emitError('Invalid false started with fals'+ c);
          continue;
  
          case NULL:
            if (!c)  continue;
            if (c==='u') state = NULL2;
            else
               return emitError('Invalid null started with n'+ c);
          continue;
  
          case NULL2:
            if (!c)  continue;
            if (c==='l') state = NULL3;
            else
               return emitError('Invalid null started with nu'+ c);
          continue;
  
          case NULL3:
            if (!c) continue;
            if(c==='l') {
              emitValueOpen(null);
              emitValueClose();
              state = stack.pop() || VALUE;
            } else 
               return emitError('Invalid null started with nul'+ c);
          continue;
  
          case NUMBER_DECIMAL_POINT:
            if(c==='.') {
              numberNode += c;
              state       = NUMBER_DIGIT;
            } else 
               return emitError('Leading zero not followed by .');
          continue;
  
          case NUMBER_DIGIT:
            if('0123456789'.indexOf(c) !== -1) numberNode += c;
            else if (c==='.') {
              if(numberNode.indexOf('.')!==-1)
                 return emitError('Invalid number has two dots');
              numberNode += c;
            } else if (c==='e' || c==='E') {
              if(numberNode.indexOf('e')!==-1 ||
                 numberNode.indexOf('E')!==-1 )
                 return emitError('Invalid number has two exponential');
              numberNode += c;
            } else if (c==="+" || c==="-") {
              if(!(p==='e' || p==='E'))
                 return emitError('Invalid symbol in number');
              numberNode += c;
            } else {
              if (numberNode) {
                emitValueOpen(parseFloat(numberNode));
                emitValueClose();
                numberNode = "";
              }
              i--; // go back one
              state = stack.pop() || VALUE;
            }
          continue;
  
          default:
            return emitError("Unknown state: " + state);
        }
      }
      if (position >= bufferCheckPosition)
        checkBufferLength();
    }
  }
  
  
  /** 
   * A bridge used to assign stateless functions to listen to clarinet.
   * 
   * As well as the parameter from clarinet, each callback will also be passed
   * the result of the last callback.
   * 
   * This may also be used to clear all listeners by assigning zero handlers:
   * 
   *    ascentManager( clarinet, {} )
   */
  function ascentManager(oboeBus, handlers){
     "use strict";
     
     var listenerId = {},
         ascent;
  
     function stateAfter(handler) {
        return function(param){
           ascent = handler( ascent, param);
        }
     }
     
     for( var eventName in handlers ) {
  
        oboeBus(eventName).on(stateAfter(handlers[eventName]), listenerId);
     }
     
     oboeBus(NODE_SWAP).on(function(newNode) {
        
        var oldHead = head(ascent),
            key = keyOf(oldHead),
            ancestors = tail(ascent),
            parentNode;
  
        if( ancestors ) {
           parentNode = nodeOf(head(ancestors));
           parentNode[key] = newNode;
        }
     });
  
     oboeBus(NODE_DROP).on(function() {
  
        var oldHead = head(ascent),
            key = keyOf(oldHead),
            ancestors = tail(ascent),
            parentNode;
  
        if( ancestors ) {
           parentNode = nodeOf(head(ancestors));
   
           delete parentNode[key];
        }
     });
  
     oboeBus(ABORTING).on(function(){
        
        for( var eventName in handlers ) {
           oboeBus(eventName).un(listenerId);
        }
     });   
  }
  
  // based on gist https://gist.github.com/monsur/706839
  
  /**
   * XmlHttpRequest's getAllResponseHeaders() method returns a string of response
   * headers according to the format described here:
   * http://www.w3.org/TR/XMLHttpRequest/#the-getallresponseheaders-method
   * This method parses that string into a user-friendly key/value pair object.
   */
  function parseResponseHeaders(headerStr) {
     var headers = {};
     
     headerStr && headerStr.split('\u000d\u000a')
        .forEach(function(headerPair){
     
           // Can't use split() here because it does the wrong thing
           // if the header value has the string ": " in it.
           var index = headerPair.indexOf('\u003a\u0020');
           
           headers[headerPair.substring(0, index)] 
                       = headerPair.substring(index + 2);
        });
     
     return headers;
  }
  
  /**
   * Detect if a given URL is cross-origin in the scope of the
   * current page.
   * 
   * Browser only (since cross-origin has no meaning in Node.js)
   *
   * @param {Object} pageLocation - as in window.location
   * @param {Object} ajaxHost - an object like window.location describing the 
   *    origin of the url that we want to ajax in
   */
  function isCrossOrigin(pageLocation, ajaxHost) {
  
     /*
      * NB: defaultPort only knows http and https.
      * Returns undefined otherwise.
      */
     function defaultPort(protocol) {
        return {'http:':80, 'https:':443}[protocol];
     }
     
     function portOf(location) {
        // pageLocation should always have a protocol. ajaxHost if no port or
        // protocol is specified, should use the port of the containing page
        
        return location.port || defaultPort(location.protocol||pageLocation.protocol);
     }
  
     // if ajaxHost doesn't give a domain, port is the same as pageLocation
     // it can't give a protocol but not a domain
     // it can't give a port but not a domain
     
     return !!(  (ajaxHost.protocol  && (ajaxHost.protocol  != pageLocation.protocol)) ||
                 (ajaxHost.host      && (ajaxHost.host      != pageLocation.host))     ||
                 (ajaxHost.host      && (portOf(ajaxHost) != portOf(pageLocation)))
            );
  }
  
  /* turn any url into an object like window.location */
  function parseUrlOrigin(url) {
     // url could be domain-relative
     // url could give a domain
  
     // cross origin means:
     //    same domain
     //    same port
     //    some protocol
     // so, same everything up to the first (single) slash 
     // if such is given
     //
     // can ignore everything after that   
     
     var URL_HOST_PATTERN = /(\w+:)?(?:\/\/)([\w.-]+)?(?::(\d+))?\/?/,
  
           // if no match, use an empty array so that
           // subexpressions 1,2,3 are all undefined
           // and will ultimately return all empty
           // strings as the parse result:
         urlHostMatch = URL_HOST_PATTERN.exec(url) || [];
     
     return {
        protocol:   urlHostMatch[1] || '',
        host:       urlHostMatch[2] || '',
        port:       urlHostMatch[3] || ''
     };
  }
  
  function httpTransport(){
     return new XMLHttpRequest();
  }
  
  /**
   * A wrapper around the browser XmlHttpRequest object that raises an 
   * event whenever a new part of the response is available.
   * 
   * In older browsers progressive reading is impossible so all the 
   * content is given in a single call. For newer ones several events
   * should be raised, allowing progressive interpretation of the response.
   *      
   * @param {Function} oboeBus an event bus local to this Oboe instance
   * @param {XMLHttpRequest} xhr the xhr to use as the transport. Under normal
   *          operation, will have been created using httpTransport() above
   *          but for tests a stub can be provided instead.
   * @param {String} method one of 'GET' 'POST' 'PUT' 'PATCH' 'DELETE'
   * @param {String} url the url to make a request to
   * @param {String|Null} data some content to be sent with the request.
   *                      Only valid if method is POST or PUT.
   * @param {Object} [headers] the http request headers to send
   * @param {boolean} withCredentials the XHR withCredentials property will be
   *    set to this value
   */  
  function streamingHttp(oboeBus, xhr, method, url, data, headers, withCredentials) {
             
     "use strict";
     
     var emitStreamData = oboeBus(STREAM_DATA).emit,
         emitFail       = oboeBus(FAIL_EVENT).emit,
         numberOfCharsAlreadyGivenToCallback = 0,
         stillToSendStartEvent = true;
  
     // When an ABORTING message is put on the event bus abort 
     // the ajax request         
     oboeBus( ABORTING ).on( function(){
    
        // if we keep the onreadystatechange while aborting the XHR gives 
        // a callback like a successful call so first remove this listener
        // by assigning null:
        xhr.onreadystatechange = null;
              
        xhr.abort();
     });
  
     /** 
      * Handle input from the underlying xhr: either a state change,
      * the progress event or the request being complete.
      */
     function handleProgress() {
                          
        var textSoFar = xhr.responseText,
            newText = textSoFar.substr(numberOfCharsAlreadyGivenToCallback);
        
        
        /* Raise the event for new text.
        
           On older browsers, the new text is the whole response. 
           On newer/better ones, the fragment part that we got since 
           last progress. */
           
        if( newText ) {
           emitStreamData( newText );
        } 
  
        numberOfCharsAlreadyGivenToCallback = len(textSoFar);
     }
     
     
     if('onprogress' in xhr){  // detect browser support for progressive delivery
        xhr.onprogress = handleProgress;
     }
        
     xhr.onreadystatechange = function() {
  
        function sendStartIfNotAlready() {
           // Internet Explorer is very unreliable as to when xhr.status etc can
           // be read so has to be protected with try/catch and tried again on 
           // the next readyState if it fails
           try{
              stillToSendStartEvent && oboeBus( HTTP_START ).emit(
                 xhr.status,
                 parseResponseHeaders(xhr.getAllResponseHeaders()) );
              stillToSendStartEvent = false;
           } catch(e){/* do nothing, will try again on next readyState*/}
        }
        
        switch( xhr.readyState ) {
                 
           case 2: // HEADERS_RECEIVED
           case 3: // LOADING
              return sendStartIfNotAlready();
              
           case 4: // DONE
              sendStartIfNotAlready(); // if xhr.status hasn't been available yet, it must be NOW, huh IE?
              
              // is this a 2xx http code?
              var successful = String(xhr.status)[0] == 2;
              
              if( successful ) {
                 // In Chrome 29 (not 28) no onprogress is emitted when a response
                 // is complete before the onload. We need to always do handleInput
                 // in case we get the load but have not had a final progress event.
                 // This looks like a bug and may change in future but let's take
                 // the safest approach and assume we might not have received a 
                 // progress event for each part of the response
                 handleProgress();
                 
                 oboeBus(STREAM_END).emit();
              } else {
  
                 emitFail( errorReport(
                    xhr.status, 
                    xhr.responseText
                 ));
              }
        }
     };
     
     try{
     
        xhr.open(method, url, true);
     
        for( var headerName in headers ){
           xhr.setRequestHeader(headerName, headers[headerName]);
        }
        
        if( !isCrossOrigin(window.location, parseUrlOrigin(url)) ) {
           xhr.setRequestHeader('X-Requested-With', 'XMLHttpRequest');
        }
  
        xhr.withCredentials = withCredentials;
        
        xhr.send(data);
        
     } catch( e ) {
        
        // To keep a consistent interface with Node, we can't emit an event here.
        // Node's streaming http adaptor receives the error as an asynchronous
        // event rather than as an exception. If we emitted now, the Oboe user
        // has had no chance to add a .fail listener so there is no way
        // the event could be useful. For both these reasons defer the
        // firing to the next JS frame.  
        window.setTimeout(
           partialComplete(emitFail, errorReport(undefined, undefined, e))
        ,  0
        );
     }            
  }
  
  var jsonPathSyntax = (function() {
   
     var
     
     /** 
      * Export a regular expression as a simple function by exposing just 
      * the Regex#exec. This allows regex tests to be used under the same 
      * interface as differently implemented tests, or for a user of the
      * tests to not concern themselves with their implementation as regular
      * expressions.
      * 
      * This could also be expressed point-free as:
      *   Function.prototype.bind.bind(RegExp.prototype.exec),
      *   
      * But that's far too confusing! (and not even smaller once minified 
      * and gzipped)
      */
         regexDescriptor = function regexDescriptor(regex) {
              return regex.exec.bind(regex);
         }
         
     /**
      * Join several regular expressions and express as a function.
      * This allows the token patterns to reuse component regular expressions
      * instead of being expressed in full using huge and confusing regular
      * expressions.
      */       
     ,   jsonPathClause = varArgs(function( componentRegexes ) {
  
              // The regular expressions all start with ^ because we 
              // only want to find matches at the start of the 
              // JSONPath fragment we are inspecting           
              componentRegexes.unshift(/^/);
              
              return   regexDescriptor(
                          RegExp(
                             componentRegexes.map(attr('source')).join('')
                          )
                       );
         })
         
     ,   possiblyCapturing =           /(\$?)/
     ,   namedNode =                   /([\w-_]+|\*)/
     ,   namePlaceholder =             /()/
     ,   nodeInArrayNotation =         /\["([^"]+)"\]/
     ,   numberedNodeInArrayNotation = /\[(\d+|\*)\]/
     ,   fieldList =                      /{([\w ]*?)}/
     ,   optionalFieldList =           /(?:{([\w ]*?)})?/
      
  
         //   foo or *                  
     ,   jsonPathNamedNodeInObjectNotation   = jsonPathClause( 
                                                  possiblyCapturing, 
                                                  namedNode, 
                                                  optionalFieldList
                                               )
                                               
         //   ["foo"]   
     ,   jsonPathNamedNodeInArrayNotation    = jsonPathClause( 
                                                  possiblyCapturing, 
                                                  nodeInArrayNotation, 
                                                  optionalFieldList
                                               )  
  
         //   [2] or [*]       
     ,   jsonPathNumberedNodeInArrayNotation = jsonPathClause( 
                                                  possiblyCapturing, 
                                                  numberedNodeInArrayNotation, 
                                                  optionalFieldList
                                               )
  
         //   {a b c}      
     ,   jsonPathPureDuckTyping              = jsonPathClause( 
                                                  possiblyCapturing, 
                                                  namePlaceholder, 
                                                  fieldList
                                               )
     
         //   ..
     ,   jsonPathDoubleDot                   = jsonPathClause(/\.\./)                  
     
         //   .
     ,   jsonPathDot                         = jsonPathClause(/\./)                    
     
         //   !
     ,   jsonPathBang                        = jsonPathClause(
                                                  possiblyCapturing, 
                                                  /!/
                                               )  
     
         //   nada!
     ,   emptyString                         = jsonPathClause(/$/)                     
     
     ;
     
    
     /* We export only a single function. When called, this function injects 
        into another function the descriptors from above.             
      */
     return function (fn){      
        return fn(      
           lazyUnion(
              jsonPathNamedNodeInObjectNotation
           ,  jsonPathNamedNodeInArrayNotation
           ,  jsonPathNumberedNodeInArrayNotation
           ,  jsonPathPureDuckTyping 
           )
        ,  jsonPathDoubleDot
        ,  jsonPathDot
        ,  jsonPathBang
        ,  emptyString 
        );
     }; 
  
  }());
  /**
   * Get a new key->node mapping
   * 
   * @param {String|Number} key
   * @param {Object|Array|String|Number|null} node a value found in the json
   */
  function namedNode(key, node) {
     return {key:key, node:node};
  }
  
  /** get the key of a namedNode */
  var keyOf = attr('key');
  
  /** get the node from a namedNode */
  var nodeOf = attr('node');
  /** 
   * This file provides various listeners which can be used to build up
   * a changing ascent based on the callbacks provided by Clarinet. It listens
   * to the low-level events from Clarinet and emits higher-level ones.
   *  
   * The building up is stateless so to track a JSON file
   * ascentManager.js is required to store the ascent state
   * between calls.
   */
  
  
  
  /** 
   * A special value to use in the path list to represent the path 'to' a root 
   * object (which doesn't really have any path). This prevents the need for 
   * special-casing detection of the root object and allows it to be treated 
   * like any other object. We might think of this as being similar to the 
   * 'unnamed root' domain ".", eg if I go to 
   * http://en.wikipedia.org./wiki/En/Main_page the dot after 'org' deliminates 
   * the unnamed root of the DNS.
   * 
   * This is kept as an object to take advantage that in Javascript's OO objects 
   * are guaranteed to be distinct, therefore no other object can possibly clash 
   * with this one. Strings, numbers etc provide no such guarantee. 
   **/
  var ROOT_PATH = {};
  
  
  /**
   * Create a new set of handlers for clarinet's events, bound to the emit 
   * function given.  
   */ 
  function incrementalContentBuilder( oboeBus ) {
  
     var emitNodeOpened = oboeBus(NODE_OPENED).emit,
         emitNodeClosed = oboeBus(NODE_CLOSED).emit,
         emitRootOpened = oboeBus(ROOT_PATH_FOUND).emit,
         emitRootClosed = oboeBus(ROOT_NODE_FOUND).emit;
  
     function arrayIndicesAreKeys( possiblyInconsistentAscent, newDeepestNode) {
     
        /* for values in arrays we aren't pre-warned of the coming paths 
           (Clarinet gives no call to onkey like it does for values in objects) 
           so if we are in an array we need to create this path ourselves. The 
           key will be len(parentNode) because array keys are always sequential 
           numbers. */
  
        var parentNode = nodeOf( head( possiblyInconsistentAscent));
        
        return      isOfType( Array, parentNode)
                 ?
                    keyFound(  possiblyInconsistentAscent, 
                                len(parentNode), 
                                newDeepestNode
                    )
                 :  
                    // nothing needed, return unchanged
                    possiblyInconsistentAscent 
                 ;
     }
                   
     function nodeOpened( ascent, newDeepestNode ) {
        
        if( !ascent ) {
           // we discovered the root node,         
           emitRootOpened( newDeepestNode);
                      
           return keyFound( ascent, ROOT_PATH, newDeepestNode);         
        }
  
        // we discovered a non-root node
                   
        var arrayConsistentAscent  = arrayIndicesAreKeys( ascent, newDeepestNode),      
            ancestorBranches       = tail( arrayConsistentAscent),
            previouslyUnmappedName = keyOf( head( arrayConsistentAscent));
            
        appendBuiltContent( 
           ancestorBranches, 
           previouslyUnmappedName, 
           newDeepestNode 
        );
                                                                                                           
        return cons( 
                 namedNode( previouslyUnmappedName, newDeepestNode ), 
                 ancestorBranches
        );                                                                          
     }
  
  
     /**
      * Add a new value to the object we are building up to represent the
      * parsed JSON
      */
     function appendBuiltContent( ancestorBranches, key, node ){
       
        nodeOf( head( ancestorBranches))[key] = node;
     }
  
       
     /**
      * For when we find a new key in the json.
      * 
      * @param {String|Number|Object} newDeepestName the key. If we are in an 
      *    array will be a number, otherwise a string. May take the special 
      *    value ROOT_PATH if the root node has just been found
      *    
      * @param {String|Number|Object|Array|Null|undefined} [maybeNewDeepestNode] 
      *    usually this won't be known so can be undefined. Can't use null 
      *    to represent unknown because null is a valid value in JSON
      **/  
     function keyFound(ascent, newDeepestName, maybeNewDeepestNode) {
  
        if( ascent ) { // if not root
        
           // If we have the key but (unless adding to an array) no known value
           // yet. Put that key in the output but against no defined value:      
           appendBuiltContent( ascent, newDeepestName, maybeNewDeepestNode );
        }
     
        var ascentWithNewPath = cons( 
                                   namedNode( newDeepestName, 
                                              maybeNewDeepestNode), 
                                   ascent
                                );
  
        emitNodeOpened( ascentWithNewPath);
   
        return ascentWithNewPath;
     }
  
  
     /**
      * For when the current node ends.
      */
     function nodeClosed( ascent ) {
  
        emitNodeClosed( ascent);
         
        return tail( ascent) ||
               // If there are no nodes left in the ascent the root node
               // just closed. Emit a special event for this: 
               emitRootClosed(nodeOf(head(ascent)));
     }      
  
     var contentBuilderHandlers = {};
     contentBuilderHandlers[SAX_VALUE_OPEN] = nodeOpened;
     contentBuilderHandlers[SAX_VALUE_CLOSE] = nodeClosed;
     contentBuilderHandlers[SAX_KEY] = keyFound;
     return contentBuilderHandlers;
  }
  
  /**
   * The jsonPath evaluator compiler used for Oboe.js. 
   * 
   * One function is exposed. This function takes a String JSONPath spec and 
   * returns a function to test candidate ascents for matches.
   * 
   *  String jsonPath -> (List ascent) -> Boolean|Object
   *
   * This file is coded in a pure functional style. That is, no function has 
   * side effects, every function evaluates to the same value for the same 
   * arguments and no variables are reassigned.
   */  
  // the call to jsonPathSyntax injects the token syntaxes that are needed 
  // inside the compiler
  var jsonPathCompiler = jsonPathSyntax(function (pathNodeSyntax, 
                                                  doubleDotSyntax, 
                                                  dotSyntax,
                                                  bangSyntax,
                                                  emptySyntax ) {
  
     var CAPTURING_INDEX = 1;
     var NAME_INDEX = 2;
     var FIELD_LIST_INDEX = 3;
  
     var headKey  = compose2(keyOf, head),
         headNode = compose2(nodeOf, head);
                     
     /**
      * Create an evaluator function for a named path node, expressed in the
      * JSONPath like:
      *    foo
      *    ["bar"]
      *    [2]   
      */
     function nameClause(previousExpr, detection ) {
       
        var name = detection[NAME_INDEX],
              
            matchesName = ( !name || name == '*' ) 
                             ?  always
                             :  function(ascent){return headKey(ascent) == name};
       
  
        return lazyIntersection(matchesName, previousExpr);
     }
  
     /**
      * Create an evaluator function for a a duck-typed node, expressed like:
      * 
      *    {spin, taste, colour}
      *    .particle{spin, taste, colour}
      *    *{spin, taste, colour}
      */
     function duckTypeClause(previousExpr, detection) {
  
        var fieldListStr = detection[FIELD_LIST_INDEX];
  
        if (!fieldListStr) 
           return previousExpr; // don't wrap at all, return given expr as-is      
  
        var hasAllrequiredFields = partialComplete(
                                      hasAllProperties, 
                                      arrayAsList(fieldListStr.split(/\W+/))
                                   ),
                                   
            isMatch =  compose2( 
                          hasAllrequiredFields, 
                          headNode
                       );
  
        return lazyIntersection(isMatch, previousExpr);
     }
  
     /**
      * Expression for $, returns the evaluator function
      */
     function capture( previousExpr, detection ) {
  
        // extract meaning from the detection      
        var capturing = !!detection[CAPTURING_INDEX];
  
        if (!capturing)          
           return previousExpr; // don't wrap at all, return given expr as-is      
        
        return lazyIntersection(previousExpr, head);
              
     }            
        
     /**
      * Create an evaluator function that moves onto the next item on the 
      * lists. This function is the place where the logic to move up a 
      * level in the ascent exists. 
      * 
      * Eg, for JSONPath ".foo" we need skip1(nameClause(always, [,'foo']))
      */
     function skip1(previousExpr) {
     
     
        if( previousExpr == always ) {
           /* If there is no previous expression this consume command 
              is at the start of the jsonPath.
              Since JSONPath specifies what we'd like to find but not 
              necessarily everything leading down to it, when running
              out of JSONPath to check against we default to true */
           return always;
        }
  
        /** return true if the ascent we have contains only the JSON root,
         *  false otherwise
         */
        function notAtRoot(ascent){
           return headKey(ascent) != ROOT_PATH;
        }
        
        return lazyIntersection(
                 /* If we're already at the root but there are more 
                    expressions to satisfy, can't consume any more. No match.
  
                    This check is why none of the other exprs have to be able 
                    to handle empty lists; skip1 is the only evaluator that 
                    moves onto the next token and it refuses to do so once it 
                    reaches the last item in the list. */
                 notAtRoot,
                 
                 /* We are not at the root of the ascent yet.
                    Move to the next level of the ascent by handing only 
                    the tail to the previous expression */ 
                 compose2(previousExpr, tail) 
        );
                                                                                                                 
     }   
     
     /**
      * Create an evaluator function for the .. (double dot) token. Consumes
      * zero or more levels of the ascent, the fewest that are required to find
      * a match when given to previousExpr.
      */   
     function skipMany(previousExpr) {
  
        if( previousExpr == always ) {
           /* If there is no previous expression this consume command 
              is at the start of the jsonPath.
              Since JSONPath specifies what we'd like to find but not 
              necessarily everything leading down to it, when running
              out of JSONPath to check against we default to true */            
           return always;
        }
            
        var 
            // In JSONPath .. is equivalent to !.. so if .. reaches the root
            // the match has succeeded. Ie, we might write ..foo or !..foo
            // and both should match identically.
            terminalCaseWhenArrivingAtRoot = rootExpr(),
            terminalCaseWhenPreviousExpressionIsSatisfied = previousExpr,
            recursiveCase = skip1(function(ascent) {
               return cases(ascent);
            }),
  
            cases = lazyUnion(
                       terminalCaseWhenArrivingAtRoot
                    ,  terminalCaseWhenPreviousExpressionIsSatisfied
                    ,  recursiveCase  
                    );
        
        return cases;
     }      
     
     /**
      * Generate an evaluator for ! - matches only the root element of the json
      * and ignores any previous expressions since nothing may precede !. 
      */   
     function rootExpr() {
        
        return function(ascent){
           return headKey(ascent) == ROOT_PATH;
        };
     }   
           
     /**
      * Generate a statement wrapper to sit around the outermost 
      * clause evaluator.
      * 
      * Handles the case where the capturing is implicit because the JSONPath
      * did not contain a '$' by returning the last node.
      */   
     function statementExpr(lastClause) {
        
        return function(ascent) {
     
           // kick off the evaluation by passing through to the last clause
           var exprMatch = lastClause(ascent);
                                                       
           return exprMatch === true ? head(ascent) : exprMatch;
        };
     }      
                            
     /**
      * For when a token has been found in the JSONPath input.
      * Compiles the parser for that token and returns in combination with the
      * parser already generated.
      * 
      * @param {Function} exprs  a list of the clause evaluator generators for
      *                          the token that was found
      * @param {Function} parserGeneratedSoFar the parser already found
      * @param {Array} detection the match given by the regex engine when 
      *                          the feature was found
      */
     function expressionsReader( exprs, parserGeneratedSoFar, detection ) {
                       
        // if exprs is zero-length foldR will pass back the 
        // parserGeneratedSoFar as-is so we don't need to treat 
        // this as a special case
        
        return   foldR( 
                    function( parserGeneratedSoFar, expr ){
           
                       return expr(parserGeneratedSoFar, detection);
                    }, 
                    parserGeneratedSoFar, 
                    exprs
                 );                     
  
     }
  
     /** 
      *  If jsonPath matches the given detector function, creates a function which
      *  evaluates against every clause in the clauseEvaluatorGenerators. The
      *  created function is propagated to the onSuccess function, along with
      *  the remaining unparsed JSONPath substring.
      *  
      *  The intended use is to create a clauseMatcher by filling in
      *  the first two arguments, thus providing a function that knows
      *  some syntax to match and what kind of generator to create if it
      *  finds it. The parameter list once completed is:
      *  
      *    (jsonPath, parserGeneratedSoFar, onSuccess)
      *  
      *  onSuccess may be compileJsonPathToFunction, to recursively continue 
      *  parsing after finding a match or returnFoundParser to stop here.
      */
     function generateClauseReaderIfTokenFound (
       
                          tokenDetector, clauseEvaluatorGenerators,
                           
                          jsonPath, parserGeneratedSoFar, onSuccess) {
                          
        var detected = tokenDetector(jsonPath);
  
        if(detected) {
           var compiledParser = expressionsReader(
                                   clauseEvaluatorGenerators, 
                                   parserGeneratedSoFar, 
                                   detected
                                ),
           
               remainingUnparsedJsonPath = jsonPath.substr(len(detected[0]));                
                                 
           return onSuccess(remainingUnparsedJsonPath, compiledParser);
        }         
     }
                   
     /**
      * Partially completes generateClauseReaderIfTokenFound above. 
      */
     function clauseMatcher(tokenDetector, exprs) {
          
        return   partialComplete( 
                    generateClauseReaderIfTokenFound, 
                    tokenDetector, 
                    exprs 
                 );
     }
  
     /**
      * clauseForJsonPath is a function which attempts to match against 
      * several clause matchers in order until one matches. If non match the
      * jsonPath expression is invalid and an error is thrown.
      * 
      * The parameter list is the same as a single clauseMatcher:
      * 
      *    (jsonPath, parserGeneratedSoFar, onSuccess)
      */     
     var clauseForJsonPath = lazyUnion(
  
        clauseMatcher(pathNodeSyntax   , list( capture, 
                                               duckTypeClause, 
                                               nameClause, 
                                               skip1 ))
                                                       
     ,  clauseMatcher(doubleDotSyntax  , list( skipMany))
         
         // dot is a separator only (like whitespace in other languages) but 
         // rather than make it a special case, use an empty list of 
         // expressions when this token is found
     ,  clauseMatcher(dotSyntax        , list() )  
                                                                                        
     ,  clauseMatcher(bangSyntax       , list( capture,
                                               rootExpr))
                                                            
     ,  clauseMatcher(emptySyntax      , list( statementExpr))
     
     ,  function (jsonPath) {
           throw Error('"' + jsonPath + '" could not be tokenised')      
        }
     );
  
  
     /**
      * One of two possible values for the onSuccess argument of 
      * generateClauseReaderIfTokenFound.
      * 
      * When this function is used, generateClauseReaderIfTokenFound simply 
      * returns the compiledParser that it made, regardless of if there is 
      * any remaining jsonPath to be compiled.
      */
     function returnFoundParser(_remainingJsonPath, compiledParser){ 
        return compiledParser 
     }     
                
     /**
      * Recursively compile a JSONPath expression.
      * 
      * This function serves as one of two possible values for the onSuccess 
      * argument of generateClauseReaderIfTokenFound, meaning continue to
      * recursively compile. Otherwise, returnFoundParser is given and
      * compilation terminates.
      */
     function compileJsonPathToFunction( uncompiledJsonPath, 
                                         parserGeneratedSoFar ) {
  
        /**
         * On finding a match, if there is remaining text to be compiled
         * we want to either continue parsing using a recursive call to 
         * compileJsonPathToFunction. Otherwise, we want to stop and return 
         * the parser that we have found so far.
         */
        var onFind =      uncompiledJsonPath
                       ?  compileJsonPathToFunction 
                       :  returnFoundParser;
                     
        return   clauseForJsonPath( 
                    uncompiledJsonPath, 
                    parserGeneratedSoFar, 
                    onFind
                 );                              
     }
  
     /**
      * This is the function that we expose to the rest of the library.
      */
     return function(jsonPath){
          
        try {
           // Kick off the recursive parsing of the jsonPath 
           return compileJsonPathToFunction(jsonPath, always);
           
        } catch( e ) {
           throw Error( 'Could not compile "' + jsonPath + 
                        '" because ' + e.message
           );
        }
     }
  
  });
  
  /** 
   * A pub/sub which is responsible for a single event type. A 
   * multi-event type event bus is created by pubSub by collecting
   * several of these.
   * 
   * @param {String} eventType                   
   *    the name of the events managed by this singleEventPubSub
   * @param {singleEventPubSub} [newListener]    
   *    place to notify of new listeners
   * @param {singleEventPubSub} [removeListener] 
   *    place to notify of when listeners are removed
   */
  function singleEventPubSub(eventType, newListener, removeListener){
  
     /** we are optimised for emitting events over firing them.
      *  As well as the tuple list which stores event ids and
      *  listeners there is a list with just the listeners which 
      *  can be iterated more quickly when we are emitting
      */
     var listenerTupleList,
         listenerList;
  
     function hasId(id){
        return function(tuple) {
           return tuple.id == id;      
        };  
     }
                
     return {
  
        /**
         * @param {Function} listener
         * @param {*} listenerId 
         *    an id that this listener can later by removed by. 
         *    Can be of any type, to be compared to other ids using ==
         */
        on:function( listener, listenerId ) {
           
           var tuple = {
              listener: listener
           ,  id:       listenerId || listener // when no id is given use the
                                               // listener function as the id
           };
  
           if( newListener ) {
              newListener.emit(eventType, listener, tuple.id);
           }
           
           listenerTupleList = cons( tuple,    listenerTupleList );
           listenerList      = cons( listener, listenerList      );
  
           return this; // chaining
        },
       
        emit:function () {                                                                                           
           applyEach( listenerList, arguments );
        },
        
        un: function( listenerId ) {
               
           var removed;             
                
           listenerTupleList = without(
              listenerTupleList,
              hasId(listenerId),
              function(tuple){
                 removed = tuple;
              }
           );    
           
           if( removed ) {
              listenerList = without( listenerList, function(listener){
                 return listener == removed.listener;
              });
           
              if( removeListener ) {
                 removeListener.emit(eventType, removed.listener, removed.id);
              }
           }
        },
        
        listeners: function(){
           // differs from Node EventEmitter: returns list, not array
           return listenerList;
        },
        
        hasListener: function(listenerId){
           var test = listenerId? hasId(listenerId) : always;
        
           return defined(first( test, listenerTupleList));
        }
     };
  }
  /**
   * pubSub is a curried interface for listening to and emitting
   * events.
   * 
   * If we get a bus:
   *    
   *    var bus = pubSub();
   * 
   * We can listen to event 'foo' like:
   * 
   *    bus('foo').on(myCallback)
   *    
   * And emit event foo like:
   * 
   *    bus('foo').emit()
   *    
   * or, with a parameter:
   * 
   *    bus('foo').emit('bar')
   *     
   * All functions can be cached and don't need to be 
   * bound. Ie:
   * 
   *    var fooEmitter = bus('foo').emit
   *    fooEmitter('bar');  // emit an event
   *    fooEmitter('baz');  // emit another
   *    
   * There's also an uncurried[1] shortcut for .emit and .on:
   * 
   *    bus.on('foo', callback)
   *    bus.emit('foo', 'bar')
   * 
   * [1]: http://zvon.org/other/haskell/Outputprelude/uncurry_f.html
   */
  function pubSub(){
  
     var singles = {},
         newListener = newSingle('newListener'),
         removeListener = newSingle('removeListener'); 
        
     function newSingle(eventName) {
        return singles[eventName] = singleEventPubSub(
           eventName, 
           newListener, 
           removeListener
        );   
     }      
  
     /** pubSub instances are functions */
     function pubSubInstance( eventName ){   
        
        return singles[eventName] || newSingle( eventName );   
     }
  
     // add convenience EventEmitter-style uncurried form of 'emit' and 'on'
     ['emit', 'on', 'un'].forEach(function(methodName){
     
        pubSubInstance[methodName] = varArgs(function(eventName, parameters){
           apply( parameters, pubSubInstance( eventName )[methodName]);
        });   
     });
           
     return pubSubInstance;
  }
  
  /**
   * This file declares some constants to use as names for event types.
   */
  
  var // the events which are never exported are kept as 
      // the smallest possible representation, in numbers:
      _S = 1,
  
      // fired whenever a new node starts in the JSON stream:
      NODE_OPENED     = _S++,
  
      // fired whenever a node closes in the JSON stream:
      NODE_CLOSED     = _S++,
  
      // called if a .node callback returns a value - 
      NODE_SWAP       = _S++,
      NODE_DROP       = _S++,
  
      FAIL_EVENT      = 'fail',
     
      ROOT_NODE_FOUND = _S++,
      ROOT_PATH_FOUND = _S++,
     
      HTTP_START      = 'start',
      STREAM_DATA     = 'data',
      STREAM_END      = 'end',
      ABORTING        = _S++,
  
      // SAX events butchered from Clarinet
      SAX_KEY          = _S++,
      SAX_VALUE_OPEN   = _S++,
      SAX_VALUE_CLOSE  = _S++;
      
  function errorReport(statusCode, body, error) {
     try{
        var jsonBody = JSON.parse(body);
     }catch(e){}
  
     return {
        statusCode:statusCode,
        body:body,
        jsonBody:jsonBody,
        thrown:error
     };
  }    
  
  /** 
   *  The pattern adaptor listens for newListener and removeListener
   *  events. When patterns are added or removed it compiles the JSONPath
   *  and wires them up.
   *  
   *  When nodes and paths are found it emits the fully-qualified match 
   *  events with parameters ready to ship to the outside world
   */
  
  function patternAdapter(oboeBus, jsonPathCompiler) {
  
     var predicateEventMap = {
        node:oboeBus(NODE_CLOSED)
     ,  path:oboeBus(NODE_OPENED)
     };
       
     function emitMatchingNode(emitMatch, node, ascent) {
           
        /* 
           We're now calling to the outside world where Lisp-style 
           lists will not be familiar. Convert to standard arrays. 
     
           Also, reverse the order because it is more common to 
           list paths "root to leaf" than "leaf to root"  */
        var descent     = reverseList(ascent);
                  
        emitMatch(
           node,
           
           // To make a path, strip off the last item which is the special
           // ROOT_PATH token for the 'path' to the root node          
           listAsArray(tail(map(keyOf,descent))),  // path
           listAsArray(map(nodeOf, descent))       // ancestors    
        );         
     }
  
     /* 
      * Set up the catching of events such as NODE_CLOSED and NODE_OPENED and, if 
      * matching the specified pattern, propagate to pattern-match events such as 
      * oboeBus('node:!')
      * 
      * 
      * 
      * @param {Function} predicateEvent 
      *          either oboeBus(NODE_CLOSED) or oboeBus(NODE_OPENED).
      * @param {Function} compiledJsonPath          
      */
     function addUnderlyingListener( fullEventName, predicateEvent, compiledJsonPath ){
     
        var emitMatch = oboeBus(fullEventName).emit;
     
        predicateEvent.on( function (ascent) {
  
           var maybeMatchingMapping = compiledJsonPath(ascent);
  
           /* Possible values for maybeMatchingMapping are now:
  
            false: 
            we did not match 
  
            an object/array/string/number/null: 
            we matched and have the node that matched.
            Because nulls are valid json values this can be null.
  
            undefined:
            we matched but don't have the matching node yet.
            ie, we know there is an upcoming node that matches but we 
            can't say anything else about it. 
            */
           if (maybeMatchingMapping !== false) {
  
              emitMatchingNode(
                 emitMatch, 
                 nodeOf(maybeMatchingMapping), 
                 ascent
              );
           }
        }, fullEventName);
       
        oboeBus('removeListener').on( function(removedEventName){
  
           // if the fully qualified match event listener is later removed, clean up 
           // by removing the underlying listener if it was the last using that pattern:
        
           if( removedEventName == fullEventName ) {
           
              if( !oboeBus(removedEventName).listeners(  )) {
                 predicateEvent.un( fullEventName );
              }
           }
        });   
     }
  
     oboeBus('newListener').on( function(fullEventName){
  
        var match = /(node|path):(.*)/.exec(fullEventName);
        
        if( match ) {
           var predicateEvent = predicateEventMap[match[1]];
                      
           if( !predicateEvent.hasListener( fullEventName) ) {  
                    
              addUnderlyingListener(
                 fullEventName,
                 predicateEvent, 
                 jsonPathCompiler( match[2] )
              );
           }
        }    
     })
  
  }
  
  /**
   * The instance API is the thing that is returned when oboe() is called.
   * it allows:
   *
   *    - listeners for various events to be added and removed
   *    - the http response header/headers to be read
   */
  function instanceApi(oboeBus, contentSource){
  
     var oboeApi,
         fullyQualifiedNamePattern = /^(node|path):./,
         rootNodeFinishedEvent = oboeBus(ROOT_NODE_FOUND),
         emitNodeDrop = oboeBus(NODE_DROP).emit,
         emitNodeSwap = oboeBus(NODE_SWAP).emit,
  
         /**
          * Add any kind of listener that the instance api exposes
          */
         addListener = varArgs(function( eventId, parameters ){
  
              if( oboeApi[eventId] ) {
  
                 // for events added as .on(event, callback), if there is a
                 // .event() equivalent with special behaviour , pass through
                 // to that:
                 apply(parameters, oboeApi[eventId]);
              } else {
  
                 // we have a standard Node.js EventEmitter 2-argument call.
                 // The first parameter is the listener.
                 var event = oboeBus(eventId),
                     listener = parameters[0];
  
                 if( fullyQualifiedNamePattern.test(eventId) ) {
  
                    // allow fully-qualified node/path listeners
                    // to be added
                    addForgettableCallback(event, listener);
                 } else  {
  
                    // the event has no special handling, pass through
                    // directly onto the event bus:
                    event.on( listener);
                 }
              }
  
              return oboeApi; // chaining
         }),
  
         /**
          * Remove any kind of listener that the instance api exposes
          */
         removeListener = function( eventId, p2, p3 ){
  
              if( eventId == 'done' ) {
  
                 rootNodeFinishedEvent.un(p2);
  
              } else if( eventId == 'node' || eventId == 'path' ) {
  
                 // allow removal of node and path
                 oboeBus.un(eventId + ':' + p2, p3);
              } else {
  
                 // we have a standard Node.js EventEmitter 2-argument call.
                 // The second parameter is the listener. This may be a call
                 // to remove a fully-qualified node/path listener but requires
                 // no special handling
                 var listener = p2;
  
                 oboeBus(eventId).un(listener);
              }
  
              return oboeApi; // chaining
         };
  
     /**
      * Add a callback, wrapped in a try/catch so as to not break the
      * execution of Oboe if an exception is thrown (fail events are
      * fired instead)
      *
      * The callback is used as the listener id so that it can later be
      * removed using .un(callback)
      */
     function addProtectedCallback(eventName, callback) {
        oboeBus(eventName).on(protectedCallback(callback), callback);
        return oboeApi; // chaining
     }
  
     /**
      * Add a callback where, if .forget() is called during the callback's
      * execution, the callback will be de-registered
      */
     function addForgettableCallback(event, callback, listenerId) {
  
        // listenerId is optional and if not given, the original
        // callback will be used
        listenerId = listenerId || callback;
  
        var safeCallback = protectedCallback(callback);
  
        event.on( function() {
  
           var discard = false;
  
           oboeApi.forget = function(){
              discard = true;
           };
  
           apply( arguments, safeCallback );
  
           delete oboeApi.forget;
  
           if( discard ) {
              event.un(listenerId);
           }
        }, listenerId);
  
        return oboeApi; // chaining
     }
  
     /**
      *  wrap a callback so that if it throws, Oboe.js doesn't crash but instead
      *  throw the error in another event loop
      */
     function protectedCallback( callback ) {
        return function() {
           try{
              return callback.apply(oboeApi, arguments);
           }catch(e)  {
              setTimeout(function() {
                throw e;
              });
           }
        }
     }
  
     /**
      * Return the fully qualified event for when a pattern matches
      * either a node or a path
      *
      * @param type {String} either 'node' or 'path'
      */
     function fullyQualifiedPatternMatchEvent(type, pattern) {
        return oboeBus(type + ':' + pattern);
     }
  
     function wrapCallbackToSwapNodeIfSomethingReturned( callback ) {
        return function() {
           var returnValueFromCallback = callback.apply(this, arguments);
  
           if( defined(returnValueFromCallback) ) {
  
              if( returnValueFromCallback == oboe.drop ) {
                 emitNodeDrop();
              } else {
                 emitNodeSwap(returnValueFromCallback);
              }
           }
        }
     }
  
     function addSingleNodeOrPathListener(eventId, pattern, callback) {
  
        var effectiveCallback;
  
        if( eventId == 'node' ) {
           effectiveCallback = wrapCallbackToSwapNodeIfSomethingReturned(callback);
        } else {
           effectiveCallback = callback;
        }
  
        addForgettableCallback(
           fullyQualifiedPatternMatchEvent(eventId, pattern),
           effectiveCallback,
           callback
        );
     }
  
     /**
      * Add several listeners at a time, from a map
      */
     function addMultipleNodeOrPathListeners(eventId, listenerMap) {
  
        for( var pattern in listenerMap ) {
           addSingleNodeOrPathListener(eventId, pattern, listenerMap[pattern]);
        }
     }
  
     /**
      * implementation behind .onPath() and .onNode()
      */
     function addNodeOrPathListenerApi( eventId, jsonPathOrListenerMap, callback ){
  
        if( isString(jsonPathOrListenerMap) ) {
           addSingleNodeOrPathListener(eventId, jsonPathOrListenerMap, callback);
  
        } else {
           addMultipleNodeOrPathListeners(eventId, jsonPathOrListenerMap);
        }
  
        return oboeApi; // chaining
     }
  
  
     // some interface methods are only filled in after we receive
     // values and are noops before that:
     oboeBus(ROOT_PATH_FOUND).on( function(rootNode) {
        oboeApi.root = functor(rootNode);
     });
  
     /**
      * When content starts make the headers readable through the
      * instance API
      */
     oboeBus(HTTP_START).on( function(_statusCode, headers) {
  
        oboeApi.header =  function(name) {
                             return name ? headers[name]
                                         : headers
                                         ;
                          }
     });
  
     /**
      * Construct and return the public API of the Oboe instance to be
      * returned to the calling application
      */
     return oboeApi = {
        on             : addListener,
        addListener    : addListener,
        removeListener : removeListener,
        emit           : oboeBus.emit,
  
        node           : partialComplete(addNodeOrPathListenerApi, 'node'),
        path           : partialComplete(addNodeOrPathListenerApi, 'path'),
  
        done           : partialComplete(addForgettableCallback, rootNodeFinishedEvent),
        start          : partialComplete(addProtectedCallback, HTTP_START ),
  
        // fail doesn't use protectedCallback because
        // could lead to non-terminating loops
        fail           : oboeBus(FAIL_EVENT).on,
  
        // public api calling abort fires the ABORTING event
        abort          : oboeBus(ABORTING).emit,
  
        // initially return nothing for header and root
        header         : noop,
        root           : noop,
  
        source         : contentSource
     };
  }
  
  /**
   * This file sits just behind the API which is used to attain a new
   * Oboe instance. It creates the new components that are required
   * and introduces them to each other.
   */
  
  function wire (httpMethodName, contentSource, body, headers, withCredentials){
  
     var oboeBus = pubSub();
     
     // Wire the input stream in if we are given a content source.
     // This will usually be the case. If not, the instance created
     // will have to be passed content from an external source.
    
     if( contentSource ) {
  
        streamingHttp( oboeBus,
                       httpTransport(), 
                       httpMethodName,
                       contentSource,
                       body,
                       headers,
                       withCredentials
        );
     }
  
     clarinet(oboeBus);
  
     ascentManager(oboeBus, incrementalContentBuilder(oboeBus));
        
     patternAdapter(oboeBus, jsonPathCompiler);      
        
     return instanceApi(oboeBus, contentSource);
  }
  
  function applyDefaults( passthrough, url, httpMethodName, body, headers, withCredentials, cached ){
  
     headers = headers ?
        // Shallow-clone the headers array. This allows it to be
        // modified without side effects to the caller. We don't
        // want to change objects that the user passes in.
        JSON.parse(JSON.stringify(headers))
        : {};
  
     if( body ) {
        if( !isString(body) ) {
  
           // If the body is not a string, stringify it. This allows objects to
           // be given which will be sent as JSON.
           body = JSON.stringify(body);
  
           // Default Content-Type to JSON unless given otherwise.
           headers['Content-Type'] = headers['Content-Type'] || 'application/json';
        }
     } else {
        body = null;
     }
  
     // support cache busting like jQuery.ajax({cache:false})
     function modifiedUrl(baseUrl, cached) {
  
        if( cached === false ) {
  
           if( baseUrl.indexOf('?') == -1 ) {
              baseUrl += '?';
           } else {
              baseUrl += '&';
           }
  
           baseUrl += '_=' + new Date().getTime();
        }
        return baseUrl;
     }
  
     return passthrough( httpMethodName || 'GET', modifiedUrl(url, cached), body, headers, withCredentials || false );
  }
  
  // export public API
  function oboe(arg1) {
  
     // We use duck-typing to detect if the parameter given is a stream, with the
     // below list of parameters.
     // Unpipe and unshift would normally be present on a stream but this breaks
     // compatibility with Request streams.
     // See https://github.com/jimhigson/oboe.js/issues/65
     
     var nodeStreamMethodNames = list('resume', 'pause', 'pipe'),
         isStream = partialComplete(
                       hasAllProperties
                    ,  nodeStreamMethodNames
                    );
     
     if( arg1 ) {
        if (isStream(arg1) || isString(arg1)) {
  
           //  simple version for GETs. Signature is:
           //    oboe( url )
           //  or, under node:
           //    oboe( readableStream )
           return applyDefaults(
              wire,
              arg1 // url
           );
  
        } else {
  
           // method signature is:
           //    oboe({method:m, url:u, body:b, headers:{...}})
  
           return applyDefaults(
              wire,
              arg1.url,
              arg1.method,
              arg1.body,
              arg1.headers,
              arg1.withCredentials,
              arg1.cached
           );
           
        }
     } else {
        // wire up a no-AJAX, no-stream Oboe. Will have to have content 
        // fed in externally and using .emit.
        return wire();
     }
  }
  
  /* oboe.drop is a special value. If a node callback returns this value the
     parsed node is deleted from the JSON
   */
  oboe.drop = function() {
     return oboe.drop;
  };
  
  
     if ( typeof define === "function" && define.amd ) {
        define( "oboe", [], function () { return oboe; } );
     } else if (typeof exports === 'object') {
        module.exports = oboe;
     } else {
        window.oboe = oboe;
     }
  })((function(){
     // Access to the window object throws an exception in HTML5 web workers so
     // point it to "self" if it runs in a web worker
        try {
           return window;
        } catch (e) {
           return self;
        }
     }()), Object, Array, Error, JSON);
  
  },{}],240:[function(require,module,exports){
  exports.endianness = function () { return 'LE' };
  
  exports.hostname = function () {
      if (typeof location !== 'undefined') {
          return location.hostname
      }
      else return '';
  };
  
  exports.loadavg = function () { return [] };
  
  exports.uptime = function () { return 0 };
  
  exports.freemem = function () {
      return Number.MAX_VALUE;
  };
  
  exports.totalmem = function () {
      return Number.MAX_VALUE;
  };
  
  exports.cpus = function () { return [] };
  
  exports.type = function () { return 'Browser' };
  
  exports.release = function () {
      if (typeof navigator !== 'undefined') {
          return navigator.appVersion;
      }
      return '';
  };
  
  exports.networkInterfaces
  = exports.getNetworkInterfaces
  = function () { return {} };
  
  exports.arch = function () { return 'javascript' };
  
  exports.platform = function () { return 'browser' };
  
  exports.tmpdir = exports.tmpDir = function () {
      return '/tmp';
  };
  
  exports.EOL = '\n';
  
  exports.homedir = function () {
    return '/'
  };
  
  },{}],241:[function(require,module,exports){
  module.exports={"2.16.840.1.101.3.4.1.1": "aes-128-ecb",
  "2.16.840.1.101.3.4.1.2": "aes-128-cbc",
  "2.16.840.1.101.3.4.1.3": "aes-128-ofb",
  "2.16.840.1.101.3.4.1.4": "aes-128-cfb",
  "2.16.840.1.101.3.4.1.21": "aes-192-ecb",
  "2.16.840.1.101.3.4.1.22": "aes-192-cbc",
  "2.16.840.1.101.3.4.1.23": "aes-192-ofb",
  "2.16.840.1.101.3.4.1.24": "aes-192-cfb",
  "2.16.840.1.101.3.4.1.41": "aes-256-ecb",
  "2.16.840.1.101.3.4.1.42": "aes-256-cbc",
  "2.16.840.1.101.3.4.1.43": "aes-256-ofb",
  "2.16.840.1.101.3.4.1.44": "aes-256-cfb"
  }
  },{}],242:[function(require,module,exports){
  // from https://github.com/indutny/self-signed/blob/gh-pages/lib/asn1.js
  // Fedor, you are amazing.
  'use strict'
  
  var asn1 = require('asn1.js')
  
  exports.certificate = require('./certificate')
  
  var RSAPrivateKey = asn1.define('RSAPrivateKey', function () {
    this.seq().obj(
      this.key('version').int(),
      this.key('modulus').int(),
      this.key('publicExponent').int(),
      this.key('privateExponent').int(),
      this.key('prime1').int(),
      this.key('prime2').int(),
      this.key('exponent1').int(),
      this.key('exponent2').int(),
      this.key('coefficient').int()
    )
  })
  exports.RSAPrivateKey = RSAPrivateKey
  
  var RSAPublicKey = asn1.define('RSAPublicKey', function () {
    this.seq().obj(
      this.key('modulus').int(),
      this.key('publicExponent').int()
    )
  })
  exports.RSAPublicKey = RSAPublicKey
  
  var PublicKey = asn1.define('SubjectPublicKeyInfo', function () {
    this.seq().obj(
      this.key('algorithm').use(AlgorithmIdentifier),
      this.key('subjectPublicKey').bitstr()
    )
  })
  exports.PublicKey = PublicKey
  
  var AlgorithmIdentifier = asn1.define('AlgorithmIdentifier', function () {
    this.seq().obj(
      this.key('algorithm').objid(),
      this.key('none').null_().optional(),
      this.key('curve').objid().optional(),
      this.key('params').seq().obj(
        this.key('p').int(),
        this.key('q').int(),
        this.key('g').int()
      ).optional()
    )
  })
  
  var PrivateKeyInfo = asn1.define('PrivateKeyInfo', function () {
    this.seq().obj(
      this.key('version').int(),
      this.key('algorithm').use(AlgorithmIdentifier),
      this.key('subjectPrivateKey').octstr()
    )
  })
  exports.PrivateKey = PrivateKeyInfo
  var EncryptedPrivateKeyInfo = asn1.define('EncryptedPrivateKeyInfo', function () {
    this.seq().obj(
      this.key('algorithm').seq().obj(
        this.key('id').objid(),
        this.key('decrypt').seq().obj(
          this.key('kde').seq().obj(
            this.key('id').objid(),
            this.key('kdeparams').seq().obj(
              this.key('salt').octstr(),
              this.key('iters').int()
            )
          ),
          this.key('cipher').seq().obj(
            this.key('algo').objid(),
            this.key('iv').octstr()
          )
        )
      ),
      this.key('subjectPrivateKey').octstr()
    )
  })
  
  exports.EncryptedPrivateKey = EncryptedPrivateKeyInfo
  
  var DSAPrivateKey = asn1.define('DSAPrivateKey', function () {
    this.seq().obj(
      this.key('version').int(),
      this.key('p').int(),
      this.key('q').int(),
      this.key('g').int(),
      this.key('pub_key').int(),
      this.key('priv_key').int()
    )
  })
  exports.DSAPrivateKey = DSAPrivateKey
  
  exports.DSAparam = asn1.define('DSAparam', function () {
    this.int()
  })
  
  var ECPrivateKey = asn1.define('ECPrivateKey', function () {
    this.seq().obj(
      this.key('version').int(),
      this.key('privateKey').octstr(),
      this.key('parameters').optional().explicit(0).use(ECParameters),
      this.key('publicKey').optional().explicit(1).bitstr()
    )
  })
  exports.ECPrivateKey = ECPrivateKey
  
  var ECParameters = asn1.define('ECParameters', function () {
    this.choice({
      namedCurve: this.objid()
    })
  })
  
  exports.signature = asn1.define('signature', function () {
    this.seq().obj(
      this.key('r').int(),
      this.key('s').int()
    )
  })
  
  },{"./certificate":243,"asn1.js":5}],243:[function(require,module,exports){
  // from https://github.com/Rantanen/node-dtls/blob/25a7dc861bda38cfeac93a723500eea4f0ac2e86/Certificate.js
  // thanks to @Rantanen
  
  'use strict'
  
  var asn = require('asn1.js')
  
  var Time = asn.define('Time', function () {
    this.choice({
      utcTime: this.utctime(),
      generalTime: this.gentime()
    })
  })
  
  var AttributeTypeValue = asn.define('AttributeTypeValue', function () {
    this.seq().obj(
      this.key('type').objid(),
      this.key('value').any()
    )
  })
  
  var AlgorithmIdentifier = asn.define('AlgorithmIdentifier', function () {
    this.seq().obj(
      this.key('algorithm').objid(),
      this.key('parameters').optional()
    )
  })
  
  var SubjectPublicKeyInfo = asn.define('SubjectPublicKeyInfo', function () {
    this.seq().obj(
      this.key('algorithm').use(AlgorithmIdentifier),
      this.key('subjectPublicKey').bitstr()
    )
  })
  
  var RelativeDistinguishedName = asn.define('RelativeDistinguishedName', function () {
    this.setof(AttributeTypeValue)
  })
  
  var RDNSequence = asn.define('RDNSequence', function () {
    this.seqof(RelativeDistinguishedName)
  })
  
  var Name = asn.define('Name', function () {
    this.choice({
      rdnSequence: this.use(RDNSequence)
    })
  })
  
  var Validity = asn.define('Validity', function () {
    this.seq().obj(
      this.key('notBefore').use(Time),
      this.key('notAfter').use(Time)
    )
  })
  
  var Extension = asn.define('Extension', function () {
    this.seq().obj(
      this.key('extnID').objid(),
      this.key('critical').bool().def(false),
      this.key('extnValue').octstr()
    )
  })
  
  var TBSCertificate = asn.define('TBSCertificate', function () {
    this.seq().obj(
      this.key('version').explicit(0).int(),
      this.key('serialNumber').int(),
      this.key('signature').use(AlgorithmIdentifier),
      this.key('issuer').use(Name),
      this.key('validity').use(Validity),
      this.key('subject').use(Name),
      this.key('subjectPublicKeyInfo').use(SubjectPublicKeyInfo),
      this.key('issuerUniqueID').implicit(1).bitstr().optional(),
      this.key('subjectUniqueID').implicit(2).bitstr().optional(),
      this.key('extensions').explicit(3).seqof(Extension).optional()
    )
  })
  
  var X509Certificate = asn.define('X509Certificate', function () {
    this.seq().obj(
      this.key('tbsCertificate').use(TBSCertificate),
      this.key('signatureAlgorithm').use(AlgorithmIdentifier),
      this.key('signatureValue').bitstr()
    )
  })
  
  module.exports = X509Certificate
  
  },{"asn1.js":5}],244:[function(require,module,exports){
  (function (Buffer){
  // adapted from https://github.com/apatil/pemstrip
  var findProc = /Proc-Type: 4,ENCRYPTED\n\r?DEK-Info: AES-((?:128)|(?:192)|(?:256))-CBC,([0-9A-H]+)\n\r?\n\r?([0-9A-z\n\r\+\/\=]+)\n\r?/m
  var startRegex = /^-----BEGIN ((?:.* KEY)|CERTIFICATE)-----\n/m
  var fullRegex = /^-----BEGIN ((?:.* KEY)|CERTIFICATE)-----\n\r?([0-9A-z\n\r\+\/\=]+)\n\r?-----END \1-----$/m
  var evp = require('evp_bytestokey')
  var ciphers = require('browserify-aes')
  module.exports = function (okey, password) {
    var key = okey.toString()
    var match = key.match(findProc)
    var decrypted
    if (!match) {
      var match2 = key.match(fullRegex)
      decrypted = new Buffer(match2[2].replace(/\r?\n/g, ''), 'base64')
    } else {
      var suite = 'aes' + match[1]
      var iv = new Buffer(match[2], 'hex')
      var cipherText = new Buffer(match[3].replace(/\r?\n/g, ''), 'base64')
      var cipherKey = evp(password, iv.slice(0, 8), parseInt(match[1], 10)).key
      var out = []
      var cipher = ciphers.createDecipheriv(suite, cipherKey, iv)
      out.push(cipher.update(cipherText))
      out.push(cipher.final())
      decrypted = Buffer.concat(out)
    }
    var tag = key.match(startRegex)[1]
    return {
      tag: tag,
      data: decrypted
    }
  }
  
  }).call(this,require("buffer").Buffer)
  },{"browserify-aes":58,"buffer":84,"evp_bytestokey":158}],245:[function(require,module,exports){
  (function (Buffer){
  var asn1 = require('./asn1')
  var aesid = require('./aesid.json')
  var fixProc = require('./fixProc')
  var ciphers = require('browserify-aes')
  var compat = require('pbkdf2')
  module.exports = parseKeys
  
  function parseKeys (buffer) {
    var password
    if (typeof buffer === 'object' && !Buffer.isBuffer(buffer)) {
      password = buffer.passphrase
      buffer = buffer.key
    }
    if (typeof buffer === 'string') {
      buffer = new Buffer(buffer)
    }
  
    var stripped = fixProc(buffer, password)
  
    var type = stripped.tag
    var data = stripped.data
    var subtype, ndata
    switch (type) {
      case 'CERTIFICATE':
        ndata = asn1.certificate.decode(data, 'der').tbsCertificate.subjectPublicKeyInfo
        // falls through
      case 'PUBLIC KEY':
        if (!ndata) {
          ndata = asn1.PublicKey.decode(data, 'der')
        }
        subtype = ndata.algorithm.algorithm.join('.')
        switch (subtype) {
          case '1.2.840.113549.1.1.1':
            return asn1.RSAPublicKey.decode(ndata.subjectPublicKey.data, 'der')
          case '1.2.840.10045.2.1':
            ndata.subjectPrivateKey = ndata.subjectPublicKey
            return {
              type: 'ec',
              data: ndata
            }
          case '1.2.840.10040.4.1':
            ndata.algorithm.params.pub_key = asn1.DSAparam.decode(ndata.subjectPublicKey.data, 'der')
            return {
              type: 'dsa',
              data: ndata.algorithm.params
            }
          default: throw new Error('unknown key id ' + subtype)
        }
        throw new Error('unknown key type ' + type)
      case 'ENCRYPTED PRIVATE KEY':
        data = asn1.EncryptedPrivateKey.decode(data, 'der')
        data = decrypt(data, password)
        // falls through
      case 'PRIVATE KEY':
        ndata = asn1.PrivateKey.decode(data, 'der')
        subtype = ndata.algorithm.algorithm.join('.')
        switch (subtype) {
          case '1.2.840.113549.1.1.1':
            return asn1.RSAPrivateKey.decode(ndata.subjectPrivateKey, 'der')
          case '1.2.840.10045.2.1':
            return {
              curve: ndata.algorithm.curve,
              privateKey: asn1.ECPrivateKey.decode(ndata.subjectPrivateKey, 'der').privateKey
            }
          case '1.2.840.10040.4.1':
            ndata.algorithm.params.priv_key = asn1.DSAparam.decode(ndata.subjectPrivateKey, 'der')
            return {
              type: 'dsa',
              params: ndata.algorithm.params
            }
          default: throw new Error('unknown key id ' + subtype)
        }
        throw new Error('unknown key type ' + type)
      case 'RSA PUBLIC KEY':
        return asn1.RSAPublicKey.decode(data, 'der')
      case 'RSA PRIVATE KEY':
        return asn1.RSAPrivateKey.decode(data, 'der')
      case 'DSA PRIVATE KEY':
        return {
          type: 'dsa',
          params: asn1.DSAPrivateKey.decode(data, 'der')
        }
      case 'EC PRIVATE KEY':
        data = asn1.ECPrivateKey.decode(data, 'der')
        return {
          curve: data.parameters.value,
          privateKey: data.privateKey
        }
      default: throw new Error('unknown key type ' + type)
    }
  }
  parseKeys.signature = asn1.signature
  function decrypt (data, password) {
    var salt = data.algorithm.decrypt.kde.kdeparams.salt
    var iters = parseInt(data.algorithm.decrypt.kde.kdeparams.iters.toString(), 10)
    var algo = aesid[data.algorithm.decrypt.cipher.algo.join('.')]
    var iv = data.algorithm.decrypt.cipher.iv
    var cipherText = data.subjectPrivateKey
    var keylen = parseInt(algo.split('-')[1], 10) / 8
    var key = compat.pbkdf2Sync(password, salt, iters, keylen)
    var cipher = ciphers.createDecipheriv(algo, key, iv)
    var out = []
    out.push(cipher.update(cipherText))
    out.push(cipher.final())
    return Buffer.concat(out)
  }
  
  }).call(this,require("buffer").Buffer)
  },{"./aesid.json":241,"./asn1":242,"./fixProc":244,"browserify-aes":58,"buffer":84,"pbkdf2":247}],246:[function(require,module,exports){
  var trim = require('trim')
    , forEach = require('for-each')
    , isArray = function(arg) {
        return Object.prototype.toString.call(arg) === '[object Array]';
      }
  
  module.exports = function (headers) {
    if (!headers)
      return {}
  
    var result = {}
  
    forEach(
        trim(headers).split('\n')
      , function (row) {
          var index = row.indexOf(':')
            , key = trim(row.slice(0, index)).toLowerCase()
            , value = trim(row.slice(index + 1))
  
          if (typeof(result[key]) === 'undefined') {
            result[key] = value
          } else if (isArray(result[key])) {
            result[key].push(value)
          } else {
            result[key] = [ result[key], value ]
          }
        }
    )
  
    return result
  }
  },{"for-each":159,"trim":324}],247:[function(require,module,exports){
  
  exports.pbkdf2 = require('./lib/async')
  
  exports.pbkdf2Sync = require('./lib/sync')
  
  },{"./lib/async":248,"./lib/sync":251}],248:[function(require,module,exports){
  (function (process,global){
  var checkParameters = require('./precondition')
  var defaultEncoding = require('./default-encoding')
  var sync = require('./sync')
  var Buffer = require('safe-buffer').Buffer
  
  var ZERO_BUF
  var subtle = global.crypto && global.crypto.subtle
  var toBrowser = {
    'sha': 'SHA-1',
    'sha-1': 'SHA-1',
    'sha1': 'SHA-1',
    'sha256': 'SHA-256',
    'sha-256': 'SHA-256',
    'sha384': 'SHA-384',
    'sha-384': 'SHA-384',
    'sha-512': 'SHA-512',
    'sha512': 'SHA-512'
  }
  var checks = []
  function checkNative (algo) {
    if (global.process && !global.process.browser) {
      return Promise.resolve(false)
    }
    if (!subtle || !subtle.importKey || !subtle.deriveBits) {
      return Promise.resolve(false)
    }
    if (checks[algo] !== undefined) {
      return checks[algo]
    }
    ZERO_BUF = ZERO_BUF || Buffer.alloc(8)
    var prom = browserPbkdf2(ZERO_BUF, ZERO_BUF, 10, 128, algo)
      .then(function () {
        return true
      }).catch(function () {
        return false
      })
    checks[algo] = prom
    return prom
  }
  function browserPbkdf2 (password, salt, iterations, length, algo) {
    return subtle.importKey(
      'raw', password, {name: 'PBKDF2'}, false, ['deriveBits']
    ).then(function (key) {
      return subtle.deriveBits({
        name: 'PBKDF2',
        salt: salt,
        iterations: iterations,
        hash: {
          name: algo
        }
      }, key, length << 3)
    }).then(function (res) {
      return Buffer.from(res)
    })
  }
  function resolvePromise (promise, callback) {
    promise.then(function (out) {
      process.nextTick(function () {
        callback(null, out)
      })
    }, function (e) {
      process.nextTick(function () {
        callback(e)
      })
    })
  }
  module.exports = function (password, salt, iterations, keylen, digest, callback) {
    if (!Buffer.isBuffer(password)) password = Buffer.from(password, defaultEncoding)
    if (!Buffer.isBuffer(salt)) salt = Buffer.from(salt, defaultEncoding)
  
    checkParameters(iterations, keylen)
    if (typeof digest === 'function') {
      callback = digest
      digest = undefined
    }
    if (typeof callback !== 'function') throw new Error('No callback provided to pbkdf2')
  
    digest = digest || 'sha1'
    var algo = toBrowser[digest.toLowerCase()]
    if (!algo || typeof global.Promise !== 'function') {
      return process.nextTick(function () {
        var out
        try {
          out = sync(password, salt, iterations, keylen, digest)
        } catch (e) {
          return callback(e)
        }
        callback(null, out)
      })
    }
    resolvePromise(checkNative(algo).then(function (resp) {
      if (resp) {
        return browserPbkdf2(password, salt, iterations, keylen, algo)
      } else {
        return sync(password, salt, iterations, keylen, digest)
      }
    }), callback)
  }
  
  }).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
  },{"./default-encoding":249,"./precondition":250,"./sync":251,"_process":257,"safe-buffer":290}],249:[function(require,module,exports){
  (function (process){
  var defaultEncoding
  /* istanbul ignore next */
  if (process.browser) {
    defaultEncoding = 'utf-8'
  } else {
    var pVersionMajor = parseInt(process.version.split('.')[0].slice(1), 10)
  
    defaultEncoding = pVersionMajor >= 6 ? 'utf-8' : 'binary'
  }
  module.exports = defaultEncoding
  
  }).call(this,require('_process'))
  },{"_process":257}],250:[function(require,module,exports){
  var MAX_ALLOC = Math.pow(2, 30) - 1 // default in iojs
  module.exports = function (iterations, keylen) {
    if (typeof iterations !== 'number') {
      throw new TypeError('Iterations not a number')
    }
  
    if (iterations < 0) {
      throw new TypeError('Bad iterations')
    }
  
    if (typeof keylen !== 'number') {
      throw new TypeError('Key length not a number')
    }
  
    if (keylen < 0 || keylen > MAX_ALLOC || keylen !== keylen) { /* eslint no-self-compare: 0 */
      throw new TypeError('Bad key length')
    }
  }
  
  },{}],251:[function(require,module,exports){
  var md5 = require('create-hash/md5')
  var rmd160 = require('ripemd160')
  var sha = require('sha.js')
  
  var checkParameters = require('./precondition')
  var defaultEncoding = require('./default-encoding')
  var Buffer = require('safe-buffer').Buffer
  var ZEROS = Buffer.alloc(128)
  var sizes = {
    md5: 16,
    sha1: 20,
    sha224: 28,
    sha256: 32,
    sha384: 48,
    sha512: 64,
    rmd160: 20,
    ripemd160: 20
  }
  
  function Hmac (alg, key, saltLen) {
    var hash = getDigest(alg)
    var blocksize = (alg === 'sha512' || alg === 'sha384') ? 128 : 64
  
    if (key.length > blocksize) {
      key = hash(key)
    } else if (key.length < blocksize) {
      key = Buffer.concat([key, ZEROS], blocksize)
    }
  
    var ipad = Buffer.allocUnsafe(blocksize + sizes[alg])
    var opad = Buffer.allocUnsafe(blocksize + sizes[alg])
    for (var i = 0; i < blocksize; i++) {
      ipad[i] = key[i] ^ 0x36
      opad[i] = key[i] ^ 0x5C
    }
  
    var ipad1 = Buffer.allocUnsafe(blocksize + saltLen + 4)
    ipad.copy(ipad1, 0, 0, blocksize)
    this.ipad1 = ipad1
    this.ipad2 = ipad
    this.opad = opad
    this.alg = alg
    this.blocksize = blocksize
    this.hash = hash
    this.size = sizes[alg]
  }
  
  Hmac.prototype.run = function (data, ipad) {
    data.copy(ipad, this.blocksize)
    var h = this.hash(ipad)
    h.copy(this.opad, this.blocksize)
    return this.hash(this.opad)
  }
  
  function getDigest (alg) {
    function shaFunc (data) {
      return sha(alg).update(data).digest()
    }
  
    if (alg === 'rmd160' || alg === 'ripemd160') return rmd160
    if (alg === 'md5') return md5
    return shaFunc
  }
  
  function pbkdf2 (password, salt, iterations, keylen, digest) {
    if (!Buffer.isBuffer(password)) password = Buffer.from(password, defaultEncoding)
    if (!Buffer.isBuffer(salt)) salt = Buffer.from(salt, defaultEncoding)
  
    checkParameters(iterations, keylen)
  
    digest = digest || 'sha1'
  
    var hmac = new Hmac(digest, password, salt.length)
  
    var DK = Buffer.allocUnsafe(keylen)
    var block1 = Buffer.allocUnsafe(salt.length + 4)
    salt.copy(block1, 0, 0, salt.length)
  
    var destPos = 0
    var hLen = sizes[digest]
    var l = Math.ceil(keylen / hLen)
  
    for (var i = 1; i <= l; i++) {
      block1.writeUInt32BE(i, salt.length)
  
      var T = hmac.run(block1, hmac.ipad1)
      var U = T
  
      for (var j = 1; j < iterations; j++) {
        U = hmac.run(U, hmac.ipad2)
        for (var k = 0; k < hLen; k++) T[k] ^= U[k]
      }
  
      T.copy(DK, destPos)
      destPos += hLen
    }
  
    return DK
  }
  
  module.exports = pbkdf2
  
  },{"./default-encoding":249,"./precondition":250,"create-hash/md5":93,"ripemd160":288,"safe-buffer":290,"sha.js":304}],252:[function(require,module,exports){
  'use strict';
  
  var processFn = function (fn, P, opts) {
    return function () {
      var that = this;
      var args = new Array(arguments.length);
  
      for (var i = 0; i < arguments.length; i++) {
        args[i] = arguments[i];
      }
  
      return new P(function (resolve, reject) {
        args.push(function (err, result) {
          if (err) {
            reject(err);
          } else if (opts.multiArgs) {
            var results = new Array(arguments.length - 1);
  
            for (var i = 1; i < arguments.length; i++) {
              results[i - 1] = arguments[i];
            }
  
            resolve(results);
          } else {
            resolve(result);
          }
        });
  
        fn.apply(that, args);
      });
    };
  };
  
  var pify = module.exports = function (obj, P, opts) {
    if (typeof P !== 'function') {
      opts = P;
      P = Promise;
    }
  
    opts = opts || {};
    opts.exclude = opts.exclude || [/.+Sync$/];
  
    var filter = function (key) {
      var match = function (pattern) {
        return typeof pattern === 'string' ? key === pattern : pattern.test(key);
      };
  
      return opts.include ? opts.include.some(match) : !opts.exclude.some(match);
    };
  
    var ret = typeof obj === 'function' ? function () {
      if (opts.excludeMain) {
        return obj.apply(this, arguments);
      }
  
      return processFn(obj, P, opts).apply(this, arguments);
    } : {};
  
    return Object.keys(obj).reduce(function (ret, key) {
      var x = obj[key];
  
      ret[key] = typeof x === 'function' && filter(key) ? processFn(x, P, opts) : x;
  
      return ret;
    }, ret);
  };
  
  pify.all = pify;
  
  },{}],253:[function(require,module,exports){
  /*
   * Copyright (c) 2012 Mathieu Turcotte
   * Licensed under the MIT license.
   */
  
  module.exports = require('./lib/checks');
  },{"./lib/checks":254}],254:[function(require,module,exports){
  /*
   * Copyright (c) 2012 Mathieu Turcotte
   * Licensed under the MIT license.
   */
  
  var util = require('util');
  
  var errors = module.exports = require('./errors');
  
  function failCheck(ExceptionConstructor, callee, messageFormat, formatArgs) {
      messageFormat = messageFormat || '';
      var message = util.format.apply(this, [messageFormat].concat(formatArgs));
      var error = new ExceptionConstructor(message);
      Error.captureStackTrace(error, callee);
      throw error;
  }
  
  function failArgumentCheck(callee, message, formatArgs) {
      failCheck(errors.IllegalArgumentError, callee, message, formatArgs);
  }
  
  function failStateCheck(callee, message, formatArgs) {
      failCheck(errors.IllegalStateError, callee, message, formatArgs);
  }
  
  module.exports.checkArgument = function(value, message) {
      if (!value) {
          failArgumentCheck(arguments.callee, message,
              Array.prototype.slice.call(arguments, 2));
      }
  };
  
  module.exports.checkState = function(value, message) {
      if (!value) {
          failStateCheck(arguments.callee, message,
              Array.prototype.slice.call(arguments, 2));
      }
  };
  
  module.exports.checkIsDef = function(value, message) {
      if (value !== undefined) {
          return value;
      }
  
      failArgumentCheck(arguments.callee, message ||
          'Expected value to be defined but was undefined.',
          Array.prototype.slice.call(arguments, 2));
  };
  
  module.exports.checkIsDefAndNotNull = function(value, message) {
      // Note that undefined == null.
      if (value != null) {
          return value;
      }
  
      failArgumentCheck(arguments.callee, message ||
          'Expected value to be defined and not null but got "' +
          typeOf(value) + '".', Array.prototype.slice.call(arguments, 2));
  };
  
  // Fixed version of the typeOf operator which returns 'null' for null values
  // and 'array' for arrays.
  function typeOf(value) {
      var s = typeof value;
      if (s == 'object') {
          if (!value) {
              return 'null';
          } else if (value instanceof Array) {
              return 'array';
          }
      }
      return s;
  }
  
  function typeCheck(expect) {
      return function(value, message) {
          var type = typeOf(value);
  
          if (type == expect) {
              return value;
          }
  
          failArgumentCheck(arguments.callee, message ||
              'Expected "' + expect + '" but got "' + type + '".',
              Array.prototype.slice.call(arguments, 2));
      };
  }
  
  module.exports.checkIsString = typeCheck('string');
  module.exports.checkIsArray = typeCheck('array');
  module.exports.checkIsNumber = typeCheck('number');
  module.exports.checkIsBoolean = typeCheck('boolean');
  module.exports.checkIsFunction = typeCheck('function');
  module.exports.checkIsObject = typeCheck('object');
  
  },{"./errors":255,"util":333}],255:[function(require,module,exports){
  /*
   * Copyright (c) 2012 Mathieu Turcotte
   * Licensed under the MIT license.
   */
  
  var util = require('util');
  
  function IllegalArgumentError(message) {
      Error.call(this, message);
      this.message = message;
  }
  util.inherits(IllegalArgumentError, Error);
  
  IllegalArgumentError.prototype.name = 'IllegalArgumentError';
  
  function IllegalStateError(message) {
      Error.call(this, message);
      this.message = message;
  }
  util.inherits(IllegalStateError, Error);
  
  IllegalStateError.prototype.name = 'IllegalStateError';
  
  module.exports.IllegalStateError = IllegalStateError;
  module.exports.IllegalArgumentError = IllegalArgumentError;
  },{"util":333}],256:[function(require,module,exports){
  (function (process){
  'use strict';
  
  if (!process.version ||
      process.version.indexOf('v0.') === 0 ||
      process.version.indexOf('v1.') === 0 && process.version.indexOf('v1.8.') !== 0) {
    module.exports = { nextTick: nextTick };
  } else {
    module.exports = process
  }
  
  function nextTick(fn, arg1, arg2, arg3) {
    if (typeof fn !== 'function') {
      throw new TypeError('"callback" argument must be a function');
    }
    var len = arguments.length;
    var args, i;
    switch (len) {
    case 0:
    case 1:
      return process.nextTick(fn);
    case 2:
      return process.nextTick(function afterTickOne() {
        fn.call(null, arg1);
      });
    case 3:
      return process.nextTick(function afterTickTwo() {
        fn.call(null, arg1, arg2);
      });
    case 4:
      return process.nextTick(function afterTickThree() {
        fn.call(null, arg1, arg2, arg3);
      });
    default:
      args = new Array(len - 1);
      i = 0;
      while (i < args.length) {
        args[i++] = arguments[i];
      }
      return process.nextTick(function afterTick() {
        fn.apply(null, args);
      });
    }
  }
  
  
  }).call(this,require('_process'))
  },{"_process":257}],257:[function(require,module,exports){
  // shim for using process in browser
  var process = module.exports = {};
  
  // cached from whatever global is present so that test runners that stub it
  // don't break things.  But we need to wrap it in a try catch in case it is
  // wrapped in strict mode code which doesn't define any globals.  It's inside a
  // function because try/catches deoptimize in certain engines.
  
  var cachedSetTimeout;
  var cachedClearTimeout;
  
  function defaultSetTimout() {
      throw new Error('setTimeout has not been defined');
  }
  function defaultClearTimeout () {
      throw new Error('clearTimeout has not been defined');
  }
  (function () {
      try {
          if (typeof setTimeout === 'function') {
              cachedSetTimeout = setTimeout;
          } else {
              cachedSetTimeout = defaultSetTimout;
          }
      } catch (e) {
          cachedSetTimeout = defaultSetTimout;
      }
      try {
          if (typeof clearTimeout === 'function') {
              cachedClearTimeout = clearTimeout;
          } else {
              cachedClearTimeout = defaultClearTimeout;
          }
      } catch (e) {
          cachedClearTimeout = defaultClearTimeout;
      }
  } ())
  function runTimeout(fun) {
      if (cachedSetTimeout === setTimeout) {
          //normal environments in sane situations
          return setTimeout(fun, 0);
      }
      // if setTimeout wasn't available but was latter defined
      if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
          cachedSetTimeout = setTimeout;
          return setTimeout(fun, 0);
      }
      try {
          // when when somebody has screwed with setTimeout but no I.E. madness
          return cachedSetTimeout(fun, 0);
      } catch(e){
          try {
              // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
              return cachedSetTimeout.call(null, fun, 0);
          } catch(e){
              // same as above but when it's a version of I.E. that must have the global object for 'this', hopefully our context correct otherwise it will throw a global error
              return cachedSetTimeout.call(this, fun, 0);
          }
      }
  
  
  }
  function runClearTimeout(marker) {
      if (cachedClearTimeout === clearTimeout) {
          //normal environments in sane situations
          return clearTimeout(marker);
      }
      // if clearTimeout wasn't available but was latter defined
      if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
          cachedClearTimeout = clearTimeout;
          return clearTimeout(marker);
      }
      try {
          // when when somebody has screwed with setTimeout but no I.E. madness
          return cachedClearTimeout(marker);
      } catch (e){
          try {
              // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
              return cachedClearTimeout.call(null, marker);
          } catch (e){
              // same as above but when it's a version of I.E. that must have the global object for 'this', hopefully our context correct otherwise it will throw a global error.
              // Some versions of I.E. have different rules for clearTimeout vs setTimeout
              return cachedClearTimeout.call(this, marker);
          }
      }
  
  
  
  }
  var queue = [];
  var draining = false;
  var currentQueue;
  var queueIndex = -1;
  
  function cleanUpNextTick() {
      if (!draining || !currentQueue) {
          return;
      }
      draining = false;
      if (currentQueue.length) {
          queue = currentQueue.concat(queue);
      } else {
          queueIndex = -1;
      }
      if (queue.length) {
          drainQueue();
      }
  }
  
  function drainQueue() {
      if (draining) {
          return;
      }
      var timeout = runTimeout(cleanUpNextTick);
      draining = true;
  
      var len = queue.length;
      while(len) {
          currentQueue = queue;
          queue = [];
          while (++queueIndex < len) {
              if (currentQueue) {
                  currentQueue[queueIndex].run();
              }
          }
          queueIndex = -1;
          len = queue.length;
      }
      currentQueue = null;
      draining = false;
      runClearTimeout(timeout);
  }
  
  process.nextTick = function (fun) {
      var args = new Array(arguments.length - 1);
      if (arguments.length > 1) {
          for (var i = 1; i < arguments.length; i++) {
              args[i - 1] = arguments[i];
          }
      }
      queue.push(new Item(fun, args));
      if (queue.length === 1 && !draining) {
          runTimeout(drainQueue);
      }
  };
  
  // v8 likes predictable objects
  function Item(fun, array) {
      this.fun = fun;
      this.array = array;
  }
  Item.prototype.run = function () {
      this.fun.apply(null, this.array);
  };
  process.title = 'browser';
  process.browser = true;
  process.env = {};
  process.argv = [];
  process.version = ''; // empty string to avoid regexp issues
  process.versions = {};
  
  function noop() {}
  
  process.on = noop;
  process.addListener = noop;
  process.once = noop;
  process.off = noop;
  process.removeListener = noop;
  process.removeAllListeners = noop;
  process.emit = noop;
  process.prependListener = noop;
  process.prependOnceListener = noop;
  
  process.listeners = function (name) { return [] }
  
  process.binding = function (name) {
      throw new Error('process.binding is not supported');
  };
  
  process.cwd = function () { return '/' };
  process.chdir = function (dir) {
      throw new Error('process.chdir is not supported');
  };
  process.umask = function() { return 0; };
  
  },{}],258:[function(require,module,exports){
  'use strict';
  var isFn = require('is-fn');
  var setImmediate = require('set-immediate-shim');
  
  module.exports = function (promise) {
    if (!isFn(promise.then)) {
      throw new TypeError('Expected a promise');
    }
  
    return function (cb) {
      promise.then(function (data) {
        setImmediate(cb, null, data);
      }, function (err) {
        setImmediate(cb, err);
      });
    };
  };
  
  },{"is-fn":183,"set-immediate-shim":302}],259:[function(require,module,exports){
  exports.publicEncrypt = require('./publicEncrypt');
  exports.privateDecrypt = require('./privateDecrypt');
  
  exports.privateEncrypt = function privateEncrypt(key, buf) {
    return exports.publicEncrypt(key, buf, true);
  };
  
  exports.publicDecrypt = function publicDecrypt(key, buf) {
    return exports.privateDecrypt(key, buf, true);
  };
  },{"./privateDecrypt":261,"./publicEncrypt":262}],260:[function(require,module,exports){
  (function (Buffer){
  var createHash = require('create-hash');
  module.exports = function (seed, len) {
    var t = new Buffer('');
    var  i = 0, c;
    while (t.length < len) {
      c = i2ops(i++);
      t = Buffer.concat([t, createHash('sha1').update(seed).update(c).digest()]);
    }
    return t.slice(0, len);
  };
  
  function i2ops(c) {
    var out = new Buffer(4);
    out.writeUInt32BE(c,0);
    return out;
  }
  }).call(this,require("buffer").Buffer)
  },{"buffer":84,"create-hash":91}],261:[function(require,module,exports){
  (function (Buffer){
  var parseKeys = require('parse-asn1');
  var mgf = require('./mgf');
  var xor = require('./xor');
  var bn = require('bn.js');
  var crt = require('browserify-rsa');
  var createHash = require('create-hash');
  var withPublic = require('./withPublic');
  module.exports = function privateDecrypt(private_key, enc, reverse) {
    var padding;
    if (private_key.padding) {
      padding = private_key.padding;
    } else if (reverse) {
      padding = 1;
    } else {
      padding = 4;
    }
    
    var key = parseKeys(private_key);
    var k = key.modulus.byteLength();
    if (enc.length > k || new bn(enc).cmp(key.modulus) >= 0) {
      throw new Error('decryption error');
    }
    var msg;
    if (reverse) {
      msg = withPublic(new bn(enc), key);
    } else {
      msg = crt(enc, key);
    }
    var zBuffer = new Buffer(k - msg.length);
    zBuffer.fill(0);
    msg = Buffer.concat([zBuffer, msg], k);
    if (padding === 4) {
      return oaep(key, msg);
    } else if (padding === 1) {
      return pkcs1(key, msg, reverse);
    } else if (padding === 3) {
      return msg;
    } else {
      throw new Error('unknown padding');
    }
  };
  
  function oaep(key, msg){
    var n = key.modulus;
    var k = key.modulus.byteLength();
    var mLen = msg.length;
    var iHash = createHash('sha1').update(new Buffer('')).digest();
    var hLen = iHash.length;
    var hLen2 = 2 * hLen;
    if (msg[0] !== 0) {
      throw new Error('decryption error');
    }
    var maskedSeed = msg.slice(1, hLen + 1);
    var maskedDb =  msg.slice(hLen + 1);
    var seed = xor(maskedSeed, mgf(maskedDb, hLen));
    var db = xor(maskedDb, mgf(seed, k - hLen - 1));
    if (compare(iHash, db.slice(0, hLen))) {
      throw new Error('decryption error');
    }
    var i = hLen;
    while (db[i] === 0) {
      i++;
    }
    if (db[i++] !== 1) {
      throw new Error('decryption error');
    }
    return db.slice(i);
  }
  
  function pkcs1(key, msg, reverse){
    var p1 = msg.slice(0, 2);
    var i = 2;
    var status = 0;
    while (msg[i++] !== 0) {
      if (i >= msg.length) {
        status++;
        break;
      }
    }
    var ps = msg.slice(2, i - 1);
    var p2 = msg.slice(i - 1, i);
  
    if ((p1.toString('hex') !== '0002' && !reverse) || (p1.toString('hex') !== '0001' && reverse)){
      status++;
    }
    if (ps.length < 8) {
      status++;
    }
    if (status) {
      throw new Error('decryption error');
    }
    return  msg.slice(i);
  }
  function compare(a, b){
    a = new Buffer(a);
    b = new Buffer(b);
    var dif = 0;
    var len = a.length;
    if (a.length !== b.length) {
      dif++;
      len = Math.min(a.length, b.length);
    }
    var i = -1;
    while (++i < len) {
      dif += (a[i] ^ b[i]);
    }
    return dif;
  }
  }).call(this,require("buffer").Buffer)
  },{"./mgf":260,"./withPublic":263,"./xor":264,"bn.js":53,"browserify-rsa":76,"buffer":84,"create-hash":91,"parse-asn1":245}],262:[function(require,module,exports){
  (function (Buffer){
  var parseKeys = require('parse-asn1');
  var randomBytes = require('randombytes');
  var createHash = require('create-hash');
  var mgf = require('./mgf');
  var xor = require('./xor');
  var bn = require('bn.js');
  var withPublic = require('./withPublic');
  var crt = require('browserify-rsa');
  
  var constants = {
    RSA_PKCS1_OAEP_PADDING: 4,
    RSA_PKCS1_PADDIN: 1,
    RSA_NO_PADDING: 3
  };
  
  module.exports = function publicEncrypt(public_key, msg, reverse) {
    var padding;
    if (public_key.padding) {
      padding = public_key.padding;
    } else if (reverse) {
      padding = 1;
    } else {
      padding = 4;
    }
    var key = parseKeys(public_key);
    var paddedMsg;
    if (padding === 4) {
      paddedMsg = oaep(key, msg);
    } else if (padding === 1) {
      paddedMsg = pkcs1(key, msg, reverse);
    } else if (padding === 3) {
      paddedMsg = new bn(msg);
      if (paddedMsg.cmp(key.modulus) >= 0) {
        throw new Error('data too long for modulus');
      }
    } else {
      throw new Error('unknown padding');
    }
    if (reverse) {
      return crt(paddedMsg, key);
    } else {
      return withPublic(paddedMsg, key);
    }
  };
  
  function oaep(key, msg){
    var k = key.modulus.byteLength();
    var mLen = msg.length;
    var iHash = createHash('sha1').update(new Buffer('')).digest();
    var hLen = iHash.length;
    var hLen2 = 2 * hLen;
    if (mLen > k - hLen2 - 2) {
      throw new Error('message too long');
    }
    var ps = new Buffer(k - mLen - hLen2 - 2);
    ps.fill(0);
    var dblen = k - hLen - 1;
    var seed = randomBytes(hLen);
    var maskedDb = xor(Buffer.concat([iHash, ps, new Buffer([1]), msg], dblen), mgf(seed, dblen));
    var maskedSeed = xor(seed, mgf(maskedDb, hLen));
    return new bn(Buffer.concat([new Buffer([0]), maskedSeed, maskedDb], k));
  }
  function pkcs1(key, msg, reverse){
    var mLen = msg.length;
    var k = key.modulus.byteLength();
    if (mLen > k - 11) {
      throw new Error('message too long');
    }
    var ps;
    if (reverse) {
      ps = new Buffer(k - mLen - 3);
      ps.fill(0xff);
    } else {
      ps = nonZero(k - mLen - 3);
    }
    return new bn(Buffer.concat([new Buffer([0, reverse?1:2]), ps, new Buffer([0]), msg], k));
  }
  function nonZero(len, crypto) {
    var out = new Buffer(len);
    var i = 0;
    var cache = randomBytes(len*2);
    var cur = 0;
    var num;
    while (i < len) {
      if (cur === cache.length) {
        cache = randomBytes(len*2);
        cur = 0;
      }
      num = cache[cur++];
      if (num) {
        out[i++] = num;
      }
    }
    return out;
  }
  }).call(this,require("buffer").Buffer)
  },{"./mgf":260,"./withPublic":263,"./xor":264,"bn.js":53,"browserify-rsa":76,"buffer":84,"create-hash":91,"parse-asn1":245,"randombytes":270}],263:[function(require,module,exports){
  (function (Buffer){
  var bn = require('bn.js');
  function withPublic(paddedMsg, key) {
    return new Buffer(paddedMsg
      .toRed(bn.mont(key.modulus))
      .redPow(new bn(key.publicExponent))
      .fromRed()
      .toArray());
  }
  
  module.exports = withPublic;
  }).call(this,require("buffer").Buffer)
  },{"bn.js":53,"buffer":84}],264:[function(require,module,exports){
  module.exports = function xor(a, b) {
    var len = a.length;
    var i = -1;
    while (++i < len) {
      a[i] ^= b[i];
    }
    return a
  };
  },{}],265:[function(require,module,exports){
  (function (global){
  /*! https://mths.be/punycode v1.4.1 by @mathias */
  ;(function(root) {
  
    /** Detect free variables */
    var freeExports = typeof exports == 'object' && exports &&
      !exports.nodeType && exports;
    var freeModule = typeof module == 'object' && module &&
      !module.nodeType && module;
    var freeGlobal = typeof global == 'object' && global;
    if (
      freeGlobal.global === freeGlobal ||
      freeGlobal.window === freeGlobal ||
      freeGlobal.self === freeGlobal
    ) {
      root = freeGlobal;
    }
  
    /**
     * The `punycode` object.
     * @name punycode
     * @type Object
     */
    var punycode,
  
    /** Highest positive signed 32-bit float value */
    maxInt = 2147483647, // aka. 0x7FFFFFFF or 2^31-1
  
    /** Bootstring parameters */
    base = 36,
    tMin = 1,
    tMax = 26,
    skew = 38,
    damp = 700,
    initialBias = 72,
    initialN = 128, // 0x80
    delimiter = '-', // '\x2D'
  
    /** Regular expressions */
    regexPunycode = /^xn--/,
    regexNonASCII = /[^\x20-\x7E]/, // unprintable ASCII chars + non-ASCII chars
    regexSeparators = /[\x2E\u3002\uFF0E\uFF61]/g, // RFC 3490 separators
  
    /** Error messages */
    errors = {
      'overflow': 'Overflow: input needs wider integers to process',
      'not-basic': 'Illegal input >= 0x80 (not a basic code point)',
      'invalid-input': 'Invalid input'
    },
  
    /** Convenience shortcuts */
    baseMinusTMin = base - tMin,
    floor = Math.floor,
    stringFromCharCode = String.fromCharCode,
  
    /** Temporary variable */
    key;
  
    /*--------------------------------------------------------------------------*/
  
    /**
     * A generic error utility function.
     * @private
     * @param {String} type The error type.
     * @returns {Error} Throws a `RangeError` with the applicable error message.
     */
    function error(type) {
      throw new RangeError(errors[type]);
    }
  
    /**
     * A generic `Array#map` utility function.
     * @private
     * @param {Array} array The array to iterate over.
     * @param {Function} callback The function that gets called for every array
     * item.
     * @returns {Array} A new array of values returned by the callback function.
     */
    function map(array, fn) {
      var length = array.length;
      var result = [];
      while (length--) {
        result[length] = fn(array[length]);
      }
      return result;
    }
  
    /**
     * A simple `Array#map`-like wrapper to work with domain name strings or email
     * addresses.
     * @private
     * @param {String} domain The domain name or email address.
     * @param {Function} callback The function that gets called for every
     * character.
     * @returns {Array} A new string of characters returned by the callback
     * function.
     */
    function mapDomain(string, fn) {
      var parts = string.split('@');
      var result = '';
      if (parts.length > 1) {
        // In email addresses, only the domain name should be punycoded. Leave
        // the local part (i.e. everything up to `@`) intact.
        result = parts[0] + '@';
        string = parts[1];
      }
      // Avoid `split(regex)` for IE8 compatibility. See #17.
      string = string.replace(regexSeparators, '\x2E');
      var labels = string.split('.');
      var encoded = map(labels, fn).join('.');
      return result + encoded;
    }
  
    /**
     * Creates an array containing the numeric code points of each Unicode
     * character in the string. While JavaScript uses UCS-2 internally,
     * this function will convert a pair of surrogate halves (each of which
     * UCS-2 exposes as separate characters) into a single code point,
     * matching UTF-16.
     * @see `punycode.ucs2.encode`
     * @see <https://mathiasbynens.be/notes/javascript-encoding>
     * @memberOf punycode.ucs2
     * @name decode
     * @param {String} string The Unicode input string (UCS-2).
     * @returns {Array} The new array of code points.
     */
    function ucs2decode(string) {
      var output = [],
          counter = 0,
          length = string.length,
          value,
          extra;
      while (counter < length) {
        value = string.charCodeAt(counter++);
        if (value >= 0xD800 && value <= 0xDBFF && counter < length) {
          // high surrogate, and there is a next character
          extra = string.charCodeAt(counter++);
          if ((extra & 0xFC00) == 0xDC00) { // low surrogate
            output.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);
          } else {
            // unmatched surrogate; only append this code unit, in case the next
            // code unit is the high surrogate of a surrogate pair
            output.push(value);
            counter--;
          }
        } else {
          output.push(value);
        }
      }
      return output;
    }
  
    /**
     * Creates a string based on an array of numeric code points.
     * @see `punycode.ucs2.decode`
     * @memberOf punycode.ucs2
     * @name encode
     * @param {Array} codePoints The array of numeric code points.
     * @returns {String} The new Unicode string (UCS-2).
     */
    function ucs2encode(array) {
      return map(array, function(value) {
        var output = '';
        if (value > 0xFFFF) {
          value -= 0x10000;
          output += stringFromCharCode(value >>> 10 & 0x3FF | 0xD800);
          value = 0xDC00 | value & 0x3FF;
        }
        output += stringFromCharCode(value);
        return output;
      }).join('');
    }
  
    /**
     * Converts a basic code point into a digit/integer.
     * @see `digitToBasic()`
     * @private
     * @param {Number} codePoint The basic numeric code point value.
     * @returns {Number} The numeric value of a basic code point (for use in
     * representing integers) in the range `0` to `base - 1`, or `base` if
     * the code point does not represent a value.
     */
    function basicToDigit(codePoint) {
      if (codePoint - 48 < 10) {
        return codePoint - 22;
      }
      if (codePoint - 65 < 26) {
        return codePoint - 65;
      }
      if (codePoint - 97 < 26) {
        return codePoint - 97;
      }
      return base;
    }
  
    /**
     * Converts a digit/integer into a basic code point.
     * @see `basicToDigit()`
     * @private
     * @param {Number} digit The numeric value of a basic code point.
     * @returns {Number} The basic code point whose value (when used for
     * representing integers) is `digit`, which needs to be in the range
     * `0` to `base - 1`. If `flag` is non-zero, the uppercase form is
     * used; else, the lowercase form is used. The behavior is undefined
     * if `flag` is non-zero and `digit` has no uppercase form.
     */
    function digitToBasic(digit, flag) {
      //  0..25 map to ASCII a..z or A..Z
      // 26..35 map to ASCII 0..9
      return digit + 22 + 75 * (digit < 26) - ((flag != 0) << 5);
    }
  
    /**
     * Bias adaptation function as per section 3.4 of RFC 3492.
     * https://tools.ietf.org/html/rfc3492#section-3.4
     * @private
     */
    function adapt(delta, numPoints, firstTime) {
      var k = 0;
      delta = firstTime ? floor(delta / damp) : delta >> 1;
      delta += floor(delta / numPoints);
      for (/* no initialization */; delta > baseMinusTMin * tMax >> 1; k += base) {
        delta = floor(delta / baseMinusTMin);
      }
      return floor(k + (baseMinusTMin + 1) * delta / (delta + skew));
    }
  
    /**
     * Converts a Punycode string of ASCII-only symbols to a string of Unicode
     * symbols.
     * @memberOf punycode
     * @param {String} input The Punycode string of ASCII-only symbols.
     * @returns {String} The resulting string of Unicode symbols.
     */
    function decode(input) {
      // Don't use UCS-2
      var output = [],
          inputLength = input.length,
          out,
          i = 0,
          n = initialN,
          bias = initialBias,
          basic,
          j,
          index,
          oldi,
          w,
          k,
          digit,
          t,
          /** Cached calculation results */
          baseMinusT;
  
      // Handle the basic code points: let `basic` be the number of input code
      // points before the last delimiter, or `0` if there is none, then copy
      // the first basic code points to the output.
  
      basic = input.lastIndexOf(delimiter);
      if (basic < 0) {
        basic = 0;
      }
  
      for (j = 0; j < basic; ++j) {
        // if it's not a basic code point
        if (input.charCodeAt(j) >= 0x80) {
          error('not-basic');
        }
        output.push(input.charCodeAt(j));
      }
  
      // Main decoding loop: start just after the last delimiter if any basic code
      // points were copied; start at the beginning otherwise.
  
      for (index = basic > 0 ? basic + 1 : 0; index < inputLength; /* no final expression */) {
  
        // `index` is the index of the next character to be consumed.
        // Decode a generalized variable-length integer into `delta`,
        // which gets added to `i`. The overflow checking is easier
        // if we increase `i` as we go, then subtract off its starting
        // value at the end to obtain `delta`.
        for (oldi = i, w = 1, k = base; /* no condition */; k += base) {
  
          if (index >= inputLength) {
            error('invalid-input');
          }
  
          digit = basicToDigit(input.charCodeAt(index++));
  
          if (digit >= base || digit > floor((maxInt - i) / w)) {
            error('overflow');
          }
  
          i += digit * w;
          t = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);
  
          if (digit < t) {
            break;
          }
  
          baseMinusT = base - t;
          if (w > floor(maxInt / baseMinusT)) {
            error('overflow');
          }
  
          w *= baseMinusT;
  
        }
  
        out = output.length + 1;
        bias = adapt(i - oldi, out, oldi == 0);
  
        // `i` was supposed to wrap around from `out` to `0`,
        // incrementing `n` each time, so we'll fix that now:
        if (floor(i / out) > maxInt - n) {
          error('overflow');
        }
  
        n += floor(i / out);
        i %= out;
  
        // Insert `n` at position `i` of the output
        output.splice(i++, 0, n);
  
      }
  
      return ucs2encode(output);
    }
  
    /**
     * Converts a string of Unicode symbols (e.g. a domain name label) to a
     * Punycode string of ASCII-only symbols.
     * @memberOf punycode
     * @param {String} input The string of Unicode symbols.
     * @returns {String} The resulting Punycode string of ASCII-only symbols.
     */
    function encode(input) {
      var n,
          delta,
          handledCPCount,
          basicLength,
          bias,
          j,
          m,
          q,
          k,
          t,
          currentValue,
          output = [],
          /** `inputLength` will hold the number of code points in `input`. */
          inputLength,
          /** Cached calculation results */
          handledCPCountPlusOne,
          baseMinusT,
          qMinusT;
  
      // Convert the input in UCS-2 to Unicode
      input = ucs2decode(input);
  
      // Cache the length
      inputLength = input.length;
  
      // Initialize the state
      n = initialN;
      delta = 0;
      bias = initialBias;
  
      // Handle the basic code points
      for (j = 0; j < inputLength; ++j) {
        currentValue = input[j];
        if (currentValue < 0x80) {
          output.push(stringFromCharCode(currentValue));
        }
      }
  
      handledCPCount = basicLength = output.length;
  
      // `handledCPCount` is the number of code points that have been handled;
      // `basicLength` is the number of basic code points.
  
      // Finish the basic string - if it is not empty - with a delimiter
      if (basicLength) {
        output.push(delimiter);
      }
  
      // Main encoding loop:
      while (handledCPCount < inputLength) {
  
        // All non-basic code points < n have been handled already. Find the next
        // larger one:
        for (m = maxInt, j = 0; j < inputLength; ++j) {
          currentValue = input[j];
          if (currentValue >= n && currentValue < m) {
            m = currentValue;
          }
        }
  
        // Increase `delta` enough to advance the decoder's <n,i> state to <m,0>,
        // but guard against overflow
        handledCPCountPlusOne = handledCPCount + 1;
        if (m - n > floor((maxInt - delta) / handledCPCountPlusOne)) {
          error('overflow');
        }
  
        delta += (m - n) * handledCPCountPlusOne;
        n = m;
  
        for (j = 0; j < inputLength; ++j) {
          currentValue = input[j];
  
          if (currentValue < n && ++delta > maxInt) {
            error('overflow');
          }
  
          if (currentValue == n) {
            // Represent delta as a generalized variable-length integer
            for (q = delta, k = base; /* no condition */; k += base) {
              t = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);
              if (q < t) {
                break;
              }
              qMinusT = q - t;
              baseMinusT = base - t;
              output.push(
                stringFromCharCode(digitToBasic(t + qMinusT % baseMinusT, 0))
              );
              q = floor(qMinusT / baseMinusT);
            }
  
            output.push(stringFromCharCode(digitToBasic(q, 0)));
            bias = adapt(delta, handledCPCountPlusOne, handledCPCount == basicLength);
            delta = 0;
            ++handledCPCount;
          }
        }
  
        ++delta;
        ++n;
  
      }
      return output.join('');
    }
  
    /**
     * Converts a Punycode string representing a domain name or an email address
     * to Unicode. Only the Punycoded parts of the input will be converted, i.e.
     * it doesn't matter if you call it on a string that has already been
     * converted to Unicode.
     * @memberOf punycode
     * @param {String} input The Punycoded domain name or email address to
     * convert to Unicode.
     * @returns {String} The Unicode representation of the given Punycode
     * string.
     */
    function toUnicode(input) {
      return mapDomain(input, function(string) {
        return regexPunycode.test(string)
          ? decode(string.slice(4).toLowerCase())
          : string;
      });
    }
  
    /**
     * Converts a Unicode string representing a domain name or an email address to
     * Punycode. Only the non-ASCII parts of the domain name will be converted,
     * i.e. it doesn't matter if you call it with a domain that's already in
     * ASCII.
     * @memberOf punycode
     * @param {String} input The domain name or email address to convert, as a
     * Unicode string.
     * @returns {String} The Punycode representation of the given domain name or
     * email address.
     */
    function toASCII(input) {
      return mapDomain(input, function(string) {
        return regexNonASCII.test(string)
          ? 'xn--' + encode(string)
          : string;
      });
    }
  
    /*--------------------------------------------------------------------------*/
  
    /** Define the public API */
    punycode = {
      /**
       * A string representing the current Punycode.js version number.
       * @memberOf punycode
       * @type String
       */
      'version': '1.4.1',
      /**
       * An object of methods to convert from JavaScript's internal character
       * representation (UCS-2) to Unicode code points, and back.
       * @see <https://mathiasbynens.be/notes/javascript-encoding>
       * @memberOf punycode
       * @type Object
       */
      'ucs2': {
        'decode': ucs2decode,
        'encode': ucs2encode
      },
      'decode': decode,
      'encode': encode,
      'toASCII': toASCII,
      'toUnicode': toUnicode
    };
  
    /** Expose `punycode` */
    // Some AMD build optimizers, like r.js, check for specific condition patterns
    // like the following:
    if (
      typeof define == 'function' &&
      typeof define.amd == 'object' &&
      define.amd
    ) {
      define('punycode', function() {
        return punycode;
      });
    } else if (freeExports && freeModule) {
      if (module.exports == freeExports) {
        // in Node.js, io.js, or RingoJS v0.8.0+
        freeModule.exports = punycode;
      } else {
        // in Narwhal or RingoJS v0.7.0-
        for (key in punycode) {
          punycode.hasOwnProperty(key) && (freeExports[key] = punycode[key]);
        }
      }
    } else {
      // in Rhino or a web browser
      root.punycode = punycode;
    }
  
  }(this));
  
  }).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
  },{}],266:[function(require,module,exports){
  'use strict';
  var strictUriEncode = require('strict-uri-encode');
  var objectAssign = require('object-assign');
  var decodeComponent = require('decode-uri-component');
  
  function encoderForArrayFormat(opts) {
    switch (opts.arrayFormat) {
      case 'index':
        return function (key, value, index) {
          return value === null ? [
            encode(key, opts),
            '[',
            index,
            ']'
          ].join('') : [
            encode(key, opts),
            '[',
            encode(index, opts),
            ']=',
            encode(value, opts)
          ].join('');
        };
  
      case 'bracket':
        return function (key, value) {
          return value === null ? encode(key, opts) : [
            encode(key, opts),
            '[]=',
            encode(value, opts)
          ].join('');
        };
  
      default:
        return function (key, value) {
          return value === null ? encode(key, opts) : [
            encode(key, opts),
            '=',
            encode(value, opts)
          ].join('');
        };
    }
  }
  
  function parserForArrayFormat(opts) {
    var result;
  
    switch (opts.arrayFormat) {
      case 'index':
        return function (key, value, accumulator) {
          result = /\[(\d*)\]$/.exec(key);
  
          key = key.replace(/\[\d*\]$/, '');
  
          if (!result) {
            accumulator[key] = value;
            return;
          }
  
          if (accumulator[key] === undefined) {
            accumulator[key] = {};
          }
  
          accumulator[key][result[1]] = value;
        };
  
      case 'bracket':
        return function (key, value, accumulator) {
          result = /(\[\])$/.exec(key);
          key = key.replace(/\[\]$/, '');
  
          if (!result) {
            accumulator[key] = value;
            return;
          } else if (accumulator[key] === undefined) {
            accumulator[key] = [value];
            return;
          }
  
          accumulator[key] = [].concat(accumulator[key], value);
        };
  
      default:
        return function (key, value, accumulator) {
          if (accumulator[key] === undefined) {
            accumulator[key] = value;
            return;
          }
  
          accumulator[key] = [].concat(accumulator[key], value);
        };
    }
  }
  
  function encode(value, opts) {
    if (opts.encode) {
      return opts.strict ? strictUriEncode(value) : encodeURIComponent(value);
    }
  
    return value;
  }
  
  function keysSorter(input) {
    if (Array.isArray(input)) {
      return input.sort();
    } else if (typeof input === 'object') {
      return keysSorter(Object.keys(input)).sort(function (a, b) {
        return Number(a) - Number(b);
      }).map(function (key) {
        return input[key];
      });
    }
  
    return input;
  }
  
  function extract(str) {
    var queryStart = str.indexOf('?');
    if (queryStart === -1) {
      return '';
    }
    return str.slice(queryStart + 1);
  }
  
  function parse(str, opts) {
    opts = objectAssign({arrayFormat: 'none'}, opts);
  
    var formatter = parserForArrayFormat(opts);
  
    // Create an object with no prototype
    // https://github.com/sindresorhus/query-string/issues/47
    var ret = Object.create(null);
  
    if (typeof str !== 'string') {
      return ret;
    }
  
    str = str.trim().replace(/^[?#&]/, '');
  
    if (!str) {
      return ret;
    }
  
    str.split('&').forEach(function (param) {
      var parts = param.replace(/\+/g, ' ').split('=');
      // Firefox (pre 40) decodes `%3D` to `=`
      // https://github.com/sindresorhus/query-string/pull/37
      var key = parts.shift();
      var val = parts.length > 0 ? parts.join('=') : undefined;
  
      // missing `=` should be `null`:
      // http://w3.org/TR/2012/WD-url-20120524/#collect-url-parameters
      val = val === undefined ? null : decodeComponent(val);
  
      formatter(decodeComponent(key), val, ret);
    });
  
    return Object.keys(ret).sort().reduce(function (result, key) {
      var val = ret[key];
      if (Boolean(val) && typeof val === 'object' && !Array.isArray(val)) {
        // Sort object keys, not values
        result[key] = keysSorter(val);
      } else {
        result[key] = val;
      }
  
      return result;
    }, Object.create(null));
  }
  
  exports.extract = extract;
  exports.parse = parse;
  
  exports.stringify = function (obj, opts) {
    var defaults = {
      encode: true,
      strict: true,
      arrayFormat: 'none'
    };
  
    opts = objectAssign(defaults, opts);
  
    if (opts.sort === false) {
      opts.sort = function () {};
    }
  
    var formatter = encoderForArrayFormat(opts);
  
    return obj ? Object.keys(obj).sort(opts.sort).map(function (key) {
      var val = obj[key];
  
      if (val === undefined) {
        return '';
      }
  
      if (val === null) {
        return encode(key, opts);
      }
  
      if (Array.isArray(val)) {
        var result = [];
  
        val.slice().forEach(function (val2) {
          if (val2 === undefined) {
            return;
          }
  
          result.push(formatter(key, val2, result.length));
        });
  
        return result.join('&');
      }
  
      return encode(key, opts) + '=' + encode(val, opts);
    }).filter(function (x) {
      return x.length > 0;
    }).join('&') : '';
  };
  
  exports.parseUrl = function (str, opts) {
    return {
      url: str.split('?')[0] || '',
      query: parse(extract(str), opts)
    };
  };
  
  },{"decode-uri-component":98,"object-assign":238,"strict-uri-encode":316}],267:[function(require,module,exports){
  // Copyright Joyent, Inc. and other Node contributors.
  //
  // Permission is hereby granted, free of charge, to any person obtaining a
  // copy of this software and associated documentation files (the
  // "Software"), to deal in the Software without restriction, including
  // without limitation the rights to use, copy, modify, merge, publish,
  // distribute, sublicense, and/or sell copies of the Software, and to permit
  // persons to whom the Software is furnished to do so, subject to the
  // following conditions:
  //
  // The above copyright notice and this permission notice shall be included
  // in all copies or substantial portions of the Software.
  //
  // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
  // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
  // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
  // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
  // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
  // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
  // USE OR OTHER DEALINGS IN THE SOFTWARE.
  
  'use strict';
  
  // If obj.hasOwnProperty has been overridden, then calling
  // obj.hasOwnProperty(prop) will break.
  // See: https://github.com/joyent/node/issues/1707
  function hasOwnProperty(obj, prop) {
    return Object.prototype.hasOwnProperty.call(obj, prop);
  }
  
  module.exports = function(qs, sep, eq, options) {
    sep = sep || '&';
    eq = eq || '=';
    var obj = {};
  
    if (typeof qs !== 'string' || qs.length === 0) {
      return obj;
    }
  
    var regexp = /\+/g;
    qs = qs.split(sep);
  
    var maxKeys = 1000;
    if (options && typeof options.maxKeys === 'number') {
      maxKeys = options.maxKeys;
    }
  
    var len = qs.length;
    // maxKeys <= 0 means that we should not limit keys count
    if (maxKeys > 0 && len > maxKeys) {
      len = maxKeys;
    }
  
    for (var i = 0; i < len; ++i) {
      var x = qs[i].replace(regexp, '%20'),
          idx = x.indexOf(eq),
          kstr, vstr, k, v;
  
      if (idx >= 0) {
        kstr = x.substr(0, idx);
        vstr = x.substr(idx + 1);
      } else {
        kstr = x;
        vstr = '';
      }
  
      k = decodeURIComponent(kstr);
      v = decodeURIComponent(vstr);
  
      if (!hasOwnProperty(obj, k)) {
        obj[k] = v;
      } else if (isArray(obj[k])) {
        obj[k].push(v);
      } else {
        obj[k] = [obj[k], v];
      }
    }
  
    return obj;
  };
  
  var isArray = Array.isArray || function (xs) {
    return Object.prototype.toString.call(xs) === '[object Array]';
  };
  
  },{}],268:[function(require,module,exports){
  // Copyright Joyent, Inc. and other Node contributors.
  //
  // Permission is hereby granted, free of charge, to any person obtaining a
  // copy of this software and associated documentation files (the
  // "Software"), to deal in the Software without restriction, including
  // without limitation the rights to use, copy, modify, merge, publish,
  // distribute, sublicense, and/or sell copies of the Software, and to permit
  // persons to whom the Software is furnished to do so, subject to the
  // following conditions:
  //
  // The above copyright notice and this permission notice shall be included
  // in all copies or substantial portions of the Software.
  //
  // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
  // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
  // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
  // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
  // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
  // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
  // USE OR OTHER DEALINGS IN THE SOFTWARE.
  
  'use strict';
  
  var stringifyPrimitive = function(v) {
    switch (typeof v) {
      case 'string':
        return v;
  
      case 'boolean':
        return v ? 'true' : 'false';
  
      case 'number':
        return isFinite(v) ? v : '';
  
      default:
        return '';
    }
  };
  
  module.exports = function(obj, sep, eq, name) {
    sep = sep || '&';
    eq = eq || '=';
    if (obj === null) {
      obj = undefined;
    }
  
    if (typeof obj === 'object') {
      return map(objectKeys(obj), function(k) {
        var ks = encodeURIComponent(stringifyPrimitive(k)) + eq;
        if (isArray(obj[k])) {
          return map(obj[k], function(v) {
            return ks + encodeURIComponent(stringifyPrimitive(v));
          }).join(sep);
        } else {
          return ks + encodeURIComponent(stringifyPrimitive(obj[k]));
        }
      }).join(sep);
  
    }
  
    if (!name) return '';
    return encodeURIComponent(stringifyPrimitive(name)) + eq +
           encodeURIComponent(stringifyPrimitive(obj));
  };
  
  var isArray = Array.isArray || function (xs) {
    return Object.prototype.toString.call(xs) === '[object Array]';
  };
  
  function map (xs, f) {
    if (xs.map) return xs.map(f);
    var res = [];
    for (var i = 0; i < xs.length; i++) {
      res.push(f(xs[i], i));
    }
    return res;
  }
  
  var objectKeys = Object.keys || function (obj) {
    var res = [];
    for (var key in obj) {
      if (Object.prototype.hasOwnProperty.call(obj, key)) res.push(key);
    }
    return res;
  };
  
  },{}],269:[function(require,module,exports){
  'use strict';
  
  exports.decode = exports.parse = require('./decode');
  exports.encode = exports.stringify = require('./encode');
  
  },{"./decode":267,"./encode":268}],270:[function(require,module,exports){
  (function (process,global){
  'use strict'
  
  function oldBrowser () {
    throw new Error('Secure random number generation is not supported by this browser.\nUse Chrome, Firefox or Internet Explorer 11')
  }
  
  var Buffer = require('safe-buffer').Buffer
  var crypto = global.crypto || global.msCrypto
  
  if (crypto && crypto.getRandomValues) {
    module.exports = randomBytes
  } else {
    module.exports = oldBrowser
  }
  
  function randomBytes (size, cb) {
    // phantomjs needs to throw
    if (size > 65536) throw new Error('requested too many random bytes')
    // in case browserify  isn't using the Uint8Array version
    var rawBytes = new global.Uint8Array(size)
  
    // This will not work in older browsers.
    // See https://developer.mozilla.org/en-US/docs/Web/API/window.crypto.getRandomValues
    if (size > 0) {  // getRandomValues fails on IE if size == 0
      crypto.getRandomValues(rawBytes)
    }
  
    // XXX: phantomjs doesn't like a buffer being passed here
    var bytes = Buffer.from(rawBytes.buffer)
  
    if (typeof cb === 'function') {
      return process.nextTick(function () {
        cb(null, bytes)
      })
    }
  
    return bytes
  }
  
  }).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
  },{"_process":257,"safe-buffer":290}],271:[function(require,module,exports){
  (function (process,global){
  'use strict'
  
  function oldBrowser () {
    throw new Error('secure random number generation not supported by this browser\nuse chrome, FireFox or Internet Explorer 11')
  }
  var safeBuffer = require('safe-buffer')
  var randombytes = require('randombytes')
  var Buffer = safeBuffer.Buffer
  var kBufferMaxLength = safeBuffer.kMaxLength
  var crypto = global.crypto || global.msCrypto
  var kMaxUint32 = Math.pow(2, 32) - 1
  function assertOffset (offset, length) {
    if (typeof offset !== 'number' || offset !== offset) { // eslint-disable-line no-self-compare
      throw new TypeError('offset must be a number')
    }
  
    if (offset > kMaxUint32 || offset < 0) {
      throw new TypeError('offset must be a uint32')
    }
  
    if (offset > kBufferMaxLength || offset > length) {
      throw new RangeError('offset out of range')
    }
  }
  
  function assertSize (size, offset, length) {
    if (typeof size !== 'number' || size !== size) { // eslint-disable-line no-self-compare
      throw new TypeError('size must be a number')
    }
  
    if (size > kMaxUint32 || size < 0) {
      throw new TypeError('size must be a uint32')
    }
  
    if (size + offset > length || size > kBufferMaxLength) {
      throw new RangeError('buffer too small')
    }
  }
  if ((crypto && crypto.getRandomValues) || !process.browser) {
    exports.randomFill = randomFill
    exports.randomFillSync = randomFillSync
  } else {
    exports.randomFill = oldBrowser
    exports.randomFillSync = oldBrowser
  }
  function randomFill (buf, offset, size, cb) {
    if (!Buffer.isBuffer(buf) && !(buf instanceof global.Uint8Array)) {
      throw new TypeError('"buf" argument must be a Buffer or Uint8Array')
    }
  
    if (typeof offset === 'function') {
      cb = offset
      offset = 0
      size = buf.length
    } else if (typeof size === 'function') {
      cb = size
      size = buf.length - offset
    } else if (typeof cb !== 'function') {
      throw new TypeError('"cb" argument must be a function')
    }
    assertOffset(offset, buf.length)
    assertSize(size, offset, buf.length)
    return actualFill(buf, offset, size, cb)
  }
  
  function actualFill (buf, offset, size, cb) {
    if (process.browser) {
      var ourBuf = buf.buffer
      var uint = new Uint8Array(ourBuf, offset, size)
      crypto.getRandomValues(uint)
      if (cb) {
        process.nextTick(function () {
          cb(null, buf)
        })
        return
      }
      return buf
    }
    if (cb) {
      randombytes(size, function (err, bytes) {
        if (err) {
          return cb(err)
        }
        bytes.copy(buf, offset)
        cb(null, buf)
      })
      return
    }
    var bytes = randombytes(size)
    bytes.copy(buf, offset)
    return buf
  }
  function randomFillSync (buf, offset, size) {
    if (typeof offset === 'undefined') {
      offset = 0
    }
    if (!Buffer.isBuffer(buf) && !(buf instanceof global.Uint8Array)) {
      throw new TypeError('"buf" argument must be a Buffer or Uint8Array')
    }
  
    assertOffset(offset, buf.length)
  
    if (size === undefined) size = buf.length - offset
  
    assertSize(size, offset, buf.length)
  
    return actualFill(buf, offset, size)
  }
  
  }).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
  },{"_process":257,"randombytes":270,"safe-buffer":290}],272:[function(require,module,exports){
  module.exports = window.crypto;
  },{}],273:[function(require,module,exports){
  module.exports = require('crypto');
  },{"crypto":272}],274:[function(require,module,exports){
  var randomHex = function(size, callback) {
      var crypto = require('./crypto.js');
      var isCallback = (typeof callback === 'function');
  
      
      if (size > 65536) {
          if(isCallback) {
              callback(new Error('Requested too many random bytes.'));
          } else {
              throw new Error('Requested too many random bytes.');
          }
      };
  
  
      // is node
      if (typeof crypto !== 'undefined' && crypto.randomBytes) {
  
          if(isCallback) {
              crypto.randomBytes(size, function(err, result){
                  if(!err) {
                      callback(null, '0x'+ result.toString('hex'));
                  } else {
                      callback(error);
                  }
              })
          } else {
              return '0x'+ crypto.randomBytes(size).toString('hex');
          }
  
      // is browser
      } else {
          var cryptoLib;
  
          if (typeof crypto !== 'undefined') {
              cryptoLib = crypto;
          } else if(typeof msCrypto !== 'undefined') {
              cryptoLib = msCrypto;
          }
  
          if (cryptoLib && cryptoLib.getRandomValues) {
              var randomBytes = cryptoLib.getRandomValues(new Uint8Array(size));
              var returnValue = '0x'+ Array.from(randomBytes).map(function(arr){ return arr.toString(16); }).join('');
  
              if(isCallback) {
                  callback(null, returnValue);
              } else {
                  return returnValue;
              }
  
          // not crypto object
          } else {
              var error = new Error('No "crypto" object available. This Browser doesn\'t support generating secure random bytes.');
  
              if(isCallback) {
                  callback(error);
              } else {
                 throw error;
              }
          }
      }
  };
  
  
  module.exports = randomHex;
  
  },{"./crypto.js":273}],275:[function(require,module,exports){
  module.exports = require('./lib/_stream_duplex.js');
  
  },{"./lib/_stream_duplex.js":276}],276:[function(require,module,exports){
  // Copyright Joyent, Inc. and other Node contributors.
  //
  // Permission is hereby granted, free of charge, to any person obtaining a
  // copy of this software and associated documentation files (the
  // "Software"), to deal in the Software without restriction, including
  // without limitation the rights to use, copy, modify, merge, publish,
  // distribute, sublicense, and/or sell copies of the Software, and to permit
  // persons to whom the Software is furnished to do so, subject to the
  // following conditions:
  //
  // The above copyright notice and this permission notice shall be included
  // in all copies or substantial portions of the Software.
  //
  // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
  // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
  // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
  // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
  // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
  // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
  // USE OR OTHER DEALINGS IN THE SOFTWARE.
  
  // a duplex stream is just a stream that is both readable and writable.
  // Since JS doesn't have multiple prototypal inheritance, this class
  // prototypally inherits from Readable, and then parasitically from
  // Writable.
  
  'use strict';
  
  /*<replacement>*/
  
  var processNextTick = require('process-nextick-args').nextTick;
  /*</replacement>*/
  
  /*<replacement>*/
  var objectKeys = Object.keys || function (obj) {
    var keys = [];
    for (var key in obj) {
      keys.push(key);
    }return keys;
  };
  /*</replacement>*/
  
  module.exports = Duplex;
  
  /*<replacement>*/
  var util = require('core-util-is');
  util.inherits = require('inherits');
  /*</replacement>*/
  
  var Readable = require('./_stream_readable');
  var Writable = require('./_stream_writable');
  
  util.inherits(Duplex, Readable);
  
  var keys = objectKeys(Writable.prototype);
  for (var v = 0; v < keys.length; v++) {
    var method = keys[v];
    if (!Duplex.prototype[method]) Duplex.prototype[method] = Writable.prototype[method];
  }
  
  function Duplex(options) {
    if (!(this instanceof Duplex)) return new Duplex(options);
  
    Readable.call(this, options);
    Writable.call(this, options);
  
    if (options && options.readable === false) this.readable = false;
  
    if (options && options.writable === false) this.writable = false;
  
    this.allowHalfOpen = true;
    if (options && options.allowHalfOpen === false) this.allowHalfOpen = false;
  
    this.once('end', onend);
  }
  
  // the no-half-open enforcer
  function onend() {
    // if we allow half-open state, or if the writable side ended,
    // then we're ok.
    if (this.allowHalfOpen || this._writableState.ended) return;
  
    // no more data can be written.
    // But allow more writes to happen in this tick.
    processNextTick(onEndNT, this);
  }
  
  function onEndNT(self) {
    self.end();
  }
  
  Object.defineProperty(Duplex.prototype, 'destroyed', {
    get: function () {
      if (this._readableState === undefined || this._writableState === undefined) {
        return false;
      }
      return this._readableState.destroyed && this._writableState.destroyed;
    },
    set: function (value) {
      // we ignore the value if the stream
      // has not been initialized yet
      if (this._readableState === undefined || this._writableState === undefined) {
        return;
      }
  
      // backward compatibility, the user is explicitly
      // managing destroyed
      this._readableState.destroyed = value;
      this._writableState.destroyed = value;
    }
  });
  
  Duplex.prototype._destroy = function (err, cb) {
    this.push(null);
    this.end();
  
    processNextTick(cb, err);
  };
  
  function forEach(xs, f) {
    for (var i = 0, l = xs.length; i < l; i++) {
      f(xs[i], i);
    }
  }
  },{"./_stream_readable":278,"./_stream_writable":280,"core-util-is":89,"inherits":180,"process-nextick-args":256}],277:[function(require,module,exports){
  // Copyright Joyent, Inc. and other Node contributors.
  //
  // Permission is hereby granted, free of charge, to any person obtaining a
  // copy of this software and associated documentation files (the
  // "Software"), to deal in the Software without restriction, including
  // without limitation the rights to use, copy, modify, merge, publish,
  // distribute, sublicense, and/or sell copies of the Software, and to permit
  // persons to whom the Software is furnished to do so, subject to the
  // following conditions:
  //
  // The above copyright notice and this permission notice shall be included
  // in all copies or substantial portions of the Software.
  //
  // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
  // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
  // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
  // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
  // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
  // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
  // USE OR OTHER DEALINGS IN THE SOFTWARE.
  
  // a passthrough stream.
  // basically just the most minimal sort of Transform stream.
  // Every written chunk gets output as-is.
  
  'use strict';
  
  module.exports = PassThrough;
  
  var Transform = require('./_stream_transform');
  
  /*<replacement>*/
  var util = require('core-util-is');
  util.inherits = require('inherits');
  /*</replacement>*/
  
  util.inherits(PassThrough, Transform);
  
  function PassThrough(options) {
    if (!(this instanceof PassThrough)) return new PassThrough(options);
  
    Transform.call(this, options);
  }
  
  PassThrough.prototype._transform = function (chunk, encoding, cb) {
    cb(null, chunk);
  };
  },{"./_stream_transform":279,"core-util-is":89,"inherits":180}],278:[function(require,module,exports){
  (function (process,global){
  // Copyright Joyent, Inc. and other Node contributors.
  //
  // Permission is hereby granted, free of charge, to any person obtaining a
  // copy of this software and associated documentation files (the
  // "Software"), to deal in the Software without restriction, including
  // without limitation the rights to use, copy, modify, merge, publish,
  // distribute, sublicense, and/or sell copies of the Software, and to permit
  // persons to whom the Software is furnished to do so, subject to the
  // following conditions:
  //
  // The above copyright notice and this permission notice shall be included
  // in all copies or substantial portions of the Software.
  //
  // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
  // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
  // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
  // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
  // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
  // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
  // USE OR OTHER DEALINGS IN THE SOFTWARE.
  
  'use strict';
  
  /*<replacement>*/
  
  var processNextTick = require('process-nextick-args').nextTick;
  /*</replacement>*/
  
  module.exports = Readable;
  
  /*<replacement>*/
  var isArray = require('isarray');
  /*</replacement>*/
  
  /*<replacement>*/
  var Duplex;
  /*</replacement>*/
  
  Readable.ReadableState = ReadableState;
  
  /*<replacement>*/
  var EE = require('events').EventEmitter;
  
  var EElistenerCount = function (emitter, type) {
    return emitter.listeners(type).length;
  };
  /*</replacement>*/
  
  /*<replacement>*/
  var Stream = require('./internal/streams/stream');
  /*</replacement>*/
  
  /*<replacement>*/
  
  var Buffer = require('safe-buffer').Buffer;
  var OurUint8Array = global.Uint8Array || function () {};
  function _uint8ArrayToBuffer(chunk) {
    return Buffer.from(chunk);
  }
  function _isUint8Array(obj) {
    return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;
  }
  
  /*</replacement>*/
  
  /*<replacement>*/
  var util = require('core-util-is');
  util.inherits = require('inherits');
  /*</replacement>*/
  
  /*<replacement>*/
  var debugUtil = require('util');
  var debug = void 0;
  if (debugUtil && debugUtil.debuglog) {
    debug = debugUtil.debuglog('stream');
  } else {
    debug = function () {};
  }
  /*</replacement>*/
  
  var BufferList = require('./internal/streams/BufferList');
  var destroyImpl = require('./internal/streams/destroy');
  var StringDecoder;
  
  util.inherits(Readable, Stream);
  
  var kProxyEvents = ['error', 'close', 'destroy', 'pause', 'resume'];
  
  function prependListener(emitter, event, fn) {
    // Sadly this is not cacheable as some libraries bundle their own
    // event emitter implementation with them.
    if (typeof emitter.prependListener === 'function') return emitter.prependListener(event, fn);
  
    // This is a hack to make sure that our error handler is attached before any
    // userland ones.  NEVER DO THIS. This is here only because this code needs
    // to continue to work with older versions of Node.js that do not include
    // the prependListener() method. The goal is to eventually remove this hack.
    if (!emitter._events || !emitter._events[event]) emitter.on(event, fn);else if (isArray(emitter._events[event])) emitter._events[event].unshift(fn);else emitter._events[event] = [fn, emitter._events[event]];
  }
  
  function ReadableState(options, stream) {
    Duplex = Duplex || require('./_stream_duplex');
  
    options = options || {};
  
    // Duplex streams are both readable and writable, but share
    // the same options object.
    // However, some cases require setting options to different
    // values for the readable and the writable sides of the duplex stream.
    // These options can be provided separately as readableXXX and writableXXX.
    var isDuplex = stream instanceof Duplex;
  
    // object stream flag. Used to make read(n) ignore n and to
    // make all the buffer merging and length checks go away
    this.objectMode = !!options.objectMode;
  
    if (isDuplex) this.objectMode = this.objectMode || !!options.readableObjectMode;
  
    // the point at which it stops calling _read() to fill the buffer
    // Note: 0 is a valid value, means "don't call _read preemptively ever"
    var hwm = options.highWaterMark;
    var readableHwm = options.readableHighWaterMark;
    var defaultHwm = this.objectMode ? 16 : 16 * 1024;
  
    if (hwm || hwm === 0) this.highWaterMark = hwm;else if (isDuplex && (readableHwm || readableHwm === 0)) this.highWaterMark = readableHwm;else this.highWaterMark = defaultHwm;
  
    // cast to ints.
    this.highWaterMark = Math.floor(this.highWaterMark);
  
    // A linked list is used to store data chunks instead of an array because the
    // linked list can remove elements from the beginning faster than
    // array.shift()
    this.buffer = new BufferList();
    this.length = 0;
    this.pipes = null;
    this.pipesCount = 0;
    this.flowing = null;
    this.ended = false;
    this.endEmitted = false;
    this.reading = false;
  
    // a flag to be able to tell if the event 'readable'/'data' is emitted
    // immediately, or on a later tick.  We set this to true at first, because
    // any actions that shouldn't happen until "later" should generally also
    // not happen before the first read call.
    this.sync = true;
  
    // whenever we return null, then we set a flag to say
    // that we're awaiting a 'readable' event emission.
    this.needReadable = false;
    this.emittedReadable = false;
    this.readableListening = false;
    this.resumeScheduled = false;
  
    // has it been destroyed
    this.destroyed = false;
  
    // Crypto is kind of old and crusty.  Historically, its default string
    // encoding is 'binary' so we have to make this configurable.
    // Everything else in the universe uses 'utf8', though.
    this.defaultEncoding = options.defaultEncoding || 'utf8';
  
    // the number of writers that are awaiting a drain event in .pipe()s
    this.awaitDrain = 0;
  
    // if true, a maybeReadMore has been scheduled
    this.readingMore = false;
  
    this.decoder = null;
    this.encoding = null;
    if (options.encoding) {
      if (!StringDecoder) StringDecoder = require('string_decoder/').StringDecoder;
      this.decoder = new StringDecoder(options.encoding);
      this.encoding = options.encoding;
    }
  }
  
  function Readable(options) {
    Duplex = Duplex || require('./_stream_duplex');
  
    if (!(this instanceof Readable)) return new Readable(options);
  
    this._readableState = new ReadableState(options, this);
  
    // legacy
    this.readable = true;
  
    if (options) {
      if (typeof options.read === 'function') this._read = options.read;
  
      if (typeof options.destroy === 'function') this._destroy = options.destroy;
    }
  
    Stream.call(this);
  }
  
  Object.defineProperty(Readable.prototype, 'destroyed', {
    get: function () {
      if (this._readableState === undefined) {
        return false;
      }
      return this._readableState.destroyed;
    },
    set: function (value) {
      // we ignore the value if the stream
      // has not been initialized yet
      if (!this._readableState) {
        return;
      }
  
      // backward compatibility, the user is explicitly
      // managing destroyed
      this._readableState.destroyed = value;
    }
  });
  
  Readable.prototype.destroy = destroyImpl.destroy;
  Readable.prototype._undestroy = destroyImpl.undestroy;
  Readable.prototype._destroy = function (err, cb) {
    this.push(null);
    cb(err);
  };
  
  // Manually shove something into the read() buffer.
  // This returns true if the highWaterMark has not been hit yet,
  // similar to how Writable.write() returns true if you should
  // write() some more.
  Readable.prototype.push = function (chunk, encoding) {
    var state = this._readableState;
    var skipChunkCheck;
  
    if (!state.objectMode) {
      if (typeof chunk === 'string') {
        encoding = encoding || state.defaultEncoding;
        if (encoding !== state.encoding) {
          chunk = Buffer.from(chunk, encoding);
          encoding = '';
        }
        skipChunkCheck = true;
      }
    } else {
      skipChunkCheck = true;
    }
  
    return readableAddChunk(this, chunk, encoding, false, skipChunkCheck);
  };
  
  // Unshift should *always* be something directly out of read()
  Readable.prototype.unshift = function (chunk) {
    return readableAddChunk(this, chunk, null, true, false);
  };
  
  function readableAddChunk(stream, chunk, encoding, addToFront, skipChunkCheck) {
    var state = stream._readableState;
    if (chunk === null) {
      state.reading = false;
      onEofChunk(stream, state);
    } else {
      var er;
      if (!skipChunkCheck) er = chunkInvalid(state, chunk);
      if (er) {
        stream.emit('error', er);
      } else if (state.objectMode || chunk && chunk.length > 0) {
        if (typeof chunk !== 'string' && !state.objectMode && Object.getPrototypeOf(chunk) !== Buffer.prototype) {
          chunk = _uint8ArrayToBuffer(chunk);
        }
  
        if (addToFront) {
          if (state.endEmitted) stream.emit('error', new Error('stream.unshift() after end event'));else addChunk(stream, state, chunk, true);
        } else if (state.ended) {
          stream.emit('error', new Error('stream.push() after EOF'));
        } else {
          state.reading = false;
          if (state.decoder && !encoding) {
            chunk = state.decoder.write(chunk);
            if (state.objectMode || chunk.length !== 0) addChunk(stream, state, chunk, false);else maybeReadMore(stream, state);
          } else {
            addChunk(stream, state, chunk, false);
          }
        }
      } else if (!addToFront) {
        state.reading = false;
      }
    }
  
    return needMoreData(state);
  }
  
  function addChunk(stream, state, chunk, addToFront) {
    if (state.flowing && state.length === 0 && !state.sync) {
      stream.emit('data', chunk);
      stream.read(0);
    } else {
      // update the buffer info.
      state.length += state.objectMode ? 1 : chunk.length;
      if (addToFront) state.buffer.unshift(chunk);else state.buffer.push(chunk);
  
      if (state.needReadable) emitReadable(stream);
    }
    maybeReadMore(stream, state);
  }
  
  function chunkInvalid(state, chunk) {
    var er;
    if (!_isUint8Array(chunk) && typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) {
      er = new TypeError('Invalid non-string/buffer chunk');
    }
    return er;
  }
  
  // if it's past the high water mark, we can push in some more.
  // Also, if we have no data yet, we can stand some
  // more bytes.  This is to work around cases where hwm=0,
  // such as the repl.  Also, if the push() triggered a
  // readable event, and the user called read(largeNumber) such that
  // needReadable was set, then we ought to push more, so that another
  // 'readable' event will be triggered.
  function needMoreData(state) {
    return !state.ended && (state.needReadable || state.length < state.highWaterMark || state.length === 0);
  }
  
  Readable.prototype.isPaused = function () {
    return this._readableState.flowing === false;
  };
  
  // backwards compatibility.
  Readable.prototype.setEncoding = function (enc) {
    if (!StringDecoder) StringDecoder = require('string_decoder/').StringDecoder;
    this._readableState.decoder = new StringDecoder(enc);
    this._readableState.encoding = enc;
    return this;
  };
  
  // Don't raise the hwm > 8MB
  var MAX_HWM = 0x800000;
  function computeNewHighWaterMark(n) {
    if (n >= MAX_HWM) {
      n = MAX_HWM;
    } else {
      // Get the next highest power of 2 to prevent increasing hwm excessively in
      // tiny amounts
      n--;
      n |= n >>> 1;
      n |= n >>> 2;
      n |= n >>> 4;
      n |= n >>> 8;
      n |= n >>> 16;
      n++;
    }
    return n;
  }
  
  // This function is designed to be inlinable, so please take care when making
  // changes to the function body.
  function howMuchToRead(n, state) {
    if (n <= 0 || state.length === 0 && state.ended) return 0;
    if (state.objectMode) return 1;
    if (n !== n) {
      // Only flow one buffer at a time
      if (state.flowing && state.length) return state.buffer.head.data.length;else return state.length;
    }
    // If we're asking for more than the current hwm, then raise the hwm.
    if (n > state.highWaterMark) state.highWaterMark = computeNewHighWaterMark(n);
    if (n <= state.length) return n;
    // Don't have enough
    if (!state.ended) {
      state.needReadable = true;
      return 0;
    }
    return state.length;
  }
  
  // you can override either this method, or the async _read(n) below.
  Readable.prototype.read = function (n) {
    debug('read', n);
    n = parseInt(n, 10);
    var state = this._readableState;
    var nOrig = n;
  
    if (n !== 0) state.emittedReadable = false;
  
    // if we're doing read(0) to trigger a readable event, but we
    // already have a bunch of data in the buffer, then just trigger
    // the 'readable' event and move on.
    if (n === 0 && state.needReadable && (state.length >= state.highWaterMark || state.ended)) {
      debug('read: emitReadable', state.length, state.ended);
      if (state.length === 0 && state.ended) endReadable(this);else emitReadable(this);
      return null;
    }
  
    n = howMuchToRead(n, state);
  
    // if we've ended, and we're now clear, then finish it up.
    if (n === 0 && state.ended) {
      if (state.length === 0) endReadable(this);
      return null;
    }
  
    // All the actual chunk generation logic needs to be
    // *below* the call to _read.  The reason is that in certain
    // synthetic stream cases, such as passthrough streams, _read
    // may be a completely synchronous operation which may change
    // the state of the read buffer, providing enough data when
    // before there was *not* enough.
    //
    // So, the steps are:
    // 1. Figure out what the state of things will be after we do
    // a read from the buffer.
    //
    // 2. If that resulting state will trigger a _read, then call _read.
    // Note that this may be asynchronous, or synchronous.  Yes, it is
    // deeply ugly to write APIs this way, but that still doesn't mean
    // that the Readable class should behave improperly, as streams are
    // designed to be sync/async agnostic.
    // Take note if the _read call is sync or async (ie, if the read call
    // has returned yet), so that we know whether or not it's safe to emit
    // 'readable' etc.
    //
    // 3. Actually pull the requested chunks out of the buffer and return.
  
    // if we need a readable event, then we need to do some reading.
    var doRead = state.needReadable;
    debug('need readable', doRead);
  
    // if we currently have less than the highWaterMark, then also read some
    if (state.length === 0 || state.length - n < state.highWaterMark) {
      doRead = true;
      debug('length less than watermark', doRead);
    }
  
    // however, if we've ended, then there's no point, and if we're already
    // reading, then it's unnecessary.
    if (state.ended || state.reading) {
      doRead = false;
      debug('reading or ended', doRead);
    } else if (doRead) {
      debug('do read');
      state.reading = true;
      state.sync = true;
      // if the length is currently zero, then we *need* a readable event.
      if (state.length === 0) state.needReadable = true;
      // call internal read method
      this._read(state.highWaterMark);
      state.sync = false;
      // If _read pushed data synchronously, then `reading` will be false,
      // and we need to re-evaluate how much data we can return to the user.
      if (!state.reading) n = howMuchToRead(nOrig, state);
    }
  
    var ret;
    if (n > 0) ret = fromList(n, state);else ret = null;
  
    if (ret === null) {
      state.needReadable = true;
      n = 0;
    } else {
      state.length -= n;
    }
  
    if (state.length === 0) {
      // If we have nothing in the buffer, then we want to know
      // as soon as we *do* get something into the buffer.
      if (!state.ended) state.needReadable = true;
  
      // If we tried to read() past the EOF, then emit end on the next tick.
      if (nOrig !== n && state.ended) endReadable(this);
    }
  
    if (ret !== null) this.emit('data', ret);
  
    return ret;
  };
  
  function onEofChunk(stream, state) {
    if (state.ended) return;
    if (state.decoder) {
      var chunk = state.decoder.end();
      if (chunk && chunk.length) {
        state.buffer.push(chunk);
        state.length += state.objectMode ? 1 : chunk.length;
      }
    }
    state.ended = true;
  
    // emit 'readable' now to make sure it gets picked up.
    emitReadable(stream);
  }
  
  // Don't emit readable right away in sync mode, because this can trigger
  // another read() call => stack overflow.  This way, it might trigger
  // a nextTick recursion warning, but that's not so bad.
  function emitReadable(stream) {
    var state = stream._readableState;
    state.needReadable = false;
    if (!state.emittedReadable) {
      debug('emitReadable', state.flowing);
      state.emittedReadable = true;
      if (state.sync) processNextTick(emitReadable_, stream);else emitReadable_(stream);
    }
  }
  
  function emitReadable_(stream) {
    debug('emit readable');
    stream.emit('readable');
    flow(stream);
  }
  
  // at this point, the user has presumably seen the 'readable' event,
  // and called read() to consume some data.  that may have triggered
  // in turn another _read(n) call, in which case reading = true if
  // it's in progress.
  // However, if we're not ended, or reading, and the length < hwm,
  // then go ahead and try to read some more preemptively.
  function maybeReadMore(stream, state) {
    if (!state.readingMore) {
      state.readingMore = true;
      processNextTick(maybeReadMore_, stream, state);
    }
  }
  
  function maybeReadMore_(stream, state) {
    var len = state.length;
    while (!state.reading && !state.flowing && !state.ended && state.length < state.highWaterMark) {
      debug('maybeReadMore read 0');
      stream.read(0);
      if (len === state.length)
        // didn't get any data, stop spinning.
        break;else len = state.length;
    }
    state.readingMore = false;
  }
  
  // abstract method.  to be overridden in specific implementation classes.
  // call cb(er, data) where data is <= n in length.
  // for virtual (non-string, non-buffer) streams, "length" is somewhat
  // arbitrary, and perhaps not very meaningful.
  Readable.prototype._read = function (n) {
    this.emit('error', new Error('_read() is not implemented'));
  };
  
  Readable.prototype.pipe = function (dest, pipeOpts) {
    var src = this;
    var state = this._readableState;
  
    switch (state.pipesCount) {
      case 0:
        state.pipes = dest;
        break;
      case 1:
        state.pipes = [state.pipes, dest];
        break;
      default:
        state.pipes.push(dest);
        break;
    }
    state.pipesCount += 1;
    debug('pipe count=%d opts=%j', state.pipesCount, pipeOpts);
  
    var doEnd = (!pipeOpts || pipeOpts.end !== false) && dest !== process.stdout && dest !== process.stderr;
  
    var endFn = doEnd ? onend : unpipe;
    if (state.endEmitted) processNextTick(endFn);else src.once('end', endFn);
  
    dest.on('unpipe', onunpipe);
    function onunpipe(readable, unpipeInfo) {
      debug('onunpipe');
      if (readable === src) {
        if (unpipeInfo && unpipeInfo.hasUnpiped === false) {
          unpipeInfo.hasUnpiped = true;
          cleanup();
        }
      }
    }
  
    function onend() {
      debug('onend');
      dest.end();
    }
  
    // when the dest drains, it reduces the awaitDrain counter
    // on the source.  This would be more elegant with a .once()
    // handler in flow(), but adding and removing repeatedly is
    // too slow.
    var ondrain = pipeOnDrain(src);
    dest.on('drain', ondrain);
  
    var cleanedUp = false;
    function cleanup() {
      debug('cleanup');
      // cleanup event handlers once the pipe is broken
      dest.removeListener('close', onclose);
      dest.removeListener('finish', onfinish);
      dest.removeListener('drain', ondrain);
      dest.removeListener('error', onerror);
      dest.removeListener('unpipe', onunpipe);
      src.removeListener('end', onend);
      src.removeListener('end', unpipe);
      src.removeListener('data', ondata);
  
      cleanedUp = true;
  
      // if the reader is waiting for a drain event from this
      // specific writer, then it would cause it to never start
      // flowing again.
      // So, if this is awaiting a drain, then we just call it now.
      // If we don't know, then assume that we are waiting for one.
      if (state.awaitDrain && (!dest._writableState || dest._writableState.needDrain)) ondrain();
    }
  
    // If the user pushes more data while we're writing to dest then we'll end up
    // in ondata again. However, we only want to increase awaitDrain once because
    // dest will only emit one 'drain' event for the multiple writes.
    // => Introduce a guard on increasing awaitDrain.
    var increasedAwaitDrain = false;
    src.on('data', ondata);
    function ondata(chunk) {
      debug('ondata');
      increasedAwaitDrain = false;
      var ret = dest.write(chunk);
      if (false === ret && !increasedAwaitDrain) {
        // If the user unpiped during `dest.write()`, it is possible
        // to get stuck in a permanently paused state if that write
        // also returned false.
        // => Check whether `dest` is still a piping destination.
        if ((state.pipesCount === 1 && state.pipes === dest || state.pipesCount > 1 && indexOf(state.pipes, dest) !== -1) && !cleanedUp) {
          debug('false write response, pause', src._readableState.awaitDrain);
          src._readableState.awaitDrain++;
          increasedAwaitDrain = true;
        }
        src.pause();
      }
    }
  
    // if the dest has an error, then stop piping into it.
    // however, don't suppress the throwing behavior for this.
    function onerror(er) {
      debug('onerror', er);
      unpipe();
      dest.removeListener('error', onerror);
      if (EElistenerCount(dest, 'error') === 0) dest.emit('error', er);
    }
  
    // Make sure our error handler is attached before userland ones.
    prependListener(dest, 'error', onerror);
  
    // Both close and finish should trigger unpipe, but only once.
    function onclose() {
      dest.removeListener('finish', onfinish);
      unpipe();
    }
    dest.once('close', onclose);
    function onfinish() {
      debug('onfinish');
      dest.removeListener('close', onclose);
      unpipe();
    }
    dest.once('finish', onfinish);
  
    function unpipe() {
      debug('unpipe');
      src.unpipe(dest);
    }
  
    // tell the dest that it's being piped to
    dest.emit('pipe', src);
  
    // start the flow if it hasn't been started already.
    if (!state.flowing) {
      debug('pipe resume');
      src.resume();
    }
  
    return dest;
  };
  
  function pipeOnDrain(src) {
    return function () {
      var state = src._readableState;
      debug('pipeOnDrain', state.awaitDrain);
      if (state.awaitDrain) state.awaitDrain--;
      if (state.awaitDrain === 0 && EElistenerCount(src, 'data')) {
        state.flowing = true;
        flow(src);
      }
    };
  }
  
  Readable.prototype.unpipe = function (dest) {
    var state = this._readableState;
    var unpipeInfo = { hasUnpiped: false };
  
    // if we're not piping anywhere, then do nothing.
    if (state.pipesCount === 0) return this;
  
    // just one destination.  most common case.
    if (state.pipesCount === 1) {
      // passed in one, but it's not the right one.
      if (dest && dest !== state.pipes) return this;
  
      if (!dest) dest = state.pipes;
  
      // got a match.
      state.pipes = null;
      state.pipesCount = 0;
      state.flowing = false;
      if (dest) dest.emit('unpipe', this, unpipeInfo);
      return this;
    }
  
    // slow case. multiple pipe destinations.
  
    if (!dest) {
      // remove all.
      var dests = state.pipes;
      var len = state.pipesCount;
      state.pipes = null;
      state.pipesCount = 0;
      state.flowing = false;
  
      for (var i = 0; i < len; i++) {
        dests[i].emit('unpipe', this, unpipeInfo);
      }return this;
    }
  
    // try to find the right one.
    var index = indexOf(state.pipes, dest);
    if (index === -1) return this;
  
    state.pipes.splice(index, 1);
    state.pipesCount -= 1;
    if (state.pipesCount === 1) state.pipes = state.pipes[0];
  
    dest.emit('unpipe', this, unpipeInfo);
  
    return this;
  };
  
  // set up data events if they are asked for
  // Ensure readable listeners eventually get something
  Readable.prototype.on = function (ev, fn) {
    var res = Stream.prototype.on.call(this, ev, fn);
  
    if (ev === 'data') {
      // Start flowing on next tick if stream isn't explicitly paused
      if (this._readableState.flowing !== false) this.resume();
    } else if (ev === 'readable') {
      var state = this._readableState;
      if (!state.endEmitted && !state.readableListening) {
        state.readableListening = state.needReadable = true;
        state.emittedReadable = false;
        if (!state.reading) {
          processNextTick(nReadingNextTick, this);
        } else if (state.length) {
          emitReadable(this);
        }
      }
    }
  
    return res;
  };
  Readable.prototype.addListener = Readable.prototype.on;
  
  function nReadingNextTick(self) {
    debug('readable nexttick read 0');
    self.read(0);
  }
  
  // pause() and resume() are remnants of the legacy readable stream API
  // If the user uses them, then switch into old mode.
  Readable.prototype.resume = function () {
    var state = this._readableState;
    if (!state.flowing) {
      debug('resume');
      state.flowing = true;
      resume(this, state);
    }
    return this;
  };
  
  function resume(stream, state) {
    if (!state.resumeScheduled) {
      state.resumeScheduled = true;
      processNextTick(resume_, stream, state);
    }
  }
  
  function resume_(stream, state) {
    if (!state.reading) {
      debug('resume read 0');
      stream.read(0);
    }
  
    state.resumeScheduled = false;
    state.awaitDrain = 0;
    stream.emit('resume');
    flow(stream);
    if (state.flowing && !state.reading) stream.read(0);
  }
  
  Readable.prototype.pause = function () {
    debug('call pause flowing=%j', this._readableState.flowing);
    if (false !== this._readableState.flowing) {
      debug('pause');
      this._readableState.flowing = false;
      this.emit('pause');
    }
    return this;
  };
  
  function flow(stream) {
    var state = stream._readableState;
    debug('flow', state.flowing);
    while (state.flowing && stream.read() !== null) {}
  }
  
  // wrap an old-style stream as the async data source.
  // This is *not* part of the readable stream interface.
  // It is an ugly unfortunate mess of history.
  Readable.prototype.wrap = function (stream) {
    var _this = this;
  
    var state = this._readableState;
    var paused = false;
  
    stream.on('end', function () {
      debug('wrapped end');
      if (state.decoder && !state.ended) {
        var chunk = state.decoder.end();
        if (chunk && chunk.length) _this.push(chunk);
      }
  
      _this.push(null);
    });
  
    stream.on('data', function (chunk) {
      debug('wrapped data');
      if (state.decoder) chunk = state.decoder.write(chunk);
  
      // don't skip over falsy values in objectMode
      if (state.objectMode && (chunk === null || chunk === undefined)) return;else if (!state.objectMode && (!chunk || !chunk.length)) return;
  
      var ret = _this.push(chunk);
      if (!ret) {
        paused = true;
        stream.pause();
      }
    });
  
    // proxy all the other methods.
    // important when wrapping filters and duplexes.
    for (var i in stream) {
      if (this[i] === undefined && typeof stream[i] === 'function') {
        this[i] = function (method) {
          return function () {
            return stream[method].apply(stream, arguments);
          };
        }(i);
      }
    }
  
    // proxy certain important events.
    for (var n = 0; n < kProxyEvents.length; n++) {
      stream.on(kProxyEvents[n], this.emit.bind(this, kProxyEvents[n]));
    }
  
    // when we try to consume some more bytes, simply unpause the
    // underlying stream.
    this._read = function (n) {
      debug('wrapped _read', n);
      if (paused) {
        paused = false;
        stream.resume();
      }
    };
  
    return this;
  };
  
  // exposed for testing purposes only.
  Readable._fromList = fromList;
  
  // Pluck off n bytes from an array of buffers.
  // Length is the combined lengths of all the buffers in the list.
  // This function is designed to be inlinable, so please take care when making
  // changes to the function body.
  function fromList(n, state) {
    // nothing buffered
    if (state.length === 0) return null;
  
    var ret;
    if (state.objectMode) ret = state.buffer.shift();else if (!n || n >= state.length) {
      // read it all, truncate the list
      if (state.decoder) ret = state.buffer.join('');else if (state.buffer.length === 1) ret = state.buffer.head.data;else ret = state.buffer.concat(state.length);
      state.buffer.clear();
    } else {
      // read part of list
      ret = fromListPartial(n, state.buffer, state.decoder);
    }
  
    return ret;
  }
  
  // Extracts only enough buffered data to satisfy the amount requested.
  // This function is designed to be inlinable, so please take care when making
  // changes to the function body.
  function fromListPartial(n, list, hasStrings) {
    var ret;
    if (n < list.head.data.length) {
      // slice is the same for buffers and strings
      ret = list.head.data.slice(0, n);
      list.head.data = list.head.data.slice(n);
    } else if (n === list.head.data.length) {
      // first chunk is a perfect match
      ret = list.shift();
    } else {
      // result spans more than one buffer
      ret = hasStrings ? copyFromBufferString(n, list) : copyFromBuffer(n, list);
    }
    return ret;
  }
  
  // Copies a specified amount of characters from the list of buffered data
  // chunks.
  // This function is designed to be inlinable, so please take care when making
  // changes to the function body.
  function copyFromBufferString(n, list) {
    var p = list.head;
    var c = 1;
    var ret = p.data;
    n -= ret.length;
    while (p = p.next) {
      var str = p.data;
      var nb = n > str.length ? str.length : n;
      if (nb === str.length) ret += str;else ret += str.slice(0, n);
      n -= nb;
      if (n === 0) {
        if (nb === str.length) {
          ++c;
          if (p.next) list.head = p.next;else list.head = list.tail = null;
        } else {
          list.head = p;
          p.data = str.slice(nb);
        }
        break;
      }
      ++c;
    }
    list.length -= c;
    return ret;
  }
  
  // Copies a specified amount of bytes from the list of buffered data chunks.
  // This function is designed to be inlinable, so please take care when making
  // changes to the function body.
  function copyFromBuffer(n, list) {
    var ret = Buffer.allocUnsafe(n);
    var p = list.head;
    var c = 1;
    p.data.copy(ret);
    n -= p.data.length;
    while (p = p.next) {
      var buf = p.data;
      var nb = n > buf.length ? buf.length : n;
      buf.copy(ret, ret.length - n, 0, nb);
      n -= nb;
      if (n === 0) {
        if (nb === buf.length) {
          ++c;
          if (p.next) list.head = p.next;else list.head = list.tail = null;
        } else {
          list.head = p;
          p.data = buf.slice(nb);
        }
        break;
      }
      ++c;
    }
    list.length -= c;
    return ret;
  }
  
  function endReadable(stream) {
    var state = stream._readableState;
  
    // If we get here before consuming all the bytes, then that is a
    // bug in node.  Should never happen.
    if (state.length > 0) throw new Error('"endReadable()" called on non-empty stream');
  
    if (!state.endEmitted) {
      state.ended = true;
      processNextTick(endReadableNT, state, stream);
    }
  }
  
  function endReadableNT(state, stream) {
    // Check that we didn't get one last unshift.
    if (!state.endEmitted && state.length === 0) {
      state.endEmitted = true;
      stream.readable = false;
      stream.emit('end');
    }
  }
  
  function forEach(xs, f) {
    for (var i = 0, l = xs.length; i < l; i++) {
      f(xs[i], i);
    }
  }
  
  function indexOf(xs, x) {
    for (var i = 0, l = xs.length; i < l; i++) {
      if (xs[i] === x) return i;
    }
    return -1;
  }
  }).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
  },{"./_stream_duplex":276,"./internal/streams/BufferList":281,"./internal/streams/destroy":282,"./internal/streams/stream":283,"_process":257,"core-util-is":89,"events":157,"inherits":180,"isarray":186,"process-nextick-args":256,"safe-buffer":290,"string_decoder/":317,"util":55}],279:[function(require,module,exports){
  // Copyright Joyent, Inc. and other Node contributors.
  //
  // Permission is hereby granted, free of charge, to any person obtaining a
  // copy of this software and associated documentation files (the
  // "Software"), to deal in the Software without restriction, including
  // without limitation the rights to use, copy, modify, merge, publish,
  // distribute, sublicense, and/or sell copies of the Software, and to permit
  // persons to whom the Software is furnished to do so, subject to the
  // following conditions:
  //
  // The above copyright notice and this permission notice shall be included
  // in all copies or substantial portions of the Software.
  //
  // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
  // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
  // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
  // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
  // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
  // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
  // USE OR OTHER DEALINGS IN THE SOFTWARE.
  
  // a transform stream is a readable/writable stream where you do
  // something with the data.  Sometimes it's called a "filter",
  // but that's not a great name for it, since that implies a thing where
  // some bits pass through, and others are simply ignored.  (That would
  // be a valid example of a transform, of course.)
  //
  // While the output is causally related to the input, it's not a
  // necessarily symmetric or synchronous transformation.  For example,
  // a zlib stream might take multiple plain-text writes(), and then
  // emit a single compressed chunk some time in the future.
  //
  // Here's how this works:
  //
  // The Transform stream has all the aspects of the readable and writable
  // stream classes.  When you write(chunk), that calls _write(chunk,cb)
  // internally, and returns false if there's a lot of pending writes
  // buffered up.  When you call read(), that calls _read(n) until
  // there's enough pending readable data buffered up.
  //
  // In a transform stream, the written data is placed in a buffer.  When
  // _read(n) is called, it transforms the queued up data, calling the
  // buffered _write cb's as it consumes chunks.  If consuming a single
  // written chunk would result in multiple output chunks, then the first
  // outputted bit calls the readcb, and subsequent chunks just go into
  // the read buffer, and will cause it to emit 'readable' if necessary.
  //
  // This way, back-pressure is actually determined by the reading side,
  // since _read has to be called to start processing a new chunk.  However,
  // a pathological inflate type of transform can cause excessive buffering
  // here.  For example, imagine a stream where every byte of input is
  // interpreted as an integer from 0-255, and then results in that many
  // bytes of output.  Writing the 4 bytes {ff,ff,ff,ff} would result in
  // 1kb of data being output.  In this case, you could write a very small
  // amount of input, and end up with a very large amount of output.  In
  // such a pathological inflating mechanism, there'd be no way to tell
  // the system to stop doing the transform.  A single 4MB write could
  // cause the system to run out of memory.
  //
  // However, even in such a pathological case, only a single written chunk
  // would be consumed, and then the rest would wait (un-transformed) until
  // the results of the previous transformed chunk were consumed.
  
  'use strict';
  
  module.exports = Transform;
  
  var Duplex = require('./_stream_duplex');
  
  /*<replacement>*/
  var util = require('core-util-is');
  util.inherits = require('inherits');
  /*</replacement>*/
  
  util.inherits(Transform, Duplex);
  
  function afterTransform(er, data) {
    var ts = this._transformState;
    ts.transforming = false;
  
    var cb = ts.writecb;
  
    if (!cb) {
      return this.emit('error', new Error('write callback called multiple times'));
    }
  
    ts.writechunk = null;
    ts.writecb = null;
  
    if (data != null) // single equals check for both `null` and `undefined`
      this.push(data);
  
    cb(er);
  
    var rs = this._readableState;
    rs.reading = false;
    if (rs.needReadable || rs.length < rs.highWaterMark) {
      this._read(rs.highWaterMark);
    }
  }
  
  function Transform(options) {
    if (!(this instanceof Transform)) return new Transform(options);
  
    Duplex.call(this, options);
  
    this._transformState = {
      afterTransform: afterTransform.bind(this),
      needTransform: false,
      transforming: false,
      writecb: null,
      writechunk: null,
      writeencoding: null
    };
  
    // start out asking for a readable event once data is transformed.
    this._readableState.needReadable = true;
  
    // we have implemented the _read method, and done the other things
    // that Readable wants before the first _read call, so unset the
    // sync guard flag.
    this._readableState.sync = false;
  
    if (options) {
      if (typeof options.transform === 'function') this._transform = options.transform;
  
      if (typeof options.flush === 'function') this._flush = options.flush;
    }
  
    // When the writable side finishes, then flush out anything remaining.
    this.on('prefinish', prefinish);
  }
  
  function prefinish() {
    var _this = this;
  
    if (typeof this._flush === 'function') {
      this._flush(function (er, data) {
        done(_this, er, data);
      });
    } else {
      done(this, null, null);
    }
  }
  
  Transform.prototype.push = function (chunk, encoding) {
    this._transformState.needTransform = false;
    return Duplex.prototype.push.call(this, chunk, encoding);
  };
  
  // This is the part where you do stuff!
  // override this function in implementation classes.
  // 'chunk' is an input chunk.
  //
  // Call `push(newChunk)` to pass along transformed output
  // to the readable side.  You may call 'push' zero or more times.
  //
  // Call `cb(err)` when you are done with this chunk.  If you pass
  // an error, then that'll put the hurt on the whole operation.  If you
  // never call cb(), then you'll never get another chunk.
  Transform.prototype._transform = function (chunk, encoding, cb) {
    throw new Error('_transform() is not implemented');
  };
  
  Transform.prototype._write = function (chunk, encoding, cb) {
    var ts = this._transformState;
    ts.writecb = cb;
    ts.writechunk = chunk;
    ts.writeencoding = encoding;
    if (!ts.transforming) {
      var rs = this._readableState;
      if (ts.needTransform || rs.needReadable || rs.length < rs.highWaterMark) this._read(rs.highWaterMark);
    }
  };
  
  // Doesn't matter what the args are here.
  // _transform does all the work.
  // That we got here means that the readable side wants more data.
  Transform.prototype._read = function (n) {
    var ts = this._transformState;
  
    if (ts.writechunk !== null && ts.writecb && !ts.transforming) {
      ts.transforming = true;
      this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);
    } else {
      // mark that we need a transform, so that any data that comes in
      // will get processed, now that we've asked for it.
      ts.needTransform = true;
    }
  };
  
  Transform.prototype._destroy = function (err, cb) {
    var _this2 = this;
  
    Duplex.prototype._destroy.call(this, err, function (err2) {
      cb(err2);
      _this2.emit('close');
    });
  };
  
  function done(stream, er, data) {
    if (er) return stream.emit('error', er);
  
    if (data != null) // single equals check for both `null` and `undefined`
      stream.push(data);
  
    // if there's nothing in the write buffer, then that means
    // that nothing more will ever be provided
    if (stream._writableState.length) throw new Error('Calling transform done when ws.length != 0');
  
    if (stream._transformState.transforming) throw new Error('Calling transform done when still transforming');
  
    return stream.push(null);
  }
  },{"./_stream_duplex":276,"core-util-is":89,"inherits":180}],280:[function(require,module,exports){
  (function (process,global){
  // Copyright Joyent, Inc. and other Node contributors.
  //
  // Permission is hereby granted, free of charge, to any person obtaining a
  // copy of this software and associated documentation files (the
  // "Software"), to deal in the Software without restriction, including
  // without limitation the rights to use, copy, modify, merge, publish,
  // distribute, sublicense, and/or sell copies of the Software, and to permit
  // persons to whom the Software is furnished to do so, subject to the
  // following conditions:
  //
  // The above copyright notice and this permission notice shall be included
  // in all copies or substantial portions of the Software.
  //
  // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
  // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
  // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
  // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
  // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
  // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
  // USE OR OTHER DEALINGS IN THE SOFTWARE.
  
  // A bit simpler than readable streams.
  // Implement an async ._write(chunk, encoding, cb), and it'll handle all
  // the drain event emission and buffering.
  
  'use strict';
  
  /*<replacement>*/
  
  var processNextTick = require('process-nextick-args').nextTick;
  /*</replacement>*/
  
  module.exports = Writable;
  
  /* <replacement> */
  function WriteReq(chunk, encoding, cb) {
    this.chunk = chunk;
    this.encoding = encoding;
    this.callback = cb;
    this.next = null;
  }
  
  // It seems a linked list but it is not
  // there will be only 2 of these for each stream
  function CorkedRequest(state) {
    var _this = this;
  
    this.next = null;
    this.entry = null;
    this.finish = function () {
      onCorkedFinish(_this, state);
    };
  }
  /* </replacement> */
  
  /*<replacement>*/
  var asyncWrite = !process.browser && ['v0.10', 'v0.9.'].indexOf(process.version.slice(0, 5)) > -1 ? setImmediate : processNextTick;
  /*</replacement>*/
  
  /*<replacement>*/
  var Duplex;
  /*</replacement>*/
  
  Writable.WritableState = WritableState;
  
  /*<replacement>*/
  var util = require('core-util-is');
  util.inherits = require('inherits');
  /*</replacement>*/
  
  /*<replacement>*/
  var internalUtil = {
    deprecate: require('util-deprecate')
  };
  /*</replacement>*/
  
  /*<replacement>*/
  var Stream = require('./internal/streams/stream');
  /*</replacement>*/
  
  /*<replacement>*/
  
  var Buffer = require('safe-buffer').Buffer;
  var OurUint8Array = global.Uint8Array || function () {};
  function _uint8ArrayToBuffer(chunk) {
    return Buffer.from(chunk);
  }
  function _isUint8Array(obj) {
    return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;
  }
  
  /*</replacement>*/
  
  var destroyImpl = require('./internal/streams/destroy');
  
  util.inherits(Writable, Stream);
  
  function nop() {}
  
  function WritableState(options, stream) {
    Duplex = Duplex || require('./_stream_duplex');
  
    options = options || {};
  
    // Duplex streams are both readable and writable, but share
    // the same options object.
    // However, some cases require setting options to different
    // values for the readable and the writable sides of the duplex stream.
    // These options can be provided separately as readableXXX and writableXXX.
    var isDuplex = stream instanceof Duplex;
  
    // object stream flag to indicate whether or not this stream
    // contains buffers or objects.
    this.objectMode = !!options.objectMode;
  
    if (isDuplex) this.objectMode = this.objectMode || !!options.writableObjectMode;
  
    // the point at which write() starts returning false
    // Note: 0 is a valid value, means that we always return false if
    // the entire buffer is not flushed immediately on write()
    var hwm = options.highWaterMark;
    var writableHwm = options.writableHighWaterMark;
    var defaultHwm = this.objectMode ? 16 : 16 * 1024;
  
    if (hwm || hwm === 0) this.highWaterMark = hwm;else if (isDuplex && (writableHwm || writableHwm === 0)) this.highWaterMark = writableHwm;else this.highWaterMark = defaultHwm;
  
    // cast to ints.
    this.highWaterMark = Math.floor(this.highWaterMark);
  
    // if _final has been called
    this.finalCalled = false;
  
    // drain event flag.
    this.needDrain = false;
    // at the start of calling end()
    this.ending = false;
    // when end() has been called, and returned
    this.ended = false;
    // when 'finish' is emitted
    this.finished = false;
  
    // has it been destroyed
    this.destroyed = false;
  
    // should we decode strings into buffers before passing to _write?
    // this is here so that some node-core streams can optimize string
    // handling at a lower level.
    var noDecode = options.decodeStrings === false;
    this.decodeStrings = !noDecode;
  
    // Crypto is kind of old and crusty.  Historically, its default string
    // encoding is 'binary' so we have to make this configurable.
    // Everything else in the universe uses 'utf8', though.
    this.defaultEncoding = options.defaultEncoding || 'utf8';
  
    // not an actual buffer we keep track of, but a measurement
    // of how much we're waiting to get pushed to some underlying
    // socket or file.
    this.length = 0;
  
    // a flag to see when we're in the middle of a write.
    this.writing = false;
  
    // when true all writes will be buffered until .uncork() call
    this.corked = 0;
  
    // a flag to be able to tell if the onwrite cb is called immediately,
    // or on a later tick.  We set this to true at first, because any
    // actions that shouldn't happen until "later" should generally also
    // not happen before the first write call.
    this.sync = true;
  
    // a flag to know if we're processing previously buffered items, which
    // may call the _write() callback in the same tick, so that we don't
    // end up in an overlapped onwrite situation.
    this.bufferProcessing = false;
  
    // the callback that's passed to _write(chunk,cb)
    this.onwrite = function (er) {
      onwrite(stream, er);
    };
  
    // the callback that the user supplies to write(chunk,encoding,cb)
    this.writecb = null;
  
    // the amount that is being written when _write is called.
    this.writelen = 0;
  
    this.bufferedRequest = null;
    this.lastBufferedRequest = null;
  
    // number of pending user-supplied write callbacks
    // this must be 0 before 'finish' can be emitted
    this.pendingcb = 0;
  
    // emit prefinish if the only thing we're waiting for is _write cbs
    // This is relevant for synchronous Transform streams
    this.prefinished = false;
  
    // True if the error was already emitted and should not be thrown again
    this.errorEmitted = false;
  
    // count buffered requests
    this.bufferedRequestCount = 0;
  
    // allocate the first CorkedRequest, there is always
    // one allocated and free to use, and we maintain at most two
    this.corkedRequestsFree = new CorkedRequest(this);
  }
  
  WritableState.prototype.getBuffer = function getBuffer() {
    var current = this.bufferedRequest;
    var out = [];
    while (current) {
      out.push(current);
      current = current.next;
    }
    return out;
  };
  
  (function () {
    try {
      Object.defineProperty(WritableState.prototype, 'buffer', {
        get: internalUtil.deprecate(function () {
          return this.getBuffer();
        }, '_writableState.buffer is deprecated. Use _writableState.getBuffer ' + 'instead.', 'DEP0003')
      });
    } catch (_) {}
  })();
  
  // Test _writableState for inheritance to account for Duplex streams,
  // whose prototype chain only points to Readable.
  var realHasInstance;
  if (typeof Symbol === 'function' && Symbol.hasInstance && typeof Function.prototype[Symbol.hasInstance] === 'function') {
    realHasInstance = Function.prototype[Symbol.hasInstance];
    Object.defineProperty(Writable, Symbol.hasInstance, {
      value: function (object) {
        if (realHasInstance.call(this, object)) return true;
        if (this !== Writable) return false;
  
        return object && object._writableState instanceof WritableState;
      }
    });
  } else {
    realHasInstance = function (object) {
      return object instanceof this;
    };
  }
  
  function Writable(options) {
    Duplex = Duplex || require('./_stream_duplex');
  
    // Writable ctor is applied to Duplexes, too.
    // `realHasInstance` is necessary because using plain `instanceof`
    // would return false, as no `_writableState` property is attached.
  
    // Trying to use the custom `instanceof` for Writable here will also break the
    // Node.js LazyTransform implementation, which has a non-trivial getter for
    // `_writableState` that would lead to infinite recursion.
    if (!realHasInstance.call(Writable, this) && !(this instanceof Duplex)) {
      return new Writable(options);
    }
  
    this._writableState = new WritableState(options, this);
  
    // legacy.
    this.writable = true;
  
    if (options) {
      if (typeof options.write === 'function') this._write = options.write;
  
      if (typeof options.writev === 'function') this._writev = options.writev;
  
      if (typeof options.destroy === 'function') this._destroy = options.destroy;
  
      if (typeof options.final === 'function') this._final = options.final;
    }
  
    Stream.call(this);
  }
  
  // Otherwise people can pipe Writable streams, which is just wrong.
  Writable.prototype.pipe = function () {
    this.emit('error', new Error('Cannot pipe, not readable'));
  };
  
  function writeAfterEnd(stream, cb) {
    var er = new Error('write after end');
    // TODO: defer error events consistently everywhere, not just the cb
    stream.emit('error', er);
    processNextTick(cb, er);
  }
  
  // Checks that a user-supplied chunk is valid, especially for the particular
  // mode the stream is in. Currently this means that `null` is never accepted
  // and undefined/non-string values are only allowed in object mode.
  function validChunk(stream, state, chunk, cb) {
    var valid = true;
    var er = false;
  
    if (chunk === null) {
      er = new TypeError('May not write null values to stream');
    } else if (typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) {
      er = new TypeError('Invalid non-string/buffer chunk');
    }
    if (er) {
      stream.emit('error', er);
      processNextTick(cb, er);
      valid = false;
    }
    return valid;
  }
  
  Writable.prototype.write = function (chunk, encoding, cb) {
    var state = this._writableState;
    var ret = false;
    var isBuf = !state.objectMode && _isUint8Array(chunk);
  
    if (isBuf && !Buffer.isBuffer(chunk)) {
      chunk = _uint8ArrayToBuffer(chunk);
    }
  
    if (typeof encoding === 'function') {
      cb = encoding;
      encoding = null;
    }
  
    if (isBuf) encoding = 'buffer';else if (!encoding) encoding = state.defaultEncoding;
  
    if (typeof cb !== 'function') cb = nop;
  
    if (state.ended) writeAfterEnd(this, cb);else if (isBuf || validChunk(this, state, chunk, cb)) {
      state.pendingcb++;
      ret = writeOrBuffer(this, state, isBuf, chunk, encoding, cb);
    }
  
    return ret;
  };
  
  Writable.prototype.cork = function () {
    var state = this._writableState;
  
    state.corked++;
  };
  
  Writable.prototype.uncork = function () {
    var state = this._writableState;
  
    if (state.corked) {
      state.corked--;
  
      if (!state.writing && !state.corked && !state.finished && !state.bufferProcessing && state.bufferedRequest) clearBuffer(this, state);
    }
  };
  
  Writable.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {
    // node::ParseEncoding() requires lower case.
    if (typeof encoding === 'string') encoding = encoding.toLowerCase();
    if (!(['hex', 'utf8', 'utf-8', 'ascii', 'binary', 'base64', 'ucs2', 'ucs-2', 'utf16le', 'utf-16le', 'raw'].indexOf((encoding + '').toLowerCase()) > -1)) throw new TypeError('Unknown encoding: ' + encoding);
    this._writableState.defaultEncoding = encoding;
    return this;
  };
  
  function decodeChunk(state, chunk, encoding) {
    if (!state.objectMode && state.decodeStrings !== false && typeof chunk === 'string') {
      chunk = Buffer.from(chunk, encoding);
    }
    return chunk;
  }
  
  // if we're already writing something, then just put this
  // in the queue, and wait our turn.  Otherwise, call _write
  // If we return false, then we need a drain event, so set that flag.
  function writeOrBuffer(stream, state, isBuf, chunk, encoding, cb) {
    if (!isBuf) {
      var newChunk = decodeChunk(state, chunk, encoding);
      if (chunk !== newChunk) {
        isBuf = true;
        encoding = 'buffer';
        chunk = newChunk;
      }
    }
    var len = state.objectMode ? 1 : chunk.length;
  
    state.length += len;
  
    var ret = state.length < state.highWaterMark;
    // we must ensure that previous needDrain will not be reset to false.
    if (!ret) state.needDrain = true;
  
    if (state.writing || state.corked) {
      var last = state.lastBufferedRequest;
      state.lastBufferedRequest = {
        chunk: chunk,
        encoding: encoding,
        isBuf: isBuf,
        callback: cb,
        next: null
      };
      if (last) {
        last.next = state.lastBufferedRequest;
      } else {
        state.bufferedRequest = state.lastBufferedRequest;
      }
      state.bufferedRequestCount += 1;
    } else {
      doWrite(stream, state, false, len, chunk, encoding, cb);
    }
  
    return ret;
  }
  
  function doWrite(stream, state, writev, len, chunk, encoding, cb) {
    state.writelen = len;
    state.writecb = cb;
    state.writing = true;
    state.sync = true;
    if (writev) stream._writev(chunk, state.onwrite);else stream._write(chunk, encoding, state.onwrite);
    state.sync = false;
  }
  
  function onwriteError(stream, state, sync, er, cb) {
    --state.pendingcb;
  
    if (sync) {
      // defer the callback if we are being called synchronously
      // to avoid piling up things on the stack
      processNextTick(cb, er);
      // this can emit finish, and it will always happen
      // after error
      processNextTick(finishMaybe, stream, state);
      stream._writableState.errorEmitted = true;
      stream.emit('error', er);
    } else {
      // the caller expect this to happen before if
      // it is async
      cb(er);
      stream._writableState.errorEmitted = true;
      stream.emit('error', er);
      // this can emit finish, but finish must
      // always follow error
      finishMaybe(stream, state);
    }
  }
  
  function onwriteStateUpdate(state) {
    state.writing = false;
    state.writecb = null;
    state.length -= state.writelen;
    state.writelen = 0;
  }
  
  function onwrite(stream, er) {
    var state = stream._writableState;
    var sync = state.sync;
    var cb = state.writecb;
  
    onwriteStateUpdate(state);
  
    if (er) onwriteError(stream, state, sync, er, cb);else {
      // Check if we're actually ready to finish, but don't emit yet
      var finished = needFinish(state);
  
      if (!finished && !state.corked && !state.bufferProcessing && state.bufferedRequest) {
        clearBuffer(stream, state);
      }
  
      if (sync) {
        /*<replacement>*/
        asyncWrite(afterWrite, stream, state, finished, cb);
        /*</replacement>*/
      } else {
        afterWrite(stream, state, finished, cb);
      }
    }
  }
  
  function afterWrite(stream, state, finished, cb) {
    if (!finished) onwriteDrain(stream, state);
    state.pendingcb--;
    cb();
    finishMaybe(stream, state);
  }
  
  // Must force callback to be called on nextTick, so that we don't
  // emit 'drain' before the write() consumer gets the 'false' return
  // value, and has a chance to attach a 'drain' listener.
  function onwriteDrain(stream, state) {
    if (state.length === 0 && state.needDrain) {
      state.needDrain = false;
      stream.emit('drain');
    }
  }
  
  // if there's something in the buffer waiting, then process it
  function clearBuffer(stream, state) {
    state.bufferProcessing = true;
    var entry = state.bufferedRequest;
  
    if (stream._writev && entry && entry.next) {
      // Fast case, write everything using _writev()
      var l = state.bufferedRequestCount;
      var buffer = new Array(l);
      var holder = state.corkedRequestsFree;
      holder.entry = entry;
  
      var count = 0;
      var allBuffers = true;
      while (entry) {
        buffer[count] = entry;
        if (!entry.isBuf) allBuffers = false;
        entry = entry.next;
        count += 1;
      }
      buffer.allBuffers = allBuffers;
  
      doWrite(stream, state, true, state.length, buffer, '', holder.finish);
  
      // doWrite is almost always async, defer these to save a bit of time
      // as the hot path ends with doWrite
      state.pendingcb++;
      state.lastBufferedRequest = null;
      if (holder.next) {
        state.corkedRequestsFree = holder.next;
        holder.next = null;
      } else {
        state.corkedRequestsFree = new CorkedRequest(state);
      }
      state.bufferedRequestCount = 0;
    } else {
      // Slow case, write chunks one-by-one
      while (entry) {
        var chunk = entry.chunk;
        var encoding = entry.encoding;
        var cb = entry.callback;
        var len = state.objectMode ? 1 : chunk.length;
  
        doWrite(stream, state, false, len, chunk, encoding, cb);
        entry = entry.next;
        state.bufferedRequestCount--;
        // if we didn't call the onwrite immediately, then
        // it means that we need to wait until it does.
        // also, that means that the chunk and cb are currently
        // being processed, so move the buffer counter past them.
        if (state.writing) {
          break;
        }
      }
  
      if (entry === null) state.lastBufferedRequest = null;
    }
  
    state.bufferedRequest = entry;
    state.bufferProcessing = false;
  }
  
  Writable.prototype._write = function (chunk, encoding, cb) {
    cb(new Error('_write() is not implemented'));
  };
  
  Writable.prototype._writev = null;
  
  Writable.prototype.end = function (chunk, encoding, cb) {
    var state = this._writableState;
  
    if (typeof chunk === 'function') {
      cb = chunk;
      chunk = null;
      encoding = null;
    } else if (typeof encoding === 'function') {
      cb = encoding;
      encoding = null;
    }
  
    if (chunk !== null && chunk !== undefined) this.write(chunk, encoding);
  
    // .end() fully uncorks
    if (state.corked) {
      state.corked = 1;
      this.uncork();
    }
  
    // ignore unnecessary end() calls.
    if (!state.ending && !state.finished) endWritable(this, state, cb);
  };
  
  function needFinish(state) {
    return state.ending && state.length === 0 && state.bufferedRequest === null && !state.finished && !state.writing;
  }
  function callFinal(stream, state) {
    stream._final(function (err) {
      state.pendingcb--;
      if (err) {
        stream.emit('error', err);
      }
      state.prefinished = true;
      stream.emit('prefinish');
      finishMaybe(stream, state);
    });
  }
  function prefinish(stream, state) {
    if (!state.prefinished && !state.finalCalled) {
      if (typeof stream._final === 'function') {
        state.pendingcb++;
        state.finalCalled = true;
        processNextTick(callFinal, stream, state);
      } else {
        state.prefinished = true;
        stream.emit('prefinish');
      }
    }
  }
  
  function finishMaybe(stream, state) {
    var need = needFinish(state);
    if (need) {
      prefinish(stream, state);
      if (state.pendingcb === 0) {
        state.finished = true;
        stream.emit('finish');
      }
    }
    return need;
  }
  
  function endWritable(stream, state, cb) {
    state.ending = true;
    finishMaybe(stream, state);
    if (cb) {
      if (state.finished) processNextTick(cb);else stream.once('finish', cb);
    }
    state.ended = true;
    stream.writable = false;
  }
  
  function onCorkedFinish(corkReq, state, err) {
    var entry = corkReq.entry;
    corkReq.entry = null;
    while (entry) {
      var cb = entry.callback;
      state.pendingcb--;
      cb(err);
      entry = entry.next;
    }
    if (state.corkedRequestsFree) {
      state.corkedRequestsFree.next = corkReq;
    } else {
      state.corkedRequestsFree = corkReq;
    }
  }
  
  Object.defineProperty(Writable.prototype, 'destroyed', {
    get: function () {
      if (this._writableState === undefined) {
        return false;
      }
      return this._writableState.destroyed;
    },
    set: function (value) {
      // we ignore the value if the stream
      // has not been initialized yet
      if (!this._writableState) {
        return;
      }
  
      // backward compatibility, the user is explicitly
      // managing destroyed
      this._writableState.destroyed = value;
    }
  });
  
  Writable.prototype.destroy = destroyImpl.destroy;
  Writable.prototype._undestroy = destroyImpl.undestroy;
  Writable.prototype._destroy = function (err, cb) {
    this.end();
    cb(err);
  };
  }).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
  },{"./_stream_duplex":276,"./internal/streams/destroy":282,"./internal/streams/stream":283,"_process":257,"core-util-is":89,"inherits":180,"process-nextick-args":256,"safe-buffer":290,"util-deprecate":330}],281:[function(require,module,exports){
  'use strict';
  
  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
  
  var Buffer = require('safe-buffer').Buffer;
  var util = require('util');
  
  function copyBuffer(src, target, offset) {
    src.copy(target, offset);
  }
  
  module.exports = function () {
    function BufferList() {
      _classCallCheck(this, BufferList);
  
      this.head = null;
      this.tail = null;
      this.length = 0;
    }
  
    BufferList.prototype.push = function push(v) {
      var entry = { data: v, next: null };
      if (this.length > 0) this.tail.next = entry;else this.head = entry;
      this.tail = entry;
      ++this.length;
    };
  
    BufferList.prototype.unshift = function unshift(v) {
      var entry = { data: v, next: this.head };
      if (this.length === 0) this.tail = entry;
      this.head = entry;
      ++this.length;
    };
  
    BufferList.prototype.shift = function shift() {
      if (this.length === 0) return;
      var ret = this.head.data;
      if (this.length === 1) this.head = this.tail = null;else this.head = this.head.next;
      --this.length;
      return ret;
    };
  
    BufferList.prototype.clear = function clear() {
      this.head = this.tail = null;
      this.length = 0;
    };
  
    BufferList.prototype.join = function join(s) {
      if (this.length === 0) return '';
      var p = this.head;
      var ret = '' + p.data;
      while (p = p.next) {
        ret += s + p.data;
      }return ret;
    };
  
    BufferList.prototype.concat = function concat(n) {
      if (this.length === 0) return Buffer.alloc(0);
      if (this.length === 1) return this.head.data;
      var ret = Buffer.allocUnsafe(n >>> 0);
      var p = this.head;
      var i = 0;
      while (p) {
        copyBuffer(p.data, ret, i);
        i += p.data.length;
        p = p.next;
      }
      return ret;
    };
  
    return BufferList;
  }();
  
  if (util && util.inspect && util.inspect.custom) {
    module.exports.prototype[util.inspect.custom] = function () {
      var obj = util.inspect({ length: this.length });
      return this.constructor.name + ' ' + obj;
    };
  }
  },{"safe-buffer":290,"util":55}],282:[function(require,module,exports){
  'use strict';
  
  /*<replacement>*/
  
  var processNextTick = require('process-nextick-args').nextTick;
  /*</replacement>*/
  
  // undocumented cb() API, needed for core, not for public API
  function destroy(err, cb) {
    var _this = this;
  
    var readableDestroyed = this._readableState && this._readableState.destroyed;
    var writableDestroyed = this._writableState && this._writableState.destroyed;
  
    if (readableDestroyed || writableDestroyed) {
      if (cb) {
        cb(err);
      } else if (err && (!this._writableState || !this._writableState.errorEmitted)) {
        processNextTick(emitErrorNT, this, err);
      }
      return this;
    }
  
    // we set destroyed to true before firing error callbacks in order
    // to make it re-entrance safe in case destroy() is called within callbacks
  
    if (this._readableState) {
      this._readableState.destroyed = true;
    }
  
    // if this is a duplex stream mark the writable part as destroyed as well
    if (this._writableState) {
      this._writableState.destroyed = true;
    }
  
    this._destroy(err || null, function (err) {
      if (!cb && err) {
        processNextTick(emitErrorNT, _this, err);
        if (_this._writableState) {
          _this._writableState.errorEmitted = true;
        }
      } else if (cb) {
        cb(err);
      }
    });
  
    return this;
  }
  
  function undestroy() {
    if (this._readableState) {
      this._readableState.destroyed = false;
      this._readableState.reading = false;
      this._readableState.ended = false;
      this._readableState.endEmitted = false;
    }
  
    if (this._writableState) {
      this._writableState.destroyed = false;
      this._writableState.ended = false;
      this._writableState.ending = false;
      this._writableState.finished = false;
      this._writableState.errorEmitted = false;
    }
  }
  
  function emitErrorNT(self, err) {
    self.emit('error', err);
  }
  
  module.exports = {
    destroy: destroy,
    undestroy: undestroy
  };
  },{"process-nextick-args":256}],283:[function(require,module,exports){
  module.exports = require('events').EventEmitter;
  
  },{"events":157}],284:[function(require,module,exports){
  module.exports = require('./readable').PassThrough
  
  },{"./readable":285}],285:[function(require,module,exports){
  exports = module.exports = require('./lib/_stream_readable.js');
  exports.Stream = exports;
  exports.Readable = exports;
  exports.Writable = require('./lib/_stream_writable.js');
  exports.Duplex = require('./lib/_stream_duplex.js');
  exports.Transform = require('./lib/_stream_transform.js');
  exports.PassThrough = require('./lib/_stream_passthrough.js');
  
  },{"./lib/_stream_duplex.js":276,"./lib/_stream_passthrough.js":277,"./lib/_stream_readable.js":278,"./lib/_stream_transform.js":279,"./lib/_stream_writable.js":280}],286:[function(require,module,exports){
  module.exports = require('./readable').Transform
  
  },{"./readable":285}],287:[function(require,module,exports){
  module.exports = require('./lib/_stream_writable.js');
  
  },{"./lib/_stream_writable.js":280}],288:[function(require,module,exports){
  (function (Buffer){
  'use strict'
  var inherits = require('inherits')
  var HashBase = require('hash-base')
  
  function RIPEMD160 () {
    HashBase.call(this, 64)
  
    // state
    this._a = 0x67452301
    this._b = 0xefcdab89
    this._c = 0x98badcfe
    this._d = 0x10325476
    this._e = 0xc3d2e1f0
  }
  
  inherits(RIPEMD160, HashBase)
  
  RIPEMD160.prototype._update = function () {
    var m = new Array(16)
    for (var i = 0; i < 16; ++i) m[i] = this._block.readInt32LE(i * 4)
  
    var al = this._a
    var bl = this._b
    var cl = this._c
    var dl = this._d
    var el = this._e
  
    // Mj = 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15
    // K = 0x00000000
    // Sj = 11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8
    al = fn1(al, bl, cl, dl, el, m[0], 0x00000000, 11); cl = rotl(cl, 10)
    el = fn1(el, al, bl, cl, dl, m[1], 0x00000000, 14); bl = rotl(bl, 10)
    dl = fn1(dl, el, al, bl, cl, m[2], 0x00000000, 15); al = rotl(al, 10)
    cl = fn1(cl, dl, el, al, bl, m[3], 0x00000000, 12); el = rotl(el, 10)
    bl = fn1(bl, cl, dl, el, al, m[4], 0x00000000, 5); dl = rotl(dl, 10)
    al = fn1(al, bl, cl, dl, el, m[5], 0x00000000, 8); cl = rotl(cl, 10)
    el = fn1(el, al, bl, cl, dl, m[6], 0x00000000, 7); bl = rotl(bl, 10)
    dl = fn1(dl, el, al, bl, cl, m[7], 0x00000000, 9); al = rotl(al, 10)
    cl = fn1(cl, dl, el, al, bl, m[8], 0x00000000, 11); el = rotl(el, 10)
    bl = fn1(bl, cl, dl, el, al, m[9], 0x00000000, 13); dl = rotl(dl, 10)
    al = fn1(al, bl, cl, dl, el, m[10], 0x00000000, 14); cl = rotl(cl, 10)
    el = fn1(el, al, bl, cl, dl, m[11], 0x00000000, 15); bl = rotl(bl, 10)
    dl = fn1(dl, el, al, bl, cl, m[12], 0x00000000, 6); al = rotl(al, 10)
    cl = fn1(cl, dl, el, al, bl, m[13], 0x00000000, 7); el = rotl(el, 10)
    bl = fn1(bl, cl, dl, el, al, m[14], 0x00000000, 9); dl = rotl(dl, 10)
    al = fn1(al, bl, cl, dl, el, m[15], 0x00000000, 8); cl = rotl(cl, 10)
  
    // Mj = 7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8
    // K = 0x5a827999
    // Sj = 7, 6, 8, 13, 11, 9, 7, 15, 7, 12, 15, 9, 11, 7, 13, 12
    el = fn2(el, al, bl, cl, dl, m[7], 0x5a827999, 7); bl = rotl(bl, 10)
    dl = fn2(dl, el, al, bl, cl, m[4], 0x5a827999, 6); al = rotl(al, 10)
    cl = fn2(cl, dl, el, al, bl, m[13], 0x5a827999, 8); el = rotl(el, 10)
    bl = fn2(bl, cl, dl, el, al, m[1], 0x5a827999, 13); dl = rotl(dl, 10)
    al = fn2(al, bl, cl, dl, el, m[10], 0x5a827999, 11); cl = rotl(cl, 10)
    el = fn2(el, al, bl, cl, dl, m[6], 0x5a827999, 9); bl = rotl(bl, 10)
    dl = fn2(dl, el, al, bl, cl, m[15], 0x5a827999, 7); al = rotl(al, 10)
    cl = fn2(cl, dl, el, al, bl, m[3], 0x5a827999, 15); el = rotl(el, 10)
    bl = fn2(bl, cl, dl, el, al, m[12], 0x5a827999, 7); dl = rotl(dl, 10)
    al = fn2(al, bl, cl, dl, el, m[0], 0x5a827999, 12); cl = rotl(cl, 10)
    el = fn2(el, al, bl, cl, dl, m[9], 0x5a827999, 15); bl = rotl(bl, 10)
    dl = fn2(dl, el, al, bl, cl, m[5], 0x5a827999, 9); al = rotl(al, 10)
    cl = fn2(cl, dl, el, al, bl, m[2], 0x5a827999, 11); el = rotl(el, 10)
    bl = fn2(bl, cl, dl, el, al, m[14], 0x5a827999, 7); dl = rotl(dl, 10)
    al = fn2(al, bl, cl, dl, el, m[11], 0x5a827999, 13); cl = rotl(cl, 10)
    el = fn2(el, al, bl, cl, dl, m[8], 0x5a827999, 12); bl = rotl(bl, 10)
  
    // Mj = 3, 10, 14, 4, 9, 15, 8, 1, 2, 7, 0, 6, 13, 11, 5, 12
    // K = 0x6ed9eba1
    // Sj = 11, 13, 6, 7, 14, 9, 13, 15, 14, 8, 13, 6, 5, 12, 7, 5
    dl = fn3(dl, el, al, bl, cl, m[3], 0x6ed9eba1, 11); al = rotl(al, 10)
    cl = fn3(cl, dl, el, al, bl, m[10], 0x6ed9eba1, 13); el = rotl(el, 10)
    bl = fn3(bl, cl, dl, el, al, m[14], 0x6ed9eba1, 6); dl = rotl(dl, 10)
    al = fn3(al, bl, cl, dl, el, m[4], 0x6ed9eba1, 7); cl = rotl(cl, 10)
    el = fn3(el, al, bl, cl, dl, m[9], 0x6ed9eba1, 14); bl = rotl(bl, 10)
    dl = fn3(dl, el, al, bl, cl, m[15], 0x6ed9eba1, 9); al = rotl(al, 10)
    cl = fn3(cl, dl, el, al, bl, m[8], 0x6ed9eba1, 13); el = rotl(el, 10)
    bl = fn3(bl, cl, dl, el, al, m[1], 0x6ed9eba1, 15); dl = rotl(dl, 10)
    al = fn3(al, bl, cl, dl, el, m[2], 0x6ed9eba1, 14); cl = rotl(cl, 10)
    el = fn3(el, al, bl, cl, dl, m[7], 0x6ed9eba1, 8); bl = rotl(bl, 10)
    dl = fn3(dl, el, al, bl, cl, m[0], 0x6ed9eba1, 13); al = rotl(al, 10)
    cl = fn3(cl, dl, el, al, bl, m[6], 0x6ed9eba1, 6); el = rotl(el, 10)
    bl = fn3(bl, cl, dl, el, al, m[13], 0x6ed9eba1, 5); dl = rotl(dl, 10)
    al = fn3(al, bl, cl, dl, el, m[11], 0x6ed9eba1, 12); cl = rotl(cl, 10)
    el = fn3(el, al, bl, cl, dl, m[5], 0x6ed9eba1, 7); bl = rotl(bl, 10)
    dl = fn3(dl, el, al, bl, cl, m[12], 0x6ed9eba1, 5); al = rotl(al, 10)
  
    // Mj = 1, 9, 11, 10, 0, 8, 12, 4, 13, 3, 7, 15, 14, 5, 6, 2
    // K = 0x8f1bbcdc
    // Sj = 11, 12, 14, 15, 14, 15, 9, 8, 9, 14, 5, 6, 8, 6, 5, 12
    cl = fn4(cl, dl, el, al, bl, m[1], 0x8f1bbcdc, 11); el = rotl(el, 10)
    bl = fn4(bl, cl, dl, el, al, m[9], 0x8f1bbcdc, 12); dl = rotl(dl, 10)
    al = fn4(al, bl, cl, dl, el, m[11], 0x8f1bbcdc, 14); cl = rotl(cl, 10)
    el = fn4(el, al, bl, cl, dl, m[10], 0x8f1bbcdc, 15); bl = rotl(bl, 10)
    dl = fn4(dl, el, al, bl, cl, m[0], 0x8f1bbcdc, 14); al = rotl(al, 10)
    cl = fn4(cl, dl, el, al, bl, m[8], 0x8f1bbcdc, 15); el = rotl(el, 10)
    bl = fn4(bl, cl, dl, el, al, m[12], 0x8f1bbcdc, 9); dl = rotl(dl, 10)
    al = fn4(al, bl, cl, dl, el, m[4], 0x8f1bbcdc, 8); cl = rotl(cl, 10)
    el = fn4(el, al, bl, cl, dl, m[13], 0x8f1bbcdc, 9); bl = rotl(bl, 10)
    dl = fn4(dl, el, al, bl, cl, m[3], 0x8f1bbcdc, 14); al = rotl(al, 10)
    cl = fn4(cl, dl, el, al, bl, m[7], 0x8f1bbcdc, 5); el = rotl(el, 10)
    bl = fn4(bl, cl, dl, el, al, m[15], 0x8f1bbcdc, 6); dl = rotl(dl, 10)
    al = fn4(al, bl, cl, dl, el, m[14], 0x8f1bbcdc, 8); cl = rotl(cl, 10)
    el = fn4(el, al, bl, cl, dl, m[5], 0x8f1bbcdc, 6); bl = rotl(bl, 10)
    dl = fn4(dl, el, al, bl, cl, m[6], 0x8f1bbcdc, 5); al = rotl(al, 10)
    cl = fn4(cl, dl, el, al, bl, m[2], 0x8f1bbcdc, 12); el = rotl(el, 10)
  
    // Mj = 4, 0, 5, 9, 7, 12, 2, 10, 14, 1, 3, 8, 11, 6, 15, 13
    // K = 0xa953fd4e
    // Sj = 9, 15, 5, 11, 6, 8, 13, 12, 5, 12, 13, 14, 11, 8, 5, 6
    bl = fn5(bl, cl, dl, el, al, m[4], 0xa953fd4e, 9); dl = rotl(dl, 10)
    al = fn5(al, bl, cl, dl, el, m[0], 0xa953fd4e, 15); cl = rotl(cl, 10)
    el = fn5(el, al, bl, cl, dl, m[5], 0xa953fd4e, 5); bl = rotl(bl, 10)
    dl = fn5(dl, el, al, bl, cl, m[9], 0xa953fd4e, 11); al = rotl(al, 10)
    cl = fn5(cl, dl, el, al, bl, m[7], 0xa953fd4e, 6); el = rotl(el, 10)
    bl = fn5(bl, cl, dl, el, al, m[12], 0xa953fd4e, 8); dl = rotl(dl, 10)
    al = fn5(al, bl, cl, dl, el, m[2], 0xa953fd4e, 13); cl = rotl(cl, 10)
    el = fn5(el, al, bl, cl, dl, m[10], 0xa953fd4e, 12); bl = rotl(bl, 10)
    dl = fn5(dl, el, al, bl, cl, m[14], 0xa953fd4e, 5); al = rotl(al, 10)
    cl = fn5(cl, dl, el, al, bl, m[1], 0xa953fd4e, 12); el = rotl(el, 10)
    bl = fn5(bl, cl, dl, el, al, m[3], 0xa953fd4e, 13); dl = rotl(dl, 10)
    al = fn5(al, bl, cl, dl, el, m[8], 0xa953fd4e, 14); cl = rotl(cl, 10)
    el = fn5(el, al, bl, cl, dl, m[11], 0xa953fd4e, 11); bl = rotl(bl, 10)
    dl = fn5(dl, el, al, bl, cl, m[6], 0xa953fd4e, 8); al = rotl(al, 10)
    cl = fn5(cl, dl, el, al, bl, m[15], 0xa953fd4e, 5); el = rotl(el, 10)
    bl = fn5(bl, cl, dl, el, al, m[13], 0xa953fd4e, 6); dl = rotl(dl, 10)
  
    var ar = this._a
    var br = this._b
    var cr = this._c
    var dr = this._d
    var er = this._e
  
    // M'j = 5, 14, 7, 0, 9, 2, 11, 4, 13, 6, 15, 8, 1, 10, 3, 12
    // K' = 0x50a28be6
    // S'j = 8, 9, 9, 11, 13, 15, 15, 5, 7, 7, 8, 11, 14, 14, 12, 6
    ar = fn5(ar, br, cr, dr, er, m[5], 0x50a28be6, 8); cr = rotl(cr, 10)
    er = fn5(er, ar, br, cr, dr, m[14], 0x50a28be6, 9); br = rotl(br, 10)
    dr = fn5(dr, er, ar, br, cr, m[7], 0x50a28be6, 9); ar = rotl(ar, 10)
    cr = fn5(cr, dr, er, ar, br, m[0], 0x50a28be6, 11); er = rotl(er, 10)
    br = fn5(br, cr, dr, er, ar, m[9], 0x50a28be6, 13); dr = rotl(dr, 10)
    ar = fn5(ar, br, cr, dr, er, m[2], 0x50a28be6, 15); cr = rotl(cr, 10)
    er = fn5(er, ar, br, cr, dr, m[11], 0x50a28be6, 15); br = rotl(br, 10)
    dr = fn5(dr, er, ar, br, cr, m[4], 0x50a28be6, 5); ar = rotl(ar, 10)
    cr = fn5(cr, dr, er, ar, br, m[13], 0x50a28be6, 7); er = rotl(er, 10)
    br = fn5(br, cr, dr, er, ar, m[6], 0x50a28be6, 7); dr = rotl(dr, 10)
    ar = fn5(ar, br, cr, dr, er, m[15], 0x50a28be6, 8); cr = rotl(cr, 10)
    er = fn5(er, ar, br, cr, dr, m[8], 0x50a28be6, 11); br = rotl(br, 10)
    dr = fn5(dr, er, ar, br, cr, m[1], 0x50a28be6, 14); ar = rotl(ar, 10)
    cr = fn5(cr, dr, er, ar, br, m[10], 0x50a28be6, 14); er = rotl(er, 10)
    br = fn5(br, cr, dr, er, ar, m[3], 0x50a28be6, 12); dr = rotl(dr, 10)
    ar = fn5(ar, br, cr, dr, er, m[12], 0x50a28be6, 6); cr = rotl(cr, 10)
  
    // M'j = 6, 11, 3, 7, 0, 13, 5, 10, 14, 15, 8, 12, 4, 9, 1, 2
    // K' = 0x5c4dd124
    // S'j = 9, 13, 15, 7, 12, 8, 9, 11, 7, 7, 12, 7, 6, 15, 13, 11
    er = fn4(er, ar, br, cr, dr, m[6], 0x5c4dd124, 9); br = rotl(br, 10)
    dr = fn4(dr, er, ar, br, cr, m[11], 0x5c4dd124, 13); ar = rotl(ar, 10)
    cr = fn4(cr, dr, er, ar, br, m[3], 0x5c4dd124, 15); er = rotl(er, 10)
    br = fn4(br, cr, dr, er, ar, m[7], 0x5c4dd124, 7); dr = rotl(dr, 10)
    ar = fn4(ar, br, cr, dr, er, m[0], 0x5c4dd124, 12); cr = rotl(cr, 10)
    er = fn4(er, ar, br, cr, dr, m[13], 0x5c4dd124, 8); br = rotl(br, 10)
    dr = fn4(dr, er, ar, br, cr, m[5], 0x5c4dd124, 9); ar = rotl(ar, 10)
    cr = fn4(cr, dr, er, ar, br, m[10], 0x5c4dd124, 11); er = rotl(er, 10)
    br = fn4(br, cr, dr, er, ar, m[14], 0x5c4dd124, 7); dr = rotl(dr, 10)
    ar = fn4(ar, br, cr, dr, er, m[15], 0x5c4dd124, 7); cr = rotl(cr, 10)
    er = fn4(er, ar, br, cr, dr, m[8], 0x5c4dd124, 12); br = rotl(br, 10)
    dr = fn4(dr, er, ar, br, cr, m[12], 0x5c4dd124, 7); ar = rotl(ar, 10)
    cr = fn4(cr, dr, er, ar, br, m[4], 0x5c4dd124, 6); er = rotl(er, 10)
    br = fn4(br, cr, dr, er, ar, m[9], 0x5c4dd124, 15); dr = rotl(dr, 10)
    ar = fn4(ar, br, cr, dr, er, m[1], 0x5c4dd124, 13); cr = rotl(cr, 10)
    er = fn4(er, ar, br, cr, dr, m[2], 0x5c4dd124, 11); br = rotl(br, 10)
  
    // M'j = 15, 5, 1, 3, 7, 14, 6, 9, 11, 8, 12, 2, 10, 0, 4, 13
    // K' = 0x6d703ef3
    // S'j = 9, 7, 15, 11, 8, 6, 6, 14, 12, 13, 5, 14, 13, 13, 7, 5
    dr = fn3(dr, er, ar, br, cr, m[15], 0x6d703ef3, 9); ar = rotl(ar, 10)
    cr = fn3(cr, dr, er, ar, br, m[5], 0x6d703ef3, 7); er = rotl(er, 10)
    br = fn3(br, cr, dr, er, ar, m[1], 0x6d703ef3, 15); dr = rotl(dr, 10)
    ar = fn3(ar, br, cr, dr, er, m[3], 0x6d703ef3, 11); cr = rotl(cr, 10)
    er = fn3(er, ar, br, cr, dr, m[7], 0x6d703ef3, 8); br = rotl(br, 10)
    dr = fn3(dr, er, ar, br, cr, m[14], 0x6d703ef3, 6); ar = rotl(ar, 10)
    cr = fn3(cr, dr, er, ar, br, m[6], 0x6d703ef3, 6); er = rotl(er, 10)
    br = fn3(br, cr, dr, er, ar, m[9], 0x6d703ef3, 14); dr = rotl(dr, 10)
    ar = fn3(ar, br, cr, dr, er, m[11], 0x6d703ef3, 12); cr = rotl(cr, 10)
    er = fn3(er, ar, br, cr, dr, m[8], 0x6d703ef3, 13); br = rotl(br, 10)
    dr = fn3(dr, er, ar, br, cr, m[12], 0x6d703ef3, 5); ar = rotl(ar, 10)
    cr = fn3(cr, dr, er, ar, br, m[2], 0x6d703ef3, 14); er = rotl(er, 10)
    br = fn3(br, cr, dr, er, ar, m[10], 0x6d703ef3, 13); dr = rotl(dr, 10)
    ar = fn3(ar, br, cr, dr, er, m[0], 0x6d703ef3, 13); cr = rotl(cr, 10)
    er = fn3(er, ar, br, cr, dr, m[4], 0x6d703ef3, 7); br = rotl(br, 10)
    dr = fn3(dr, er, ar, br, cr, m[13], 0x6d703ef3, 5); ar = rotl(ar, 10)
  
    // M'j = 8, 6, 4, 1, 3, 11, 15, 0, 5, 12, 2, 13, 9, 7, 10, 14
    // K' = 0x7a6d76e9
    // S'j = 15, 5, 8, 11, 14, 14, 6, 14, 6, 9, 12, 9, 12, 5, 15, 8
    cr = fn2(cr, dr, er, ar, br, m[8], 0x7a6d76e9, 15); er = rotl(er, 10)
    br = fn2(br, cr, dr, er, ar, m[6], 0x7a6d76e9, 5); dr = rotl(dr, 10)
    ar = fn2(ar, br, cr, dr, er, m[4], 0x7a6d76e9, 8); cr = rotl(cr, 10)
    er = fn2(er, ar, br, cr, dr, m[1], 0x7a6d76e9, 11); br = rotl(br, 10)
    dr = fn2(dr, er, ar, br, cr, m[3], 0x7a6d76e9, 14); ar = rotl(ar, 10)
    cr = fn2(cr, dr, er, ar, br, m[11], 0x7a6d76e9, 14); er = rotl(er, 10)
    br = fn2(br, cr, dr, er, ar, m[15], 0x7a6d76e9, 6); dr = rotl(dr, 10)
    ar = fn2(ar, br, cr, dr, er, m[0], 0x7a6d76e9, 14); cr = rotl(cr, 10)
    er = fn2(er, ar, br, cr, dr, m[5], 0x7a6d76e9, 6); br = rotl(br, 10)
    dr = fn2(dr, er, ar, br, cr, m[12], 0x7a6d76e9, 9); ar = rotl(ar, 10)
    cr = fn2(cr, dr, er, ar, br, m[2], 0x7a6d76e9, 12); er = rotl(er, 10)
    br = fn2(br, cr, dr, er, ar, m[13], 0x7a6d76e9, 9); dr = rotl(dr, 10)
    ar = fn2(ar, br, cr, dr, er, m[9], 0x7a6d76e9, 12); cr = rotl(cr, 10)
    er = fn2(er, ar, br, cr, dr, m[7], 0x7a6d76e9, 5); br = rotl(br, 10)
    dr = fn2(dr, er, ar, br, cr, m[10], 0x7a6d76e9, 15); ar = rotl(ar, 10)
    cr = fn2(cr, dr, er, ar, br, m[14], 0x7a6d76e9, 8); er = rotl(er, 10)
  
    // M'j = 12, 15, 10, 4, 1, 5, 8, 7, 6, 2, 13, 14, 0, 3, 9, 11
    // K' = 0x00000000
    // S'j = 8, 5, 12, 9, 12, 5, 14, 6, 8, 13, 6, 5, 15, 13, 11, 11
    br = fn1(br, cr, dr, er, ar, m[12], 0x00000000, 8); dr = rotl(dr, 10)
    ar = fn1(ar, br, cr, dr, er, m[15], 0x00000000, 5); cr = rotl(cr, 10)
    er = fn1(er, ar, br, cr, dr, m[10], 0x00000000, 12); br = rotl(br, 10)
    dr = fn1(dr, er, ar, br, cr, m[4], 0x00000000, 9); ar = rotl(ar, 10)
    cr = fn1(cr, dr, er, ar, br, m[1], 0x00000000, 12); er = rotl(er, 10)
    br = fn1(br, cr, dr, er, ar, m[5], 0x00000000, 5); dr = rotl(dr, 10)
    ar = fn1(ar, br, cr, dr, er, m[8], 0x00000000, 14); cr = rotl(cr, 10)
    er = fn1(er, ar, br, cr, dr, m[7], 0x00000000, 6); br = rotl(br, 10)
    dr = fn1(dr, er, ar, br, cr, m[6], 0x00000000, 8); ar = rotl(ar, 10)
    cr = fn1(cr, dr, er, ar, br, m[2], 0x00000000, 13); er = rotl(er, 10)
    br = fn1(br, cr, dr, er, ar, m[13], 0x00000000, 6); dr = rotl(dr, 10)
    ar = fn1(ar, br, cr, dr, er, m[14], 0x00000000, 5); cr = rotl(cr, 10)
    er = fn1(er, ar, br, cr, dr, m[0], 0x00000000, 15); br = rotl(br, 10)
    dr = fn1(dr, er, ar, br, cr, m[3], 0x00000000, 13); ar = rotl(ar, 10)
    cr = fn1(cr, dr, er, ar, br, m[9], 0x00000000, 11); er = rotl(er, 10)
    br = fn1(br, cr, dr, er, ar, m[11], 0x00000000, 11); dr = rotl(dr, 10)
  
    // change state
    var t = (this._b + cl + dr) | 0
    this._b = (this._c + dl + er) | 0
    this._c = (this._d + el + ar) | 0
    this._d = (this._e + al + br) | 0
    this._e = (this._a + bl + cr) | 0
    this._a = t
  }
  
  RIPEMD160.prototype._digest = function () {
    // create padding and handle blocks
    this._block[this._blockOffset++] = 0x80
    if (this._blockOffset > 56) {
      this._block.fill(0, this._blockOffset, 64)
      this._update()
      this._blockOffset = 0
    }
  
    this._block.fill(0, this._blockOffset, 56)
    this._block.writeUInt32LE(this._length[0], 56)
    this._block.writeUInt32LE(this._length[1], 60)
    this._update()
  
    // produce result
    var buffer = new Buffer(20)
    buffer.writeInt32LE(this._a, 0)
    buffer.writeInt32LE(this._b, 4)
    buffer.writeInt32LE(this._c, 8)
    buffer.writeInt32LE(this._d, 12)
    buffer.writeInt32LE(this._e, 16)
    return buffer
  }
  
  function rotl (x, n) {
    return (x << n) | (x >>> (32 - n))
  }
  
  function fn1 (a, b, c, d, e, m, k, s) {
    return (rotl((a + (b ^ c ^ d) + m + k) | 0, s) + e) | 0
  }
  
  function fn2 (a, b, c, d, e, m, k, s) {
    return (rotl((a + ((b & c) | ((~b) & d)) + m + k) | 0, s) + e) | 0
  }
  
  function fn3 (a, b, c, d, e, m, k, s) {
    return (rotl((a + ((b | (~c)) ^ d) + m + k) | 0, s) + e) | 0
  }
  
  function fn4 (a, b, c, d, e, m, k, s) {
    return (rotl((a + ((b & d) | (c & (~d))) + m + k) | 0, s) + e) | 0
  }
  
  function fn5 (a, b, c, d, e, m, k, s) {
    return (rotl((a + (b ^ (c | (~d))) + m + k) | 0, s) + e) | 0
  }
  
  module.exports = RIPEMD160
  
  }).call(this,require("buffer").Buffer)
  },{"buffer":84,"hash-base":161,"inherits":180}],289:[function(require,module,exports){
  const assert = require('assert')
  const Buffer = require('safe-buffer').Buffer
  /**
   * RLP Encoding based on: https://github.com/ethereum/wiki/wiki/%5BEnglish%5D-RLP
   * This function takes in a data, convert it to buffer if not, and a length for recursion
   *
   * @param {Buffer,String,Integer,Array} data - will be converted to buffer
   * @returns {Buffer} - returns buffer of encoded data
   **/
  exports.encode = function (input) {
    if (input instanceof Array) {
      var output = []
      for (var i = 0; i < input.length; i++) {
        output.push(exports.encode(input[i]))
      }
      var buf = Buffer.concat(output)
      return Buffer.concat([encodeLength(buf.length, 192), buf])
    } else {
      input = toBuffer(input)
      if (input.length === 1 && input[0] < 128) {
        return input
      } else {
        return Buffer.concat([encodeLength(input.length, 128), input])
      }
    }
  }
  
  function safeParseInt (v, base) {
    if (v.slice(0, 2) === '00') {
      throw (new Error('invalid RLP: extra zeros'))
    }
  
    return parseInt(v, base)
  }
  
  function encodeLength (len, offset) {
    if (len < 56) {
      return Buffer.from([len + offset])
    } else {
      var hexLength = intToHex(len)
      var lLength = hexLength.length / 2
      var firstByte = intToHex(offset + 55 + lLength)
      return Buffer.from(firstByte + hexLength, 'hex')
    }
  }
  
  /**
   * RLP Decoding based on: {@link https://github.com/ethereum/wiki/wiki/%5BEnglish%5D-RLP|RLP}
   * @param {Buffer,String,Integer,Array} data - will be converted to buffer
   * @returns {Array} - returns decode Array of Buffers containing the original message
   **/
  exports.decode = function (input, stream) {
    if (!input || input.length === 0) {
      return Buffer.from([])
    }
  
    input = toBuffer(input)
    var decoded = _decode(input)
  
    if (stream) {
      return decoded
    }
  
    assert.equal(decoded.remainder.length, 0, 'invalid remainder')
    return decoded.data
  }
  
  exports.getLength = function (input) {
    if (!input || input.length === 0) {
      return Buffer.from([])
    }
  
    input = toBuffer(input)
    var firstByte = input[0]
    if (firstByte <= 0x7f) {
      return input.length
    } else if (firstByte <= 0xb7) {
      return firstByte - 0x7f
    } else if (firstByte <= 0xbf) {
      return firstByte - 0xb6
    } else if (firstByte <= 0xf7) {
      // a list between  0-55 bytes long
      return firstByte - 0xbf
    } else {
      // a list  over 55 bytes long
      var llength = firstByte - 0xf6
      var length = safeParseInt(input.slice(1, llength).toString('hex'), 16)
      return llength + length
    }
  }
  
  function _decode (input) {
    var length, llength, data, innerRemainder, d
    var decoded = []
    var firstByte = input[0]
  
    if (firstByte <= 0x7f) {
      // a single byte whose value is in the [0x00, 0x7f] range, that byte is its own RLP encoding.
      return {
        data: input.slice(0, 1),
        remainder: input.slice(1)
      }
    } else if (firstByte <= 0xb7) {
      // string is 0-55 bytes long. A single byte with value 0x80 plus the length of the string followed by the string
      // The range of the first byte is [0x80, 0xb7]
      length = firstByte - 0x7f
  
      // set 0x80 null to 0
      if (firstByte === 0x80) {
        data = Buffer.from([])
      } else {
        data = input.slice(1, length)
      }
  
      if (length === 2 && data[0] < 0x80) {
        throw new Error('invalid rlp encoding: byte must be less 0x80')
      }
  
      return {
        data: data,
        remainder: input.slice(length)
      }
    } else if (firstByte <= 0xbf) {
      llength = firstByte - 0xb6
      length = safeParseInt(input.slice(1, llength).toString('hex'), 16)
      data = input.slice(llength, length + llength)
      if (data.length < length) {
        throw (new Error('invalid RLP'))
      }
  
      return {
        data: data,
        remainder: input.slice(length + llength)
      }
    } else if (firstByte <= 0xf7) {
      // a list between  0-55 bytes long
      length = firstByte - 0xbf
      innerRemainder = input.slice(1, length)
      while (innerRemainder.length) {
        d = _decode(innerRemainder)
        decoded.push(d.data)
        innerRemainder = d.remainder
      }
  
      return {
        data: decoded,
        remainder: input.slice(length)
      }
    } else {
      // a list  over 55 bytes long
      llength = firstByte - 0xf6
      length = safeParseInt(input.slice(1, llength).toString('hex'), 16)
      var totalLength = llength + length
      if (totalLength > input.length) {
        throw new Error('invalid rlp: total length is larger than the data')
      }
  
      innerRemainder = input.slice(llength, totalLength)
      if (innerRemainder.length === 0) {
        throw new Error('invalid rlp, List has a invalid length')
      }
  
      while (innerRemainder.length) {
        d = _decode(innerRemainder)
        decoded.push(d.data)
        innerRemainder = d.remainder
      }
      return {
        data: decoded,
        remainder: input.slice(totalLength)
      }
    }
  }
  
  function isHexPrefixed (str) {
    return str.slice(0, 2) === '0x'
  }
  
  // Removes 0x from a given String
  function stripHexPrefix (str) {
    if (typeof str !== 'string') {
      return str
    }
    return isHexPrefixed(str) ? str.slice(2) : str
  }
  
  function intToHex (i) {
    var hex = i.toString(16)
    if (hex.length % 2) {
      hex = '0' + hex
    }
  
    return hex
  }
  
  function padToEven (a) {
    if (a.length % 2) a = '0' + a
    return a
  }
  
  function intToBuffer (i) {
    var hex = intToHex(i)
    return Buffer.from(hex, 'hex')
  }
  
  function toBuffer (v) {
    if (!Buffer.isBuffer(v)) {
      if (typeof v === 'string') {
        if (isHexPrefixed(v)) {
          v = Buffer.from(padToEven(stripHexPrefix(v)), 'hex')
        } else {
          v = Buffer.from(v)
        }
      } else if (typeof v === 'number') {
        if (!v) {
          v = Buffer.from([])
        } else {
          v = intToBuffer(v)
        }
      } else if (v === null || v === undefined) {
        v = Buffer.from([])
      } else if (v.toArray) {
        // converts a BN to a Buffer
        v = Buffer.from(v.toArray())
      } else {
        throw new Error('invalid type')
      }
    }
    return v
  }
  
  },{"assert":19,"safe-buffer":290}],290:[function(require,module,exports){
  /* eslint-disable node/no-deprecated-api */
  var buffer = require('buffer')
  var Buffer = buffer.Buffer
  
  // alternative to using Object.keys for old browsers
  function copyProps (src, dst) {
    for (var key in src) {
      dst[key] = src[key]
    }
  }
  if (Buffer.from && Buffer.alloc && Buffer.allocUnsafe && Buffer.allocUnsafeSlow) {
    module.exports = buffer
  } else {
    // Copy properties from require('buffer')
    copyProps(buffer, exports)
    exports.Buffer = SafeBuffer
  }
  
  function SafeBuffer (arg, encodingOrOffset, length) {
    return Buffer(arg, encodingOrOffset, length)
  }
  
  // Copy static methods from Buffer
  copyProps(Buffer, SafeBuffer)
  
  SafeBuffer.from = function (arg, encodingOrOffset, length) {
    if (typeof arg === 'number') {
      throw new TypeError('Argument must not be a number')
    }
    return Buffer(arg, encodingOrOffset, length)
  }
  
  SafeBuffer.alloc = function (size, fill, encoding) {
    if (typeof size !== 'number') {
      throw new TypeError('Argument must be a number')
    }
    var buf = Buffer(size)
    if (fill !== undefined) {
      if (typeof encoding === 'string') {
        buf.fill(fill, encoding)
      } else {
        buf.fill(fill)
      }
    } else {
      buf.fill(0)
    }
    return buf
  }
  
  SafeBuffer.allocUnsafe = function (size) {
    if (typeof size !== 'number') {
      throw new TypeError('Argument must be a number')
    }
    return Buffer(size)
  }
  
  SafeBuffer.allocUnsafeSlow = function (size) {
    if (typeof size !== 'number') {
      throw new TypeError('Argument must be a number')
    }
    return buffer.SlowBuffer(size)
  }
  
  },{"buffer":84}],291:[function(require,module,exports){
  const util = require('util')
  const EventEmitter = require('events/')
  
  var R = typeof Reflect === 'object' ? Reflect : null
  var ReflectApply = R && typeof R.apply === 'function'
    ? R.apply
    : function ReflectApply(target, receiver, args) {
      return Function.prototype.apply.call(target, receiver, args);
  }
  
  module.exports = SafeEventEmitter
  
  
  function SafeEventEmitter() {
    EventEmitter.call(this)
  }
  
  util.inherits(SafeEventEmitter, EventEmitter)
  
  SafeEventEmitter.prototype.emit = function (type) {
    // copied from https://github.com/Gozala/events/blob/master/events.js
    // modified lines are commented with "edited:"
    var args = [];
    for (var i = 1; i < arguments.length; i++) args.push(arguments[i]);
    var doError = (type === 'error');
  
    var events = this._events;
    if (events !== undefined)
      doError = (doError && events.error === undefined);
    else if (!doError)
      return false;
  
    // If there is no 'error' event listener then throw.
    if (doError) {
      var er;
      if (args.length > 0)
        er = args[0];
      if (er instanceof Error) {
        // Note: The comments on the `throw` lines are intentional, they show
        // up in Node's output if this results in an unhandled exception.
        throw er; // Unhandled 'error' event
      }
      // At least give some kind of context to the user
      var err = new Error('Unhandled error.' + (er ? ' (' + er.message + ')' : ''));
      err.context = er;
      throw err; // Unhandled 'error' event
    }
  
    var handler = events[type];
  
    if (handler === undefined)
      return false;
  
    if (typeof handler === 'function') {
      // edited: using safeApply
      safeApply(handler, this, args);
    } else {
      var len = handler.length;
      var listeners = arrayClone(handler, len);
      for (var i = 0; i < len; ++i)
        // edited: using safeApply
        safeApply(listeners[i], this, args);
    }
  
    return true;
  }
  
  function safeApply(handler, context, args) {
    try {
      ReflectApply(handler, context, args)
    } catch (err) {
      // throw error after timeout so as not to interrupt the stack
      setTimeout(() => {
        throw err
      })
    }
  }
  
  function arrayClone(arr, n) {
    var copy = new Array(n);
    for (var i = 0; i < n; ++i)
      copy[i] = arr[i];
    return copy;
  }
  
  },{"events/":292,"util":333}],292:[function(require,module,exports){
  // Copyright Joyent, Inc. and other Node contributors.
  //
  // Permission is hereby granted, free of charge, to any person obtaining a
  // copy of this software and associated documentation files (the
  // "Software"), to deal in the Software without restriction, including
  // without limitation the rights to use, copy, modify, merge, publish,
  // distribute, sublicense, and/or sell copies of the Software, and to permit
  // persons to whom the Software is furnished to do so, subject to the
  // following conditions:
  //
  // The above copyright notice and this permission notice shall be included
  // in all copies or substantial portions of the Software.
  //
  // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
  // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
  // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
  // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
  // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
  // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
  // USE OR OTHER DEALINGS IN THE SOFTWARE.
  
  'use strict';
  
  var R = typeof Reflect === 'object' ? Reflect : null
  var ReflectApply = R && typeof R.apply === 'function'
    ? R.apply
    : function ReflectApply(target, receiver, args) {
      return Function.prototype.apply.call(target, receiver, args);
    }
  
  var ReflectOwnKeys
  if (R && typeof R.ownKeys === 'function') {
    ReflectOwnKeys = R.ownKeys
  } else if (Object.getOwnPropertySymbols) {
    ReflectOwnKeys = function ReflectOwnKeys(target) {
      return Object.getOwnPropertyNames(target)
        .concat(Object.getOwnPropertySymbols(target));
    };
  } else {
    ReflectOwnKeys = function ReflectOwnKeys(target) {
      return Object.getOwnPropertyNames(target);
    };
  }
  
  function ProcessEmitWarning(warning) {
    if (console && console.warn) console.warn(warning);
  }
  
  var NumberIsNaN = Number.isNaN || function NumberIsNaN(value) {
    return value !== value;
  }
  
  function EventEmitter() {
    EventEmitter.init.call(this);
  }
  module.exports = EventEmitter;
  
  // Backwards-compat with node 0.10.x
  EventEmitter.EventEmitter = EventEmitter;
  
  EventEmitter.prototype._events = undefined;
  EventEmitter.prototype._eventsCount = 0;
  EventEmitter.prototype._maxListeners = undefined;
  
  // By default EventEmitters will print a warning if more than 10 listeners are
  // added to it. This is a useful default which helps finding memory leaks.
  var defaultMaxListeners = 10;
  
  Object.defineProperty(EventEmitter, 'defaultMaxListeners', {
    enumerable: true,
    get: function() {
      return defaultMaxListeners;
    },
    set: function(arg) {
      if (typeof arg !== 'number' || arg < 0 || NumberIsNaN(arg)) {
        throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received ' + arg + '.');
      }
      defaultMaxListeners = arg;
    }
  });
  
  EventEmitter.init = function() {
  
    if (this._events === undefined ||
        this._events === Object.getPrototypeOf(this)._events) {
      this._events = Object.create(null);
      this._eventsCount = 0;
    }
  
    this._maxListeners = this._maxListeners || undefined;
  };
  
  // Obviously not all Emitters should be limited to 10. This function allows
  // that to be increased. Set to zero for unlimited.
  EventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {
    if (typeof n !== 'number' || n < 0 || NumberIsNaN(n)) {
      throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received ' + n + '.');
    }
    this._maxListeners = n;
    return this;
  };
  
  function $getMaxListeners(that) {
    if (that._maxListeners === undefined)
      return EventEmitter.defaultMaxListeners;
    return that._maxListeners;
  }
  
  EventEmitter.prototype.getMaxListeners = function getMaxListeners() {
    return $getMaxListeners(this);
  };
  
  EventEmitter.prototype.emit = function emit(type) {
    var args = [];
    for (var i = 1; i < arguments.length; i++) args.push(arguments[i]);
    var doError = (type === 'error');
  
    var events = this._events;
    if (events !== undefined)
      doError = (doError && events.error === undefined);
    else if (!doError)
      return false;
  
    // If there is no 'error' event listener then throw.
    if (doError) {
      var er;
      if (args.length > 0)
        er = args[0];
      if (er instanceof Error) {
        // Note: The comments on the `throw` lines are intentional, they show
        // up in Node's output if this results in an unhandled exception.
        throw er; // Unhandled 'error' event
      }
      // At least give some kind of context to the user
      var err = new Error('Unhandled error.' + (er ? ' (' + er.message + ')' : ''));
      err.context = er;
      throw err; // Unhandled 'error' event
    }
  
    var handler = events[type];
  
    if (handler === undefined)
      return false;
  
    if (typeof handler === 'function') {
      ReflectApply(handler, this, args);
    } else {
      var len = handler.length;
      var listeners = arrayClone(handler, len);
      for (var i = 0; i < len; ++i)
        ReflectApply(listeners[i], this, args);
    }
  
    return true;
  };
  
  function _addListener(target, type, listener, prepend) {
    var m;
    var events;
    var existing;
  
    if (typeof listener !== 'function') {
      throw new TypeError('The "listener" argument must be of type Function. Received type ' + typeof listener);
    }
  
    events = target._events;
    if (events === undefined) {
      events = target._events = Object.create(null);
      target._eventsCount = 0;
    } else {
      // To avoid recursion in the case that type === "newListener"! Before
      // adding it to the listeners, first emit "newListener".
      if (events.newListener !== undefined) {
        target.emit('newListener', type,
                    listener.listener ? listener.listener : listener);
  
        // Re-assign `events` because a newListener handler could have caused the
        // this._events to be assigned to a new object
        events = target._events;
      }
      existing = events[type];
    }
  
    if (existing === undefined) {
      // Optimize the case of one listener. Don't need the extra array object.
      existing = events[type] = listener;
      ++target._eventsCount;
    } else {
      if (typeof existing === 'function') {
        // Adding the second element, need to change to array.
        existing = events[type] =
          prepend ? [listener, existing] : [existing, listener];
        // If we've already got an array, just append.
      } else if (prepend) {
        existing.unshift(listener);
      } else {
        existing.push(listener);
      }
  
      // Check for listener leak
      m = $getMaxListeners(target);
      if (m > 0 && existing.length > m && !existing.warned) {
        existing.warned = true;
        // No error code for this since it is a Warning
        // eslint-disable-next-line no-restricted-syntax
        var w = new Error('Possible EventEmitter memory leak detected. ' +
                            existing.length + ' ' + String(type) + ' listeners ' +
                            'added. Use emitter.setMaxListeners() to ' +
                            'increase limit');
        w.name = 'MaxListenersExceededWarning';
        w.emitter = target;
        w.type = type;
        w.count = existing.length;
        ProcessEmitWarning(w);
      }
    }
  
    return target;
  }
  
  EventEmitter.prototype.addListener = function addListener(type, listener) {
    return _addListener(this, type, listener, false);
  };
  
  EventEmitter.prototype.on = EventEmitter.prototype.addListener;
  
  EventEmitter.prototype.prependListener =
      function prependListener(type, listener) {
        return _addListener(this, type, listener, true);
      };
  
  function onceWrapper() {
    var args = [];
    for (var i = 0; i < arguments.length; i++) args.push(arguments[i]);
    if (!this.fired) {
      this.target.removeListener(this.type, this.wrapFn);
      this.fired = true;
      ReflectApply(this.listener, this.target, args);
    }
  }
  
  function _onceWrap(target, type, listener) {
    var state = { fired: false, wrapFn: undefined, target: target, type: type, listener: listener };
    var wrapped = onceWrapper.bind(state);
    wrapped.listener = listener;
    state.wrapFn = wrapped;
    return wrapped;
  }
  
  EventEmitter.prototype.once = function once(type, listener) {
    if (typeof listener !== 'function') {
      throw new TypeError('The "listener" argument must be of type Function. Received type ' + typeof listener);
    }
    this.on(type, _onceWrap(this, type, listener));
    return this;
  };
  
  EventEmitter.prototype.prependOnceListener =
      function prependOnceListener(type, listener) {
        if (typeof listener !== 'function') {
          throw new TypeError('The "listener" argument must be of type Function. Received type ' + typeof listener);
        }
        this.prependListener(type, _onceWrap(this, type, listener));
        return this;
      };
  
  // Emits a 'removeListener' event if and only if the listener was removed.
  EventEmitter.prototype.removeListener =
      function removeListener(type, listener) {
        var list, events, position, i, originalListener;
  
        if (typeof listener !== 'function') {
          throw new TypeError('The "listener" argument must be of type Function. Received type ' + typeof listener);
        }
  
        events = this._events;
        if (events === undefined)
          return this;
  
        list = events[type];
        if (list === undefined)
          return this;
  
        if (list === listener || list.listener === listener) {
          if (--this._eventsCount === 0)
            this._events = Object.create(null);
          else {
            delete events[type];
            if (events.removeListener)
              this.emit('removeListener', type, list.listener || listener);
          }
        } else if (typeof list !== 'function') {
          position = -1;
  
          for (i = list.length - 1; i >= 0; i--) {
            if (list[i] === listener || list[i].listener === listener) {
              originalListener = list[i].listener;
              position = i;
              break;
            }
          }
  
          if (position < 0)
            return this;
  
          if (position === 0)
            list.shift();
          else {
            spliceOne(list, position);
          }
  
          if (list.length === 1)
            events[type] = list[0];
  
          if (events.removeListener !== undefined)
            this.emit('removeListener', type, originalListener || listener);
        }
  
        return this;
      };
  
  EventEmitter.prototype.off = EventEmitter.prototype.removeListener;
  
  EventEmitter.prototype.removeAllListeners =
      function removeAllListeners(type) {
        var listeners, events, i;
  
        events = this._events;
        if (events === undefined)
          return this;
  
        // not listening for removeListener, no need to emit
        if (events.removeListener === undefined) {
          if (arguments.length === 0) {
            this._events = Object.create(null);
            this._eventsCount = 0;
          } else if (events[type] !== undefined) {
            if (--this._eventsCount === 0)
              this._events = Object.create(null);
            else
              delete events[type];
          }
          return this;
        }
  
        // emit removeListener for all listeners on all events
        if (arguments.length === 0) {
          var keys = Object.keys(events);
          var key;
          for (i = 0; i < keys.length; ++i) {
            key = keys[i];
            if (key === 'removeListener') continue;
            this.removeAllListeners(key);
          }
          this.removeAllListeners('removeListener');
          this._events = Object.create(null);
          this._eventsCount = 0;
          return this;
        }
  
        listeners = events[type];
  
        if (typeof listeners === 'function') {
          this.removeListener(type, listeners);
        } else if (listeners !== undefined) {
          // LIFO order
          for (i = listeners.length - 1; i >= 0; i--) {
            this.removeListener(type, listeners[i]);
          }
        }
  
        return this;
      };
  
  function _listeners(target, type, unwrap) {
    var events = target._events;
  
    if (events === undefined)
      return [];
  
    var evlistener = events[type];
    if (evlistener === undefined)
      return [];
  
    if (typeof evlistener === 'function')
      return unwrap ? [evlistener.listener || evlistener] : [evlistener];
  
    return unwrap ?
      unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);
  }
  
  EventEmitter.prototype.listeners = function listeners(type) {
    return _listeners(this, type, true);
  };
  
  EventEmitter.prototype.rawListeners = function rawListeners(type) {
    return _listeners(this, type, false);
  };
  
  EventEmitter.listenerCount = function(emitter, type) {
    if (typeof emitter.listenerCount === 'function') {
      return emitter.listenerCount(type);
    } else {
      return listenerCount.call(emitter, type);
    }
  };
  
  EventEmitter.prototype.listenerCount = listenerCount;
  function listenerCount(type) {
    var events = this._events;
  
    if (events !== undefined) {
      var evlistener = events[type];
  
      if (typeof evlistener === 'function') {
        return 1;
      } else if (evlistener !== undefined) {
        return evlistener.length;
      }
    }
  
    return 0;
  }
  
  EventEmitter.prototype.eventNames = function eventNames() {
    return this._eventsCount > 0 ? ReflectOwnKeys(this._events) : [];
  };
  
  function arrayClone(arr, n) {
    var copy = new Array(n);
    for (var i = 0; i < n; ++i)
      copy[i] = arr[i];
    return copy;
  }
  
  function spliceOne(list, index) {
    for (; index + 1 < list.length; index++)
      list[index] = list[index + 1];
    list.pop();
  }
  
  function unwrapListeners(arr) {
    var ret = new Array(arr.length);
    for (var i = 0; i < ret.length; ++i) {
      ret[i] = arr[i].listener || arr[i];
    }
    return ret;
  }
  
  },{}],293:[function(require,module,exports){
  module.exports = require('scryptsy')
  
  },{"scryptsy":294}],294:[function(require,module,exports){
  (function (Buffer){
  var pbkdf2Sync = require('pbkdf2').pbkdf2Sync
  
  var MAX_VALUE = 0x7fffffff
  
  // N = Cpu cost, r = Memory cost, p = parallelization cost
  function scrypt (key, salt, N, r, p, dkLen, progressCallback) {
    if (N === 0 || (N & (N - 1)) !== 0) throw Error('N must be > 0 and a power of 2')
  
    if (N > MAX_VALUE / 128 / r) throw Error('Parameter N is too large')
    if (r > MAX_VALUE / 128 / p) throw Error('Parameter r is too large')
  
    var XY = new Buffer(256 * r)
    var V = new Buffer(128 * r * N)
  
    // pseudo global
    var B32 = new Int32Array(16) // salsa20_8
    var x = new Int32Array(16) // salsa20_8
    var _X = new Buffer(64) // blockmix_salsa8
  
    // pseudo global
    var B = pbkdf2Sync(key, salt, 1, p * 128 * r, 'sha256')
  
    var tickCallback
    if (progressCallback) {
      var totalOps = p * N * 2
      var currentOp = 0
  
      tickCallback = function () {
        ++currentOp
  
        // send progress notifications once every 1,000 ops
        if (currentOp % 1000 === 0) {
          progressCallback({
            current: currentOp,
            total: totalOps,
            percent: (currentOp / totalOps) * 100.0
          })
        }
      }
    }
  
    for (var i = 0; i < p; i++) {
      smix(B, i * 128 * r, r, N, V, XY)
    }
  
    return pbkdf2Sync(key, B, 1, dkLen, 'sha256')
  
    // all of these functions are actually moved to the top
    // due to function hoisting
  
    function smix (B, Bi, r, N, V, XY) {
      var Xi = 0
      var Yi = 128 * r
      var i
  
      B.copy(XY, Xi, Bi, Bi + Yi)
  
      for (i = 0; i < N; i++) {
        XY.copy(V, i * Yi, Xi, Xi + Yi)
        blockmix_salsa8(XY, Xi, Yi, r)
  
        if (tickCallback) tickCallback()
      }
  
      for (i = 0; i < N; i++) {
        var offset = Xi + (2 * r - 1) * 64
        var j = XY.readUInt32LE(offset) & (N - 1)
        blockxor(V, j * Yi, XY, Xi, Yi)
        blockmix_salsa8(XY, Xi, Yi, r)
  
        if (tickCallback) tickCallback()
      }
  
      XY.copy(B, Bi, Xi, Xi + Yi)
    }
  
    function blockmix_salsa8 (BY, Bi, Yi, r) {
      var i
  
      arraycopy(BY, Bi + (2 * r - 1) * 64, _X, 0, 64)
  
      for (i = 0; i < 2 * r; i++) {
        blockxor(BY, i * 64, _X, 0, 64)
        salsa20_8(_X)
        arraycopy(_X, 0, BY, Yi + (i * 64), 64)
      }
  
      for (i = 0; i < r; i++) {
        arraycopy(BY, Yi + (i * 2) * 64, BY, Bi + (i * 64), 64)
      }
  
      for (i = 0; i < r; i++) {
        arraycopy(BY, Yi + (i * 2 + 1) * 64, BY, Bi + (i + r) * 64, 64)
      }
    }
  
    function R (a, b) {
      return (a << b) | (a >>> (32 - b))
    }
  
    function salsa20_8 (B) {
      var i
  
      for (i = 0; i < 16; i++) {
        B32[i] = (B[i * 4 + 0] & 0xff) << 0
        B32[i] |= (B[i * 4 + 1] & 0xff) << 8
        B32[i] |= (B[i * 4 + 2] & 0xff) << 16
        B32[i] |= (B[i * 4 + 3] & 0xff) << 24
        // B32[i] = B.readUInt32LE(i*4)   <--- this is significantly slower even in Node.js
      }
  
      arraycopy(B32, 0, x, 0, 16)
  
      for (i = 8; i > 0; i -= 2) {
        x[ 4] ^= R(x[ 0] + x[12], 7)
        x[ 8] ^= R(x[ 4] + x[ 0], 9)
        x[12] ^= R(x[ 8] + x[ 4], 13)
        x[ 0] ^= R(x[12] + x[ 8], 18)
        x[ 9] ^= R(x[ 5] + x[ 1], 7)
        x[13] ^= R(x[ 9] + x[ 5], 9)
        x[ 1] ^= R(x[13] + x[ 9], 13)
        x[ 5] ^= R(x[ 1] + x[13], 18)
        x[14] ^= R(x[10] + x[ 6], 7)
        x[ 2] ^= R(x[14] + x[10], 9)
        x[ 6] ^= R(x[ 2] + x[14], 13)
        x[10] ^= R(x[ 6] + x[ 2], 18)
        x[ 3] ^= R(x[15] + x[11], 7)
        x[ 7] ^= R(x[ 3] + x[15], 9)
        x[11] ^= R(x[ 7] + x[ 3], 13)
        x[15] ^= R(x[11] + x[ 7], 18)
        x[ 1] ^= R(x[ 0] + x[ 3], 7)
        x[ 2] ^= R(x[ 1] + x[ 0], 9)
        x[ 3] ^= R(x[ 2] + x[ 1], 13)
        x[ 0] ^= R(x[ 3] + x[ 2], 18)
        x[ 6] ^= R(x[ 5] + x[ 4], 7)
        x[ 7] ^= R(x[ 6] + x[ 5], 9)
        x[ 4] ^= R(x[ 7] + x[ 6], 13)
        x[ 5] ^= R(x[ 4] + x[ 7], 18)
        x[11] ^= R(x[10] + x[ 9], 7)
        x[ 8] ^= R(x[11] + x[10], 9)
        x[ 9] ^= R(x[ 8] + x[11], 13)
        x[10] ^= R(x[ 9] + x[ 8], 18)
        x[12] ^= R(x[15] + x[14], 7)
        x[13] ^= R(x[12] + x[15], 9)
        x[14] ^= R(x[13] + x[12], 13)
        x[15] ^= R(x[14] + x[13], 18)
      }
  
      for (i = 0; i < 16; ++i) B32[i] = x[i] + B32[i]
  
      for (i = 0; i < 16; i++) {
        var bi = i * 4
        B[bi + 0] = (B32[i] >> 0 & 0xff)
        B[bi + 1] = (B32[i] >> 8 & 0xff)
        B[bi + 2] = (B32[i] >> 16 & 0xff)
        B[bi + 3] = (B32[i] >> 24 & 0xff)
        // B.writeInt32LE(B32[i], i*4)  //<--- this is significantly slower even in Node.js
      }
    }
  
    // naive approach... going back to loop unrolling may yield additional performance
    function blockxor (S, Si, D, Di, len) {
      for (var i = 0; i < len; i++) {
        D[Di + i] ^= S[Si + i]
      }
    }
  }
  
  function arraycopy (src, srcPos, dest, destPos, length) {
    if (Buffer.isBuffer(src) && Buffer.isBuffer(dest)) {
      src.copy(dest, destPos, srcPos, srcPos + length)
    } else {
      while (length--) {
        dest[destPos++] = src[srcPos++]
      }
    }
  }
  
  module.exports = scrypt
  
  }).call(this,require("buffer").Buffer)
  },{"buffer":84,"pbkdf2":247}],295:[function(require,module,exports){
  'use strict'
  module.exports = require('./lib')(require('./lib/elliptic'))
  
  },{"./lib":299,"./lib/elliptic":298}],296:[function(require,module,exports){
  (function (Buffer){
  'use strict'
  var toString = Object.prototype.toString
  
  // TypeError
  exports.isArray = function (value, message) {
    if (!Array.isArray(value)) throw TypeError(message)
  }
  
  exports.isBoolean = function (value, message) {
    if (toString.call(value) !== '[object Boolean]') throw TypeError(message)
  }
  
  exports.isBuffer = function (value, message) {
    if (!Buffer.isBuffer(value)) throw TypeError(message)
  }
  
  exports.isFunction = function (value, message) {
    if (toString.call(value) !== '[object Function]') throw TypeError(message)
  }
  
  exports.isNumber = function (value, message) {
    if (toString.call(value) !== '[object Number]') throw TypeError(message)
  }
  
  exports.isObject = function (value, message) {
    if (toString.call(value) !== '[object Object]') throw TypeError(message)
  }
  
  // RangeError
  exports.isBufferLength = function (buffer, length, message) {
    if (buffer.length !== length) throw RangeError(message)
  }
  
  exports.isBufferLength2 = function (buffer, length1, length2, message) {
    if (buffer.length !== length1 && buffer.length !== length2) throw RangeError(message)
  }
  
  exports.isLengthGTZero = function (value, message) {
    if (value.length === 0) throw RangeError(message)
  }
  
  exports.isNumberInInterval = function (number, x, y, message) {
    if (number <= x || number >= y) throw RangeError(message)
  }
  
  }).call(this,{"isBuffer":require("../../is-buffer/index.js")})
  },{"../../is-buffer/index.js":181}],297:[function(require,module,exports){
  'use strict'
  var Buffer = require('safe-buffer').Buffer
  var bip66 = require('bip66')
  
  var EC_PRIVKEY_EXPORT_DER_COMPRESSED = Buffer.from([
    // begin
    0x30, 0x81, 0xd3, 0x02, 0x01, 0x01, 0x04, 0x20,
    // private key
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    // middle
    0xa0, 0x81, 0x85, 0x30, 0x81, 0x82, 0x02, 0x01, 0x01, 0x30, 0x2c, 0x06, 0x07, 0x2a, 0x86, 0x48,
    0xcE, 0x3d, 0x01, 0x01, 0x02, 0x21, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xfE, 0xff, 0xff, 0xfc, 0x2f, 0x30, 0x06, 0x04, 0x01, 0x00, 0x04, 0x01, 0x07, 0x04,
    0x21, 0x02, 0x79, 0xbE, 0x66, 0x7E, 0xf9, 0xdc, 0xbb, 0xac, 0x55, 0xa0, 0x62, 0x95, 0xcE, 0x87,
    0x0b, 0x07, 0x02, 0x9b, 0xfc, 0xdb, 0x2d, 0xcE, 0x28, 0xd9, 0x59, 0xf2, 0x81, 0x5b, 0x16, 0xf8,
    0x17, 0x98, 0x02, 0x21, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xfE, 0xba, 0xaE, 0xdc, 0xE6, 0xaf, 0x48, 0xa0, 0x3b, 0xbf, 0xd2, 0x5E,
    0x8c, 0xd0, 0x36, 0x41, 0x41, 0x02, 0x01, 0x01, 0xa1, 0x24, 0x03, 0x22, 0x00,
    // public key
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00
  ])
  
  var EC_PRIVKEY_EXPORT_DER_UNCOMPRESSED = Buffer.from([
    // begin
    0x30, 0x82, 0x01, 0x13, 0x02, 0x01, 0x01, 0x04, 0x20,
    // private key
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    // middle
    0xa0, 0x81, 0xa5, 0x30, 0x81, 0xa2, 0x02, 0x01, 0x01, 0x30, 0x2c, 0x06, 0x07, 0x2a, 0x86, 0x48,
    0xcE, 0x3d, 0x01, 0x01, 0x02, 0x21, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xfE, 0xff, 0xff, 0xfc, 0x2f, 0x30, 0x06, 0x04, 0x01, 0x00, 0x04, 0x01, 0x07, 0x04,
    0x41, 0x04, 0x79, 0xbE, 0x66, 0x7E, 0xf9, 0xdc, 0xbb, 0xac, 0x55, 0xa0, 0x62, 0x95, 0xcE, 0x87,
    0x0b, 0x07, 0x02, 0x9b, 0xfc, 0xdb, 0x2d, 0xcE, 0x28, 0xd9, 0x59, 0xf2, 0x81, 0x5b, 0x16, 0xf8,
    0x17, 0x98, 0x48, 0x3a, 0xda, 0x77, 0x26, 0xa3, 0xc4, 0x65, 0x5d, 0xa4, 0xfb, 0xfc, 0x0E, 0x11,
    0x08, 0xa8, 0xfd, 0x17, 0xb4, 0x48, 0xa6, 0x85, 0x54, 0x19, 0x9c, 0x47, 0xd0, 0x8f, 0xfb, 0x10,
    0xd4, 0xb8, 0x02, 0x21, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xfE, 0xba, 0xaE, 0xdc, 0xE6, 0xaf, 0x48, 0xa0, 0x3b, 0xbf, 0xd2, 0x5E,
    0x8c, 0xd0, 0x36, 0x41, 0x41, 0x02, 0x01, 0x01, 0xa1, 0x44, 0x03, 0x42, 0x00,
    // public key
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00
  ])
  
  exports.privateKeyExport = function (privateKey, publicKey, compressed) {
    var result = Buffer.from(compressed ? EC_PRIVKEY_EXPORT_DER_COMPRESSED : EC_PRIVKEY_EXPORT_DER_UNCOMPRESSED)
    privateKey.copy(result, compressed ? 8 : 9)
    publicKey.copy(result, compressed ? 181 : 214)
    return result
  }
  
  exports.privateKeyImport = function (privateKey) {
    var length = privateKey.length
  
    // sequence header
    var index = 0
    if (length < index + 1 || privateKey[index] !== 0x30) return
    index += 1
  
    // sequence length constructor
    if (length < index + 1 || !(privateKey[index] & 0x80)) return
  
    var lenb = privateKey[index] & 0x7f
    index += 1
    if (lenb < 1 || lenb > 2) return
    if (length < index + lenb) return
  
    // sequence length
    var len = privateKey[index + lenb - 1] | (lenb > 1 ? privateKey[index + lenb - 2] << 8 : 0)
    index += lenb
    if (length < index + len) return
  
    // sequence element 0: version number (=1)
    if (length < index + 3 ||
        privateKey[index] !== 0x02 ||
        privateKey[index + 1] !== 0x01 ||
        privateKey[index + 2] !== 0x01) {
      return
    }
    index += 3
  
    // sequence element 1: octet string, up to 32 bytes
    if (length < index + 2 ||
        privateKey[index] !== 0x04 ||
        privateKey[index + 1] > 0x20 ||
        length < index + 2 + privateKey[index + 1]) {
      return
    }
  
    return privateKey.slice(index + 2, index + 2 + privateKey[index + 1])
  }
  
  exports.signatureExport = function (sigObj) {
    var r = Buffer.concat([Buffer.from([0]), sigObj.r])
    for (var lenR = 33, posR = 0; lenR > 1 && r[posR] === 0x00 && !(r[posR + 1] & 0x80); --lenR, ++posR);
  
    var s = Buffer.concat([Buffer.from([0]), sigObj.s])
    for (var lenS = 33, posS = 0; lenS > 1 && s[posS] === 0x00 && !(s[posS + 1] & 0x80); --lenS, ++posS);
  
    return bip66.encode(r.slice(posR), s.slice(posS))
  }
  
  exports.signatureImport = function (sig) {
    var r = Buffer.alloc(32, 0)
    var s = Buffer.alloc(32, 0)
  
    try {
      var sigObj = bip66.decode(sig)
      if (sigObj.r.length === 33 && sigObj.r[0] === 0x00) sigObj.r = sigObj.r.slice(1)
      if (sigObj.r.length > 32) throw new Error('R length is too long')
      if (sigObj.s.length === 33 && sigObj.s[0] === 0x00) sigObj.s = sigObj.s.slice(1)
      if (sigObj.s.length > 32) throw new Error('S length is too long')
    } catch (err) {
      return
    }
  
    sigObj.r.copy(r, 32 - sigObj.r.length)
    sigObj.s.copy(s, 32 - sigObj.s.length)
  
    return { r: r, s: s }
  }
  
  exports.signatureImportLax = function (sig) {
    var r = Buffer.alloc(32, 0)
    var s = Buffer.alloc(32, 0)
  
    var length = sig.length
    var index = 0
  
    // sequence tag byte
    if (sig[index++] !== 0x30) return
  
    // sequence length byte
    var lenbyte = sig[index++]
    if (lenbyte & 0x80) {
      index += lenbyte - 0x80
      if (index > length) return
    }
  
    // sequence tag byte for r
    if (sig[index++] !== 0x02) return
  
    // length for r
    var rlen = sig[index++]
    if (rlen & 0x80) {
      lenbyte = rlen - 0x80
      if (index + lenbyte > length) return
      for (; lenbyte > 0 && sig[index] === 0x00; index += 1, lenbyte -= 1);
      for (rlen = 0; lenbyte > 0; index += 1, lenbyte -= 1) rlen = (rlen << 8) + sig[index]
    }
    if (rlen > length - index) return
    var rindex = index
    index += rlen
  
    // sequence tag byte for s
    if (sig[index++] !== 0x02) return
  
    // length for s
    var slen = sig[index++]
    if (slen & 0x80) {
      lenbyte = slen - 0x80
      if (index + lenbyte > length) return
      for (; lenbyte > 0 && sig[index] === 0x00; index += 1, lenbyte -= 1);
      for (slen = 0; lenbyte > 0; index += 1, lenbyte -= 1) slen = (slen << 8) + sig[index]
    }
    if (slen > length - index) return
    var sindex = index
    index += slen
  
    // ignore leading zeros in r
    for (; rlen > 0 && sig[rindex] === 0x00; rlen -= 1, rindex += 1);
    // copy r value
    if (rlen > 32) return
    var rvalue = sig.slice(rindex, rindex + rlen)
    rvalue.copy(r, 32 - rvalue.length)
  
    // ignore leading zeros in s
    for (; slen > 0 && sig[sindex] === 0x00; slen -= 1, sindex += 1);
    // copy s value
    if (slen > 32) return
    var svalue = sig.slice(sindex, sindex + slen)
    svalue.copy(s, 32 - svalue.length)
  
    return { r: r, s: s }
  }
  
  },{"bip66":52,"safe-buffer":290}],298:[function(require,module,exports){
  'use strict'
  var Buffer = require('safe-buffer').Buffer
  var createHash = require('create-hash')
  var BN = require('bn.js')
  var EC = require('elliptic').ec
  
  var messages = require('../messages.json')
  
  var ec = new EC('secp256k1')
  var ecparams = ec.curve
  
  function loadCompressedPublicKey (first, xBuffer) {
    var x = new BN(xBuffer)
  
    // overflow
    if (x.cmp(ecparams.p) >= 0) return null
    x = x.toRed(ecparams.red)
  
    // compute corresponding Y
    var y = x.redSqr().redIMul(x).redIAdd(ecparams.b).redSqrt()
    if ((first === 0x03) !== y.isOdd()) y = y.redNeg()
  
    return ec.keyPair({ pub: { x: x, y: y } })
  }
  
  function loadUncompressedPublicKey (first, xBuffer, yBuffer) {
    var x = new BN(xBuffer)
    var y = new BN(yBuffer)
  
    // overflow
    if (x.cmp(ecparams.p) >= 0 || y.cmp(ecparams.p) >= 0) return null
  
    x = x.toRed(ecparams.red)
    y = y.toRed(ecparams.red)
  
    // is odd flag
    if ((first === 0x06 || first === 0x07) && y.isOdd() !== (first === 0x07)) return null
  
    // x*x*x + b = y*y
    var x3 = x.redSqr().redIMul(x)
    if (!y.redSqr().redISub(x3.redIAdd(ecparams.b)).isZero()) return null
  
    return ec.keyPair({ pub: { x: x, y: y } })
  }
  
  function loadPublicKey (publicKey) {
    var first = publicKey[0]
    switch (first) {
      case 0x02:
      case 0x03:
        if (publicKey.length !== 33) return null
        return loadCompressedPublicKey(first, publicKey.slice(1, 33))
      case 0x04:
      case 0x06:
      case 0x07:
        if (publicKey.length !== 65) return null
        return loadUncompressedPublicKey(first, publicKey.slice(1, 33), publicKey.slice(33, 65))
      default:
        return null
    }
  }
  
  exports.privateKeyVerify = function (privateKey) {
    var bn = new BN(privateKey)
    return bn.cmp(ecparams.n) < 0 && !bn.isZero()
  }
  
  exports.privateKeyExport = function (privateKey, compressed) {
    var d = new BN(privateKey)
    if (d.cmp(ecparams.n) >= 0 || d.isZero()) throw new Error(messages.EC_PRIVATE_KEY_EXPORT_DER_FAIL)
  
    return Buffer.from(ec.keyFromPrivate(privateKey).getPublic(compressed, true))
  }
  
  exports.privateKeyNegate = function (privateKey) {
    var bn = new BN(privateKey)
    return bn.isZero() ? Buffer.alloc(32) : ecparams.n.sub(bn).umod(ecparams.n).toArrayLike(Buffer, 'be', 32)
  }
  
  exports.privateKeyModInverse = function (privateKey) {
    var bn = new BN(privateKey)
    if (bn.cmp(ecparams.n) >= 0 || bn.isZero()) throw new Error(messages.EC_PRIVATE_KEY_RANGE_INVALID)
  
    return bn.invm(ecparams.n).toArrayLike(Buffer, 'be', 32)
  }
  
  exports.privateKeyTweakAdd = function (privateKey, tweak) {
    var bn = new BN(tweak)
    if (bn.cmp(ecparams.n) >= 0) throw new Error(messages.EC_PRIVATE_KEY_TWEAK_ADD_FAIL)
  
    bn.iadd(new BN(privateKey))
    if (bn.cmp(ecparams.n) >= 0) bn.isub(ecparams.n)
    if (bn.isZero()) throw new Error(messages.EC_PRIVATE_KEY_TWEAK_ADD_FAIL)
  
    return bn.toArrayLike(Buffer, 'be', 32)
  }
  
  exports.privateKeyTweakMul = function (privateKey, tweak) {
    var bn = new BN(tweak)
    if (bn.cmp(ecparams.n) >= 0 || bn.isZero()) throw new Error(messages.EC_PRIVATE_KEY_TWEAK_MUL_FAIL)
  
    bn.imul(new BN(privateKey))
    if (bn.cmp(ecparams.n)) bn = bn.umod(ecparams.n)
  
    return bn.toArrayLike(Buffer, 'be', 32)
  }
  
  exports.publicKeyCreate = function (privateKey, compressed) {
    var d = new BN(privateKey)
    if (d.cmp(ecparams.n) >= 0 || d.isZero()) throw new Error(messages.EC_PUBLIC_KEY_CREATE_FAIL)
  
    return Buffer.from(ec.keyFromPrivate(privateKey).getPublic(compressed, true))
  }
  
  exports.publicKeyConvert = function (publicKey, compressed) {
    var pair = loadPublicKey(publicKey)
    if (pair === null) throw new Error(messages.EC_PUBLIC_KEY_PARSE_FAIL)
  
    return Buffer.from(pair.getPublic(compressed, true))
  }
  
  exports.publicKeyVerify = function (publicKey) {
    return loadPublicKey(publicKey) !== null
  }
  
  exports.publicKeyTweakAdd = function (publicKey, tweak, compressed) {
    var pair = loadPublicKey(publicKey)
    if (pair === null) throw new Error(messages.EC_PUBLIC_KEY_PARSE_FAIL)
  
    tweak = new BN(tweak)
    if (tweak.cmp(ecparams.n) >= 0) throw new Error(messages.EC_PUBLIC_KEY_TWEAK_ADD_FAIL)
  
    return Buffer.from(ecparams.g.mul(tweak).add(pair.pub).encode(true, compressed))
  }
  
  exports.publicKeyTweakMul = function (publicKey, tweak, compressed) {
    var pair = loadPublicKey(publicKey)
    if (pair === null) throw new Error(messages.EC_PUBLIC_KEY_PARSE_FAIL)
  
    tweak = new BN(tweak)
    if (tweak.cmp(ecparams.n) >= 0 || tweak.isZero()) throw new Error(messages.EC_PUBLIC_KEY_TWEAK_MUL_FAIL)
  
    return Buffer.from(pair.pub.mul(tweak).encode(true, compressed))
  }
  
  exports.publicKeyCombine = function (publicKeys, compressed) {
    var pairs = new Array(publicKeys.length)
    for (var i = 0; i < publicKeys.length; ++i) {
      pairs[i] = loadPublicKey(publicKeys[i])
      if (pairs[i] === null) throw new Error(messages.EC_PUBLIC_KEY_PARSE_FAIL)
    }
  
    var point = pairs[0].pub
    for (var j = 1; j < pairs.length; ++j) point = point.add(pairs[j].pub)
    if (point.isInfinity()) throw new Error(messages.EC_PUBLIC_KEY_COMBINE_FAIL)
  
    return Buffer.from(point.encode(true, compressed))
  }
  
  exports.signatureNormalize = function (signature) {
    var r = new BN(signature.slice(0, 32))
    var s = new BN(signature.slice(32, 64))
    if (r.cmp(ecparams.n) >= 0 || s.cmp(ecparams.n) >= 0) throw new Error(messages.ECDSA_SIGNATURE_PARSE_FAIL)
  
    var result = Buffer.from(signature)
    if (s.cmp(ec.nh) === 1) ecparams.n.sub(s).toArrayLike(Buffer, 'be', 32).copy(result, 32)
  
    return result
  }
  
  exports.signatureExport = function (signature) {
    var r = signature.slice(0, 32)
    var s = signature.slice(32, 64)
    if (new BN(r).cmp(ecparams.n) >= 0 || new BN(s).cmp(ecparams.n) >= 0) throw new Error(messages.ECDSA_SIGNATURE_PARSE_FAIL)
  
    return { r: r, s: s }
  }
  
  exports.signatureImport = function (sigObj) {
    var r = new BN(sigObj.r)
    if (r.cmp(ecparams.n) >= 0) r = new BN(0)
  
    var s = new BN(sigObj.s)
    if (s.cmp(ecparams.n) >= 0) s = new BN(0)
  
    return Buffer.concat([
      r.toArrayLike(Buffer, 'be', 32),
      s.toArrayLike(Buffer, 'be', 32)
    ])
  }
  
  exports.sign = function (message, privateKey, noncefn, data) {
    if (typeof noncefn === 'function') {
      var getNonce = noncefn
      noncefn = function (counter) {
        var nonce = getNonce(message, privateKey, null, data, counter)
        if (!Buffer.isBuffer(nonce) || nonce.length !== 32) throw new Error(messages.ECDSA_SIGN_FAIL)
  
        return new BN(nonce)
      }
    }
  
    var d = new BN(privateKey)
    if (d.cmp(ecparams.n) >= 0 || d.isZero()) throw new Error(messages.ECDSA_SIGN_FAIL)
  
    var result = ec.sign(message, privateKey, { canonical: true, k: noncefn, pers: data })
    return {
      signature: Buffer.concat([
        result.r.toArrayLike(Buffer, 'be', 32),
        result.s.toArrayLike(Buffer, 'be', 32)
      ]),
      recovery: result.recoveryParam
    }
  }
  
  exports.verify = function (message, signature, publicKey) {
    var sigObj = {r: signature.slice(0, 32), s: signature.slice(32, 64)}
  
    var sigr = new BN(sigObj.r)
    var sigs = new BN(sigObj.s)
    if (sigr.cmp(ecparams.n) >= 0 || sigs.cmp(ecparams.n) >= 0) throw new Error(messages.ECDSA_SIGNATURE_PARSE_FAIL)
    if (sigs.cmp(ec.nh) === 1 || sigr.isZero() || sigs.isZero()) return false
  
    var pair = loadPublicKey(publicKey)
    if (pair === null) throw new Error(messages.EC_PUBLIC_KEY_PARSE_FAIL)
  
    return ec.verify(message, sigObj, {x: pair.pub.x, y: pair.pub.y})
  }
  
  exports.recover = function (message, signature, recovery, compressed) {
    var sigObj = {r: signature.slice(0, 32), s: signature.slice(32, 64)}
  
    var sigr = new BN(sigObj.r)
    var sigs = new BN(sigObj.s)
    if (sigr.cmp(ecparams.n) >= 0 || sigs.cmp(ecparams.n) >= 0) throw new Error(messages.ECDSA_SIGNATURE_PARSE_FAIL)
  
    try {
      if (sigr.isZero() || sigs.isZero()) throw new Error()
  
      var point = ec.recoverPubKey(message, sigObj, recovery)
      return Buffer.from(point.encode(true, compressed))
    } catch (err) {
      throw new Error(messages.ECDSA_RECOVER_FAIL)
    }
  }
  
  exports.ecdh = function (publicKey, privateKey) {
    var shared = exports.ecdhUnsafe(publicKey, privateKey, true)
    return createHash('sha256').update(shared).digest()
  }
  
  exports.ecdhUnsafe = function (publicKey, privateKey, compressed) {
    var pair = loadPublicKey(publicKey)
    if (pair === null) throw new Error(messages.EC_PUBLIC_KEY_PARSE_FAIL)
  
    var scalar = new BN(privateKey)
    if (scalar.cmp(ecparams.n) >= 0 || scalar.isZero()) throw new Error(messages.ECDH_FAIL)
  
    return Buffer.from(pair.pub.mul(scalar).encode(true, compressed))
  }
  
  },{"../messages.json":300,"bn.js":53,"create-hash":91,"elliptic":109,"safe-buffer":290}],299:[function(require,module,exports){
  'use strict'
  var assert = require('./assert')
  var der = require('./der')
  var messages = require('./messages.json')
  
  function initCompressedValue (value, defaultValue) {
    if (value === undefined) return defaultValue
  
    assert.isBoolean(value, messages.COMPRESSED_TYPE_INVALID)
    return value
  }
  
  module.exports = function (secp256k1) {
    return {
      privateKeyVerify: function (privateKey) {
        assert.isBuffer(privateKey, messages.EC_PRIVATE_KEY_TYPE_INVALID)
        return privateKey.length === 32 && secp256k1.privateKeyVerify(privateKey)
      },
  
      privateKeyExport: function (privateKey, compressed) {
        assert.isBuffer(privateKey, messages.EC_PRIVATE_KEY_TYPE_INVALID)
        assert.isBufferLength(privateKey, 32, messages.EC_PRIVATE_KEY_LENGTH_INVALID)
  
        compressed = initCompressedValue(compressed, true)
        var publicKey = secp256k1.privateKeyExport(privateKey, compressed)
  
        return der.privateKeyExport(privateKey, publicKey, compressed)
      },
  
      privateKeyImport: function (privateKey) {
        assert.isBuffer(privateKey, messages.EC_PRIVATE_KEY_TYPE_INVALID)
  
        privateKey = der.privateKeyImport(privateKey)
        if (privateKey && privateKey.length === 32 && secp256k1.privateKeyVerify(privateKey)) return privateKey
  
        throw new Error(messages.EC_PRIVATE_KEY_IMPORT_DER_FAIL)
      },
  
      privateKeyNegate: function (privateKey) {
        assert.isBuffer(privateKey, messages.EC_PRIVATE_KEY_TYPE_INVALID)
        assert.isBufferLength(privateKey, 32, messages.EC_PRIVATE_KEY_LENGTH_INVALID)
  
        return secp256k1.privateKeyNegate(privateKey)
      },
  
      privateKeyModInverse: function (privateKey) {
        assert.isBuffer(privateKey, messages.EC_PRIVATE_KEY_TYPE_INVALID)
        assert.isBufferLength(privateKey, 32, messages.EC_PRIVATE_KEY_LENGTH_INVALID)
  
        return secp256k1.privateKeyModInverse(privateKey)
      },
  
      privateKeyTweakAdd: function (privateKey, tweak) {
        assert.isBuffer(privateKey, messages.EC_PRIVATE_KEY_TYPE_INVALID)
        assert.isBufferLength(privateKey, 32, messages.EC_PRIVATE_KEY_LENGTH_INVALID)
  
        assert.isBuffer(tweak, messages.TWEAK_TYPE_INVALID)
        assert.isBufferLength(tweak, 32, messages.TWEAK_LENGTH_INVALID)
  
        return secp256k1.privateKeyTweakAdd(privateKey, tweak)
      },
  
      privateKeyTweakMul: function (privateKey, tweak) {
        assert.isBuffer(privateKey, messages.EC_PRIVATE_KEY_TYPE_INVALID)
        assert.isBufferLength(privateKey, 32, messages.EC_PRIVATE_KEY_LENGTH_INVALID)
  
        assert.isBuffer(tweak, messages.TWEAK_TYPE_INVALID)
        assert.isBufferLength(tweak, 32, messages.TWEAK_LENGTH_INVALID)
  
        return secp256k1.privateKeyTweakMul(privateKey, tweak)
      },
  
      publicKeyCreate: function (privateKey, compressed) {
        assert.isBuffer(privateKey, messages.EC_PRIVATE_KEY_TYPE_INVALID)
        assert.isBufferLength(privateKey, 32, messages.EC_PRIVATE_KEY_LENGTH_INVALID)
  
        compressed = initCompressedValue(compressed, true)
  
        return secp256k1.publicKeyCreate(privateKey, compressed)
      },
  
      publicKeyConvert: function (publicKey, compressed) {
        assert.isBuffer(publicKey, messages.EC_PUBLIC_KEY_TYPE_INVALID)
        assert.isBufferLength2(publicKey, 33, 65, messages.EC_PUBLIC_KEY_LENGTH_INVALID)
  
        compressed = initCompressedValue(compressed, true)
  
        return secp256k1.publicKeyConvert(publicKey, compressed)
      },
  
      publicKeyVerify: function (publicKey) {
        assert.isBuffer(publicKey, messages.EC_PUBLIC_KEY_TYPE_INVALID)
        return secp256k1.publicKeyVerify(publicKey)
      },
  
      publicKeyTweakAdd: function (publicKey, tweak, compressed) {
        assert.isBuffer(publicKey, messages.EC_PUBLIC_KEY_TYPE_INVALID)
        assert.isBufferLength2(publicKey, 33, 65, messages.EC_PUBLIC_KEY_LENGTH_INVALID)
  
        assert.isBuffer(tweak, messages.TWEAK_TYPE_INVALID)
        assert.isBufferLength(tweak, 32, messages.TWEAK_LENGTH_INVALID)
  
        compressed = initCompressedValue(compressed, true)
  
        return secp256k1.publicKeyTweakAdd(publicKey, tweak, compressed)
      },
  
      publicKeyTweakMul: function (publicKey, tweak, compressed) {
        assert.isBuffer(publicKey, messages.EC_PUBLIC_KEY_TYPE_INVALID)
        assert.isBufferLength2(publicKey, 33, 65, messages.EC_PUBLIC_KEY_LENGTH_INVALID)
  
        assert.isBuffer(tweak, messages.TWEAK_TYPE_INVALID)
        assert.isBufferLength(tweak, 32, messages.TWEAK_LENGTH_INVALID)
  
        compressed = initCompressedValue(compressed, true)
  
        return secp256k1.publicKeyTweakMul(publicKey, tweak, compressed)
      },
  
      publicKeyCombine: function (publicKeys, compressed) {
        assert.isArray(publicKeys, messages.EC_PUBLIC_KEYS_TYPE_INVALID)
        assert.isLengthGTZero(publicKeys, messages.EC_PUBLIC_KEYS_LENGTH_INVALID)
        for (var i = 0; i < publicKeys.length; ++i) {
          assert.isBuffer(publicKeys[i], messages.EC_PUBLIC_KEY_TYPE_INVALID)
          assert.isBufferLength2(publicKeys[i], 33, 65, messages.EC_PUBLIC_KEY_LENGTH_INVALID)
        }
  
        compressed = initCompressedValue(compressed, true)
  
        return secp256k1.publicKeyCombine(publicKeys, compressed)
      },
  
      signatureNormalize: function (signature) {
        assert.isBuffer(signature, messages.ECDSA_SIGNATURE_TYPE_INVALID)
        assert.isBufferLength(signature, 64, messages.ECDSA_SIGNATURE_LENGTH_INVALID)
  
        return secp256k1.signatureNormalize(signature)
      },
  
      signatureExport: function (signature) {
        assert.isBuffer(signature, messages.ECDSA_SIGNATURE_TYPE_INVALID)
        assert.isBufferLength(signature, 64, messages.ECDSA_SIGNATURE_LENGTH_INVALID)
  
        var sigObj = secp256k1.signatureExport(signature)
        return der.signatureExport(sigObj)
      },
  
      signatureImport: function (sig) {
        assert.isBuffer(sig, messages.ECDSA_SIGNATURE_TYPE_INVALID)
        assert.isLengthGTZero(sig, messages.ECDSA_SIGNATURE_LENGTH_INVALID)
  
        var sigObj = der.signatureImport(sig)
        if (sigObj) return secp256k1.signatureImport(sigObj)
  
        throw new Error(messages.ECDSA_SIGNATURE_PARSE_DER_FAIL)
      },
  
      signatureImportLax: function (sig) {
        assert.isBuffer(sig, messages.ECDSA_SIGNATURE_TYPE_INVALID)
        assert.isLengthGTZero(sig, messages.ECDSA_SIGNATURE_LENGTH_INVALID)
  
        var sigObj = der.signatureImportLax(sig)
        if (sigObj) return secp256k1.signatureImport(sigObj)
  
        throw new Error(messages.ECDSA_SIGNATURE_PARSE_DER_FAIL)
      },
  
      sign: function (message, privateKey, options) {
        assert.isBuffer(message, messages.MSG32_TYPE_INVALID)
        assert.isBufferLength(message, 32, messages.MSG32_LENGTH_INVALID)
  
        assert.isBuffer(privateKey, messages.EC_PRIVATE_KEY_TYPE_INVALID)
        assert.isBufferLength(privateKey, 32, messages.EC_PRIVATE_KEY_LENGTH_INVALID)
  
        var data = null
        var noncefn = null
        if (options !== undefined) {
          assert.isObject(options, messages.OPTIONS_TYPE_INVALID)
  
          if (options.data !== undefined) {
            assert.isBuffer(options.data, messages.OPTIONS_DATA_TYPE_INVALID)
            assert.isBufferLength(options.data, 32, messages.OPTIONS_DATA_LENGTH_INVALID)
            data = options.data
          }
  
          if (options.noncefn !== undefined) {
            assert.isFunction(options.noncefn, messages.OPTIONS_NONCEFN_TYPE_INVALID)
            noncefn = options.noncefn
          }
        }
  
        return secp256k1.sign(message, privateKey, noncefn, data)
      },
  
      verify: function (message, signature, publicKey) {
        assert.isBuffer(message, messages.MSG32_TYPE_INVALID)
        assert.isBufferLength(message, 32, messages.MSG32_LENGTH_INVALID)
  
        assert.isBuffer(signature, messages.ECDSA_SIGNATURE_TYPE_INVALID)
        assert.isBufferLength(signature, 64, messages.ECDSA_SIGNATURE_LENGTH_INVALID)
  
        assert.isBuffer(publicKey, messages.EC_PUBLIC_KEY_TYPE_INVALID)
        assert.isBufferLength2(publicKey, 33, 65, messages.EC_PUBLIC_KEY_LENGTH_INVALID)
  
        return secp256k1.verify(message, signature, publicKey)
      },
  
      recover: function (message, signature, recovery, compressed) {
        assert.isBuffer(message, messages.MSG32_TYPE_INVALID)
        assert.isBufferLength(message, 32, messages.MSG32_LENGTH_INVALID)
  
        assert.isBuffer(signature, messages.ECDSA_SIGNATURE_TYPE_INVALID)
        assert.isBufferLength(signature, 64, messages.ECDSA_SIGNATURE_LENGTH_INVALID)
  
        assert.isNumber(recovery, messages.RECOVERY_ID_TYPE_INVALID)
        assert.isNumberInInterval(recovery, -1, 4, messages.RECOVERY_ID_VALUE_INVALID)
  
        compressed = initCompressedValue(compressed, true)
  
        return secp256k1.recover(message, signature, recovery, compressed)
      },
  
      ecdh: function (publicKey, privateKey) {
        assert.isBuffer(publicKey, messages.EC_PUBLIC_KEY_TYPE_INVALID)
        assert.isBufferLength2(publicKey, 33, 65, messages.EC_PUBLIC_KEY_LENGTH_INVALID)
  
        assert.isBuffer(privateKey, messages.EC_PRIVATE_KEY_TYPE_INVALID)
        assert.isBufferLength(privateKey, 32, messages.EC_PRIVATE_KEY_LENGTH_INVALID)
  
        return secp256k1.ecdh(publicKey, privateKey)
      },
  
      ecdhUnsafe: function (publicKey, privateKey, compressed) {
        assert.isBuffer(publicKey, messages.EC_PUBLIC_KEY_TYPE_INVALID)
        assert.isBufferLength2(publicKey, 33, 65, messages.EC_PUBLIC_KEY_LENGTH_INVALID)
  
        assert.isBuffer(privateKey, messages.EC_PRIVATE_KEY_TYPE_INVALID)
        assert.isBufferLength(privateKey, 32, messages.EC_PRIVATE_KEY_LENGTH_INVALID)
  
        compressed = initCompressedValue(compressed, true)
  
        return secp256k1.ecdhUnsafe(publicKey, privateKey, compressed)
      }
    }
  }
  
  },{"./assert":296,"./der":297,"./messages.json":300}],300:[function(require,module,exports){
  module.exports={
    "COMPRESSED_TYPE_INVALID": "compressed should be a boolean",
    "EC_PRIVATE_KEY_TYPE_INVALID": "private key should be a Buffer",
    "EC_PRIVATE_KEY_LENGTH_INVALID": "private key length is invalid",
    "EC_PRIVATE_KEY_RANGE_INVALID": "private key range is invalid",
    "EC_PRIVATE_KEY_TWEAK_ADD_FAIL": "tweak out of range or resulting private key is invalid",
    "EC_PRIVATE_KEY_TWEAK_MUL_FAIL": "tweak out of range",
    "EC_PRIVATE_KEY_EXPORT_DER_FAIL": "couldn't export to DER format",
    "EC_PRIVATE_KEY_IMPORT_DER_FAIL": "couldn't import from DER format",
    "EC_PUBLIC_KEYS_TYPE_INVALID": "public keys should be an Array",
    "EC_PUBLIC_KEYS_LENGTH_INVALID": "public keys Array should have at least 1 element",
    "EC_PUBLIC_KEY_TYPE_INVALID": "public key should be a Buffer",
    "EC_PUBLIC_KEY_LENGTH_INVALID": "public key length is invalid",
    "EC_PUBLIC_KEY_PARSE_FAIL": "the public key could not be parsed or is invalid",
    "EC_PUBLIC_KEY_CREATE_FAIL": "private was invalid, try again",
    "EC_PUBLIC_KEY_TWEAK_ADD_FAIL": "tweak out of range or resulting public key is invalid",
    "EC_PUBLIC_KEY_TWEAK_MUL_FAIL": "tweak out of range",
    "EC_PUBLIC_KEY_COMBINE_FAIL": "the sum of the public keys is not valid",
    "ECDH_FAIL": "scalar was invalid (zero or overflow)",
    "ECDSA_SIGNATURE_TYPE_INVALID": "signature should be a Buffer",
    "ECDSA_SIGNATURE_LENGTH_INVALID": "signature length is invalid",
    "ECDSA_SIGNATURE_PARSE_FAIL": "couldn't parse signature",
    "ECDSA_SIGNATURE_PARSE_DER_FAIL": "couldn't parse DER signature",
    "ECDSA_SIGNATURE_SERIALIZE_DER_FAIL": "couldn't serialize signature to DER format",
    "ECDSA_SIGN_FAIL": "nonce generation function failed or private key is invalid",
    "ECDSA_RECOVER_FAIL": "couldn't recover public key from signature",
    "MSG32_TYPE_INVALID": "message should be a Buffer",
    "MSG32_LENGTH_INVALID": "message length is invalid",
    "OPTIONS_TYPE_INVALID": "options should be an Object",
    "OPTIONS_DATA_TYPE_INVALID": "options.data should be a Buffer",
    "OPTIONS_DATA_LENGTH_INVALID": "options.data length is invalid",
    "OPTIONS_NONCEFN_TYPE_INVALID": "options.noncefn should be a Function",
    "RECOVERY_ID_TYPE_INVALID": "recovery should be a Number",
    "RECOVERY_ID_VALUE_INVALID": "recovery should have value between -1 and 4",
    "TWEAK_TYPE_INVALID": "tweak should be a Buffer",
    "TWEAK_LENGTH_INVALID": "tweak length is invalid"
  }
  
  },{}],301:[function(require,module,exports){
  (function (process){
  ;(function(global) {
  
  'use strict';
  
  var nextTick = function (fn) { setTimeout(fn, 0); }
  if (typeof process != 'undefined' && process && typeof process.nextTick == 'function') {
    // node.js and the like
    nextTick = process.nextTick;
  }
  
  function semaphore(capacity) {
    var semaphore = {
      capacity: capacity || 1,
      current: 0,
      queue: [],
      firstHere: false,
  
      take: function() {
        if (semaphore.firstHere === false) {
                semaphore.current++;
                semaphore.firstHere = true;
                var isFirst = 1;
              } else {
                var isFirst = 0;
              }
        var item = { n: 1 };
  
        if (typeof arguments[0] == 'function') {
          item.task = arguments[0];
        } else {
          item.n = arguments[0];
        }
  
        if (arguments.length >= 2)  {
          if (typeof arguments[1] == 'function') item.task = arguments[1];
          else item.n = arguments[1];
        }
  
        var task = item.task;
        item.task = function() { task(semaphore.leave); };
  
        if (semaphore.current + item.n - isFirst > semaphore.capacity) {
                if (isFirst === 1) {
                  semaphore.current--;
                  semaphore.firstHere = false;
                }
          return semaphore.queue.push(item);
        }
  
        semaphore.current += item.n - isFirst;
        item.task(semaphore.leave);
              if (isFirst === 1) semaphore.firstHere = false;
      },
  
      leave: function(n) {
        n = n || 1;
  
        semaphore.current -= n;
  
        if (!semaphore.queue.length) {
          if (semaphore.current < 0) {
            throw new Error('leave called too many times.');
          }
  
          return;
        }
  
        var item = semaphore.queue[0];
  
        if (item.n + semaphore.current > semaphore.capacity) {
          return;
        }
  
        semaphore.queue.shift();
        semaphore.current += item.n;
  
        nextTick(item.task);
      },
  
      available: function(n) {
        n = n || 1;
        return(semaphore.current + n <= semaphore.capacity);
      }
    };
  
    return semaphore;
  };
  
  if (typeof exports === 'object') {
      // node export
      module.exports = semaphore;
  } else if (typeof define === 'function' && define.amd) {
      // amd export
      define(function () {
          return semaphore;
      });
  } else {
      // browser global
      global.semaphore = semaphore;
  }
  }(this));
  
  }).call(this,require('_process'))
  },{"_process":257}],302:[function(require,module,exports){
  'use strict';
  module.exports = typeof setImmediate === 'function' ? setImmediate :
    function setImmediate() {
      var args = [].slice.apply(arguments);
      args.splice(1, 0, 0);
      setTimeout.apply(null, args);
    };
  
  },{}],303:[function(require,module,exports){
  var Buffer = require('safe-buffer').Buffer
  
  // prototype class for hash functions
  function Hash (blockSize, finalSize) {
    this._block = Buffer.alloc(blockSize)
    this._finalSize = finalSize
    this._blockSize = blockSize
    this._len = 0
  }
  
  Hash.prototype.update = function (data, enc) {
    if (typeof data === 'string') {
      enc = enc || 'utf8'
      data = Buffer.from(data, enc)
    }
  
    var block = this._block
    var blockSize = this._blockSize
    var length = data.length
    var accum = this._len
  
    for (var offset = 0; offset < length;) {
      var assigned = accum % blockSize
      var remainder = Math.min(length - offset, blockSize - assigned)
  
      for (var i = 0; i < remainder; i++) {
        block[assigned + i] = data[offset + i]
      }
  
      accum += remainder
      offset += remainder
  
      if ((accum % blockSize) === 0) {
        this._update(block)
      }
    }
  
    this._len += length
    return this
  }
  
  Hash.prototype.digest = function (enc) {
    var rem = this._len % this._blockSize
  
    this._block[rem] = 0x80
  
    // zero (rem + 1) trailing bits, where (rem + 1) is the smallest
    // non-negative solution to the equation (length + 1 + (rem + 1)) === finalSize mod blockSize
    this._block.fill(0, rem + 1)
  
    if (rem >= this._finalSize) {
      this._update(this._block)
      this._block.fill(0)
    }
  
    var bits = this._len * 8
  
    // uint32
    if (bits <= 0xffffffff) {
      this._block.writeUInt32BE(bits, this._blockSize - 4)
  
    // uint64
    } else {
      var lowBits = (bits & 0xffffffff) >>> 0
      var highBits = (bits - lowBits) / 0x100000000
  
      this._block.writeUInt32BE(highBits, this._blockSize - 8)
      this._block.writeUInt32BE(lowBits, this._blockSize - 4)
    }
  
    this._update(this._block)
    var hash = this._hash()
  
    return enc ? hash.toString(enc) : hash
  }
  
  Hash.prototype._update = function () {
    throw new Error('_update must be implemented by subclass')
  }
  
  module.exports = Hash
  
  },{"safe-buffer":290}],304:[function(require,module,exports){
  var exports = module.exports = function SHA (algorithm) {
    algorithm = algorithm.toLowerCase()
  
    var Algorithm = exports[algorithm]
    if (!Algorithm) throw new Error(algorithm + ' is not supported (we accept pull requests)')
  
    return new Algorithm()
  }
  
  exports.sha = require('./sha')
  exports.sha1 = require('./sha1')
  exports.sha224 = require('./sha224')
  exports.sha256 = require('./sha256')
  exports.sha384 = require('./sha384')
  exports.sha512 = require('./sha512')
  
  },{"./sha":305,"./sha1":306,"./sha224":307,"./sha256":308,"./sha384":309,"./sha512":310}],305:[function(require,module,exports){
  /*
   * A JavaScript implementation of the Secure Hash Algorithm, SHA-0, as defined
   * in FIPS PUB 180-1
   * This source code is derived from sha1.js of the same repository.
   * The difference between SHA-0 and SHA-1 is just a bitwise rotate left
   * operation was added.
   */
  
  var inherits = require('inherits')
  var Hash = require('./hash')
  var Buffer = require('safe-buffer').Buffer
  
  var K = [
    0x5a827999, 0x6ed9eba1, 0x8f1bbcdc | 0, 0xca62c1d6 | 0
  ]
  
  var W = new Array(80)
  
  function Sha () {
    this.init()
    this._w = W
  
    Hash.call(this, 64, 56)
  }
  
  inherits(Sha, Hash)
  
  Sha.prototype.init = function () {
    this._a = 0x67452301
    this._b = 0xefcdab89
    this._c = 0x98badcfe
    this._d = 0x10325476
    this._e = 0xc3d2e1f0
  
    return this
  }
  
  function rotl5 (num) {
    return (num << 5) | (num >>> 27)
  }
  
  function rotl30 (num) {
    return (num << 30) | (num >>> 2)
  }
  
  function ft (s, b, c, d) {
    if (s === 0) return (b & c) | ((~b) & d)
    if (s === 2) return (b & c) | (b & d) | (c & d)
    return b ^ c ^ d
  }
  
  Sha.prototype._update = function (M) {
    var W = this._w
  
    var a = this._a | 0
    var b = this._b | 0
    var c = this._c | 0
    var d = this._d | 0
    var e = this._e | 0
  
    for (var i = 0; i < 16; ++i) W[i] = M.readInt32BE(i * 4)
    for (; i < 80; ++i) W[i] = W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16]
  
    for (var j = 0; j < 80; ++j) {
      var s = ~~(j / 20)
      var t = (rotl5(a) + ft(s, b, c, d) + e + W[j] + K[s]) | 0
  
      e = d
      d = c
      c = rotl30(b)
      b = a
      a = t
    }
  
    this._a = (a + this._a) | 0
    this._b = (b + this._b) | 0
    this._c = (c + this._c) | 0
    this._d = (d + this._d) | 0
    this._e = (e + this._e) | 0
  }
  
  Sha.prototype._hash = function () {
    var H = Buffer.allocUnsafe(20)
  
    H.writeInt32BE(this._a | 0, 0)
    H.writeInt32BE(this._b | 0, 4)
    H.writeInt32BE(this._c | 0, 8)
    H.writeInt32BE(this._d | 0, 12)
    H.writeInt32BE(this._e | 0, 16)
  
    return H
  }
  
  module.exports = Sha
  
  },{"./hash":303,"inherits":180,"safe-buffer":290}],306:[function(require,module,exports){
  /*
   * A JavaScript implementation of the Secure Hash Algorithm, SHA-1, as defined
   * in FIPS PUB 180-1
   * Version 2.1a Copyright Paul Johnston 2000 - 2002.
   * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
   * Distributed under the BSD License
   * See http://pajhome.org.uk/crypt/md5 for details.
   */
  
  var inherits = require('inherits')
  var Hash = require('./hash')
  var Buffer = require('safe-buffer').Buffer
  
  var K = [
    0x5a827999, 0x6ed9eba1, 0x8f1bbcdc | 0, 0xca62c1d6 | 0
  ]
  
  var W = new Array(80)
  
  function Sha1 () {
    this.init()
    this._w = W
  
    Hash.call(this, 64, 56)
  }
  
  inherits(Sha1, Hash)
  
  Sha1.prototype.init = function () {
    this._a = 0x67452301
    this._b = 0xefcdab89
    this._c = 0x98badcfe
    this._d = 0x10325476
    this._e = 0xc3d2e1f0
  
    return this
  }
  
  function rotl1 (num) {
    return (num << 1) | (num >>> 31)
  }
  
  function rotl5 (num) {
    return (num << 5) | (num >>> 27)
  }
  
  function rotl30 (num) {
    return (num << 30) | (num >>> 2)
  }
  
  function ft (s, b, c, d) {
    if (s === 0) return (b & c) | ((~b) & d)
    if (s === 2) return (b & c) | (b & d) | (c & d)
    return b ^ c ^ d
  }
  
  Sha1.prototype._update = function (M) {
    var W = this._w
  
    var a = this._a | 0
    var b = this._b | 0
    var c = this._c | 0
    var d = this._d | 0
    var e = this._e | 0
  
    for (var i = 0; i < 16; ++i) W[i] = M.readInt32BE(i * 4)
    for (; i < 80; ++i) W[i] = rotl1(W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16])
  
    for (var j = 0; j < 80; ++j) {
      var s = ~~(j / 20)
      var t = (rotl5(a) + ft(s, b, c, d) + e + W[j] + K[s]) | 0
  
      e = d
      d = c
      c = rotl30(b)
      b = a
      a = t
    }
  
    this._a = (a + this._a) | 0
    this._b = (b + this._b) | 0
    this._c = (c + this._c) | 0
    this._d = (d + this._d) | 0
    this._e = (e + this._e) | 0
  }
  
  Sha1.prototype._hash = function () {
    var H = Buffer.allocUnsafe(20)
  
    H.writeInt32BE(this._a | 0, 0)
    H.writeInt32BE(this._b | 0, 4)
    H.writeInt32BE(this._c | 0, 8)
    H.writeInt32BE(this._d | 0, 12)
    H.writeInt32BE(this._e | 0, 16)
  
    return H
  }
  
  module.exports = Sha1
  
  },{"./hash":303,"inherits":180,"safe-buffer":290}],307:[function(require,module,exports){
  /**
   * A JavaScript implementation of the Secure Hash Algorithm, SHA-256, as defined
   * in FIPS 180-2
   * Version 2.2-beta Copyright Angel Marin, Paul Johnston 2000 - 2009.
   * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
   *
   */
  
  var inherits = require('inherits')
  var Sha256 = require('./sha256')
  var Hash = require('./hash')
  var Buffer = require('safe-buffer').Buffer
  
  var W = new Array(64)
  
  function Sha224 () {
    this.init()
  
    this._w = W // new Array(64)
  
    Hash.call(this, 64, 56)
  }
  
  inherits(Sha224, Sha256)
  
  Sha224.prototype.init = function () {
    this._a = 0xc1059ed8
    this._b = 0x367cd507
    this._c = 0x3070dd17
    this._d = 0xf70e5939
    this._e = 0xffc00b31
    this._f = 0x68581511
    this._g = 0x64f98fa7
    this._h = 0xbefa4fa4
  
    return this
  }
  
  Sha224.prototype._hash = function () {
    var H = Buffer.allocUnsafe(28)
  
    H.writeInt32BE(this._a, 0)
    H.writeInt32BE(this._b, 4)
    H.writeInt32BE(this._c, 8)
    H.writeInt32BE(this._d, 12)
    H.writeInt32BE(this._e, 16)
    H.writeInt32BE(this._f, 20)
    H.writeInt32BE(this._g, 24)
  
    return H
  }
  
  module.exports = Sha224
  
  },{"./hash":303,"./sha256":308,"inherits":180,"safe-buffer":290}],308:[function(require,module,exports){
  /**
   * A JavaScript implementation of the Secure Hash Algorithm, SHA-256, as defined
   * in FIPS 180-2
   * Version 2.2-beta Copyright Angel Marin, Paul Johnston 2000 - 2009.
   * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
   *
   */
  
  var inherits = require('inherits')
  var Hash = require('./hash')
  var Buffer = require('safe-buffer').Buffer
  
  var K = [
    0x428A2F98, 0x71374491, 0xB5C0FBCF, 0xE9B5DBA5,
    0x3956C25B, 0x59F111F1, 0x923F82A4, 0xAB1C5ED5,
    0xD807AA98, 0x12835B01, 0x243185BE, 0x550C7DC3,
    0x72BE5D74, 0x80DEB1FE, 0x9BDC06A7, 0xC19BF174,
    0xE49B69C1, 0xEFBE4786, 0x0FC19DC6, 0x240CA1CC,
    0x2DE92C6F, 0x4A7484AA, 0x5CB0A9DC, 0x76F988DA,
    0x983E5152, 0xA831C66D, 0xB00327C8, 0xBF597FC7,
    0xC6E00BF3, 0xD5A79147, 0x06CA6351, 0x14292967,
    0x27B70A85, 0x2E1B2138, 0x4D2C6DFC, 0x53380D13,
    0x650A7354, 0x766A0ABB, 0x81C2C92E, 0x92722C85,
    0xA2BFE8A1, 0xA81A664B, 0xC24B8B70, 0xC76C51A3,
    0xD192E819, 0xD6990624, 0xF40E3585, 0x106AA070,
    0x19A4C116, 0x1E376C08, 0x2748774C, 0x34B0BCB5,
    0x391C0CB3, 0x4ED8AA4A, 0x5B9CCA4F, 0x682E6FF3,
    0x748F82EE, 0x78A5636F, 0x84C87814, 0x8CC70208,
    0x90BEFFFA, 0xA4506CEB, 0xBEF9A3F7, 0xC67178F2
  ]
  
  var W = new Array(64)
  
  function Sha256 () {
    this.init()
  
    this._w = W // new Array(64)
  
    Hash.call(this, 64, 56)
  }
  
  inherits(Sha256, Hash)
  
  Sha256.prototype.init = function () {
    this._a = 0x6a09e667
    this._b = 0xbb67ae85
    this._c = 0x3c6ef372
    this._d = 0xa54ff53a
    this._e = 0x510e527f
    this._f = 0x9b05688c
    this._g = 0x1f83d9ab
    this._h = 0x5be0cd19
  
    return this
  }
  
  function ch (x, y, z) {
    return z ^ (x & (y ^ z))
  }
  
  function maj (x, y, z) {
    return (x & y) | (z & (x | y))
  }
  
  function sigma0 (x) {
    return (x >>> 2 | x << 30) ^ (x >>> 13 | x << 19) ^ (x >>> 22 | x << 10)
  }
  
  function sigma1 (x) {
    return (x >>> 6 | x << 26) ^ (x >>> 11 | x << 21) ^ (x >>> 25 | x << 7)
  }
  
  function gamma0 (x) {
    return (x >>> 7 | x << 25) ^ (x >>> 18 | x << 14) ^ (x >>> 3)
  }
  
  function gamma1 (x) {
    return (x >>> 17 | x << 15) ^ (x >>> 19 | x << 13) ^ (x >>> 10)
  }
  
  Sha256.prototype._update = function (M) {
    var W = this._w
  
    var a = this._a | 0
    var b = this._b | 0
    var c = this._c | 0
    var d = this._d | 0
    var e = this._e | 0
    var f = this._f | 0
    var g = this._g | 0
    var h = this._h | 0
  
    for (var i = 0; i < 16; ++i) W[i] = M.readInt32BE(i * 4)
    for (; i < 64; ++i) W[i] = (gamma1(W[i - 2]) + W[i - 7] + gamma0(W[i - 15]) + W[i - 16]) | 0
  
    for (var j = 0; j < 64; ++j) {
      var T1 = (h + sigma1(e) + ch(e, f, g) + K[j] + W[j]) | 0
      var T2 = (sigma0(a) + maj(a, b, c)) | 0
  
      h = g
      g = f
      f = e
      e = (d + T1) | 0
      d = c
      c = b
      b = a
      a = (T1 + T2) | 0
    }
  
    this._a = (a + this._a) | 0
    this._b = (b + this._b) | 0
    this._c = (c + this._c) | 0
    this._d = (d + this._d) | 0
    this._e = (e + this._e) | 0
    this._f = (f + this._f) | 0
    this._g = (g + this._g) | 0
    this._h = (h + this._h) | 0
  }
  
  Sha256.prototype._hash = function () {
    var H = Buffer.allocUnsafe(32)
  
    H.writeInt32BE(this._a, 0)
    H.writeInt32BE(this._b, 4)
    H.writeInt32BE(this._c, 8)
    H.writeInt32BE(this._d, 12)
    H.writeInt32BE(this._e, 16)
    H.writeInt32BE(this._f, 20)
    H.writeInt32BE(this._g, 24)
    H.writeInt32BE(this._h, 28)
  
    return H
  }
  
  module.exports = Sha256
  
  },{"./hash":303,"inherits":180,"safe-buffer":290}],309:[function(require,module,exports){
  var inherits = require('inherits')
  var SHA512 = require('./sha512')
  var Hash = require('./hash')
  var Buffer = require('safe-buffer').Buffer
  
  var W = new Array(160)
  
  function Sha384 () {
    this.init()
    this._w = W
  
    Hash.call(this, 128, 112)
  }
  
  inherits(Sha384, SHA512)
  
  Sha384.prototype.init = function () {
    this._ah = 0xcbbb9d5d
    this._bh = 0x629a292a
    this._ch = 0x9159015a
    this._dh = 0x152fecd8
    this._eh = 0x67332667
    this._fh = 0x8eb44a87
    this._gh = 0xdb0c2e0d
    this._hh = 0x47b5481d
  
    this._al = 0xc1059ed8
    this._bl = 0x367cd507
    this._cl = 0x3070dd17
    this._dl = 0xf70e5939
    this._el = 0xffc00b31
    this._fl = 0x68581511
    this._gl = 0x64f98fa7
    this._hl = 0xbefa4fa4
  
    return this
  }
  
  Sha384.prototype._hash = function () {
    var H = Buffer.allocUnsafe(48)
  
    function writeInt64BE (h, l, offset) {
      H.writeInt32BE(h, offset)
      H.writeInt32BE(l, offset + 4)
    }
  
    writeInt64BE(this._ah, this._al, 0)
    writeInt64BE(this._bh, this._bl, 8)
    writeInt64BE(this._ch, this._cl, 16)
    writeInt64BE(this._dh, this._dl, 24)
    writeInt64BE(this._eh, this._el, 32)
    writeInt64BE(this._fh, this._fl, 40)
  
    return H
  }
  
  module.exports = Sha384
  
  },{"./hash":303,"./sha512":310,"inherits":180,"safe-buffer":290}],310:[function(require,module,exports){
  var inherits = require('inherits')
  var Hash = require('./hash')
  var Buffer = require('safe-buffer').Buffer
  
  var K = [
    0x428a2f98, 0xd728ae22, 0x71374491, 0x23ef65cd,
    0xb5c0fbcf, 0xec4d3b2f, 0xe9b5dba5, 0x8189dbbc,
    0x3956c25b, 0xf348b538, 0x59f111f1, 0xb605d019,
    0x923f82a4, 0xaf194f9b, 0xab1c5ed5, 0xda6d8118,
    0xd807aa98, 0xa3030242, 0x12835b01, 0x45706fbe,
    0x243185be, 0x4ee4b28c, 0x550c7dc3, 0xd5ffb4e2,
    0x72be5d74, 0xf27b896f, 0x80deb1fe, 0x3b1696b1,
    0x9bdc06a7, 0x25c71235, 0xc19bf174, 0xcf692694,
    0xe49b69c1, 0x9ef14ad2, 0xefbe4786, 0x384f25e3,
    0x0fc19dc6, 0x8b8cd5b5, 0x240ca1cc, 0x77ac9c65,
    0x2de92c6f, 0x592b0275, 0x4a7484aa, 0x6ea6e483,
    0x5cb0a9dc, 0xbd41fbd4, 0x76f988da, 0x831153b5,
    0x983e5152, 0xee66dfab, 0xa831c66d, 0x2db43210,
    0xb00327c8, 0x98fb213f, 0xbf597fc7, 0xbeef0ee4,
    0xc6e00bf3, 0x3da88fc2, 0xd5a79147, 0x930aa725,
    0x06ca6351, 0xe003826f, 0x14292967, 0x0a0e6e70,
    0x27b70a85, 0x46d22ffc, 0x2e1b2138, 0x5c26c926,
    0x4d2c6dfc, 0x5ac42aed, 0x53380d13, 0x9d95b3df,
    0x650a7354, 0x8baf63de, 0x766a0abb, 0x3c77b2a8,
    0x81c2c92e, 0x47edaee6, 0x92722c85, 0x1482353b,
    0xa2bfe8a1, 0x4cf10364, 0xa81a664b, 0xbc423001,
    0xc24b8b70, 0xd0f89791, 0xc76c51a3, 0x0654be30,
    0xd192e819, 0xd6ef5218, 0xd6990624, 0x5565a910,
    0xf40e3585, 0x5771202a, 0x106aa070, 0x32bbd1b8,
    0x19a4c116, 0xb8d2d0c8, 0x1e376c08, 0x5141ab53,
    0x2748774c, 0xdf8eeb99, 0x34b0bcb5, 0xe19b48a8,
    0x391c0cb3, 0xc5c95a63, 0x4ed8aa4a, 0xe3418acb,
    0x5b9cca4f, 0x7763e373, 0x682e6ff3, 0xd6b2b8a3,
    0x748f82ee, 0x5defb2fc, 0x78a5636f, 0x43172f60,
    0x84c87814, 0xa1f0ab72, 0x8cc70208, 0x1a6439ec,
    0x90befffa, 0x23631e28, 0xa4506ceb, 0xde82bde9,
    0xbef9a3f7, 0xb2c67915, 0xc67178f2, 0xe372532b,
    0xca273ece, 0xea26619c, 0xd186b8c7, 0x21c0c207,
    0xeada7dd6, 0xcde0eb1e, 0xf57d4f7f, 0xee6ed178,
    0x06f067aa, 0x72176fba, 0x0a637dc5, 0xa2c898a6,
    0x113f9804, 0xbef90dae, 0x1b710b35, 0x131c471b,
    0x28db77f5, 0x23047d84, 0x32caab7b, 0x40c72493,
    0x3c9ebe0a, 0x15c9bebc, 0x431d67c4, 0x9c100d4c,
    0x4cc5d4be, 0xcb3e42b6, 0x597f299c, 0xfc657e2a,
    0x5fcb6fab, 0x3ad6faec, 0x6c44198c, 0x4a475817
  ]
  
  var W = new Array(160)
  
  function Sha512 () {
    this.init()
    this._w = W
  
    Hash.call(this, 128, 112)
  }
  
  inherits(Sha512, Hash)
  
  Sha512.prototype.init = function () {
    this._ah = 0x6a09e667
    this._bh = 0xbb67ae85
    this._ch = 0x3c6ef372
    this._dh = 0xa54ff53a
    this._eh = 0x510e527f
    this._fh = 0x9b05688c
    this._gh = 0x1f83d9ab
    this._hh = 0x5be0cd19
  
    this._al = 0xf3bcc908
    this._bl = 0x84caa73b
    this._cl = 0xfe94f82b
    this._dl = 0x5f1d36f1
    this._el = 0xade682d1
    this._fl = 0x2b3e6c1f
    this._gl = 0xfb41bd6b
    this._hl = 0x137e2179
  
    return this
  }
  
  function Ch (x, y, z) {
    return z ^ (x & (y ^ z))
  }
  
  function maj (x, y, z) {
    return (x & y) | (z & (x | y))
  }
  
  function sigma0 (x, xl) {
    return (x >>> 28 | xl << 4) ^ (xl >>> 2 | x << 30) ^ (xl >>> 7 | x << 25)
  }
  
  function sigma1 (x, xl) {
    return (x >>> 14 | xl << 18) ^ (x >>> 18 | xl << 14) ^ (xl >>> 9 | x << 23)
  }
  
  function Gamma0 (x, xl) {
    return (x >>> 1 | xl << 31) ^ (x >>> 8 | xl << 24) ^ (x >>> 7)
  }
  
  function Gamma0l (x, xl) {
    return (x >>> 1 | xl << 31) ^ (x >>> 8 | xl << 24) ^ (x >>> 7 | xl << 25)
  }
  
  function Gamma1 (x, xl) {
    return (x >>> 19 | xl << 13) ^ (xl >>> 29 | x << 3) ^ (x >>> 6)
  }
  
  function Gamma1l (x, xl) {
    return (x >>> 19 | xl << 13) ^ (xl >>> 29 | x << 3) ^ (x >>> 6 | xl << 26)
  }
  
  function getCarry (a, b) {
    return (a >>> 0) < (b >>> 0) ? 1 : 0
  }
  
  Sha512.prototype._update = function (M) {
    var W = this._w
  
    var ah = this._ah | 0
    var bh = this._bh | 0
    var ch = this._ch | 0
    var dh = this._dh | 0
    var eh = this._eh | 0
    var fh = this._fh | 0
    var gh = this._gh | 0
    var hh = this._hh | 0
  
    var al = this._al | 0
    var bl = this._bl | 0
    var cl = this._cl | 0
    var dl = this._dl | 0
    var el = this._el | 0
    var fl = this._fl | 0
    var gl = this._gl | 0
    var hl = this._hl | 0
  
    for (var i = 0; i < 32; i += 2) {
      W[i] = M.readInt32BE(i * 4)
      W[i + 1] = M.readInt32BE(i * 4 + 4)
    }
    for (; i < 160; i += 2) {
      var xh = W[i - 15 * 2]
      var xl = W[i - 15 * 2 + 1]
      var gamma0 = Gamma0(xh, xl)
      var gamma0l = Gamma0l(xl, xh)
  
      xh = W[i - 2 * 2]
      xl = W[i - 2 * 2 + 1]
      var gamma1 = Gamma1(xh, xl)
      var gamma1l = Gamma1l(xl, xh)
  
      // W[i] = gamma0 + W[i - 7] + gamma1 + W[i - 16]
      var Wi7h = W[i - 7 * 2]
      var Wi7l = W[i - 7 * 2 + 1]
  
      var Wi16h = W[i - 16 * 2]
      var Wi16l = W[i - 16 * 2 + 1]
  
      var Wil = (gamma0l + Wi7l) | 0
      var Wih = (gamma0 + Wi7h + getCarry(Wil, gamma0l)) | 0
      Wil = (Wil + gamma1l) | 0
      Wih = (Wih + gamma1 + getCarry(Wil, gamma1l)) | 0
      Wil = (Wil + Wi16l) | 0
      Wih = (Wih + Wi16h + getCarry(Wil, Wi16l)) | 0
  
      W[i] = Wih
      W[i + 1] = Wil
    }
  
    for (var j = 0; j < 160; j += 2) {
      Wih = W[j]
      Wil = W[j + 1]
  
      var majh = maj(ah, bh, ch)
      var majl = maj(al, bl, cl)
  
      var sigma0h = sigma0(ah, al)
      var sigma0l = sigma0(al, ah)
      var sigma1h = sigma1(eh, el)
      var sigma1l = sigma1(el, eh)
  
      // t1 = h + sigma1 + ch + K[j] + W[j]
      var Kih = K[j]
      var Kil = K[j + 1]
  
      var chh = Ch(eh, fh, gh)
      var chl = Ch(el, fl, gl)
  
      var t1l = (hl + sigma1l) | 0
      var t1h = (hh + sigma1h + getCarry(t1l, hl)) | 0
      t1l = (t1l + chl) | 0
      t1h = (t1h + chh + getCarry(t1l, chl)) | 0
      t1l = (t1l + Kil) | 0
      t1h = (t1h + Kih + getCarry(t1l, Kil)) | 0
      t1l = (t1l + Wil) | 0
      t1h = (t1h + Wih + getCarry(t1l, Wil)) | 0
  
      // t2 = sigma0 + maj
      var t2l = (sigma0l + majl) | 0
      var t2h = (sigma0h + majh + getCarry(t2l, sigma0l)) | 0
  
      hh = gh
      hl = gl
      gh = fh
      gl = fl
      fh = eh
      fl = el
      el = (dl + t1l) | 0
      eh = (dh + t1h + getCarry(el, dl)) | 0
      dh = ch
      dl = cl
      ch = bh
      cl = bl
      bh = ah
      bl = al
      al = (t1l + t2l) | 0
      ah = (t1h + t2h + getCarry(al, t1l)) | 0
    }
  
    this._al = (this._al + al) | 0
    this._bl = (this._bl + bl) | 0
    this._cl = (this._cl + cl) | 0
    this._dl = (this._dl + dl) | 0
    this._el = (this._el + el) | 0
    this._fl = (this._fl + fl) | 0
    this._gl = (this._gl + gl) | 0
    this._hl = (this._hl + hl) | 0
  
    this._ah = (this._ah + ah + getCarry(this._al, al)) | 0
    this._bh = (this._bh + bh + getCarry(this._bl, bl)) | 0
    this._ch = (this._ch + ch + getCarry(this._cl, cl)) | 0
    this._dh = (this._dh + dh + getCarry(this._dl, dl)) | 0
    this._eh = (this._eh + eh + getCarry(this._el, el)) | 0
    this._fh = (this._fh + fh + getCarry(this._fl, fl)) | 0
    this._gh = (this._gh + gh + getCarry(this._gl, gl)) | 0
    this._hh = (this._hh + hh + getCarry(this._hl, hl)) | 0
  }
  
  Sha512.prototype._hash = function () {
    var H = Buffer.allocUnsafe(64)
  
    function writeInt64BE (h, l, offset) {
      H.writeInt32BE(h, offset)
      H.writeInt32BE(l, offset + 4)
    }
  
    writeInt64BE(this._ah, this._al, 0)
    writeInt64BE(this._bh, this._bl, 8)
    writeInt64BE(this._ch, this._cl, 16)
    writeInt64BE(this._dh, this._dl, 24)
    writeInt64BE(this._eh, this._el, 32)
    writeInt64BE(this._fh, this._fl, 40)
    writeInt64BE(this._gh, this._gl, 48)
    writeInt64BE(this._hh, this._hl, 56)
  
    return H
  }
  
  module.exports = Sha512
  
  },{"./hash":303,"inherits":180,"safe-buffer":290}],311:[function(require,module,exports){
  // Copyright Joyent, Inc. and other Node contributors.
  //
  // Permission is hereby granted, free of charge, to any person obtaining a
  // copy of this software and associated documentation files (the
  // "Software"), to deal in the Software without restriction, including
  // without limitation the rights to use, copy, modify, merge, publish,
  // distribute, sublicense, and/or sell copies of the Software, and to permit
  // persons to whom the Software is furnished to do so, subject to the
  // following conditions:
  //
  // The above copyright notice and this permission notice shall be included
  // in all copies or substantial portions of the Software.
  //
  // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
  // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
  // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
  // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
  // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
  // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
  // USE OR OTHER DEALINGS IN THE SOFTWARE.
  
  module.exports = Stream;
  
  var EE = require('events').EventEmitter;
  var inherits = require('inherits');
  
  inherits(Stream, EE);
  Stream.Readable = require('readable-stream/readable.js');
  Stream.Writable = require('readable-stream/writable.js');
  Stream.Duplex = require('readable-stream/duplex.js');
  Stream.Transform = require('readable-stream/transform.js');
  Stream.PassThrough = require('readable-stream/passthrough.js');
  
  // Backwards-compat with node 0.4.x
  Stream.Stream = Stream;
  
  
  
  // old-style streams.  Note that the pipe method (the only relevant
  // part of this class) is overridden in the Readable class.
  
  function Stream() {
    EE.call(this);
  }
  
  Stream.prototype.pipe = function(dest, options) {
    var source = this;
  
    function ondata(chunk) {
      if (dest.writable) {
        if (false === dest.write(chunk) && source.pause) {
          source.pause();
        }
      }
    }
  
    source.on('data', ondata);
  
    function ondrain() {
      if (source.readable && source.resume) {
        source.resume();
      }
    }
  
    dest.on('drain', ondrain);
  
    // If the 'end' option is not supplied, dest.end() will be called when
    // source gets the 'end' or 'close' events.  Only dest.end() once.
    if (!dest._isStdio && (!options || options.end !== false)) {
      source.on('end', onend);
      source.on('close', onclose);
    }
  
    var didOnEnd = false;
    function onend() {
      if (didOnEnd) return;
      didOnEnd = true;
  
      dest.end();
    }
  
  
    function onclose() {
      if (didOnEnd) return;
      didOnEnd = true;
  
      if (typeof dest.destroy === 'function') dest.destroy();
    }
  
    // don't leave dangling pipes when there are errors.
    function onerror(er) {
      cleanup();
      if (EE.listenerCount(this, 'error') === 0) {
        throw er; // Unhandled stream error in pipe.
      }
    }
  
    source.on('error', onerror);
    dest.on('error', onerror);
  
    // remove all the event listeners that were added.
    function cleanup() {
      source.removeListener('data', ondata);
      dest.removeListener('drain', ondrain);
  
      source.removeListener('end', onend);
      source.removeListener('close', onclose);
  
      source.removeListener('error', onerror);
      dest.removeListener('error', onerror);
  
      source.removeListener('end', cleanup);
      source.removeListener('close', cleanup);
  
      dest.removeListener('close', cleanup);
    }
  
    source.on('end', cleanup);
    source.on('close', cleanup);
  
    dest.on('close', cleanup);
  
    dest.emit('pipe', source);
  
    // Allow for unix-like usage: A.pipe(B).pipe(C)
    return dest;
  };
  
  },{"events":157,"inherits":180,"readable-stream/duplex.js":275,"readable-stream/passthrough.js":284,"readable-stream/readable.js":285,"readable-stream/transform.js":286,"readable-stream/writable.js":287}],312:[function(require,module,exports){
  (function (global){
  var ClientRequest = require('./lib/request')
  var IncomingMessage = require('./lib/response')
  var extend = require('xtend')
  var statusCodes = require('builtin-status-codes')
  var url = require('url')
  
  var http = exports
  
  http.request = function (opts, cb) {
    if (typeof opts === 'string')
      opts = url.parse(opts)
    else
      opts = extend(opts)
  
    // Normally, the page is loaded from http or https, so not specifying a protocol
    // will result in a (valid) protocol-relative url. However, this won't work if
    // the protocol is something else, like 'file:'
    var defaultProtocol = global.location.protocol.search(/^https?:$/) === -1 ? 'http:' : ''
  
    var protocol = opts.protocol || defaultProtocol
    var host = opts.hostname || opts.host
    var port = opts.port
    var path = opts.path || '/'
  
    // Necessary for IPv6 addresses
    if (host && host.indexOf(':') !== -1)
      host = '[' + host + ']'
  
    // This may be a relative url. The browser should always be able to interpret it correctly.
    opts.url = (host ? (protocol + '//' + host) : '') + (port ? ':' + port : '') + path
    opts.method = (opts.method || 'GET').toUpperCase()
    opts.headers = opts.headers || {}
  
    // Also valid opts.auth, opts.mode
  
    var req = new ClientRequest(opts)
    if (cb)
      req.on('response', cb)
    return req
  }
  
  http.get = function get (opts, cb) {
    var req = http.request(opts, cb)
    req.end()
    return req
  }
  
  http.ClientRequest = ClientRequest
  http.IncomingMessage = IncomingMessage
  
  http.Agent = function () {}
  http.Agent.defaultMaxSockets = 4
  
  http.STATUS_CODES = statusCodes
  
  http.METHODS = [
    'CHECKOUT',
    'CONNECT',
    'COPY',
    'DELETE',
    'GET',
    'HEAD',
    'LOCK',
    'M-SEARCH',
    'MERGE',
    'MKACTIVITY',
    'MKCOL',
    'MOVE',
    'NOTIFY',
    'OPTIONS',
    'PATCH',
    'POST',
    'PROPFIND',
    'PROPPATCH',
    'PURGE',
    'PUT',
    'REPORT',
    'SEARCH',
    'SUBSCRIBE',
    'TRACE',
    'UNLOCK',
    'UNSUBSCRIBE'
  ]
  }).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
  },{"./lib/request":314,"./lib/response":315,"builtin-status-codes":85,"url":327,"xtend":423}],313:[function(require,module,exports){
  (function (global){
  exports.fetch = isFunction(global.fetch) && isFunction(global.ReadableStream)
  
  exports.writableStream = isFunction(global.WritableStream)
  
  exports.abortController = isFunction(global.AbortController)
  
  exports.blobConstructor = false
  try {
    new Blob([new ArrayBuffer(1)])
    exports.blobConstructor = true
  } catch (e) {}
  
  // The xhr request to example.com may violate some restrictive CSP configurations,
  // so if we're running in a browser that supports `fetch`, avoid calling getXHR()
  // and assume support for certain features below.
  var xhr
  function getXHR () {
    // Cache the xhr value
    if (xhr !== undefined) return xhr
  
    if (global.XMLHttpRequest) {
      xhr = new global.XMLHttpRequest()
      // If XDomainRequest is available (ie only, where xhr might not work
      // cross domain), use the page location. Otherwise use example.com
      // Note: this doesn't actually make an http request.
      try {
        xhr.open('GET', global.XDomainRequest ? '/' : 'https://example.com')
      } catch(e) {
        xhr = null
      }
    } else {
      // Service workers don't have XHR
      xhr = null
    }
    return xhr
  }
  
  function checkTypeSupport (type) {
    var xhr = getXHR()
    if (!xhr) return false
    try {
      xhr.responseType = type
      return xhr.responseType === type
    } catch (e) {}
    return false
  }
  
  // For some strange reason, Safari 7.0 reports typeof global.ArrayBuffer === 'object'.
  // Safari 7.1 appears to have fixed this bug.
  var haveArrayBuffer = typeof global.ArrayBuffer !== 'undefined'
  var haveSlice = haveArrayBuffer && isFunction(global.ArrayBuffer.prototype.slice)
  
  // If fetch is supported, then arraybuffer will be supported too. Skip calling
  // checkTypeSupport(), since that calls getXHR().
  exports.arraybuffer = exports.fetch || (haveArrayBuffer && checkTypeSupport('arraybuffer'))
  
  // These next two tests unavoidably show warnings in Chrome. Since fetch will always
  // be used if it's available, just return false for these to avoid the warnings.
  exports.msstream = !exports.fetch && haveSlice && checkTypeSupport('ms-stream')
  exports.mozchunkedarraybuffer = !exports.fetch && haveArrayBuffer &&
    checkTypeSupport('moz-chunked-arraybuffer')
  
  // If fetch is supported, then overrideMimeType will be supported too. Skip calling
  // getXHR().
  exports.overrideMimeType = exports.fetch || (getXHR() ? isFunction(getXHR().overrideMimeType) : false)
  
  exports.vbArray = isFunction(global.VBArray)
  
  function isFunction (value) {
    return typeof value === 'function'
  }
  
  xhr = null // Help gc
  
  }).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
  },{}],314:[function(require,module,exports){
  (function (process,global,Buffer){
  var capability = require('./capability')
  var inherits = require('inherits')
  var response = require('./response')
  var stream = require('readable-stream')
  var toArrayBuffer = require('to-arraybuffer')
  
  var IncomingMessage = response.IncomingMessage
  var rStates = response.readyStates
  
  function decideMode (preferBinary, useFetch) {
    if (capability.fetch && useFetch) {
      return 'fetch'
    } else if (capability.mozchunkedarraybuffer) {
      return 'moz-chunked-arraybuffer'
    } else if (capability.msstream) {
      return 'ms-stream'
    } else if (capability.arraybuffer && preferBinary) {
      return 'arraybuffer'
    } else if (capability.vbArray && preferBinary) {
      return 'text:vbarray'
    } else {
      return 'text'
    }
  }
  
  var ClientRequest = module.exports = function (opts) {
    var self = this
    stream.Writable.call(self)
  
    self._opts = opts
    self._body = []
    self._headers = {}
    if (opts.auth)
      self.setHeader('Authorization', 'Basic ' + new Buffer(opts.auth).toString('base64'))
    Object.keys(opts.headers).forEach(function (name) {
      self.setHeader(name, opts.headers[name])
    })
  
    var preferBinary
    var useFetch = true
    if (opts.mode === 'disable-fetch' || ('requestTimeout' in opts && !capability.abortController)) {
      // If the use of XHR should be preferred. Not typically needed.
      useFetch = false
      preferBinary = true
    } else if (opts.mode === 'prefer-streaming') {
      // If streaming is a high priority but binary compatibility and
      // the accuracy of the 'content-type' header aren't
      preferBinary = false
    } else if (opts.mode === 'allow-wrong-content-type') {
      // If streaming is more important than preserving the 'content-type' header
      preferBinary = !capability.overrideMimeType
    } else if (!opts.mode || opts.mode === 'default' || opts.mode === 'prefer-fast') {
      // Use binary if text streaming may corrupt data or the content-type header, or for speed
      preferBinary = true
    } else {
      throw new Error('Invalid value for opts.mode')
    }
    self._mode = decideMode(preferBinary, useFetch)
  
    self.on('finish', function () {
      self._onFinish()
    })
  }
  
  inherits(ClientRequest, stream.Writable)
  
  ClientRequest.prototype.setHeader = function (name, value) {
    var self = this
    var lowerName = name.toLowerCase()
    // This check is not necessary, but it prevents warnings from browsers about setting unsafe
    // headers. To be honest I'm not entirely sure hiding these warnings is a good thing, but
    // http-browserify did it, so I will too.
    if (unsafeHeaders.indexOf(lowerName) !== -1)
      return
  
    self._headers[lowerName] = {
      name: name,
      value: value
    }
  }
  
  ClientRequest.prototype.getHeader = function (name) {
    var header = this._headers[name.toLowerCase()]
    if (header)
      return header.value
    return null
  }
  
  ClientRequest.prototype.removeHeader = function (name) {
    var self = this
    delete self._headers[name.toLowerCase()]
  }
  
  ClientRequest.prototype._onFinish = function () {
    var self = this
  
    if (self._destroyed)
      return
    var opts = self._opts
  
    var headersObj = self._headers
    var body = null
    if (opts.method !== 'GET' && opts.method !== 'HEAD') {
      if (capability.arraybuffer) {
        body = toArrayBuffer(Buffer.concat(self._body))
      } else if (capability.blobConstructor) {
        body = new global.Blob(self._body.map(function (buffer) {
          return toArrayBuffer(buffer)
        }), {
          type: (headersObj['content-type'] || {}).value || ''
        })
      } else {
        // get utf8 string
        body = Buffer.concat(self._body).toString()
      }
    }
  
    // create flattened list of headers
    var headersList = []
    Object.keys(headersObj).forEach(function (keyName) {
      var name = headersObj[keyName].name
      var value = headersObj[keyName].value
      if (Array.isArray(value)) {
        value.forEach(function (v) {
          headersList.push([name, v])
        })
      } else {
        headersList.push([name, value])
      }
    })
  
    if (self._mode === 'fetch') {
      var signal = null
      if (capability.abortController) {
        var controller = new AbortController()
        signal = controller.signal
        self._fetchAbortController = controller
  
        if ('requestTimeout' in opts && opts.requestTimeout !== 0) {
          global.setTimeout(function () {
            self.emit('requestTimeout')
            if (self._fetchAbortController)
              self._fetchAbortController.abort()
          }, opts.requestTimeout)
        }
      }
  
      global.fetch(self._opts.url, {
        method: self._opts.method,
        headers: headersList,
        body: body || undefined,
        mode: 'cors',
        credentials: opts.withCredentials ? 'include' : 'same-origin',
        signal: signal
      }).then(function (response) {
        self._fetchResponse = response
        self._connect()
      }, function (reason) {
        self.emit('error', reason)
      })
    } else {
      var xhr = self._xhr = new global.XMLHttpRequest()
      try {
        xhr.open(self._opts.method, self._opts.url, true)
      } catch (err) {
        process.nextTick(function () {
          self.emit('error', err)
        })
        return
      }
  
      // Can't set responseType on really old browsers
      if ('responseType' in xhr)
        xhr.responseType = self._mode.split(':')[0]
  
      if ('withCredentials' in xhr)
        xhr.withCredentials = !!opts.withCredentials
  
      if (self._mode === 'text' && 'overrideMimeType' in xhr)
        xhr.overrideMimeType('text/plain; charset=x-user-defined')
  
      if ('requestTimeout' in opts) {
        xhr.timeout = opts.requestTimeout
        xhr.ontimeout = function () {
          self.emit('requestTimeout')
        }
      }
  
      headersList.forEach(function (header) {
        xhr.setRequestHeader(header[0], header[1])
      })
  
      self._response = null
      xhr.onreadystatechange = function () {
        switch (xhr.readyState) {
          case rStates.LOADING:
          case rStates.DONE:
            self._onXHRProgress()
            break
        }
      }
      // Necessary for streaming in Firefox, since xhr.response is ONLY defined
      // in onprogress, not in onreadystatechange with xhr.readyState = 3
      if (self._mode === 'moz-chunked-arraybuffer') {
        xhr.onprogress = function () {
          self._onXHRProgress()
        }
      }
  
      xhr.onerror = function () {
        if (self._destroyed)
          return
        self.emit('error', new Error('XHR error'))
      }
  
      try {
        xhr.send(body)
      } catch (err) {
        process.nextTick(function () {
          self.emit('error', err)
        })
        return
      }
    }
  }
  
  /**
   * Checks if xhr.status is readable and non-zero, indicating no error.
   * Even though the spec says it should be available in readyState 3,
   * accessing it throws an exception in IE8
   */
  function statusValid (xhr) {
    try {
      var status = xhr.status
      return (status !== null && status !== 0)
    } catch (e) {
      return false
    }
  }
  
  ClientRequest.prototype._onXHRProgress = function () {
    var self = this
  
    if (!statusValid(self._xhr) || self._destroyed)
      return
  
    if (!self._response)
      self._connect()
  
    self._response._onXHRProgress()
  }
  
  ClientRequest.prototype._connect = function () {
    var self = this
  
    if (self._destroyed)
      return
  
    self._response = new IncomingMessage(self._xhr, self._fetchResponse, self._mode)
    self._response.on('error', function(err) {
      self.emit('error', err)
    })
  
    self.emit('response', self._response)
  }
  
  ClientRequest.prototype._write = function (chunk, encoding, cb) {
    var self = this
  
    self._body.push(chunk)
    cb()
  }
  
  ClientRequest.prototype.abort = ClientRequest.prototype.destroy = function () {
    var self = this
    self._destroyed = true
    if (self._response)
      self._response._destroyed = true
    if (self._xhr)
      self._xhr.abort()
    else if (self._fetchAbortController)
      self._fetchAbortController.abort()
  }
  
  ClientRequest.prototype.end = function (data, encoding, cb) {
    var self = this
    if (typeof data === 'function') {
      cb = data
      data = undefined
    }
  
    stream.Writable.prototype.end.call(self, data, encoding, cb)
  }
  
  ClientRequest.prototype.flushHeaders = function () {}
  ClientRequest.prototype.setTimeout = function () {}
  ClientRequest.prototype.setNoDelay = function () {}
  ClientRequest.prototype.setSocketKeepAlive = function () {}
  
  // Taken from http://www.w3.org/TR/XMLHttpRequest/#the-setrequestheader%28%29-method
  var unsafeHeaders = [
    'accept-charset',
    'accept-encoding',
    'access-control-request-headers',
    'access-control-request-method',
    'connection',
    'content-length',
    'cookie',
    'cookie2',
    'date',
    'dnt',
    'expect',
    'host',
    'keep-alive',
    'origin',
    'referer',
    'te',
    'trailer',
    'transfer-encoding',
    'upgrade',
    'user-agent',
    'via'
  ]
  
  }).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer)
  },{"./capability":313,"./response":315,"_process":257,"buffer":84,"inherits":180,"readable-stream":285,"to-arraybuffer":323}],315:[function(require,module,exports){
  (function (process,global,Buffer){
  var capability = require('./capability')
  var inherits = require('inherits')
  var stream = require('readable-stream')
  
  var rStates = exports.readyStates = {
    UNSENT: 0,
    OPENED: 1,
    HEADERS_RECEIVED: 2,
    LOADING: 3,
    DONE: 4
  }
  
  var IncomingMessage = exports.IncomingMessage = function (xhr, response, mode) {
    var self = this
    stream.Readable.call(self)
  
    self._mode = mode
    self.headers = {}
    self.rawHeaders = []
    self.trailers = {}
    self.rawTrailers = []
  
    // Fake the 'close' event, but only once 'end' fires
    self.on('end', function () {
      // The nextTick is necessary to prevent the 'request' module from causing an infinite loop
      process.nextTick(function () {
        self.emit('close')
      })
    })
  
    if (mode === 'fetch') {
      self._fetchResponse = response
  
      self.url = response.url
      self.statusCode = response.status
      self.statusMessage = response.statusText
      
      response.headers.forEach(function (header, key){
        self.headers[key.toLowerCase()] = header
        self.rawHeaders.push(key, header)
      })
  
      if (capability.writableStream) {
        var writable = new WritableStream({
          write: function (chunk) {
            return new Promise(function (resolve, reject) {
              if (self._destroyed) {
                return
              } else if(self.push(new Buffer(chunk))) {
                resolve()
              } else {
                self._resumeFetch = resolve
              }
            })
          },
          close: function () {
            if (!self._destroyed)
              self.push(null)
          },
          abort: function (err) {
            if (!self._destroyed)
              self.emit('error', err)
          }
        })
  
        try {
          response.body.pipeTo(writable)
          return
        } catch (e) {} // pipeTo method isn't defined. Can't find a better way to feature test this
      }
      // fallback for when writableStream or pipeTo aren't available
      var reader = response.body.getReader()
      function read () {
        reader.read().then(function (result) {
          if (self._destroyed)
            return
          if (result.done) {
            self.push(null)
            return
          }
          self.push(new Buffer(result.value))
          read()
        }).catch(function(err) {
          if (!self._destroyed)
            self.emit('error', err)
        })
      }
      read()
    } else {
      self._xhr = xhr
      self._pos = 0
  
      self.url = xhr.responseURL
      self.statusCode = xhr.status
      self.statusMessage = xhr.statusText
      var headers = xhr.getAllResponseHeaders().split(/\r?\n/)
      headers.forEach(function (header) {
        var matches = header.match(/^([^:]+):\s*(.*)/)
        if (matches) {
          var key = matches[1].toLowerCase()
          if (key === 'set-cookie') {
            if (self.headers[key] === undefined) {
              self.headers[key] = []
            }
            self.headers[key].push(matches[2])
          } else if (self.headers[key] !== undefined) {
            self.headers[key] += ', ' + matches[2]
          } else {
            self.headers[key] = matches[2]
          }
          self.rawHeaders.push(matches[1], matches[2])
        }
      })
  
      self._charset = 'x-user-defined'
      if (!capability.overrideMimeType) {
        var mimeType = self.rawHeaders['mime-type']
        if (mimeType) {
          var charsetMatch = mimeType.match(/;\s*charset=([^;])(;|$)/)
          if (charsetMatch) {
            self._charset = charsetMatch[1].toLowerCase()
          }
        }
        if (!self._charset)
          self._charset = 'utf-8' // best guess
      }
    }
  }
  
  inherits(IncomingMessage, stream.Readable)
  
  IncomingMessage.prototype._read = function () {
    var self = this
  
    var resolve = self._resumeFetch
    if (resolve) {
      self._resumeFetch = null
      resolve()
    }
  }
  
  IncomingMessage.prototype._onXHRProgress = function () {
    var self = this
  
    var xhr = self._xhr
  
    var response = null
    switch (self._mode) {
      case 'text:vbarray': // For IE9
        if (xhr.readyState !== rStates.DONE)
          break
        try {
          // This fails in IE8
          response = new global.VBArray(xhr.responseBody).toArray()
        } catch (e) {}
        if (response !== null) {
          self.push(new Buffer(response))
          break
        }
        // Falls through in IE8	
      case 'text':
        try { // This will fail when readyState = 3 in IE9. Switch mode and wait for readyState = 4
          response = xhr.responseText
        } catch (e) {
          self._mode = 'text:vbarray'
          break
        }
        if (response.length > self._pos) {
          var newData = response.substr(self._pos)
          if (self._charset === 'x-user-defined') {
            var buffer = new Buffer(newData.length)
            for (var i = 0; i < newData.length; i++)
              buffer[i] = newData.charCodeAt(i) & 0xff
  
            self.push(buffer)
          } else {
            self.push(newData, self._charset)
          }
          self._pos = response.length
        }
        break
      case 'arraybuffer':
        if (xhr.readyState !== rStates.DONE || !xhr.response)
          break
        response = xhr.response
        self.push(new Buffer(new Uint8Array(response)))
        break
      case 'moz-chunked-arraybuffer': // take whole
        response = xhr.response
        if (xhr.readyState !== rStates.LOADING || !response)
          break
        self.push(new Buffer(new Uint8Array(response)))
        break
      case 'ms-stream':
        response = xhr.response
        if (xhr.readyState !== rStates.LOADING)
          break
        var reader = new global.MSStreamReader()
        reader.onprogress = function () {
          if (reader.result.byteLength > self._pos) {
            self.push(new Buffer(new Uint8Array(reader.result.slice(self._pos))))
            self._pos = reader.result.byteLength
          }
        }
        reader.onload = function () {
          self.push(null)
        }
        // reader.onerror = ??? // TODO: this
        reader.readAsArrayBuffer(response)
        break
    }
  
    // The ms-stream case handles end separately in reader.onload()
    if (self._xhr.readyState === rStates.DONE && self._mode !== 'ms-stream') {
      self.push(null)
    }
  }
  
  }).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer)
  },{"./capability":313,"_process":257,"buffer":84,"inherits":180,"readable-stream":285}],316:[function(require,module,exports){
  'use strict';
  module.exports = function (str) {
    return encodeURIComponent(str).replace(/[!'()*]/g, function (c) {
      return '%' + c.charCodeAt(0).toString(16).toUpperCase();
    });
  };
  
  },{}],317:[function(require,module,exports){
  'use strict';
  
  var Buffer = require('safe-buffer').Buffer;
  
  var isEncoding = Buffer.isEncoding || function (encoding) {
    encoding = '' + encoding;
    switch (encoding && encoding.toLowerCase()) {
      case 'hex':case 'utf8':case 'utf-8':case 'ascii':case 'binary':case 'base64':case 'ucs2':case 'ucs-2':case 'utf16le':case 'utf-16le':case 'raw':
        return true;
      default:
        return false;
    }
  };
  
  function _normalizeEncoding(enc) {
    if (!enc) return 'utf8';
    var retried;
    while (true) {
      switch (enc) {
        case 'utf8':
        case 'utf-8':
          return 'utf8';
        case 'ucs2':
        case 'ucs-2':
        case 'utf16le':
        case 'utf-16le':
          return 'utf16le';
        case 'latin1':
        case 'binary':
          return 'latin1';
        case 'base64':
        case 'ascii':
        case 'hex':
          return enc;
        default:
          if (retried) return; // undefined
          enc = ('' + enc).toLowerCase();
          retried = true;
      }
    }
  };
  
  // Do not cache `Buffer.isEncoding` when checking encoding names as some
  // modules monkey-patch it to support additional encodings
  function normalizeEncoding(enc) {
    var nenc = _normalizeEncoding(enc);
    if (typeof nenc !== 'string' && (Buffer.isEncoding === isEncoding || !isEncoding(enc))) throw new Error('Unknown encoding: ' + enc);
    return nenc || enc;
  }
  
  // StringDecoder provides an interface for efficiently splitting a series of
  // buffers into a series of JS strings without breaking apart multi-byte
  // characters.
  exports.StringDecoder = StringDecoder;
  function StringDecoder(encoding) {
    this.encoding = normalizeEncoding(encoding);
    var nb;
    switch (this.encoding) {
      case 'utf16le':
        this.text = utf16Text;
        this.end = utf16End;
        nb = 4;
        break;
      case 'utf8':
        this.fillLast = utf8FillLast;
        nb = 4;
        break;
      case 'base64':
        this.text = base64Text;
        this.end = base64End;
        nb = 3;
        break;
      default:
        this.write = simpleWrite;
        this.end = simpleEnd;
        return;
    }
    this.lastNeed = 0;
    this.lastTotal = 0;
    this.lastChar = Buffer.allocUnsafe(nb);
  }
  
  StringDecoder.prototype.write = function (buf) {
    if (buf.length === 0) return '';
    var r;
    var i;
    if (this.lastNeed) {
      r = this.fillLast(buf);
      if (r === undefined) return '';
      i = this.lastNeed;
      this.lastNeed = 0;
    } else {
      i = 0;
    }
    if (i < buf.length) return r ? r + this.text(buf, i) : this.text(buf, i);
    return r || '';
  };
  
  StringDecoder.prototype.end = utf8End;
  
  // Returns only complete characters in a Buffer
  StringDecoder.prototype.text = utf8Text;
  
  // Attempts to complete a partial non-UTF-8 character using bytes from a Buffer
  StringDecoder.prototype.fillLast = function (buf) {
    if (this.lastNeed <= buf.length) {
      buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, this.lastNeed);
      return this.lastChar.toString(this.encoding, 0, this.lastTotal);
    }
    buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, buf.length);
    this.lastNeed -= buf.length;
  };
  
  // Checks the type of a UTF-8 byte, whether it's ASCII, a leading byte, or a
  // continuation byte.
  function utf8CheckByte(byte) {
    if (byte <= 0x7F) return 0;else if (byte >> 5 === 0x06) return 2;else if (byte >> 4 === 0x0E) return 3;else if (byte >> 3 === 0x1E) return 4;
    return -1;
  }
  
  // Checks at most 3 bytes at the end of a Buffer in order to detect an
  // incomplete multi-byte UTF-8 character. The total number of bytes (2, 3, or 4)
  // needed to complete the UTF-8 character (if applicable) are returned.
  function utf8CheckIncomplete(self, buf, i) {
    var j = buf.length - 1;
    if (j < i) return 0;
    var nb = utf8CheckByte(buf[j]);
    if (nb >= 0) {
      if (nb > 0) self.lastNeed = nb - 1;
      return nb;
    }
    if (--j < i) return 0;
    nb = utf8CheckByte(buf[j]);
    if (nb >= 0) {
      if (nb > 0) self.lastNeed = nb - 2;
      return nb;
    }
    if (--j < i) return 0;
    nb = utf8CheckByte(buf[j]);
    if (nb >= 0) {
      if (nb > 0) {
        if (nb === 2) nb = 0;else self.lastNeed = nb - 3;
      }
      return nb;
    }
    return 0;
  }
  
  // Validates as many continuation bytes for a multi-byte UTF-8 character as
  // needed or are available. If we see a non-continuation byte where we expect
  // one, we "replace" the validated continuation bytes we've seen so far with
  // UTF-8 replacement characters ('\ufffd'), to match v8's UTF-8 decoding
  // behavior. The continuation byte check is included three times in the case
  // where all of the continuation bytes for a character exist in the same buffer.
  // It is also done this way as a slight performance increase instead of using a
  // loop.
  function utf8CheckExtraBytes(self, buf, p) {
    if ((buf[0] & 0xC0) !== 0x80) {
      self.lastNeed = 0;
      return '\ufffd'.repeat(p);
    }
    if (self.lastNeed > 1 && buf.length > 1) {
      if ((buf[1] & 0xC0) !== 0x80) {
        self.lastNeed = 1;
        return '\ufffd'.repeat(p + 1);
      }
      if (self.lastNeed > 2 && buf.length > 2) {
        if ((buf[2] & 0xC0) !== 0x80) {
          self.lastNeed = 2;
          return '\ufffd'.repeat(p + 2);
        }
      }
    }
  }
  
  // Attempts to complete a multi-byte UTF-8 character using bytes from a Buffer.
  function utf8FillLast(buf) {
    var p = this.lastTotal - this.lastNeed;
    var r = utf8CheckExtraBytes(this, buf, p);
    if (r !== undefined) return r;
    if (this.lastNeed <= buf.length) {
      buf.copy(this.lastChar, p, 0, this.lastNeed);
      return this.lastChar.toString(this.encoding, 0, this.lastTotal);
    }
    buf.copy(this.lastChar, p, 0, buf.length);
    this.lastNeed -= buf.length;
  }
  
  // Returns all complete UTF-8 characters in a Buffer. If the Buffer ended on a
  // partial character, the character's bytes are buffered until the required
  // number of bytes are available.
  function utf8Text(buf, i) {
    var total = utf8CheckIncomplete(this, buf, i);
    if (!this.lastNeed) return buf.toString('utf8', i);
    this.lastTotal = total;
    var end = buf.length - (total - this.lastNeed);
    buf.copy(this.lastChar, 0, end);
    return buf.toString('utf8', i, end);
  }
  
  // For UTF-8, a replacement character for each buffered byte of a (partial)
  // character needs to be added to the output.
  function utf8End(buf) {
    var r = buf && buf.length ? this.write(buf) : '';
    if (this.lastNeed) return r + '\ufffd'.repeat(this.lastTotal - this.lastNeed);
    return r;
  }
  
  // UTF-16LE typically needs two bytes per character, but even if we have an even
  // number of bytes available, we need to check if we end on a leading/high
  // surrogate. In that case, we need to wait for the next two bytes in order to
  // decode the last character properly.
  function utf16Text(buf, i) {
    if ((buf.length - i) % 2 === 0) {
      var r = buf.toString('utf16le', i);
      if (r) {
        var c = r.charCodeAt(r.length - 1);
        if (c >= 0xD800 && c <= 0xDBFF) {
          this.lastNeed = 2;
          this.lastTotal = 4;
          this.lastChar[0] = buf[buf.length - 2];
          this.lastChar[1] = buf[buf.length - 1];
          return r.slice(0, -1);
        }
      }
      return r;
    }
    this.lastNeed = 1;
    this.lastTotal = 2;
    this.lastChar[0] = buf[buf.length - 1];
    return buf.toString('utf16le', i, buf.length - 1);
  }
  
  // For UTF-16LE we do not explicitly append special replacement characters if we
  // end on a partial character, we simply let v8 handle that.
  function utf16End(buf) {
    var r = buf && buf.length ? this.write(buf) : '';
    if (this.lastNeed) {
      var end = this.lastTotal - this.lastNeed;
      return r + this.lastChar.toString('utf16le', 0, end);
    }
    return r;
  }
  
  function base64Text(buf, i) {
    var n = (buf.length - i) % 3;
    if (n === 0) return buf.toString('base64', i);
    this.lastNeed = 3 - n;
    this.lastTotal = 3;
    if (n === 1) {
      this.lastChar[0] = buf[buf.length - 1];
    } else {
      this.lastChar[0] = buf[buf.length - 2];
      this.lastChar[1] = buf[buf.length - 1];
    }
    return buf.toString('base64', i, buf.length - n);
  }
  
  function base64End(buf) {
    var r = buf && buf.length ? this.write(buf) : '';
    if (this.lastNeed) return r + this.lastChar.toString('base64', 0, 3 - this.lastNeed);
    return r;
  }
  
  // Pass bytes on through for single-byte encodings (e.g. ascii, latin1, hex)
  function simpleWrite(buf) {
    return buf.toString(this.encoding);
  }
  
  function simpleEnd(buf) {
    return buf && buf.length ? this.write(buf) : '';
  }
  },{"safe-buffer":290}],318:[function(require,module,exports){
  var isHexPrefixed = require('is-hex-prefixed');
  
  /**
   * Removes '0x' from a given `String` is present
   * @param {String} str the string value
   * @return {String|Optional} a string by pass if necessary
   */
  module.exports = function stripHexPrefix(str) {
    if (typeof str !== 'string') {
      return str;
    }
  
    return isHexPrefixed(str) ? str.slice(2) : str;
  }
  
  },{"is-hex-prefixed":185}],319:[function(require,module,exports){
  var unavailable = function unavailable() {
    throw "This swarm.js function isn't available on the browser.";
  };
  
  var fsp = { readFile: unavailable };
  var files = { download: unavailable, safeDownloadArchived: unavailable, directoryTree: unavailable };
  var os = { platform: unavailable, arch: unavailable };
  var path = { join: unavailable, slice: unavailable };
  var child_process = { spawn: unavailable };
  var mimetype = { lookup: unavailable };
  var defaultArchives = {};
  var downloadUrl = null;
  var request = require("xhr-request-promise");
  var bytes = require("eth-lib/lib/bytes");
  var hash = require("./swarm-hash.js");
  var pick = require("./pick.js");
  var swarm = require("./swarm");
  
  module.exports = swarm({
    fsp: fsp,
    files: files,
    os: os,
    path: path,
    child_process: child_process,
    defaultArchives: defaultArchives,
    mimetype: mimetype,
    request: request,
    downloadUrl: downloadUrl,
    bytes: bytes,
    hash: hash,
    pick: pick
  });
  },{"./pick.js":320,"./swarm":322,"./swarm-hash.js":321,"eth-lib/lib/bytes":133,"xhr-request-promise":411}],320:[function(require,module,exports){
  var picker = function picker(type) {
    return function () {
      return new Promise(function (resolve, reject) {
        var fileLoader = function fileLoader(e) {
          var directory = {};
          var totalFiles = e.target.files.length;
          var loadedFiles = 0;
          [].map.call(e.target.files, function (file) {
            var reader = new FileReader();
            reader.onload = function (e) {
              var data = new Uint8Array(e.target.result);
              if (type === "directory") {
                var path = file.webkitRelativePath;
                directory[path.slice(path.indexOf("/") + 1)] = {
                  type: "text/plain",
                  data: data
                };
                if (++loadedFiles === totalFiles) resolve(directory);
              } else if (type === "file") {
                var _path = file.webkitRelativePath;
                resolve({ "type": mimetype.lookup(_path), "data": data });
              } else {
                resolve(data);
              }
            };
            reader.readAsArrayBuffer(file);
          });
        };
  
        var fileInput = void 0;
        if (type === "directory") {
          fileInput = document.createElement("input");
          fileInput.addEventListener("change", fileLoader);
          fileInput.type = "file";
          fileInput.webkitdirectory = true;
          fileInput.mozdirectory = true;
          fileInput.msdirectory = true;
          fileInput.odirectory = true;
          fileInput.directory = true;
        } else {
          fileInput = document.createElement("input");
          fileInput.addEventListener("change", fileLoader);
          fileInput.type = "file";
        };
  
        var mouseEvent = document.createEvent("MouseEvents");
        mouseEvent.initEvent("click", true, false);
        fileInput.dispatchEvent(mouseEvent);
      });
    };
  };
  
  module.exports = {
    data: picker("data"),
    file: picker("file"),
    directory: picker("directory")
  };
  },{}],321:[function(require,module,exports){
  // Thanks https://github.com/axic/swarmhash
  
  var keccak = require("eth-lib/lib/hash").keccak256;
  var Bytes = require("eth-lib/lib/bytes");
  
  var swarmHashBlock = function swarmHashBlock(length, data) {
    var lengthEncoded = Bytes.reverse(Bytes.pad(6, Bytes.fromNumber(length)));
    var bytes = Bytes.flatten([lengthEncoded, "0x0000", data]);
    return keccak(bytes).slice(2);
  };
  
  // (Bytes | Uint8Array | String) -> String
  var swarmHash = function swarmHash(data) {
    if (typeof data === "string" && data.slice(0, 2) !== "0x") {
      data = Bytes.fromString(data);
    } else if (typeof data !== "string" && data.length !== undefined) {
      data = Bytes.fromUint8Array(data);
    }
  
    var length = Bytes.length(data);
  
    if (length <= 4096) {
      return swarmHashBlock(length, data);
    }
  
    var maxSize = 4096;
    while (maxSize * (4096 / 32) < length) {
      maxSize *= 4096 / 32;
    }
  
    var innerNodes = [];
    for (var i = 0; i < length; i += maxSize) {
      var size = maxSize < length - i ? maxSize : length - i;
      innerNodes.push(swarmHash(Bytes.slice(data, i, i + size)));
    }
  
    return swarmHashBlock(length, Bytes.flatten(innerNodes));
  };
  
  module.exports = swarmHash;
  },{"eth-lib/lib/bytes":133,"eth-lib/lib/hash":134}],322:[function(require,module,exports){
  // TODO: this is a temporary fix to hide those libraries from the browser. A
  // slightly better long-term solution would be to split this file into two,
  // separating the functions that are used on Node.js from the functions that
  // are used only on the browser.
  module.exports = function (_ref) {
    var fsp = _ref.fsp,
        files = _ref.files,
        os = _ref.os,
        path = _ref.path,
        child_process = _ref.child_process,
        mimetype = _ref.mimetype,
        defaultArchives = _ref.defaultArchives,
        request = _ref.request,
        downloadUrl = _ref.downloadUrl,
        bytes = _ref.bytes,
        hash = _ref.hash,
        pick = _ref.pick;
  
  
    // â a . String -> JSON -> Map String a -o Map String a
    //   Inserts a key/val pair in an object impurely.
    var impureInsert = function impureInsert(key) {
      return function (val) {
        return function (map) {
          return map[key] = val, map;
        };
      };
    };
  
    // String -> JSON -> Map String JSON
    //   Merges an array of keys and an array of vals into an object.
    var toMap = function toMap(keys) {
      return function (vals) {
        var map = {};
        for (var i = 0, l = keys.length; i < l; ++i) {
          map[keys[i]] = vals[i];
        }return map;
      };
    };
  
    // â a . Map String a -> Map String a -> Map String a
    //   Merges two maps into one.
    var merge = function merge(a) {
      return function (b) {
        var map = {};
        for (var key in a) {
          map[key] = a[key];
        }for (var _key in b) {
          map[_key] = b[_key];
        }return map;
      };
    };
  
    // â a . [a] -> [a] -> Bool
    var equals = function equals(a) {
      return function (b) {
        if (a.length !== b.length) {
          return false;
        } else {
          for (var i = 0, l = a.length; i < a; ++i) {
            if (a[i] !== b[i]) return false;
          }
        }
        return true;
      };
    };
  
    // String -> String -> String
    var rawUrl = function rawUrl(swarmUrl) {
      return function (hash) {
        return swarmUrl + "/bzzr:/" + hash;
      };
    };
  
    // String -> String -> Promise Uint8Array
    //   Gets the raw contents of a Swarm hash address.
    var downloadData = function downloadData(swarmUrl) {
      return function (hash) {
        return request(rawUrl(swarmUrl)(hash), { responseType: "arraybuffer" }).then(function (arrayBuffer) {
          var uint8Array = new Uint8Array(arrayBuffer);
          var error404 = [52, 48, 52, 32, 112, 97, 103, 101, 32, 110, 111, 116, 32, 102, 111, 117, 110, 100, 10];
          if (equals(uint8Array)(error404)) throw "Error 404.";
          return uint8Array;
        });
      };
    };
  
    // type Entry = {"type": String, "hash": String}
    // type File = {"type": String, "data": Uint8Array}
  
    // String -> String -> Promise (Map String Entry)
    //   Solves the manifest of a Swarm address recursively.
    //   Returns a map from full paths to entries.
    var downloadEntries = function downloadEntries(swarmUrl) {
      return function (hash) {
        var search = function search(hash) {
          return function (path) {
            return function (routes) {
              // Formats an entry to the Swarm.js type.
              var format = function format(entry) {
                return {
                  type: entry.contentType,
                  hash: entry.hash };
              };
  
              // To download a single entry:
              //   if type is bzz-manifest, go deeper
              //   if not, add it to the routing table
              var downloadEntry = function downloadEntry(entry) {
                if (entry.path === undefined) {
                  return Promise.resolve();
                } else {
                  return entry.contentType === "application/bzz-manifest+json" ? search(entry.hash)(path + entry.path)(routes) : Promise.resolve(impureInsert(path + entry.path)(format(entry))(routes));
                }
              };
  
              // Downloads the initial manifest and then each entry.
              return downloadData(swarmUrl)(hash).then(function (text) {
                return JSON.parse(toString(text)).entries;
              }).then(function (entries) {
                return Promise.all(entries.map(downloadEntry));
              }).then(function () {
                return routes;
              });
            };
          };
        };
  
        return search(hash)("")({});
      };
    };
  
    // String -> String -> Promise (Map String String)
    //   Same as `downloadEntries`, but returns only hashes (no types).
    var downloadRoutes = function downloadRoutes(swarmUrl) {
      return function (hash) {
        return downloadEntries(swarmUrl)(hash).then(function (entries) {
          return toMap(Object.keys(entries))(Object.keys(entries).map(function (route) {
            return entries[route].hash;
          }));
        });
      };
    };
  
    // String -> String -> Promise (Map String File)
    //   Gets the entire directory tree in a Swarm address.
    //   Returns a promise mapping paths to file contents.
    var downloadDirectory = function downloadDirectory(swarmUrl) {
      return function (hash) {
        return downloadEntries(swarmUrl)(hash).then(function (entries) {
          var paths = Object.keys(entries);
          var hashs = paths.map(function (path) {
            return entries[path].hash;
          });
          var types = paths.map(function (path) {
            return entries[path].type;
          });
          var datas = hashs.map(downloadData(swarmUrl));
          var files = function files(datas) {
            return datas.map(function (data, i) {
              return { type: types[i], data: data };
            });
          };
          return Promise.all(datas).then(function (datas) {
            return toMap(paths)(files(datas));
          });
        });
      };
    };
  
    // String -> String -> String -> Promise String
    //   Gets the raw contents of a Swarm hash address.
    //   Returns a promise with the downloaded file path.
    var downloadDataToDisk = function downloadDataToDisk(swarmUrl) {
      return function (hash) {
        return function (filePath) {
          return files.download(rawUrl(swarmUrl)(hash))(filePath);
        };
      };
    };
  
    // String -> String -> String -> Promise (Map String String)
    //   Gets the entire directory tree in a Swarm address.
    //   Returns a promise mapping paths to file contents.
    var downloadDirectoryToDisk = function downloadDirectoryToDisk(swarmUrl) {
      return function (hash) {
        return function (dirPath) {
          return downloadRoutes(swarmUrl)(hash).then(function (routingTable) {
            var downloads = [];
            for (var route in routingTable) {
              if (route.length > 0) {
                var filePath = path.join(dirPath, route);
                downloads.push(downloadDataToDisk(swarmUrl)(routingTable[route])(filePath));
              };
            };
            return Promise.all(downloads).then(function () {
              return dirPath;
            });
          });
        };
      };
    };
  
    // String -> Uint8Array -> Promise String
    //   Uploads raw data to Swarm.
    //   Returns a promise with the uploaded hash.
    var uploadData = function uploadData(swarmUrl) {
      return function (data) {
        return request(swarmUrl + "/bzzr:/", {
          body: typeof data === "string" ? fromString(data) : data,
          method: "POST" });
      };
    };
  
    // String -> String -> String -> File -> Promise String
    //   Uploads a file to the Swarm manifest at a given hash, under a specific
    //   route. Returns a promise containing the uploaded hash.
    //   FIXME: for some reasons Swarm-Gateways is sometimes returning
    //   error 404Â (bad request), so we retry up to 3 times. Why?
    var uploadToManifest = function uploadToManifest(swarmUrl) {
      return function (hash) {
        return function (route) {
          return function (file) {
            var attempt = function attempt(n) {
              var slashRoute = route[0] === "/" ? route : "/" + route;
              var url = swarmUrl + "/bzz:/" + hash + slashRoute;
              var opt = {
                method: "PUT",
                headers: { "Content-Type": file.type },
                body: file.data };
              return request(url, opt).then(function (response) {
                if (response.indexOf("error") !== -1) {
                  throw response;
                }
                return response;
              }).catch(function (e) {
                return n > 0 && attempt(n - 1);
              });
            };
            return attempt(3);
          };
        };
      };
    };
  
    // String -> {type: String, data: Uint8Array} -> Promise String
    var uploadFile = function uploadFile(swarmUrl) {
      return function (file) {
        return uploadDirectory(swarmUrl)({ "": file });
      };
    };
  
    // String -> String -> Promise String
    var uploadFileFromDisk = function uploadFileFromDisk(swarmUrl) {
      return function (filePath) {
        return fsp.readFile(filePath).then(function (data) {
          return uploadFile(swarmUrl)({ type: mimetype.lookup(filePath), data: data });
        });
      };
    };
  
    // String -> Map String File -> Promise String
    //   Uploads a directory to Swarm. The directory is
    //   represented as a map of routes and files.
    //   A default path is encoded by having a "" route.
    var uploadDirectory = function uploadDirectory(swarmUrl) {
      return function (directory) {
        return uploadData(swarmUrl)("{}").then(function (hash) {
          var uploadRoute = function uploadRoute(route) {
            return function (hash) {
              return uploadToManifest(swarmUrl)(hash)(route)(directory[route]);
            };
          };
          var uploadToHash = function uploadToHash(hash, route) {
            return hash.then(uploadRoute(route));
          };
          return Object.keys(directory).reduce(uploadToHash, Promise.resolve(hash));
        });
      };
    };
  
    // String -> Promise String
    var uploadDataFromDisk = function uploadDataFromDisk(swarmUrl) {
      return function (filePath) {
        return fsp.readFile(filePath).then(uploadData(swarmUrl));
      };
    };
  
    // String -> Nullable String -> String -> Promise String
    var uploadDirectoryFromDisk = function uploadDirectoryFromDisk(swarmUrl) {
      return function (defaultPath) {
        return function (dirPath) {
          return files.directoryTree(dirPath).then(function (fullPaths) {
            return Promise.all(fullPaths.map(function (path) {
              return fsp.readFile(path);
            })).then(function (datas) {
              var paths = fullPaths.map(function (path) {
                return path.slice(dirPath.length);
              });
              var types = fullPaths.map(function (path) {
                return mimetype.lookup(path) || "text/plain";
              });
              return toMap(paths)(datas.map(function (data, i) {
                return { type: types[i], data: data };
              }));
            });
          }).then(function (directory) {
            return merge(defaultPath ? { "": directory[defaultPath] } : {})(directory);
          }).then(uploadDirectory(swarmUrl));
        };
      };
    };
  
    // String -> UploadInfo -> Promise String
    //   Simplified multi-type upload which calls the correct
    //   one based on the type of the argument given.
    var _upload = function _upload(swarmUrl) {
      return function (arg) {
        // Upload raw data from browser
        if (arg.pick === "data") {
          return pick.data().then(uploadData(swarmUrl));
  
          // Upload a file from browser
        } else if (arg.pick === "file") {
          return pick.file().then(uploadFile(swarmUrl));
  
          // Upload a directory from browser
        } else if (arg.pick === "directory") {
          return pick.directory().then(uploadDirectory(swarmUrl));
  
          // Upload directory/file from disk
        } else if (arg.path) {
          switch (arg.kind) {
            case "data":
              return uploadDataFromDisk(swarmUrl)(arg.path);
            case "file":
              return uploadFileFromDisk(swarmUrl)(arg.path);
            case "directory":
              return uploadDirectoryFromDisk(swarmUrl)(arg.defaultFile)(arg.path);
          };
  
          // Upload UTF-8 string or raw data (buffer)
        } else if (arg.length || typeof arg === "string") {
          return uploadData(swarmUrl)(arg);
  
          // Upload directory with JSON
        } else if (arg instanceof Object) {
          return uploadDirectory(swarmUrl)(arg);
        }
  
        return Promise.reject(new Error("Bad arguments"));
      };
    };
  
    // String -> String -> Nullable String -> Promise (String | Uint8Array | Map String Uint8Array)
    //   Simplified multi-type download which calls the correct function based on
    //   the type of the argument given, and on whether the Swwarm address has a
    //   directory or a file.
    var _download = function _download(swarmUrl) {
      return function (hash) {
        return function (path) {
          return isDirectory(swarmUrl)(hash).then(function (isDir) {
            if (isDir) {
              return path ? downloadDirectoryToDisk(swarmUrl)(hash)(path) : downloadDirectory(swarmUrl)(hash);
            } else {
              return path ? downloadDataToDisk(swarmUrl)(hash)(path) : downloadData(swarmUrl)(hash);
            }
          });
        };
      };
    };
  
    // String -> Promise String
    //   Downloads the Swarm binaries into a path. Returns a promise that only
    //   resolves when the exact Swarm file is there, and verified to be correct.
    //   If it was already there to begin with, skips the download.
    var downloadBinary = function downloadBinary(path, archives) {
      var system = os.platform().replace("win32", "windows") + "-" + (os.arch() === "x64" ? "amd64" : "386");
      var archive = (archives || defaultArchives)[system];
      var archiveUrl = downloadUrl + archive.archive + ".tar.gz";
      var archiveMD5 = archive.archiveMD5;
      var binaryMD5 = archive.binaryMD5;
      return files.safeDownloadArchived(archiveUrl)(archiveMD5)(binaryMD5)(path);
    };
  
    // type SwarmSetup = {
    //   account : String,
    //   password : String,
    //   dataDir : String,
    //   binPath : String,
    //   ensApi : String,
    //   onDownloadProgress : Number ~> (),
    //   archives : [{
    //     archive: String,
    //     binaryMD5: String,
    //     archiveMD5: String
    //   }]
    // }
  
    // SwarmSetup ~> Promise Process
    //   Starts the Swarm process.
    var startProcess = function startProcess(swarmSetup) {
      return new Promise(function (resolve, reject) {
        var spawn = child_process.spawn;
  
  
        var hasString = function hasString(str) {
          return function (buffer) {
            return ('' + buffer).indexOf(str) !== -1;
          };
        };
        var account = swarmSetup.account,
            password = swarmSetup.password,
            dataDir = swarmSetup.dataDir,
            ensApi = swarmSetup.ensApi,
            privateKey = swarmSetup.privateKey;
  
  
        var STARTUP_TIMEOUT_SECS = 3;
        var WAITING_PASSWORD = 0;
        var STARTING = 1;
        var LISTENING = 2;
        var PASSWORD_PROMPT_HOOK = "Passphrase";
        var LISTENING_HOOK = "Swarm http proxy started";
  
        var state = WAITING_PASSWORD;
  
        var swarmProcess = spawn(swarmSetup.binPath, ['--bzzaccount', account || privateKey, '--datadir', dataDir, '--ens-api', ensApi]);
  
        var handleProcessOutput = function handleProcessOutput(data) {
          if (state === WAITING_PASSWORD && hasString(PASSWORD_PROMPT_HOOK)(data)) {
            setTimeout(function () {
              state = STARTING;
              swarmProcess.stdin.write(password + '\n');
            }, 500);
          } else if (hasString(LISTENING_HOOK)(data)) {
            state = LISTENING;
            clearTimeout(timeout);
            resolve(swarmProcess);
          }
        };
  
        swarmProcess.stdout.on('data', handleProcessOutput);
        swarmProcess.stderr.on('data', handleProcessOutput);
        //swarmProcess.on('close', () => setTimeout(restart, 2000));
  
        var restart = function restart() {
          return startProcess(swarmSetup).then(resolve).catch(reject);
        };
        var error = function error() {
          return reject(new Error("Couldn't start swarm process."));
        };
        var timeout = setTimeout(error, 20000);
      });
    };
  
    // Process ~> Promise ()
    //   Stops the Swarm process.
    var stopProcess = function stopProcess(process) {
      return new Promise(function (resolve, reject) {
        process.stderr.removeAllListeners('data');
        process.stdout.removeAllListeners('data');
        process.stdin.removeAllListeners('error');
        process.removeAllListeners('error');
        process.removeAllListeners('exit');
        process.kill('SIGINT');
  
        var killTimeout = setTimeout(function () {
          return process.kill('SIGKILL');
        }, 8000);
  
        process.once('close', function () {
          clearTimeout(killTimeout);
          resolve();
        });
      });
    };
  
    // SwarmSetup -> (SwarmAPI -> Promise ()) -> Promise ()
    //   Receives a Swarm configuration object and a callback function. It then
    //   checks if a local Swarm node is running. If no local Swarm is found, it
    //   downloads the Swarm binaries to the dataDir (if not there), checksums,
    //   starts the Swarm process and calls the callback function with an API
    //   object using the local node. That callback must return a promise which
    //   will resolve when it is done using the API, so that this function can
    //   close the Swarm process properly. Returns a promise that resolves when the
    //   user is done with the API and the Swarm process is closed.
    //   TODO: check if Swarm process is already running (improve `isAvailable`)
    var local = function local(swarmSetup) {
      return function (useAPI) {
        return _isAvailable("http://localhost:8500").then(function (isAvailable) {
          return isAvailable ? useAPI(at("http://localhost:8500")).then(function () {}) : downloadBinary(swarmSetup.binPath, swarmSetup.archives).onData(function (data) {
            return (swarmSetup.onProgress || function () {})(data.length);
          }).then(function () {
            return startProcess(swarmSetup);
          }).then(function (process) {
            return useAPI(at("http://localhost:8500")).then(function () {
              return process;
            });
          }).then(stopProcess);
        });
      };
    };
  
    // String ~> Promise Bool
    //   Returns true if Swarm is available on `url`.
    //   Performs a test upload to determine that.
    //   TODO: improve this?
    var _isAvailable = function _isAvailable(swarmUrl) {
      var testFile = "test";
      var testHash = "c9a99c7d326dcc6316f32fe2625b311f6dc49a175e6877681ded93137d3569e7";
      return uploadData(swarmUrl)(testFile).then(function (hash) {
        return hash === testHash;
      }).catch(function () {
        return false;
      });
    };
  
    // String -> String ~> Promise Bool
    //   Returns a Promise which is true if that Swarm address is a directory.
    //   Determines that by checking that it (i) is a JSON, (ii) has a .entries.
    //   TODO: improve this?
    var isDirectory = function isDirectory(swarmUrl) {
      return function (hash) {
        return downloadData(swarmUrl)(hash).then(function (data) {
          try {
            return !!JSON.parse(toString(data)).entries;
          } catch (e) {
            return false;
          }
        });
      };
    };
  
    // Uncurries a function; used to allow the f(x,y,z) style on exports.
    var uncurry = function uncurry(f) {
      return function (a, b, c, d, e) {
        var p;
        // Hardcoded because efficiency (`arguments` is very slow).
        if (typeof a !== "undefined") p = f(a);
        if (typeof b !== "undefined") p = f(b);
        if (typeof c !== "undefined") p = f(c);
        if (typeof d !== "undefined") p = f(d);
        if (typeof e !== "undefined") p = f(e);
        return p;
      };
    };
  
    // () -> Promise Bool
    //   Not sure how to mock Swarm to test it properly. Ideas?
    var test = function test() {
      return Promise.resolve(true);
    };
  
    // Uint8Array -> String
    var toString = function toString(uint8Array) {
      return bytes.toString(bytes.fromUint8Array(uint8Array));
    };
  
    // String -> Uint8Array
    var fromString = function fromString(string) {
      return bytes.toUint8Array(bytes.fromString(string));
    };
  
    // String -> SwarmAPI
    //   Fixes the `swarmUrl`, returning an API where you don't have to pass it.
    var at = function at(swarmUrl) {
      return {
        download: function download(hash, path) {
          return _download(swarmUrl)(hash)(path);
        },
        downloadData: uncurry(downloadData(swarmUrl)),
        downloadDataToDisk: uncurry(downloadDataToDisk(swarmUrl)),
        downloadDirectory: uncurry(downloadDirectory(swarmUrl)),
        downloadDirectoryToDisk: uncurry(downloadDirectoryToDisk(swarmUrl)),
        downloadEntries: uncurry(downloadEntries(swarmUrl)),
        downloadRoutes: uncurry(downloadRoutes(swarmUrl)),
        isAvailable: function isAvailable() {
          return _isAvailable(swarmUrl);
        },
        upload: function upload(arg) {
          return _upload(swarmUrl)(arg);
        },
        uploadData: uncurry(uploadData(swarmUrl)),
        uploadFile: uncurry(uploadFile(swarmUrl)),
        uploadFileFromDisk: uncurry(uploadFile(swarmUrl)),
        uploadDataFromDisk: uncurry(uploadDataFromDisk(swarmUrl)),
        uploadDirectory: uncurry(uploadDirectory(swarmUrl)),
        uploadDirectoryFromDisk: uncurry(uploadDirectoryFromDisk(swarmUrl)),
        uploadToManifest: uncurry(uploadToManifest(swarmUrl)),
        pick: pick,
        hash: hash,
        fromString: fromString,
        toString: toString
      };
    };
  
    return {
      at: at,
      local: local,
      download: _download,
      downloadBinary: downloadBinary,
      downloadData: downloadData,
      downloadDataToDisk: downloadDataToDisk,
      downloadDirectory: downloadDirectory,
      downloadDirectoryToDisk: downloadDirectoryToDisk,
      downloadEntries: downloadEntries,
      downloadRoutes: downloadRoutes,
      isAvailable: _isAvailable,
      startProcess: startProcess,
      stopProcess: stopProcess,
      upload: _upload,
      uploadData: uploadData,
      uploadDataFromDisk: uploadDataFromDisk,
      uploadFile: uploadFile,
      uploadFileFromDisk: uploadFileFromDisk,
      uploadDirectory: uploadDirectory,
      uploadDirectoryFromDisk: uploadDirectoryFromDisk,
      uploadToManifest: uploadToManifest,
      pick: pick,
      hash: hash,
      fromString: fromString,
      toString: toString
    };
  };
  
  },{}],323:[function(require,module,exports){
  var Buffer = require('buffer').Buffer
  
  module.exports = function (buf) {
    // If the buffer is backed by a Uint8Array, a faster version will work
    if (buf instanceof Uint8Array) {
      // If the buffer isn't a subarray, return the underlying ArrayBuffer
      if (buf.byteOffset === 0 && buf.byteLength === buf.buffer.byteLength) {
        return buf.buffer
      } else if (typeof buf.buffer.slice === 'function') {
        // Otherwise we need to get a proper copy
        return buf.buffer.slice(buf.byteOffset, buf.byteOffset + buf.byteLength)
      }
    }
  
    if (Buffer.isBuffer(buf)) {
      // This is the slow version that will work with any Buffer
      // implementation (even in old browsers)
      var arrayCopy = new Uint8Array(buf.length)
      var len = buf.length
      for (var i = 0; i < len; i++) {
        arrayCopy[i] = buf[i]
      }
      return arrayCopy.buffer
    } else {
      throw new Error('Argument must be a Buffer')
    }
  }
  
  },{"buffer":84}],324:[function(require,module,exports){
  
  exports = module.exports = trim;
  
  function trim(str){
    return str.replace(/^\s*|\s*$/g, '');
  }
  
  exports.left = function(str){
    return str.replace(/^\s*/, '');
  };
  
  exports.right = function(str){
    return str.replace(/\s*$/, '');
  };
  
  },{}],325:[function(require,module,exports){
  //     Underscore.js 1.8.3
  //     http://underscorejs.org
  //     (c) 2009-2015 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
  //     Underscore may be freely distributed under the MIT license.
  
  (function() {
  
    // Baseline setup
    // --------------
  
    // Establish the root object, `window` in the browser, or `exports` on the server.
    var root = this;
  
    // Save the previous value of the `_` variable.
    var previousUnderscore = root._;
  
    // Save bytes in the minified (but not gzipped) version:
    var ArrayProto = Array.prototype, ObjProto = Object.prototype, FuncProto = Function.prototype;
  
    // Create quick reference variables for speed access to core prototypes.
    var
      push             = ArrayProto.push,
      slice            = ArrayProto.slice,
      toString         = ObjProto.toString,
      hasOwnProperty   = ObjProto.hasOwnProperty;
  
    // All **ECMAScript 5** native function implementations that we hope to use
    // are declared here.
    var
      nativeIsArray      = Array.isArray,
      nativeKeys         = Object.keys,
      nativeBind         = FuncProto.bind,
      nativeCreate       = Object.create;
  
    // Naked function reference for surrogate-prototype-swapping.
    var Ctor = function(){};
  
    // Create a safe reference to the Underscore object for use below.
    var _ = function(obj) {
      if (obj instanceof _) return obj;
      if (!(this instanceof _)) return new _(obj);
      this._wrapped = obj;
    };
  
    // Export the Underscore object for **Node.js**, with
    // backwards-compatibility for the old `require()` API. If we're in
    // the browser, add `_` as a global object.
    if (typeof exports !== 'undefined') {
      if (typeof module !== 'undefined' && module.exports) {
        exports = module.exports = _;
      }
      exports._ = _;
    } else {
      root._ = _;
    }
  
    // Current version.
    _.VERSION = '1.8.3';
  
    // Internal function that returns an efficient (for current engines) version
    // of the passed-in callback, to be repeatedly applied in other Underscore
    // functions.
    var optimizeCb = function(func, context, argCount) {
      if (context === void 0) return func;
      switch (argCount == null ? 3 : argCount) {
        case 1: return function(value) {
          return func.call(context, value);
        };
        case 2: return function(value, other) {
          return func.call(context, value, other);
        };
        case 3: return function(value, index, collection) {
          return func.call(context, value, index, collection);
        };
        case 4: return function(accumulator, value, index, collection) {
          return func.call(context, accumulator, value, index, collection);
        };
      }
      return function() {
        return func.apply(context, arguments);
      };
    };
  
    // A mostly-internal function to generate callbacks that can be applied
    // to each element in a collection, returning the desired result â either
    // identity, an arbitrary callback, a property matcher, or a property accessor.
    var cb = function(value, context, argCount) {
      if (value == null) return _.identity;
      if (_.isFunction(value)) return optimizeCb(value, context, argCount);
      if (_.isObject(value)) return _.matcher(value);
      return _.property(value);
    };
    _.iteratee = function(value, context) {
      return cb(value, context, Infinity);
    };
  
    // An internal function for creating assigner functions.
    var createAssigner = function(keysFunc, undefinedOnly) {
      return function(obj) {
        var length = arguments.length;
        if (length < 2 || obj == null) return obj;
        for (var index = 1; index < length; index++) {
          var source = arguments[index],
              keys = keysFunc(source),
              l = keys.length;
          for (var i = 0; i < l; i++) {
            var key = keys[i];
            if (!undefinedOnly || obj[key] === void 0) obj[key] = source[key];
          }
        }
        return obj;
      };
    };
  
    // An internal function for creating a new object that inherits from another.
    var baseCreate = function(prototype) {
      if (!_.isObject(prototype)) return {};
      if (nativeCreate) return nativeCreate(prototype);
      Ctor.prototype = prototype;
      var result = new Ctor;
      Ctor.prototype = null;
      return result;
    };
  
    var property = function(key) {
      return function(obj) {
        return obj == null ? void 0 : obj[key];
      };
    };
  
    // Helper for collection methods to determine whether a collection
    // should be iterated as an array or as an object
    // Related: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-tolength
    // Avoids a very nasty iOS 8 JIT bug on ARM-64. #2094
    var MAX_ARRAY_INDEX = Math.pow(2, 53) - 1;
    var getLength = property('length');
    var isArrayLike = function(collection) {
      var length = getLength(collection);
      return typeof length == 'number' && length >= 0 && length <= MAX_ARRAY_INDEX;
    };
  
    // Collection Functions
    // --------------------
  
    // The cornerstone, an `each` implementation, aka `forEach`.
    // Handles raw objects in addition to array-likes. Treats all
    // sparse array-likes as if they were dense.
    _.each = _.forEach = function(obj, iteratee, context) {
      iteratee = optimizeCb(iteratee, context);
      var i, length;
      if (isArrayLike(obj)) {
        for (i = 0, length = obj.length; i < length; i++) {
          iteratee(obj[i], i, obj);
        }
      } else {
        var keys = _.keys(obj);
        for (i = 0, length = keys.length; i < length; i++) {
          iteratee(obj[keys[i]], keys[i], obj);
        }
      }
      return obj;
    };
  
    // Return the results of applying the iteratee to each element.
    _.map = _.collect = function(obj, iteratee, context) {
      iteratee = cb(iteratee, context);
      var keys = !isArrayLike(obj) && _.keys(obj),
          length = (keys || obj).length,
          results = Array(length);
      for (var index = 0; index < length; index++) {
        var currentKey = keys ? keys[index] : index;
        results[index] = iteratee(obj[currentKey], currentKey, obj);
      }
      return results;
    };
  
    // Create a reducing function iterating left or right.
    function createReduce(dir) {
      // Optimized iterator function as using arguments.length
      // in the main function will deoptimize the, see #1991.
      function iterator(obj, iteratee, memo, keys, index, length) {
        for (; index >= 0 && index < length; index += dir) {
          var currentKey = keys ? keys[index] : index;
          memo = iteratee(memo, obj[currentKey], currentKey, obj);
        }
        return memo;
      }
  
      return function(obj, iteratee, memo, context) {
        iteratee = optimizeCb(iteratee, context, 4);
        var keys = !isArrayLike(obj) && _.keys(obj),
            length = (keys || obj).length,
            index = dir > 0 ? 0 : length - 1;
        // Determine the initial value if none is provided.
        if (arguments.length < 3) {
          memo = obj[keys ? keys[index] : index];
          index += dir;
        }
        return iterator(obj, iteratee, memo, keys, index, length);
      };
    }
  
    // **Reduce** builds up a single result from a list of values, aka `inject`,
    // or `foldl`.
    _.reduce = _.foldl = _.inject = createReduce(1);
  
    // The right-associative version of reduce, also known as `foldr`.
    _.reduceRight = _.foldr = createReduce(-1);
  
    // Return the first value which passes a truth test. Aliased as `detect`.
    _.find = _.detect = function(obj, predicate, context) {
      var key;
      if (isArrayLike(obj)) {
        key = _.findIndex(obj, predicate, context);
      } else {
        key = _.findKey(obj, predicate, context);
      }
      if (key !== void 0 && key !== -1) return obj[key];
    };
  
    // Return all the elements that pass a truth test.
    // Aliased as `select`.
    _.filter = _.select = function(obj, predicate, context) {
      var results = [];
      predicate = cb(predicate, context);
      _.each(obj, function(value, index, list) {
        if (predicate(value, index, list)) results.push(value);
      });
      return results;
    };
  
    // Return all the elements for which a truth test fails.
    _.reject = function(obj, predicate, context) {
      return _.filter(obj, _.negate(cb(predicate)), context);
    };
  
    // Determine whether all of the elements match a truth test.
    // Aliased as `all`.
    _.every = _.all = function(obj, predicate, context) {
      predicate = cb(predicate, context);
      var keys = !isArrayLike(obj) && _.keys(obj),
          length = (keys || obj).length;
      for (var index = 0; index < length; index++) {
        var currentKey = keys ? keys[index] : index;
        if (!predicate(obj[currentKey], currentKey, obj)) return false;
      }
      return true;
    };
  
    // Determine if at least one element in the object matches a truth test.
    // Aliased as `any`.
    _.some = _.any = function(obj, predicate, context) {
      predicate = cb(predicate, context);
      var keys = !isArrayLike(obj) && _.keys(obj),
          length = (keys || obj).length;
      for (var index = 0; index < length; index++) {
        var currentKey = keys ? keys[index] : index;
        if (predicate(obj[currentKey], currentKey, obj)) return true;
      }
      return false;
    };
  
    // Determine if the array or object contains a given item (using `===`).
    // Aliased as `includes` and `include`.
    _.contains = _.includes = _.include = function(obj, item, fromIndex, guard) {
      if (!isArrayLike(obj)) obj = _.values(obj);
      if (typeof fromIndex != 'number' || guard) fromIndex = 0;
      return _.indexOf(obj, item, fromIndex) >= 0;
    };
  
    // Invoke a method (with arguments) on every item in a collection.
    _.invoke = function(obj, method) {
      var args = slice.call(arguments, 2);
      var isFunc = _.isFunction(method);
      return _.map(obj, function(value) {
        var func = isFunc ? method : value[method];
        return func == null ? func : func.apply(value, args);
      });
    };
  
    // Convenience version of a common use case of `map`: fetching a property.
    _.pluck = function(obj, key) {
      return _.map(obj, _.property(key));
    };
  
    // Convenience version of a common use case of `filter`: selecting only objects
    // containing specific `key:value` pairs.
    _.where = function(obj, attrs) {
      return _.filter(obj, _.matcher(attrs));
    };
  
    // Convenience version of a common use case of `find`: getting the first object
    // containing specific `key:value` pairs.
    _.findWhere = function(obj, attrs) {
      return _.find(obj, _.matcher(attrs));
    };
  
    // Return the maximum element (or element-based computation).
    _.max = function(obj, iteratee, context) {
      var result = -Infinity, lastComputed = -Infinity,
          value, computed;
      if (iteratee == null && obj != null) {
        obj = isArrayLike(obj) ? obj : _.values(obj);
        for (var i = 0, length = obj.length; i < length; i++) {
          value = obj[i];
          if (value > result) {
            result = value;
          }
        }
      } else {
        iteratee = cb(iteratee, context);
        _.each(obj, function(value, index, list) {
          computed = iteratee(value, index, list);
          if (computed > lastComputed || computed === -Infinity && result === -Infinity) {
            result = value;
            lastComputed = computed;
          }
        });
      }
      return result;
    };
  
    // Return the minimum element (or element-based computation).
    _.min = function(obj, iteratee, context) {
      var result = Infinity, lastComputed = Infinity,
          value, computed;
      if (iteratee == null && obj != null) {
        obj = isArrayLike(obj) ? obj : _.values(obj);
        for (var i = 0, length = obj.length; i < length; i++) {
          value = obj[i];
          if (value < result) {
            result = value;
          }
        }
      } else {
        iteratee = cb(iteratee, context);
        _.each(obj, function(value, index, list) {
          computed = iteratee(value, index, list);
          if (computed < lastComputed || computed === Infinity && result === Infinity) {
            result = value;
            lastComputed = computed;
          }
        });
      }
      return result;
    };
  
    // Shuffle a collection, using the modern version of the
    // [Fisher-Yates shuffle](http://en.wikipedia.org/wiki/FisherâYates_shuffle).
    _.shuffle = function(obj) {
      var set = isArrayLike(obj) ? obj : _.values(obj);
      var length = set.length;
      var shuffled = Array(length);
      for (var index = 0, rand; index < length; index++) {
        rand = _.random(0, index);
        if (rand !== index) shuffled[index] = shuffled[rand];
        shuffled[rand] = set[index];
      }
      return shuffled;
    };
  
    // Sample **n** random values from a collection.
    // If **n** is not specified, returns a single random element.
    // The internal `guard` argument allows it to work with `map`.
    _.sample = function(obj, n, guard) {
      if (n == null || guard) {
        if (!isArrayLike(obj)) obj = _.values(obj);
        return obj[_.random(obj.length - 1)];
      }
      return _.shuffle(obj).slice(0, Math.max(0, n));
    };
  
    // Sort the object's values by a criterion produced by an iteratee.
    _.sortBy = function(obj, iteratee, context) {
      iteratee = cb(iteratee, context);
      return _.pluck(_.map(obj, function(value, index, list) {
        return {
          value: value,
          index: index,
          criteria: iteratee(value, index, list)
        };
      }).sort(function(left, right) {
        var a = left.criteria;
        var b = right.criteria;
        if (a !== b) {
          if (a > b || a === void 0) return 1;
          if (a < b || b === void 0) return -1;
        }
        return left.index - right.index;
      }), 'value');
    };
  
    // An internal function used for aggregate "group by" operations.
    var group = function(behavior) {
      return function(obj, iteratee, context) {
        var result = {};
        iteratee = cb(iteratee, context);
        _.each(obj, function(value, index) {
          var key = iteratee(value, index, obj);
          behavior(result, value, key);
        });
        return result;
      };
    };
  
    // Groups the object's values by a criterion. Pass either a string attribute
    // to group by, or a function that returns the criterion.
    _.groupBy = group(function(result, value, key) {
      if (_.has(result, key)) result[key].push(value); else result[key] = [value];
    });
  
    // Indexes the object's values by a criterion, similar to `groupBy`, but for
    // when you know that your index values will be unique.
    _.indexBy = group(function(result, value, key) {
      result[key] = value;
    });
  
    // Counts instances of an object that group by a certain criterion. Pass
    // either a string attribute to count by, or a function that returns the
    // criterion.
    _.countBy = group(function(result, value, key) {
      if (_.has(result, key)) result[key]++; else result[key] = 1;
    });
  
    // Safely create a real, live array from anything iterable.
    _.toArray = function(obj) {
      if (!obj) return [];
      if (_.isArray(obj)) return slice.call(obj);
      if (isArrayLike(obj)) return _.map(obj, _.identity);
      return _.values(obj);
    };
  
    // Return the number of elements in an object.
    _.size = function(obj) {
      if (obj == null) return 0;
      return isArrayLike(obj) ? obj.length : _.keys(obj).length;
    };
  
    // Split a collection into two arrays: one whose elements all satisfy the given
    // predicate, and one whose elements all do not satisfy the predicate.
    _.partition = function(obj, predicate, context) {
      predicate = cb(predicate, context);
      var pass = [], fail = [];
      _.each(obj, function(value, key, obj) {
        (predicate(value, key, obj) ? pass : fail).push(value);
      });
      return [pass, fail];
    };
  
    // Array Functions
    // ---------------
  
    // Get the first element of an array. Passing **n** will return the first N
    // values in the array. Aliased as `head` and `take`. The **guard** check
    // allows it to work with `_.map`.
    _.first = _.head = _.take = function(array, n, guard) {
      if (array == null) return void 0;
      if (n == null || guard) return array[0];
      return _.initial(array, array.length - n);
    };
  
    // Returns everything but the last entry of the array. Especially useful on
    // the arguments object. Passing **n** will return all the values in
    // the array, excluding the last N.
    _.initial = function(array, n, guard) {
      return slice.call(array, 0, Math.max(0, array.length - (n == null || guard ? 1 : n)));
    };
  
    // Get the last element of an array. Passing **n** will return the last N
    // values in the array.
    _.last = function(array, n, guard) {
      if (array == null) return void 0;
      if (n == null || guard) return array[array.length - 1];
      return _.rest(array, Math.max(0, array.length - n));
    };
  
    // Returns everything but the first entry of the array. Aliased as `tail` and `drop`.
    // Especially useful on the arguments object. Passing an **n** will return
    // the rest N values in the array.
    _.rest = _.tail = _.drop = function(array, n, guard) {
      return slice.call(array, n == null || guard ? 1 : n);
    };
  
    // Trim out all falsy values from an array.
    _.compact = function(array) {
      return _.filter(array, _.identity);
    };
  
    // Internal implementation of a recursive `flatten` function.
    var flatten = function(input, shallow, strict, startIndex) {
      var output = [], idx = 0;
      for (var i = startIndex || 0, length = getLength(input); i < length; i++) {
        var value = input[i];
        if (isArrayLike(value) && (_.isArray(value) || _.isArguments(value))) {
          //flatten current level of array or arguments object
          if (!shallow) value = flatten(value, shallow, strict);
          var j = 0, len = value.length;
          output.length += len;
          while (j < len) {
            output[idx++] = value[j++];
          }
        } else if (!strict) {
          output[idx++] = value;
        }
      }
      return output;
    };
  
    // Flatten out an array, either recursively (by default), or just one level.
    _.flatten = function(array, shallow) {
      return flatten(array, shallow, false);
    };
  
    // Return a version of the array that does not contain the specified value(s).
    _.without = function(array) {
      return _.difference(array, slice.call(arguments, 1));
    };
  
    // Produce a duplicate-free version of the array. If the array has already
    // been sorted, you have the option of using a faster algorithm.
    // Aliased as `unique`.
    _.uniq = _.unique = function(array, isSorted, iteratee, context) {
      if (!_.isBoolean(isSorted)) {
        context = iteratee;
        iteratee = isSorted;
        isSorted = false;
      }
      if (iteratee != null) iteratee = cb(iteratee, context);
      var result = [];
      var seen = [];
      for (var i = 0, length = getLength(array); i < length; i++) {
        var value = array[i],
            computed = iteratee ? iteratee(value, i, array) : value;
        if (isSorted) {
          if (!i || seen !== computed) result.push(value);
          seen = computed;
        } else if (iteratee) {
          if (!_.contains(seen, computed)) {
            seen.push(computed);
            result.push(value);
          }
        } else if (!_.contains(result, value)) {
          result.push(value);
        }
      }
      return result;
    };
  
    // Produce an array that contains the union: each distinct element from all of
    // the passed-in arrays.
    _.union = function() {
      return _.uniq(flatten(arguments, true, true));
    };
  
    // Produce an array that contains every item shared between all the
    // passed-in arrays.
    _.intersection = function(array) {
      var result = [];
      var argsLength = arguments.length;
      for (var i = 0, length = getLength(array); i < length; i++) {
        var item = array[i];
        if (_.contains(result, item)) continue;
        for (var j = 1; j < argsLength; j++) {
          if (!_.contains(arguments[j], item)) break;
        }
        if (j === argsLength) result.push(item);
      }
      return result;
    };
  
    // Take the difference between one array and a number of other arrays.
    // Only the elements present in just the first array will remain.
    _.difference = function(array) {
      var rest = flatten(arguments, true, true, 1);
      return _.filter(array, function(value){
        return !_.contains(rest, value);
      });
    };
  
    // Zip together multiple lists into a single array -- elements that share
    // an index go together.
    _.zip = function() {
      return _.unzip(arguments);
    };
  
    // Complement of _.zip. Unzip accepts an array of arrays and groups
    // each array's elements on shared indices
    _.unzip = function(array) {
      var length = array && _.max(array, getLength).length || 0;
      var result = Array(length);
  
      for (var index = 0; index < length; index++) {
        result[index] = _.pluck(array, index);
      }
      return result;
    };
  
    // Converts lists into objects. Pass either a single array of `[key, value]`
    // pairs, or two parallel arrays of the same length -- one of keys, and one of
    // the corresponding values.
    _.object = function(list, values) {
      var result = {};
      for (var i = 0, length = getLength(list); i < length; i++) {
        if (values) {
          result[list[i]] = values[i];
        } else {
          result[list[i][0]] = list[i][1];
        }
      }
      return result;
    };
  
    // Generator function to create the findIndex and findLastIndex functions
    function createPredicateIndexFinder(dir) {
      return function(array, predicate, context) {
        predicate = cb(predicate, context);
        var length = getLength(array);
        var index = dir > 0 ? 0 : length - 1;
        for (; index >= 0 && index < length; index += dir) {
          if (predicate(array[index], index, array)) return index;
        }
        return -1;
      };
    }
  
    // Returns the first index on an array-like that passes a predicate test
    _.findIndex = createPredicateIndexFinder(1);
    _.findLastIndex = createPredicateIndexFinder(-1);
  
    // Use a comparator function to figure out the smallest index at which
    // an object should be inserted so as to maintain order. Uses binary search.
    _.sortedIndex = function(array, obj, iteratee, context) {
      iteratee = cb(iteratee, context, 1);
      var value = iteratee(obj);
      var low = 0, high = getLength(array);
      while (low < high) {
        var mid = Math.floor((low + high) / 2);
        if (iteratee(array[mid]) < value) low = mid + 1; else high = mid;
      }
      return low;
    };
  
    // Generator function to create the indexOf and lastIndexOf functions
    function createIndexFinder(dir, predicateFind, sortedIndex) {
      return function(array, item, idx) {
        var i = 0, length = getLength(array);
        if (typeof idx == 'number') {
          if (dir > 0) {
              i = idx >= 0 ? idx : Math.max(idx + length, i);
          } else {
              length = idx >= 0 ? Math.min(idx + 1, length) : idx + length + 1;
          }
        } else if (sortedIndex && idx && length) {
          idx = sortedIndex(array, item);
          return array[idx] === item ? idx : -1;
        }
        if (item !== item) {
          idx = predicateFind(slice.call(array, i, length), _.isNaN);
          return idx >= 0 ? idx + i : -1;
        }
        for (idx = dir > 0 ? i : length - 1; idx >= 0 && idx < length; idx += dir) {
          if (array[idx] === item) return idx;
        }
        return -1;
      };
    }
  
    // Return the position of the first occurrence of an item in an array,
    // or -1 if the item is not included in the array.
    // If the array is large and already in sort order, pass `true`
    // for **isSorted** to use binary search.
    _.indexOf = createIndexFinder(1, _.findIndex, _.sortedIndex);
    _.lastIndexOf = createIndexFinder(-1, _.findLastIndex);
  
    // Generate an integer Array containing an arithmetic progression. A port of
    // the native Python `range()` function. See
    // [the Python documentation](http://docs.python.org/library/functions.html#range).
    _.range = function(start, stop, step) {
      if (stop == null) {
        stop = start || 0;
        start = 0;
      }
      step = step || 1;
  
      var length = Math.max(Math.ceil((stop - start) / step), 0);
      var range = Array(length);
  
      for (var idx = 0; idx < length; idx++, start += step) {
        range[idx] = start;
      }
  
      return range;
    };
  
    // Function (ahem) Functions
    // ------------------
  
    // Determines whether to execute a function as a constructor
    // or a normal function with the provided arguments
    var executeBound = function(sourceFunc, boundFunc, context, callingContext, args) {
      if (!(callingContext instanceof boundFunc)) return sourceFunc.apply(context, args);
      var self = baseCreate(sourceFunc.prototype);
      var result = sourceFunc.apply(self, args);
      if (_.isObject(result)) return result;
      return self;
    };
  
    // Create a function bound to a given object (assigning `this`, and arguments,
    // optionally). Delegates to **ECMAScript 5**'s native `Function.bind` if
    // available.
    _.bind = function(func, context) {
      if (nativeBind && func.bind === nativeBind) return nativeBind.apply(func, slice.call(arguments, 1));
      if (!_.isFunction(func)) throw new TypeError('Bind must be called on a function');
      var args = slice.call(arguments, 2);
      var bound = function() {
        return executeBound(func, bound, context, this, args.concat(slice.call(arguments)));
      };
      return bound;
    };
  
    // Partially apply a function by creating a version that has had some of its
    // arguments pre-filled, without changing its dynamic `this` context. _ acts
    // as a placeholder, allowing any combination of arguments to be pre-filled.
    _.partial = function(func) {
      var boundArgs = slice.call(arguments, 1);
      var bound = function() {
        var position = 0, length = boundArgs.length;
        var args = Array(length);
        for (var i = 0; i < length; i++) {
          args[i] = boundArgs[i] === _ ? arguments[position++] : boundArgs[i];
        }
        while (position < arguments.length) args.push(arguments[position++]);
        return executeBound(func, bound, this, this, args);
      };
      return bound;
    };
  
    // Bind a number of an object's methods to that object. Remaining arguments
    // are the method names to be bound. Useful for ensuring that all callbacks
    // defined on an object belong to it.
    _.bindAll = function(obj) {
      var i, length = arguments.length, key;
      if (length <= 1) throw new Error('bindAll must be passed function names');
      for (i = 1; i < length; i++) {
        key = arguments[i];
        obj[key] = _.bind(obj[key], obj);
      }
      return obj;
    };
  
    // Memoize an expensive function by storing its results.
    _.memoize = function(func, hasher) {
      var memoize = function(key) {
        var cache = memoize.cache;
        var address = '' + (hasher ? hasher.apply(this, arguments) : key);
        if (!_.has(cache, address)) cache[address] = func.apply(this, arguments);
        return cache[address];
      };
      memoize.cache = {};
      return memoize;
    };
  
    // Delays a function for the given number of milliseconds, and then calls
    // it with the arguments supplied.
    _.delay = function(func, wait) {
      var args = slice.call(arguments, 2);
      return setTimeout(function(){
        return func.apply(null, args);
      }, wait);
    };
  
    // Defers a function, scheduling it to run after the current call stack has
    // cleared.
    _.defer = _.partial(_.delay, _, 1);
  
    // Returns a function, that, when invoked, will only be triggered at most once
    // during a given window of time. Normally, the throttled function will run
    // as much as it can, without ever going more than once per `wait` duration;
    // but if you'd like to disable the execution on the leading edge, pass
    // `{leading: false}`. To disable execution on the trailing edge, ditto.
    _.throttle = function(func, wait, options) {
      var context, args, result;
      var timeout = null;
      var previous = 0;
      if (!options) options = {};
      var later = function() {
        previous = options.leading === false ? 0 : _.now();
        timeout = null;
        result = func.apply(context, args);
        if (!timeout) context = args = null;
      };
      return function() {
        var now = _.now();
        if (!previous && options.leading === false) previous = now;
        var remaining = wait - (now - previous);
        context = this;
        args = arguments;
        if (remaining <= 0 || remaining > wait) {
          if (timeout) {
            clearTimeout(timeout);
            timeout = null;
          }
          previous = now;
          result = func.apply(context, args);
          if (!timeout) context = args = null;
        } else if (!timeout && options.trailing !== false) {
          timeout = setTimeout(later, remaining);
        }
        return result;
      };
    };
  
    // Returns a function, that, as long as it continues to be invoked, will not
    // be triggered. The function will be called after it stops being called for
    // N milliseconds. If `immediate` is passed, trigger the function on the
    // leading edge, instead of the trailing.
    _.debounce = function(func, wait, immediate) {
      var timeout, args, context, timestamp, result;
  
      var later = function() {
        var last = _.now() - timestamp;
  
        if (last < wait && last >= 0) {
          timeout = setTimeout(later, wait - last);
        } else {
          timeout = null;
          if (!immediate) {
            result = func.apply(context, args);
            if (!timeout) context = args = null;
          }
        }
      };
  
      return function() {
        context = this;
        args = arguments;
        timestamp = _.now();
        var callNow = immediate && !timeout;
        if (!timeout) timeout = setTimeout(later, wait);
        if (callNow) {
          result = func.apply(context, args);
          context = args = null;
        }
  
        return result;
      };
    };
  
    // Returns the first function passed as an argument to the second,
    // allowing you to adjust arguments, run code before and after, and
    // conditionally execute the original function.
    _.wrap = function(func, wrapper) {
      return _.partial(wrapper, func);
    };
  
    // Returns a negated version of the passed-in predicate.
    _.negate = function(predicate) {
      return function() {
        return !predicate.apply(this, arguments);
      };
    };
  
    // Returns a function that is the composition of a list of functions, each
    // consuming the return value of the function that follows.
    _.compose = function() {
      var args = arguments;
      var start = args.length - 1;
      return function() {
        var i = start;
        var result = args[start].apply(this, arguments);
        while (i--) result = args[i].call(this, result);
        return result;
      };
    };
  
    // Returns a function that will only be executed on and after the Nth call.
    _.after = function(times, func) {
      return function() {
        if (--times < 1) {
          return func.apply(this, arguments);
        }
      };
    };
  
    // Returns a function that will only be executed up to (but not including) the Nth call.
    _.before = function(times, func) {
      var memo;
      return function() {
        if (--times > 0) {
          memo = func.apply(this, arguments);
        }
        if (times <= 1) func = null;
        return memo;
      };
    };
  
    // Returns a function that will be executed at most one time, no matter how
    // often you call it. Useful for lazy initialization.
    _.once = _.partial(_.before, 2);
  
    // Object Functions
    // ----------------
  
    // Keys in IE < 9 that won't be iterated by `for key in ...` and thus missed.
    var hasEnumBug = !{toString: null}.propertyIsEnumerable('toString');
    var nonEnumerableProps = ['valueOf', 'isPrototypeOf', 'toString',
                        'propertyIsEnumerable', 'hasOwnProperty', 'toLocaleString'];
  
    function collectNonEnumProps(obj, keys) {
      var nonEnumIdx = nonEnumerableProps.length;
      var constructor = obj.constructor;
      var proto = (_.isFunction(constructor) && constructor.prototype) || ObjProto;
  
      // Constructor is a special case.
      var prop = 'constructor';
      if (_.has(obj, prop) && !_.contains(keys, prop)) keys.push(prop);
  
      while (nonEnumIdx--) {
        prop = nonEnumerableProps[nonEnumIdx];
        if (prop in obj && obj[prop] !== proto[prop] && !_.contains(keys, prop)) {
          keys.push(prop);
        }
      }
    }
  
    // Retrieve the names of an object's own properties.
    // Delegates to **ECMAScript 5**'s native `Object.keys`
    _.keys = function(obj) {
      if (!_.isObject(obj)) return [];
      if (nativeKeys) return nativeKeys(obj);
      var keys = [];
      for (var key in obj) if (_.has(obj, key)) keys.push(key);
      // Ahem, IE < 9.
      if (hasEnumBug) collectNonEnumProps(obj, keys);
      return keys;
    };
  
    // Retrieve all the property names of an object.
    _.allKeys = function(obj) {
      if (!_.isObject(obj)) return [];
      var keys = [];
      for (var key in obj) keys.push(key);
      // Ahem, IE < 9.
      if (hasEnumBug) collectNonEnumProps(obj, keys);
      return keys;
    };
  
    // Retrieve the values of an object's properties.
    _.values = function(obj) {
      var keys = _.keys(obj);
      var length = keys.length;
      var values = Array(length);
      for (var i = 0; i < length; i++) {
        values[i] = obj[keys[i]];
      }
      return values;
    };
  
    // Returns the results of applying the iteratee to each element of the object
    // In contrast to _.map it returns an object
    _.mapObject = function(obj, iteratee, context) {
      iteratee = cb(iteratee, context);
      var keys =  _.keys(obj),
            length = keys.length,
            results = {},
            currentKey;
        for (var index = 0; index < length; index++) {
          currentKey = keys[index];
          results[currentKey] = iteratee(obj[currentKey], currentKey, obj);
        }
        return results;
    };
  
    // Convert an object into a list of `[key, value]` pairs.
    _.pairs = function(obj) {
      var keys = _.keys(obj);
      var length = keys.length;
      var pairs = Array(length);
      for (var i = 0; i < length; i++) {
        pairs[i] = [keys[i], obj[keys[i]]];
      }
      return pairs;
    };
  
    // Invert the keys and values of an object. The values must be serializable.
    _.invert = function(obj) {
      var result = {};
      var keys = _.keys(obj);
      for (var i = 0, length = keys.length; i < length; i++) {
        result[obj[keys[i]]] = keys[i];
      }
      return result;
    };
  
    // Return a sorted list of the function names available on the object.
    // Aliased as `methods`
    _.functions = _.methods = function(obj) {
      var names = [];
      for (var key in obj) {
        if (_.isFunction(obj[key])) names.push(key);
      }
      return names.sort();
    };
  
    // Extend a given object with all the properties in passed-in object(s).
    _.extend = createAssigner(_.allKeys);
  
    // Assigns a given object with all the own properties in the passed-in object(s)
    // (https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Object/assign)
    _.extendOwn = _.assign = createAssigner(_.keys);
  
    // Returns the first key on an object that passes a predicate test
    _.findKey = function(obj, predicate, context) {
      predicate = cb(predicate, context);
      var keys = _.keys(obj), key;
      for (var i = 0, length = keys.length; i < length; i++) {
        key = keys[i];
        if (predicate(obj[key], key, obj)) return key;
      }
    };
  
    // Return a copy of the object only containing the whitelisted properties.
    _.pick = function(object, oiteratee, context) {
      var result = {}, obj = object, iteratee, keys;
      if (obj == null) return result;
      if (_.isFunction(oiteratee)) {
        keys = _.allKeys(obj);
        iteratee = optimizeCb(oiteratee, context);
      } else {
        keys = flatten(arguments, false, false, 1);
        iteratee = function(value, key, obj) { return key in obj; };
        obj = Object(obj);
      }
      for (var i = 0, length = keys.length; i < length; i++) {
        var key = keys[i];
        var value = obj[key];
        if (iteratee(value, key, obj)) result[key] = value;
      }
      return result;
    };
  
     // Return a copy of the object without the blacklisted properties.
    _.omit = function(obj, iteratee, context) {
      if (_.isFunction(iteratee)) {
        iteratee = _.negate(iteratee);
      } else {
        var keys = _.map(flatten(arguments, false, false, 1), String);
        iteratee = function(value, key) {
          return !_.contains(keys, key);
        };
      }
      return _.pick(obj, iteratee, context);
    };
  
    // Fill in a given object with default properties.
    _.defaults = createAssigner(_.allKeys, true);
  
    // Creates an object that inherits from the given prototype object.
    // If additional properties are provided then they will be added to the
    // created object.
    _.create = function(prototype, props) {
      var result = baseCreate(prototype);
      if (props) _.extendOwn(result, props);
      return result;
    };
  
    // Create a (shallow-cloned) duplicate of an object.
    _.clone = function(obj) {
      if (!_.isObject(obj)) return obj;
      return _.isArray(obj) ? obj.slice() : _.extend({}, obj);
    };
  
    // Invokes interceptor with the obj, and then returns obj.
    // The primary purpose of this method is to "tap into" a method chain, in
    // order to perform operations on intermediate results within the chain.
    _.tap = function(obj, interceptor) {
      interceptor(obj);
      return obj;
    };
  
    // Returns whether an object has a given set of `key:value` pairs.
    _.isMatch = function(object, attrs) {
      var keys = _.keys(attrs), length = keys.length;
      if (object == null) return !length;
      var obj = Object(object);
      for (var i = 0; i < length; i++) {
        var key = keys[i];
        if (attrs[key] !== obj[key] || !(key in obj)) return false;
      }
      return true;
    };
  
  
    // Internal recursive comparison function for `isEqual`.
    var eq = function(a, b, aStack, bStack) {
      // Identical objects are equal. `0 === -0`, but they aren't identical.
      // See the [Harmony `egal` proposal](http://wiki.ecmascript.org/doku.php?id=harmony:egal).
      if (a === b) return a !== 0 || 1 / a === 1 / b;
      // A strict comparison is necessary because `null == undefined`.
      if (a == null || b == null) return a === b;
      // Unwrap any wrapped objects.
      if (a instanceof _) a = a._wrapped;
      if (b instanceof _) b = b._wrapped;
      // Compare `[[Class]]` names.
      var className = toString.call(a);
      if (className !== toString.call(b)) return false;
      switch (className) {
        // Strings, numbers, regular expressions, dates, and booleans are compared by value.
        case '[object RegExp]':
        // RegExps are coerced to strings for comparison (Note: '' + /a/i === '/a/i')
        case '[object String]':
          // Primitives and their corresponding object wrappers are equivalent; thus, `"5"` is
          // equivalent to `new String("5")`.
          return '' + a === '' + b;
        case '[object Number]':
          // `NaN`s are equivalent, but non-reflexive.
          // Object(NaN) is equivalent to NaN
          if (+a !== +a) return +b !== +b;
          // An `egal` comparison is performed for other numeric values.
          return +a === 0 ? 1 / +a === 1 / b : +a === +b;
        case '[object Date]':
        case '[object Boolean]':
          // Coerce dates and booleans to numeric primitive values. Dates are compared by their
          // millisecond representations. Note that invalid dates with millisecond representations
          // of `NaN` are not equivalent.
          return +a === +b;
      }
  
      var areArrays = className === '[object Array]';
      if (!areArrays) {
        if (typeof a != 'object' || typeof b != 'object') return false;
  
        // Objects with different constructors are not equivalent, but `Object`s or `Array`s
        // from different frames are.
        var aCtor = a.constructor, bCtor = b.constructor;
        if (aCtor !== bCtor && !(_.isFunction(aCtor) && aCtor instanceof aCtor &&
                                 _.isFunction(bCtor) && bCtor instanceof bCtor)
                            && ('constructor' in a && 'constructor' in b)) {
          return false;
        }
      }
      // Assume equality for cyclic structures. The algorithm for detecting cyclic
      // structures is adapted from ES 5.1 section 15.12.3, abstract operation `JO`.
  
      // Initializing stack of traversed objects.
      // It's done here since we only need them for objects and arrays comparison.
      aStack = aStack || [];
      bStack = bStack || [];
      var length = aStack.length;
      while (length--) {
        // Linear search. Performance is inversely proportional to the number of
        // unique nested structures.
        if (aStack[length] === a) return bStack[length] === b;
      }
  
      // Add the first object to the stack of traversed objects.
      aStack.push(a);
      bStack.push(b);
  
      // Recursively compare objects and arrays.
      if (areArrays) {
        // Compare array lengths to determine if a deep comparison is necessary.
        length = a.length;
        if (length !== b.length) return false;
        // Deep compare the contents, ignoring non-numeric properties.
        while (length--) {
          if (!eq(a[length], b[length], aStack, bStack)) return false;
        }
      } else {
        // Deep compare objects.
        var keys = _.keys(a), key;
        length = keys.length;
        // Ensure that both objects contain the same number of properties before comparing deep equality.
        if (_.keys(b).length !== length) return false;
        while (length--) {
          // Deep compare each member
          key = keys[length];
          if (!(_.has(b, key) && eq(a[key], b[key], aStack, bStack))) return false;
        }
      }
      // Remove the first object from the stack of traversed objects.
      aStack.pop();
      bStack.pop();
      return true;
    };
  
    // Perform a deep comparison to check if two objects are equal.
    _.isEqual = function(a, b) {
      return eq(a, b);
    };
  
    // Is a given array, string, or object empty?
    // An "empty" object has no enumerable own-properties.
    _.isEmpty = function(obj) {
      if (obj == null) return true;
      if (isArrayLike(obj) && (_.isArray(obj) || _.isString(obj) || _.isArguments(obj))) return obj.length === 0;
      return _.keys(obj).length === 0;
    };
  
    // Is a given value a DOM element?
    _.isElement = function(obj) {
      return !!(obj && obj.nodeType === 1);
    };
  
    // Is a given value an array?
    // Delegates to ECMA5's native Array.isArray
    _.isArray = nativeIsArray || function(obj) {
      return toString.call(obj) === '[object Array]';
    };
  
    // Is a given variable an object?
    _.isObject = function(obj) {
      var type = typeof obj;
      return type === 'function' || type === 'object' && !!obj;
    };
  
    // Add some isType methods: isArguments, isFunction, isString, isNumber, isDate, isRegExp, isError.
    _.each(['Arguments', 'Function', 'String', 'Number', 'Date', 'RegExp', 'Error'], function(name) {
      _['is' + name] = function(obj) {
        return toString.call(obj) === '[object ' + name + ']';
      };
    });
  
    // Define a fallback version of the method in browsers (ahem, IE < 9), where
    // there isn't any inspectable "Arguments" type.
    if (!_.isArguments(arguments)) {
      _.isArguments = function(obj) {
        return _.has(obj, 'callee');
      };
    }
  
    // Optimize `isFunction` if appropriate. Work around some typeof bugs in old v8,
    // IE 11 (#1621), and in Safari 8 (#1929).
    if (typeof /./ != 'function' && typeof Int8Array != 'object') {
      _.isFunction = function(obj) {
        return typeof obj == 'function' || false;
      };
    }
  
    // Is a given object a finite number?
    _.isFinite = function(obj) {
      return isFinite(obj) && !isNaN(parseFloat(obj));
    };
  
    // Is the given value `NaN`? (NaN is the only number which does not equal itself).
    _.isNaN = function(obj) {
      return _.isNumber(obj) && obj !== +obj;
    };
  
    // Is a given value a boolean?
    _.isBoolean = function(obj) {
      return obj === true || obj === false || toString.call(obj) === '[object Boolean]';
    };
  
    // Is a given value equal to null?
    _.isNull = function(obj) {
      return obj === null;
    };
  
    // Is a given variable undefined?
    _.isUndefined = function(obj) {
      return obj === void 0;
    };
  
    // Shortcut function for checking if an object has a given property directly
    // on itself (in other words, not on a prototype).
    _.has = function(obj, key) {
      return obj != null && hasOwnProperty.call(obj, key);
    };
  
    // Utility Functions
    // -----------------
  
    // Run Underscore.js in *noConflict* mode, returning the `_` variable to its
    // previous owner. Returns a reference to the Underscore object.
    _.noConflict = function() {
      root._ = previousUnderscore;
      return this;
    };
  
    // Keep the identity function around for default iteratees.
    _.identity = function(value) {
      return value;
    };
  
    // Predicate-generating functions. Often useful outside of Underscore.
    _.constant = function(value) {
      return function() {
        return value;
      };
    };
  
    _.noop = function(){};
  
    _.property = property;
  
    // Generates a function for a given object that returns a given property.
    _.propertyOf = function(obj) {
      return obj == null ? function(){} : function(key) {
        return obj[key];
      };
    };
  
    // Returns a predicate for checking whether an object has a given set of
    // `key:value` pairs.
    _.matcher = _.matches = function(attrs) {
      attrs = _.extendOwn({}, attrs);
      return function(obj) {
        return _.isMatch(obj, attrs);
      };
    };
  
    // Run a function **n** times.
    _.times = function(n, iteratee, context) {
      var accum = Array(Math.max(0, n));
      iteratee = optimizeCb(iteratee, context, 1);
      for (var i = 0; i < n; i++) accum[i] = iteratee(i);
      return accum;
    };
  
    // Return a random integer between min and max (inclusive).
    _.random = function(min, max) {
      if (max == null) {
        max = min;
        min = 0;
      }
      return min + Math.floor(Math.random() * (max - min + 1));
    };
  
    // A (possibly faster) way to get the current timestamp as an integer.
    _.now = Date.now || function() {
      return new Date().getTime();
    };
  
     // List of HTML entities for escaping.
    var escapeMap = {
      '&': '&amp;',
      '<': '&lt;',
      '>': '&gt;',
      '"': '&quot;',
      "'": '&#x27;',
      '`': '&#x60;'
    };
    var unescapeMap = _.invert(escapeMap);
  
    // Functions for escaping and unescaping strings to/from HTML interpolation.
    var createEscaper = function(map) {
      var escaper = function(match) {
        return map[match];
      };
      // Regexes for identifying a key that needs to be escaped
      var source = '(?:' + _.keys(map).join('|') + ')';
      var testRegexp = RegExp(source);
      var replaceRegexp = RegExp(source, 'g');
      return function(string) {
        string = string == null ? '' : '' + string;
        return testRegexp.test(string) ? string.replace(replaceRegexp, escaper) : string;
      };
    };
    _.escape = createEscaper(escapeMap);
    _.unescape = createEscaper(unescapeMap);
  
    // If the value of the named `property` is a function then invoke it with the
    // `object` as context; otherwise, return it.
    _.result = function(object, property, fallback) {
      var value = object == null ? void 0 : object[property];
      if (value === void 0) {
        value = fallback;
      }
      return _.isFunction(value) ? value.call(object) : value;
    };
  
    // Generate a unique integer id (unique within the entire client session).
    // Useful for temporary DOM ids.
    var idCounter = 0;
    _.uniqueId = function(prefix) {
      var id = ++idCounter + '';
      return prefix ? prefix + id : id;
    };
  
    // By default, Underscore uses ERB-style template delimiters, change the
    // following template settings to use alternative delimiters.
    _.templateSettings = {
      evaluate    : /<%([\s\S]+?)%>/g,
      interpolate : /<%=([\s\S]+?)%>/g,
      escape      : /<%-([\s\S]+?)%>/g
    };
  
    // When customizing `templateSettings`, if you don't want to define an
    // interpolation, evaluation or escaping regex, we need one that is
    // guaranteed not to match.
    var noMatch = /(.)^/;
  
    // Certain characters need to be escaped so that they can be put into a
    // string literal.
    var escapes = {
      "'":      "'",
      '\\':     '\\',
      '\r':     'r',
      '\n':     'n',
      '\u2028': 'u2028',
      '\u2029': 'u2029'
    };
  
    var escaper = /\\|'|\r|\n|\u2028|\u2029/g;
  
    var escapeChar = function(match) {
      return '\\' + escapes[match];
    };
  
    // JavaScript micro-templating, similar to John Resig's implementation.
    // Underscore templating handles arbitrary delimiters, preserves whitespace,
    // and correctly escapes quotes within interpolated code.
    // NB: `oldSettings` only exists for backwards compatibility.
    _.template = function(text, settings, oldSettings) {
      if (!settings && oldSettings) settings = oldSettings;
      settings = _.defaults({}, settings, _.templateSettings);
  
      // Combine delimiters into one regular expression via alternation.
      var matcher = RegExp([
        (settings.escape || noMatch).source,
        (settings.interpolate || noMatch).source,
        (settings.evaluate || noMatch).source
      ].join('|') + '|$', 'g');
  
      // Compile the template source, escaping string literals appropriately.
      var index = 0;
      var source = "__p+='";
      text.replace(matcher, function(match, escape, interpolate, evaluate, offset) {
        source += text.slice(index, offset).replace(escaper, escapeChar);
        index = offset + match.length;
  
        if (escape) {
          source += "'+\n((__t=(" + escape + "))==null?'':_.escape(__t))+\n'";
        } else if (interpolate) {
          source += "'+\n((__t=(" + interpolate + "))==null?'':__t)+\n'";
        } else if (evaluate) {
          source += "';\n" + evaluate + "\n__p+='";
        }
  
        // Adobe VMs need the match returned to produce the correct offset.
        return match;
      });
      source += "';\n";
  
      // If a variable is not specified, place data values in local scope.
      if (!settings.variable) source = 'with(obj||{}){\n' + source + '}\n';
  
      source = "var __t,__p='',__j=Array.prototype.join," +
        "print=function(){__p+=__j.call(arguments,'');};\n" +
        source + 'return __p;\n';
  
      try {
        var render = new Function(settings.variable || 'obj', '_', source);
      } catch (e) {
        e.source = source;
        throw e;
      }
  
      var template = function(data) {
        return render.call(this, data, _);
      };
  
      // Provide the compiled source as a convenience for precompilation.
      var argument = settings.variable || 'obj';
      template.source = 'function(' + argument + '){\n' + source + '}';
  
      return template;
    };
  
    // Add a "chain" function. Start chaining a wrapped Underscore object.
    _.chain = function(obj) {
      var instance = _(obj);
      instance._chain = true;
      return instance;
    };
  
    // OOP
    // ---------------
    // If Underscore is called as a function, it returns a wrapped object that
    // can be used OO-style. This wrapper holds altered versions of all the
    // underscore functions. Wrapped objects may be chained.
  
    // Helper function to continue chaining intermediate results.
    var result = function(instance, obj) {
      return instance._chain ? _(obj).chain() : obj;
    };
  
    // Add your own custom functions to the Underscore object.
    _.mixin = function(obj) {
      _.each(_.functions(obj), function(name) {
        var func = _[name] = obj[name];
        _.prototype[name] = function() {
          var args = [this._wrapped];
          push.apply(args, arguments);
          return result(this, func.apply(_, args));
        };
      });
    };
  
    // Add all of the Underscore functions to the wrapper object.
    _.mixin(_);
  
    // Add all mutator Array functions to the wrapper.
    _.each(['pop', 'push', 'reverse', 'shift', 'sort', 'splice', 'unshift'], function(name) {
      var method = ArrayProto[name];
      _.prototype[name] = function() {
        var obj = this._wrapped;
        method.apply(obj, arguments);
        if ((name === 'shift' || name === 'splice') && obj.length === 0) delete obj[0];
        return result(this, obj);
      };
    });
  
    // Add all accessor Array functions to the wrapper.
    _.each(['concat', 'join', 'slice'], function(name) {
      var method = ArrayProto[name];
      _.prototype[name] = function() {
        return result(this, method.apply(this._wrapped, arguments));
      };
    });
  
    // Extracts the result from a wrapped and chained object.
    _.prototype.value = function() {
      return this._wrapped;
    };
  
    // Provide unwrapping proxy for some methods used in engine operations
    // such as arithmetic and JSON stringification.
    _.prototype.valueOf = _.prototype.toJSON = _.prototype.value;
  
    _.prototype.toString = function() {
      return '' + this._wrapped;
    };
  
    // AMD registration happens at the end for compatibility with AMD loaders
    // that may not enforce next-turn semantics on modules. Even though general
    // practice for AMD registration is to be anonymous, underscore registers
    // as a named module because, like jQuery, it is a base library that is
    // popular enough to be bundled in a third party lib, but not be part of
    // an AMD load request. Those cases could generate an error when an
    // anonymous define() is called outside of a loader request.
    if (typeof define === 'function' && define.amd) {
      define('underscore', [], function() {
        return _;
      });
    }
  }.call(this));
  
  },{}],326:[function(require,module,exports){
  module.exports = urlSetQuery
  function urlSetQuery (url, query) {
    if (query) {
      // remove optional leading symbols
      query = query.trim().replace(/^(\?|#|&)/, '')
  
      // don't append empty query
      query = query ? ('?' + query) : query
  
      var parts = url.split(/[\?\#]/)
      var start = parts[0]
      if (query && /\:\/\/[^\/]*$/.test(start)) {
        // e.g. http://foo.com -> http://foo.com/
        start = start + '/'
      }
      var match = url.match(/(\#.*)$/)
      url = start + query
      if (match) { // add hash back in
        url = url + match[0]
      }
    }
    return url
  }
  
  },{}],327:[function(require,module,exports){
  // Copyright Joyent, Inc. and other Node contributors.
  //
  // Permission is hereby granted, free of charge, to any person obtaining a
  // copy of this software and associated documentation files (the
  // "Software"), to deal in the Software without restriction, including
  // without limitation the rights to use, copy, modify, merge, publish,
  // distribute, sublicense, and/or sell copies of the Software, and to permit
  // persons to whom the Software is furnished to do so, subject to the
  // following conditions:
  //
  // The above copyright notice and this permission notice shall be included
  // in all copies or substantial portions of the Software.
  //
  // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
  // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
  // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
  // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
  // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
  // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
  // USE OR OTHER DEALINGS IN THE SOFTWARE.
  
  'use strict';
  
  var punycode = require('punycode');
  var util = require('./util');
  
  exports.parse = urlParse;
  exports.resolve = urlResolve;
  exports.resolveObject = urlResolveObject;
  exports.format = urlFormat;
  
  exports.Url = Url;
  
  function Url() {
    this.protocol = null;
    this.slashes = null;
    this.auth = null;
    this.host = null;
    this.port = null;
    this.hostname = null;
    this.hash = null;
    this.search = null;
    this.query = null;
    this.pathname = null;
    this.path = null;
    this.href = null;
  }
  
  // Reference: RFC 3986, RFC 1808, RFC 2396
  
  // define these here so at least they only have to be
  // compiled once on the first module load.
  var protocolPattern = /^([a-z0-9.+-]+:)/i,
      portPattern = /:[0-9]*$/,
  
      // Special case for a simple path URL
      simplePathPattern = /^(\/\/?(?!\/)[^\?\s]*)(\?[^\s]*)?$/,
  
      // RFC 2396: characters reserved for delimiting URLs.
      // We actually just auto-escape these.
      delims = ['<', '>', '"', '`', ' ', '\r', '\n', '\t'],
  
      // RFC 2396: characters not allowed for various reasons.
      unwise = ['{', '}', '|', '\\', '^', '`'].concat(delims),
  
      // Allowed by RFCs, but cause of XSS attacks.  Always escape these.
      autoEscape = ['\''].concat(unwise),
      // Characters that are never ever allowed in a hostname.
      // Note that any invalid chars are also handled, but these
      // are the ones that are *expected* to be seen, so we fast-path
      // them.
      nonHostChars = ['%', '/', '?', ';', '#'].concat(autoEscape),
      hostEndingChars = ['/', '?', '#'],
      hostnameMaxLen = 255,
      hostnamePartPattern = /^[+a-z0-9A-Z_-]{0,63}$/,
      hostnamePartStart = /^([+a-z0-9A-Z_-]{0,63})(.*)$/,
      // protocols that can allow "unsafe" and "unwise" chars.
      unsafeProtocol = {
        'javascript': true,
        'javascript:': true
      },
      // protocols that never have a hostname.
      hostlessProtocol = {
        'javascript': true,
        'javascript:': true
      },
      // protocols that always contain a // bit.
      slashedProtocol = {
        'http': true,
        'https': true,
        'ftp': true,
        'gopher': true,
        'file': true,
        'http:': true,
        'https:': true,
        'ftp:': true,
        'gopher:': true,
        'file:': true
      },
      querystring = require('querystring');
  
  function urlParse(url, parseQueryString, slashesDenoteHost) {
    if (url && util.isObject(url) && url instanceof Url) return url;
  
    var u = new Url;
    u.parse(url, parseQueryString, slashesDenoteHost);
    return u;
  }
  
  Url.prototype.parse = function(url, parseQueryString, slashesDenoteHost) {
    if (!util.isString(url)) {
      throw new TypeError("Parameter 'url' must be a string, not " + typeof url);
    }
  
    // Copy chrome, IE, opera backslash-handling behavior.
    // Back slashes before the query string get converted to forward slashes
    // See: https://code.google.com/p/chromium/issues/detail?id=25916
    var queryIndex = url.indexOf('?'),
        splitter =
            (queryIndex !== -1 && queryIndex < url.indexOf('#')) ? '?' : '#',
        uSplit = url.split(splitter),
        slashRegex = /\\/g;
    uSplit[0] = uSplit[0].replace(slashRegex, '/');
    url = uSplit.join(splitter);
  
    var rest = url;
  
    // trim before proceeding.
    // This is to support parse stuff like "  http://foo.com  \n"
    rest = rest.trim();
  
    if (!slashesDenoteHost && url.split('#').length === 1) {
      // Try fast path regexp
      var simplePath = simplePathPattern.exec(rest);
      if (simplePath) {
        this.path = rest;
        this.href = rest;
        this.pathname = simplePath[1];
        if (simplePath[2]) {
          this.search = simplePath[2];
          if (parseQueryString) {
            this.query = querystring.parse(this.search.substr(1));
          } else {
            this.query = this.search.substr(1);
          }
        } else if (parseQueryString) {
          this.search = '';
          this.query = {};
        }
        return this;
      }
    }
  
    var proto = protocolPattern.exec(rest);
    if (proto) {
      proto = proto[0];
      var lowerProto = proto.toLowerCase();
      this.protocol = lowerProto;
      rest = rest.substr(proto.length);
    }
  
    // figure out if it's got a host
    // user@server is *always* interpreted as a hostname, and url
    // resolution will treat //foo/bar as host=foo,path=bar because that's
    // how the browser resolves relative URLs.
    if (slashesDenoteHost || proto || rest.match(/^\/\/[^@\/]+@[^@\/]+/)) {
      var slashes = rest.substr(0, 2) === '//';
      if (slashes && !(proto && hostlessProtocol[proto])) {
        rest = rest.substr(2);
        this.slashes = true;
      }
    }
  
    if (!hostlessProtocol[proto] &&
        (slashes || (proto && !slashedProtocol[proto]))) {
  
      // there's a hostname.
      // the first instance of /, ?, ;, or # ends the host.
      //
      // If there is an @ in the hostname, then non-host chars *are* allowed
      // to the left of the last @ sign, unless some host-ending character
      // comes *before* the @-sign.
      // URLs are obnoxious.
      //
      // ex:
      // http://a@b@c/ => user:a@b host:c
      // http://a@b?@c => user:a host:c path:/?@c
  
      // v0.12 TODO(isaacs): This is not quite how Chrome does things.
      // Review our test case against browsers more comprehensively.
  
      // find the first instance of any hostEndingChars
      var hostEnd = -1;
      for (var i = 0; i < hostEndingChars.length; i++) {
        var hec = rest.indexOf(hostEndingChars[i]);
        if (hec !== -1 && (hostEnd === -1 || hec < hostEnd))
          hostEnd = hec;
      }
  
      // at this point, either we have an explicit point where the
      // auth portion cannot go past, or the last @ char is the decider.
      var auth, atSign;
      if (hostEnd === -1) {
        // atSign can be anywhere.
        atSign = rest.lastIndexOf('@');
      } else {
        // atSign must be in auth portion.
        // http://a@b/c@d => host:b auth:a path:/c@d
        atSign = rest.lastIndexOf('@', hostEnd);
      }
  
      // Now we have a portion which is definitely the auth.
      // Pull that off.
      if (atSign !== -1) {
        auth = rest.slice(0, atSign);
        rest = rest.slice(atSign + 1);
        this.auth = decodeURIComponent(auth);
      }
  
      // the host is the remaining to the left of the first non-host char
      hostEnd = -1;
      for (var i = 0; i < nonHostChars.length; i++) {
        var hec = rest.indexOf(nonHostChars[i]);
        if (hec !== -1 && (hostEnd === -1 || hec < hostEnd))
          hostEnd = hec;
      }
      // if we still have not hit it, then the entire thing is a host.
      if (hostEnd === -1)
        hostEnd = rest.length;
  
      this.host = rest.slice(0, hostEnd);
      rest = rest.slice(hostEnd);
  
      // pull out port.
      this.parseHost();
  
      // we've indicated that there is a hostname,
      // so even if it's empty, it has to be present.
      this.hostname = this.hostname || '';
  
      // if hostname begins with [ and ends with ]
      // assume that it's an IPv6 address.
      var ipv6Hostname = this.hostname[0] === '[' &&
          this.hostname[this.hostname.length - 1] === ']';
  
      // validate a little.
      if (!ipv6Hostname) {
        var hostparts = this.hostname.split(/\./);
        for (var i = 0, l = hostparts.length; i < l; i++) {
          var part = hostparts[i];
          if (!part) continue;
          if (!part.match(hostnamePartPattern)) {
            var newpart = '';
            for (var j = 0, k = part.length; j < k; j++) {
              if (part.charCodeAt(j) > 127) {
                // we replace non-ASCII char with a temporary placeholder
                // we need this to make sure size of hostname is not
                // broken by replacing non-ASCII by nothing
                newpart += 'x';
              } else {
                newpart += part[j];
              }
            }
            // we test again with ASCII char only
            if (!newpart.match(hostnamePartPattern)) {
              var validParts = hostparts.slice(0, i);
              var notHost = hostparts.slice(i + 1);
              var bit = part.match(hostnamePartStart);
              if (bit) {
                validParts.push(bit[1]);
                notHost.unshift(bit[2]);
              }
              if (notHost.length) {
                rest = '/' + notHost.join('.') + rest;
              }
              this.hostname = validParts.join('.');
              break;
            }
          }
        }
      }
  
      if (this.hostname.length > hostnameMaxLen) {
        this.hostname = '';
      } else {
        // hostnames are always lower case.
        this.hostname = this.hostname.toLowerCase();
      }
  
      if (!ipv6Hostname) {
        // IDNA Support: Returns a punycoded representation of "domain".
        // It only converts parts of the domain name that
        // have non-ASCII characters, i.e. it doesn't matter if
        // you call it with a domain that already is ASCII-only.
        this.hostname = punycode.toASCII(this.hostname);
      }
  
      var p = this.port ? ':' + this.port : '';
      var h = this.hostname || '';
      this.host = h + p;
      this.href += this.host;
  
      // strip [ and ] from the hostname
      // the host field still retains them, though
      if (ipv6Hostname) {
        this.hostname = this.hostname.substr(1, this.hostname.length - 2);
        if (rest[0] !== '/') {
          rest = '/' + rest;
        }
      }
    }
  
    // now rest is set to the post-host stuff.
    // chop off any delim chars.
    if (!unsafeProtocol[lowerProto]) {
  
      // First, make 100% sure that any "autoEscape" chars get
      // escaped, even if encodeURIComponent doesn't think they
      // need to be.
      for (var i = 0, l = autoEscape.length; i < l; i++) {
        var ae = autoEscape[i];
        if (rest.indexOf(ae) === -1)
          continue;
        var esc = encodeURIComponent(ae);
        if (esc === ae) {
          esc = escape(ae);
        }
        rest = rest.split(ae).join(esc);
      }
    }
  
  
    // chop off from the tail first.
    var hash = rest.indexOf('#');
    if (hash !== -1) {
      // got a fragment string.
      this.hash = rest.substr(hash);
      rest = rest.slice(0, hash);
    }
    var qm = rest.indexOf('?');
    if (qm !== -1) {
      this.search = rest.substr(qm);
      this.query = rest.substr(qm + 1);
      if (parseQueryString) {
        this.query = querystring.parse(this.query);
      }
      rest = rest.slice(0, qm);
    } else if (parseQueryString) {
      // no query string, but parseQueryString still requested
      this.search = '';
      this.query = {};
    }
    if (rest) this.pathname = rest;
    if (slashedProtocol[lowerProto] &&
        this.hostname && !this.pathname) {
      this.pathname = '/';
    }
  
    //to support http.request
    if (this.pathname || this.search) {
      var p = this.pathname || '';
      var s = this.search || '';
      this.path = p + s;
    }
  
    // finally, reconstruct the href based on what has been validated.
    this.href = this.format();
    return this;
  };
  
  // format a parsed object into a url string
  function urlFormat(obj) {
    // ensure it's an object, and not a string url.
    // If it's an obj, this is a no-op.
    // this way, you can call url_format() on strings
    // to clean up potentially wonky urls.
    if (util.isString(obj)) obj = urlParse(obj);
    if (!(obj instanceof Url)) return Url.prototype.format.call(obj);
    return obj.format();
  }
  
  Url.prototype.format = function() {
    var auth = this.auth || '';
    if (auth) {
      auth = encodeURIComponent(auth);
      auth = auth.replace(/%3A/i, ':');
      auth += '@';
    }
  
    var protocol = this.protocol || '',
        pathname = this.pathname || '',
        hash = this.hash || '',
        host = false,
        query = '';
  
    if (this.host) {
      host = auth + this.host;
    } else if (this.hostname) {
      host = auth + (this.hostname.indexOf(':') === -1 ?
          this.hostname :
          '[' + this.hostname + ']');
      if (this.port) {
        host += ':' + this.port;
      }
    }
  
    if (this.query &&
        util.isObject(this.query) &&
        Object.keys(this.query).length) {
      query = querystring.stringify(this.query);
    }
  
    var search = this.search || (query && ('?' + query)) || '';
  
    if (protocol && protocol.substr(-1) !== ':') protocol += ':';
  
    // only the slashedProtocols get the //.  Not mailto:, xmpp:, etc.
    // unless they had them to begin with.
    if (this.slashes ||
        (!protocol || slashedProtocol[protocol]) && host !== false) {
      host = '//' + (host || '');
      if (pathname && pathname.charAt(0) !== '/') pathname = '/' + pathname;
    } else if (!host) {
      host = '';
    }
  
    if (hash && hash.charAt(0) !== '#') hash = '#' + hash;
    if (search && search.charAt(0) !== '?') search = '?' + search;
  
    pathname = pathname.replace(/[?#]/g, function(match) {
      return encodeURIComponent(match);
    });
    search = search.replace('#', '%23');
  
    return protocol + host + pathname + search + hash;
  };
  
  function urlResolve(source, relative) {
    return urlParse(source, false, true).resolve(relative);
  }
  
  Url.prototype.resolve = function(relative) {
    return this.resolveObject(urlParse(relative, false, true)).format();
  };
  
  function urlResolveObject(source, relative) {
    if (!source) return relative;
    return urlParse(source, false, true).resolveObject(relative);
  }
  
  Url.prototype.resolveObject = function(relative) {
    if (util.isString(relative)) {
      var rel = new Url();
      rel.parse(relative, false, true);
      relative = rel;
    }
  
    var result = new Url();
    var tkeys = Object.keys(this);
    for (var tk = 0; tk < tkeys.length; tk++) {
      var tkey = tkeys[tk];
      result[tkey] = this[tkey];
    }
  
    // hash is always overridden, no matter what.
    // even href="" will remove it.
    result.hash = relative.hash;
  
    // if the relative url is empty, then there's nothing left to do here.
    if (relative.href === '') {
      result.href = result.format();
      return result;
    }
  
    // hrefs like //foo/bar always cut to the protocol.
    if (relative.slashes && !relative.protocol) {
      // take everything except the protocol from relative
      var rkeys = Object.keys(relative);
      for (var rk = 0; rk < rkeys.length; rk++) {
        var rkey = rkeys[rk];
        if (rkey !== 'protocol')
          result[rkey] = relative[rkey];
      }
  
      //urlParse appends trailing / to urls like http://www.example.com
      if (slashedProtocol[result.protocol] &&
          result.hostname && !result.pathname) {
        result.path = result.pathname = '/';
      }
  
      result.href = result.format();
      return result;
    }
  
    if (relative.protocol && relative.protocol !== result.protocol) {
      // if it's a known url protocol, then changing
      // the protocol does weird things
      // first, if it's not file:, then we MUST have a host,
      // and if there was a path
      // to begin with, then we MUST have a path.
      // if it is file:, then the host is dropped,
      // because that's known to be hostless.
      // anything else is assumed to be absolute.
      if (!slashedProtocol[relative.protocol]) {
        var keys = Object.keys(relative);
        for (var v = 0; v < keys.length; v++) {
          var k = keys[v];
          result[k] = relative[k];
        }
        result.href = result.format();
        return result;
      }
  
      result.protocol = relative.protocol;
      if (!relative.host && !hostlessProtocol[relative.protocol]) {
        var relPath = (relative.pathname || '').split('/');
        while (relPath.length && !(relative.host = relPath.shift()));
        if (!relative.host) relative.host = '';
        if (!relative.hostname) relative.hostname = '';
        if (relPath[0] !== '') relPath.unshift('');
        if (relPath.length < 2) relPath.unshift('');
        result.pathname = relPath.join('/');
      } else {
        result.pathname = relative.pathname;
      }
      result.search = relative.search;
      result.query = relative.query;
      result.host = relative.host || '';
      result.auth = relative.auth;
      result.hostname = relative.hostname || relative.host;
      result.port = relative.port;
      // to support http.request
      if (result.pathname || result.search) {
        var p = result.pathname || '';
        var s = result.search || '';
        result.path = p + s;
      }
      result.slashes = result.slashes || relative.slashes;
      result.href = result.format();
      return result;
    }
  
    var isSourceAbs = (result.pathname && result.pathname.charAt(0) === '/'),
        isRelAbs = (
            relative.host ||
            relative.pathname && relative.pathname.charAt(0) === '/'
        ),
        mustEndAbs = (isRelAbs || isSourceAbs ||
                      (result.host && relative.pathname)),
        removeAllDots = mustEndAbs,
        srcPath = result.pathname && result.pathname.split('/') || [],
        relPath = relative.pathname && relative.pathname.split('/') || [],
        psychotic = result.protocol && !slashedProtocol[result.protocol];
  
    // if the url is a non-slashed url, then relative
    // links like ../.. should be able
    // to crawl up to the hostname, as well.  This is strange.
    // result.protocol has already been set by now.
    // Later on, put the first path part into the host field.
    if (psychotic) {
      result.hostname = '';
      result.port = null;
      if (result.host) {
        if (srcPath[0] === '') srcPath[0] = result.host;
        else srcPath.unshift(result.host);
      }
      result.host = '';
      if (relative.protocol) {
        relative.hostname = null;
        relative.port = null;
        if (relative.host) {
          if (relPath[0] === '') relPath[0] = relative.host;
          else relPath.unshift(relative.host);
        }
        relative.host = null;
      }
      mustEndAbs = mustEndAbs && (relPath[0] === '' || srcPath[0] === '');
    }
  
    if (isRelAbs) {
      // it's absolute.
      result.host = (relative.host || relative.host === '') ?
                    relative.host : result.host;
      result.hostname = (relative.hostname || relative.hostname === '') ?
                        relative.hostname : result.hostname;
      result.search = relative.search;
      result.query = relative.query;
      srcPath = relPath;
      // fall through to the dot-handling below.
    } else if (relPath.length) {
      // it's relative
      // throw away the existing file, and take the new path instead.
      if (!srcPath) srcPath = [];
      srcPath.pop();
      srcPath = srcPath.concat(relPath);
      result.search = relative.search;
      result.query = relative.query;
    } else if (!util.isNullOrUndefined(relative.search)) {
      // just pull out the search.
      // like href='?foo'.
      // Put this after the other two cases because it simplifies the booleans
      if (psychotic) {
        result.hostname = result.host = srcPath.shift();
        //occationaly the auth can get stuck only in host
        //this especially happens in cases like
        //url.resolveObject('mailto:local1@domain1', 'local2@domain2')
        var authInHost = result.host && result.host.indexOf('@') > 0 ?
                         result.host.split('@') : false;
        if (authInHost) {
          result.auth = authInHost.shift();
          result.host = result.hostname = authInHost.shift();
        }
      }
      result.search = relative.search;
      result.query = relative.query;
      //to support http.request
      if (!util.isNull(result.pathname) || !util.isNull(result.search)) {
        result.path = (result.pathname ? result.pathname : '') +
                      (result.search ? result.search : '');
      }
      result.href = result.format();
      return result;
    }
  
    if (!srcPath.length) {
      // no path at all.  easy.
      // we've already handled the other stuff above.
      result.pathname = null;
      //to support http.request
      if (result.search) {
        result.path = '/' + result.search;
      } else {
        result.path = null;
      }
      result.href = result.format();
      return result;
    }
  
    // if a url ENDs in . or .., then it must get a trailing slash.
    // however, if it ends in anything else non-slashy,
    // then it must NOT get a trailing slash.
    var last = srcPath.slice(-1)[0];
    var hasTrailingSlash = (
        (result.host || relative.host || srcPath.length > 1) &&
        (last === '.' || last === '..') || last === '');
  
    // strip single dots, resolve double dots to parent dir
    // if the path tries to go above the root, `up` ends up > 0
    var up = 0;
    for (var i = srcPath.length; i >= 0; i--) {
      last = srcPath[i];
      if (last === '.') {
        srcPath.splice(i, 1);
      } else if (last === '..') {
        srcPath.splice(i, 1);
        up++;
      } else if (up) {
        srcPath.splice(i, 1);
        up--;
      }
    }
  
    // if the path is allowed to go above the root, restore leading ..s
    if (!mustEndAbs && !removeAllDots) {
      for (; up--; up) {
        srcPath.unshift('..');
      }
    }
  
    if (mustEndAbs && srcPath[0] !== '' &&
        (!srcPath[0] || srcPath[0].charAt(0) !== '/')) {
      srcPath.unshift('');
    }
  
    if (hasTrailingSlash && (srcPath.join('/').substr(-1) !== '/')) {
      srcPath.push('');
    }
  
    var isAbsolute = srcPath[0] === '' ||
        (srcPath[0] && srcPath[0].charAt(0) === '/');
  
    // put the host back
    if (psychotic) {
      result.hostname = result.host = isAbsolute ? '' :
                                      srcPath.length ? srcPath.shift() : '';
      //occationaly the auth can get stuck only in host
      //this especially happens in cases like
      //url.resolveObject('mailto:local1@domain1', 'local2@domain2')
      var authInHost = result.host && result.host.indexOf('@') > 0 ?
                       result.host.split('@') : false;
      if (authInHost) {
        result.auth = authInHost.shift();
        result.host = result.hostname = authInHost.shift();
      }
    }
  
    mustEndAbs = mustEndAbs || (result.host && srcPath.length);
  
    if (mustEndAbs && !isAbsolute) {
      srcPath.unshift('');
    }
  
    if (!srcPath.length) {
      result.pathname = null;
      result.path = null;
    } else {
      result.pathname = srcPath.join('/');
    }
  
    //to support request.http
    if (!util.isNull(result.pathname) || !util.isNull(result.search)) {
      result.path = (result.pathname ? result.pathname : '') +
                    (result.search ? result.search : '');
    }
    result.auth = relative.auth || result.auth;
    result.slashes = result.slashes || relative.slashes;
    result.href = result.format();
    return result;
  };
  
  Url.prototype.parseHost = function() {
    var host = this.host;
    var port = portPattern.exec(host);
    if (port) {
      port = port[0];
      if (port !== ':') {
        this.port = port.substr(1);
      }
      host = host.substr(0, host.length - port.length);
    }
    if (host) this.hostname = host;
  };
  
  },{"./util":328,"punycode":265,"querystring":269}],328:[function(require,module,exports){
  'use strict';
  
  module.exports = {
    isString: function(arg) {
      return typeof(arg) === 'string';
    },
    isObject: function(arg) {
      return typeof(arg) === 'object' && arg !== null;
    },
    isNull: function(arg) {
      return arg === null;
    },
    isNullOrUndefined: function(arg) {
      return arg == null;
    }
  };
  
  },{}],329:[function(require,module,exports){
  (function (global){
  /*! https://mths.be/utf8js v2.0.0 by @mathias */
  ;(function(root) {
  
    // Detect free variables `exports`
    var freeExports = typeof exports == 'object' && exports;
  
    // Detect free variable `module`
    var freeModule = typeof module == 'object' && module &&
      module.exports == freeExports && module;
  
    // Detect free variable `global`, from Node.js or Browserified code,
    // and use it as `root`
    var freeGlobal = typeof global == 'object' && global;
    if (freeGlobal.global === freeGlobal || freeGlobal.window === freeGlobal) {
      root = freeGlobal;
    }
  
    /*--------------------------------------------------------------------------*/
  
    var stringFromCharCode = String.fromCharCode;
  
    // Taken from https://mths.be/punycode
    function ucs2decode(string) {
      var output = [];
      var counter = 0;
      var length = string.length;
      var value;
      var extra;
      while (counter < length) {
        value = string.charCodeAt(counter++);
        if (value >= 0xD800 && value <= 0xDBFF && counter < length) {
          // high surrogate, and there is a next character
          extra = string.charCodeAt(counter++);
          if ((extra & 0xFC00) == 0xDC00) { // low surrogate
            output.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);
          } else {
            // unmatched surrogate; only append this code unit, in case the next
            // code unit is the high surrogate of a surrogate pair
            output.push(value);
            counter--;
          }
        } else {
          output.push(value);
        }
      }
      return output;
    }
  
    // Taken from https://mths.be/punycode
    function ucs2encode(array) {
      var length = array.length;
      var index = -1;
      var value;
      var output = '';
      while (++index < length) {
        value = array[index];
        if (value > 0xFFFF) {
          value -= 0x10000;
          output += stringFromCharCode(value >>> 10 & 0x3FF | 0xD800);
          value = 0xDC00 | value & 0x3FF;
        }
        output += stringFromCharCode(value);
      }
      return output;
    }
  
    function checkScalarValue(codePoint) {
      if (codePoint >= 0xD800 && codePoint <= 0xDFFF) {
        throw Error(
          'Lone surrogate U+' + codePoint.toString(16).toUpperCase() +
          ' is not a scalar value'
        );
      }
    }
    /*--------------------------------------------------------------------------*/
  
    function createByte(codePoint, shift) {
      return stringFromCharCode(((codePoint >> shift) & 0x3F) | 0x80);
    }
  
    function encodeCodePoint(codePoint) {
      if ((codePoint & 0xFFFFFF80) == 0) { // 1-byte sequence
        return stringFromCharCode(codePoint);
      }
      var symbol = '';
      if ((codePoint & 0xFFFFF800) == 0) { // 2-byte sequence
        symbol = stringFromCharCode(((codePoint >> 6) & 0x1F) | 0xC0);
      }
      else if ((codePoint & 0xFFFF0000) == 0) { // 3-byte sequence
        checkScalarValue(codePoint);
        symbol = stringFromCharCode(((codePoint >> 12) & 0x0F) | 0xE0);
        symbol += createByte(codePoint, 6);
      }
      else if ((codePoint & 0xFFE00000) == 0) { // 4-byte sequence
        symbol = stringFromCharCode(((codePoint >> 18) & 0x07) | 0xF0);
        symbol += createByte(codePoint, 12);
        symbol += createByte(codePoint, 6);
      }
      symbol += stringFromCharCode((codePoint & 0x3F) | 0x80);
      return symbol;
    }
  
    function utf8encode(string) {
      var codePoints = ucs2decode(string);
      var length = codePoints.length;
      var index = -1;
      var codePoint;
      var byteString = '';
      while (++index < length) {
        codePoint = codePoints[index];
        byteString += encodeCodePoint(codePoint);
      }
      return byteString;
    }
  
    /*--------------------------------------------------------------------------*/
  
    function readContinuationByte() {
      if (byteIndex >= byteCount) {
        throw Error('Invalid byte index');
      }
  
      var continuationByte = byteArray[byteIndex] & 0xFF;
      byteIndex++;
  
      if ((continuationByte & 0xC0) == 0x80) {
        return continuationByte & 0x3F;
      }
  
      // If we end up here, itâs not a continuation byte
      throw Error('Invalid continuation byte');
    }
  
    function decodeSymbol() {
      var byte1;
      var byte2;
      var byte3;
      var byte4;
      var codePoint;
  
      if (byteIndex > byteCount) {
        throw Error('Invalid byte index');
      }
  
      if (byteIndex == byteCount) {
        return false;
      }
  
      // Read first byte
      byte1 = byteArray[byteIndex] & 0xFF;
      byteIndex++;
  
      // 1-byte sequence (no continuation bytes)
      if ((byte1 & 0x80) == 0) {
        return byte1;
      }
  
      // 2-byte sequence
      if ((byte1 & 0xE0) == 0xC0) {
        var byte2 = readContinuationByte();
        codePoint = ((byte1 & 0x1F) << 6) | byte2;
        if (codePoint >= 0x80) {
          return codePoint;
        } else {
          throw Error('Invalid continuation byte');
        }
      }
  
      // 3-byte sequence (may include unpaired surrogates)
      if ((byte1 & 0xF0) == 0xE0) {
        byte2 = readContinuationByte();
        byte3 = readContinuationByte();
        codePoint = ((byte1 & 0x0F) << 12) | (byte2 << 6) | byte3;
        if (codePoint >= 0x0800) {
          checkScalarValue(codePoint);
          return codePoint;
        } else {
          throw Error('Invalid continuation byte');
        }
      }
  
      // 4-byte sequence
      if ((byte1 & 0xF8) == 0xF0) {
        byte2 = readContinuationByte();
        byte3 = readContinuationByte();
        byte4 = readContinuationByte();
        codePoint = ((byte1 & 0x0F) << 0x12) | (byte2 << 0x0C) |
          (byte3 << 0x06) | byte4;
        if (codePoint >= 0x010000 && codePoint <= 0x10FFFF) {
          return codePoint;
        }
      }
  
      throw Error('Invalid UTF-8 detected');
    }
  
    var byteArray;
    var byteCount;
    var byteIndex;
    function utf8decode(byteString) {
      byteArray = ucs2decode(byteString);
      byteCount = byteArray.length;
      byteIndex = 0;
      var codePoints = [];
      var tmp;
      while ((tmp = decodeSymbol()) !== false) {
        codePoints.push(tmp);
      }
      return ucs2encode(codePoints);
    }
  
    /*--------------------------------------------------------------------------*/
  
    var utf8 = {
      'version': '2.0.0',
      'encode': utf8encode,
      'decode': utf8decode
    };
  
    // Some AMD build optimizers, like r.js, check for specific condition patterns
    // like the following:
    if (
      typeof define == 'function' &&
      typeof define.amd == 'object' &&
      define.amd
    ) {
      define(function() {
        return utf8;
      });
    }	else if (freeExports && !freeExports.nodeType) {
      if (freeModule) { // in Node.js or RingoJS v0.8.0+
        freeModule.exports = utf8;
      } else { // in Narwhal or RingoJS v0.7.0-
        var object = {};
        var hasOwnProperty = object.hasOwnProperty;
        for (var key in utf8) {
          hasOwnProperty.call(utf8, key) && (freeExports[key] = utf8[key]);
        }
      }
    } else { // in Rhino or a web browser
      root.utf8 = utf8;
    }
  
  }(this));
  
  }).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
  },{}],330:[function(require,module,exports){
  (function (global){
  
  /**
   * Module exports.
   */
  
  module.exports = deprecate;
  
  /**
   * Mark that a method should not be used.
   * Returns a modified function which warns once by default.
   *
   * If `localStorage.noDeprecation = true` is set, then it is a no-op.
   *
   * If `localStorage.throwDeprecation = true` is set, then deprecated functions
   * will throw an Error when invoked.
   *
   * If `localStorage.traceDeprecation = true` is set, then deprecated functions
   * will invoke `console.trace()` instead of `console.error()`.
   *
   * @param {Function} fn - the function to deprecate
   * @param {String} msg - the string to print to the console when `fn` is invoked
   * @returns {Function} a new "deprecated" version of `fn`
   * @api public
   */
  
  function deprecate (fn, msg) {
    if (config('noDeprecation')) {
      return fn;
    }
  
    var warned = false;
    function deprecated() {
      if (!warned) {
        if (config('throwDeprecation')) {
          throw new Error(msg);
        } else if (config('traceDeprecation')) {
          console.trace(msg);
        } else {
          console.warn(msg);
        }
        warned = true;
      }
      return fn.apply(this, arguments);
    }
  
    return deprecated;
  }
  
  /**
   * Checks `localStorage` for boolean values for the given `name`.
   *
   * @param {String} name
   * @returns {Boolean}
   * @api private
   */
  
  function config (name) {
    // accessing global.localStorage can trigger a DOMException in sandboxed iframes
    try {
      if (!global.localStorage) return false;
    } catch (_) {
      return false;
    }
    var val = global.localStorage[name];
    if (null == val) return false;
    return String(val).toLowerCase() === 'true';
  }
  
  }).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
  },{}],331:[function(require,module,exports){
  arguments[4][180][0].apply(exports,arguments)
  },{"dup":180}],332:[function(require,module,exports){
  module.exports = function isBuffer(arg) {
    return arg && typeof arg === 'object'
      && typeof arg.copy === 'function'
      && typeof arg.fill === 'function'
      && typeof arg.readUInt8 === 'function';
  }
  },{}],333:[function(require,module,exports){
  (function (process,global){
  // Copyright Joyent, Inc. and other Node contributors.
  //
  // Permission is hereby granted, free of charge, to any person obtaining a
  // copy of this software and associated documentation files (the
  // "Software"), to deal in the Software without restriction, including
  // without limitation the rights to use, copy, modify, merge, publish,
  // distribute, sublicense, and/or sell copies of the Software, and to permit
  // persons to whom the Software is furnished to do so, subject to the
  // following conditions:
  //
  // The above copyright notice and this permission notice shall be included
  // in all copies or substantial portions of the Software.
  //
  // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
  // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
  // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
  // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
  // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
  // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
  // USE OR OTHER DEALINGS IN THE SOFTWARE.
  
  var formatRegExp = /%[sdj%]/g;
  exports.format = function(f) {
    if (!isString(f)) {
      var objects = [];
      for (var i = 0; i < arguments.length; i++) {
        objects.push(inspect(arguments[i]));
      }
      return objects.join(' ');
    }
  
    var i = 1;
    var args = arguments;
    var len = args.length;
    var str = String(f).replace(formatRegExp, function(x) {
      if (x === '%%') return '%';
      if (i >= len) return x;
      switch (x) {
        case '%s': return String(args[i++]);
        case '%d': return Number(args[i++]);
        case '%j':
          try {
            return JSON.stringify(args[i++]);
          } catch (_) {
            return '[Circular]';
          }
        default:
          return x;
      }
    });
    for (var x = args[i]; i < len; x = args[++i]) {
      if (isNull(x) || !isObject(x)) {
        str += ' ' + x;
      } else {
        str += ' ' + inspect(x);
      }
    }
    return str;
  };
  
  
  // Mark that a method should not be used.
  // Returns a modified function which warns once by default.
  // If --no-deprecation is set, then it is a no-op.
  exports.deprecate = function(fn, msg) {
    // Allow for deprecating things in the process of starting up.
    if (isUndefined(global.process)) {
      return function() {
        return exports.deprecate(fn, msg).apply(this, arguments);
      };
    }
  
    if (process.noDeprecation === true) {
      return fn;
    }
  
    var warned = false;
    function deprecated() {
      if (!warned) {
        if (process.throwDeprecation) {
          throw new Error(msg);
        } else if (process.traceDeprecation) {
          console.trace(msg);
        } else {
          console.error(msg);
        }
        warned = true;
      }
      return fn.apply(this, arguments);
    }
  
    return deprecated;
  };
  
  
  var debugs = {};
  var debugEnviron;
  exports.debuglog = function(set) {
    if (isUndefined(debugEnviron))
      debugEnviron = process.env.NODE_DEBUG || '';
    set = set.toUpperCase();
    if (!debugs[set]) {
      if (new RegExp('\\b' + set + '\\b', 'i').test(debugEnviron)) {
        var pid = process.pid;
        debugs[set] = function() {
          var msg = exports.format.apply(exports, arguments);
          console.error('%s %d: %s', set, pid, msg);
        };
      } else {
        debugs[set] = function() {};
      }
    }
    return debugs[set];
  };
  
  
  /**
   * Echos the value of a value. Tries to print the value out
   * in the best way possible given the different types.
   *
   * @param {Object} obj The object to print out.
   * @param {Object} opts Optional options object that alters the output.
   */
  /* legacy: obj, showHidden, depth, colors*/
  function inspect(obj, opts) {
    // default options
    var ctx = {
      seen: [],
      stylize: stylizeNoColor
    };
    // legacy...
    if (arguments.length >= 3) ctx.depth = arguments[2];
    if (arguments.length >= 4) ctx.colors = arguments[3];
    if (isBoolean(opts)) {
      // legacy...
      ctx.showHidden = opts;
    } else if (opts) {
      // got an "options" object
      exports._extend(ctx, opts);
    }
    // set default options
    if (isUndefined(ctx.showHidden)) ctx.showHidden = false;
    if (isUndefined(ctx.depth)) ctx.depth = 2;
    if (isUndefined(ctx.colors)) ctx.colors = false;
    if (isUndefined(ctx.customInspect)) ctx.customInspect = true;
    if (ctx.colors) ctx.stylize = stylizeWithColor;
    return formatValue(ctx, obj, ctx.depth);
  }
  exports.inspect = inspect;
  
  
  // http://en.wikipedia.org/wiki/ANSI_escape_code#graphics
  inspect.colors = {
    'bold' : [1, 22],
    'italic' : [3, 23],
    'underline' : [4, 24],
    'inverse' : [7, 27],
    'white' : [37, 39],
    'grey' : [90, 39],
    'black' : [30, 39],
    'blue' : [34, 39],
    'cyan' : [36, 39],
    'green' : [32, 39],
    'magenta' : [35, 39],
    'red' : [31, 39],
    'yellow' : [33, 39]
  };
  
  // Don't use 'blue' not visible on cmd.exe
  inspect.styles = {
    'special': 'cyan',
    'number': 'yellow',
    'boolean': 'yellow',
    'undefined': 'grey',
    'null': 'bold',
    'string': 'green',
    'date': 'magenta',
    // "name": intentionally not styling
    'regexp': 'red'
  };
  
  
  function stylizeWithColor(str, styleType) {
    var style = inspect.styles[styleType];
  
    if (style) {
      return '\u001b[' + inspect.colors[style][0] + 'm' + str +
             '\u001b[' + inspect.colors[style][1] + 'm';
    } else {
      return str;
    }
  }
  
  
  function stylizeNoColor(str, styleType) {
    return str;
  }
  
  
  function arrayToHash(array) {
    var hash = {};
  
    array.forEach(function(val, idx) {
      hash[val] = true;
    });
  
    return hash;
  }
  
  
  function formatValue(ctx, value, recurseTimes) {
    // Provide a hook for user-specified inspect functions.
    // Check that value is an object with an inspect function on it
    if (ctx.customInspect &&
        value &&
        isFunction(value.inspect) &&
        // Filter out the util module, it's inspect function is special
        value.inspect !== exports.inspect &&
        // Also filter out any prototype objects using the circular check.
        !(value.constructor && value.constructor.prototype === value)) {
      var ret = value.inspect(recurseTimes, ctx);
      if (!isString(ret)) {
        ret = formatValue(ctx, ret, recurseTimes);
      }
      return ret;
    }
  
    // Primitive types cannot have properties
    var primitive = formatPrimitive(ctx, value);
    if (primitive) {
      return primitive;
    }
  
    // Look up the keys of the object.
    var keys = Object.keys(value);
    var visibleKeys = arrayToHash(keys);
  
    if (ctx.showHidden) {
      keys = Object.getOwnPropertyNames(value);
    }
  
    // IE doesn't make error fields non-enumerable
    // http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx
    if (isError(value)
        && (keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)) {
      return formatError(value);
    }
  
    // Some type of object without properties can be shortcutted.
    if (keys.length === 0) {
      if (isFunction(value)) {
        var name = value.name ? ': ' + value.name : '';
        return ctx.stylize('[Function' + name + ']', 'special');
      }
      if (isRegExp(value)) {
        return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
      }
      if (isDate(value)) {
        return ctx.stylize(Date.prototype.toString.call(value), 'date');
      }
      if (isError(value)) {
        return formatError(value);
      }
    }
  
    var base = '', array = false, braces = ['{', '}'];
  
    // Make Array say that they are Array
    if (isArray(value)) {
      array = true;
      braces = ['[', ']'];
    }
  
    // Make functions say that they are functions
    if (isFunction(value)) {
      var n = value.name ? ': ' + value.name : '';
      base = ' [Function' + n + ']';
    }
  
    // Make RegExps say that they are RegExps
    if (isRegExp(value)) {
      base = ' ' + RegExp.prototype.toString.call(value);
    }
  
    // Make dates with properties first say the date
    if (isDate(value)) {
      base = ' ' + Date.prototype.toUTCString.call(value);
    }
  
    // Make error with message first say the error
    if (isError(value)) {
      base = ' ' + formatError(value);
    }
  
    if (keys.length === 0 && (!array || value.length == 0)) {
      return braces[0] + base + braces[1];
    }
  
    if (recurseTimes < 0) {
      if (isRegExp(value)) {
        return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
      } else {
        return ctx.stylize('[Object]', 'special');
      }
    }
  
    ctx.seen.push(value);
  
    var output;
    if (array) {
      output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);
    } else {
      output = keys.map(function(key) {
        return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);
      });
    }
  
    ctx.seen.pop();
  
    return reduceToSingleString(output, base, braces);
  }
  
  
  function formatPrimitive(ctx, value) {
    if (isUndefined(value))
      return ctx.stylize('undefined', 'undefined');
    if (isString(value)) {
      var simple = '\'' + JSON.stringify(value).replace(/^"|"$/g, '')
                                               .replace(/'/g, "\\'")
                                               .replace(/\\"/g, '"') + '\'';
      return ctx.stylize(simple, 'string');
    }
    if (isNumber(value))
      return ctx.stylize('' + value, 'number');
    if (isBoolean(value))
      return ctx.stylize('' + value, 'boolean');
    // For some reason typeof null is "object", so special case here.
    if (isNull(value))
      return ctx.stylize('null', 'null');
  }
  
  
  function formatError(value) {
    return '[' + Error.prototype.toString.call(value) + ']';
  }
  
  
  function formatArray(ctx, value, recurseTimes, visibleKeys, keys) {
    var output = [];
    for (var i = 0, l = value.length; i < l; ++i) {
      if (hasOwnProperty(value, String(i))) {
        output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
            String(i), true));
      } else {
        output.push('');
      }
    }
    keys.forEach(function(key) {
      if (!key.match(/^\d+$/)) {
        output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
            key, true));
      }
    });
    return output;
  }
  
  
  function formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {
    var name, str, desc;
    desc = Object.getOwnPropertyDescriptor(value, key) || { value: value[key] };
    if (desc.get) {
      if (desc.set) {
        str = ctx.stylize('[Getter/Setter]', 'special');
      } else {
        str = ctx.stylize('[Getter]', 'special');
      }
    } else {
      if (desc.set) {
        str = ctx.stylize('[Setter]', 'special');
      }
    }
    if (!hasOwnProperty(visibleKeys, key)) {
      name = '[' + key + ']';
    }
    if (!str) {
      if (ctx.seen.indexOf(desc.value) < 0) {
        if (isNull(recurseTimes)) {
          str = formatValue(ctx, desc.value, null);
        } else {
          str = formatValue(ctx, desc.value, recurseTimes - 1);
        }
        if (str.indexOf('\n') > -1) {
          if (array) {
            str = str.split('\n').map(function(line) {
              return '  ' + line;
            }).join('\n').substr(2);
          } else {
            str = '\n' + str.split('\n').map(function(line) {
              return '   ' + line;
            }).join('\n');
          }
        }
      } else {
        str = ctx.stylize('[Circular]', 'special');
      }
    }
    if (isUndefined(name)) {
      if (array && key.match(/^\d+$/)) {
        return str;
      }
      name = JSON.stringify('' + key);
      if (name.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)) {
        name = name.substr(1, name.length - 2);
        name = ctx.stylize(name, 'name');
      } else {
        name = name.replace(/'/g, "\\'")
                   .replace(/\\"/g, '"')
                   .replace(/(^"|"$)/g, "'");
        name = ctx.stylize(name, 'string');
      }
    }
  
    return name + ': ' + str;
  }
  
  
  function reduceToSingleString(output, base, braces) {
    var numLinesEst = 0;
    var length = output.reduce(function(prev, cur) {
      numLinesEst++;
      if (cur.indexOf('\n') >= 0) numLinesEst++;
      return prev + cur.replace(/\u001b\[\d\d?m/g, '').length + 1;
    }, 0);
  
    if (length > 60) {
      return braces[0] +
             (base === '' ? '' : base + '\n ') +
             ' ' +
             output.join(',\n  ') +
             ' ' +
             braces[1];
    }
  
    return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];
  }
  
  
  // NOTE: These type checking functions intentionally don't use `instanceof`
  // because it is fragile and can be easily faked with `Object.create()`.
  function isArray(ar) {
    return Array.isArray(ar);
  }
  exports.isArray = isArray;
  
  function isBoolean(arg) {
    return typeof arg === 'boolean';
  }
  exports.isBoolean = isBoolean;
  
  function isNull(arg) {
    return arg === null;
  }
  exports.isNull = isNull;
  
  function isNullOrUndefined(arg) {
    return arg == null;
  }
  exports.isNullOrUndefined = isNullOrUndefined;
  
  function isNumber(arg) {
    return typeof arg === 'number';
  }
  exports.isNumber = isNumber;
  
  function isString(arg) {
    return typeof arg === 'string';
  }
  exports.isString = isString;
  
  function isSymbol(arg) {
    return typeof arg === 'symbol';
  }
  exports.isSymbol = isSymbol;
  
  function isUndefined(arg) {
    return arg === void 0;
  }
  exports.isUndefined = isUndefined;
  
  function isRegExp(re) {
    return isObject(re) && objectToString(re) === '[object RegExp]';
  }
  exports.isRegExp = isRegExp;
  
  function isObject(arg) {
    return typeof arg === 'object' && arg !== null;
  }
  exports.isObject = isObject;
  
  function isDate(d) {
    return isObject(d) && objectToString(d) === '[object Date]';
  }
  exports.isDate = isDate;
  
  function isError(e) {
    return isObject(e) &&
        (objectToString(e) === '[object Error]' || e instanceof Error);
  }
  exports.isError = isError;
  
  function isFunction(arg) {
    return typeof arg === 'function';
  }
  exports.isFunction = isFunction;
  
  function isPrimitive(arg) {
    return arg === null ||
           typeof arg === 'boolean' ||
           typeof arg === 'number' ||
           typeof arg === 'string' ||
           typeof arg === 'symbol' ||  // ES6 symbol
           typeof arg === 'undefined';
  }
  exports.isPrimitive = isPrimitive;
  
  exports.isBuffer = require('./support/isBuffer');
  
  function objectToString(o) {
    return Object.prototype.toString.call(o);
  }
  
  
  function pad(n) {
    return n < 10 ? '0' + n.toString(10) : n.toString(10);
  }
  
  
  var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep',
                'Oct', 'Nov', 'Dec'];
  
  // 26 Feb 16:19:34
  function timestamp() {
    var d = new Date();
    var time = [pad(d.getHours()),
                pad(d.getMinutes()),
                pad(d.getSeconds())].join(':');
    return [d.getDate(), months[d.getMonth()], time].join(' ');
  }
  
  
  // log is just a thin wrapper to console.log that prepends a timestamp
  exports.log = function() {
    console.log('%s - %s', timestamp(), exports.format.apply(exports, arguments));
  };
  
  
  /**
   * Inherit the prototype methods from one constructor into another.
   *
   * The Function.prototype.inherits from lang.js rewritten as a standalone
   * function (not on Function.prototype). NOTE: If this file is to be loaded
   * during bootstrapping this function needs to be rewritten using some native
   * functions as prototype setup using normal JavaScript does not work as
   * expected during bootstrapping (see mirror.js in r114903).
   *
   * @param {function} ctor Constructor function which needs to inherit the
   *     prototype.
   * @param {function} superCtor Constructor function to inherit prototype from.
   */
  exports.inherits = require('inherits');
  
  exports._extend = function(origin, add) {
    // Don't do anything if add isn't an object
    if (!add || !isObject(add)) return origin;
  
    var keys = Object.keys(add);
    var i = keys.length;
    while (i--) {
      origin[keys[i]] = add[keys[i]];
    }
    return origin;
  };
  
  function hasOwnProperty(obj, prop) {
    return Object.prototype.hasOwnProperty.call(obj, prop);
  }
  
  }).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
  },{"./support/isBuffer":332,"_process":257,"inherits":331}],334:[function(require,module,exports){
  var indexOf = require('indexof');
  
  var Object_keys = function (obj) {
      if (Object.keys) return Object.keys(obj)
      else {
          var res = [];
          for (var key in obj) res.push(key)
          return res;
      }
  };
  
  var forEach = function (xs, fn) {
      if (xs.forEach) return xs.forEach(fn)
      else for (var i = 0; i < xs.length; i++) {
          fn(xs[i], i, xs);
      }
  };
  
  var defineProp = (function() {
      try {
          Object.defineProperty({}, '_', {});
          return function(obj, name, value) {
              Object.defineProperty(obj, name, {
                  writable: true,
                  enumerable: false,
                  configurable: true,
                  value: value
              })
          };
      } catch(e) {
          return function(obj, name, value) {
              obj[name] = value;
          };
      }
  }());
  
  var globals = ['Array', 'Boolean', 'Date', 'Error', 'EvalError', 'Function',
  'Infinity', 'JSON', 'Math', 'NaN', 'Number', 'Object', 'RangeError',
  'ReferenceError', 'RegExp', 'String', 'SyntaxError', 'TypeError', 'URIError',
  'decodeURI', 'decodeURIComponent', 'encodeURI', 'encodeURIComponent', 'escape',
  'eval', 'isFinite', 'isNaN', 'parseFloat', 'parseInt', 'undefined', 'unescape'];
  
  function Context() {}
  Context.prototype = {};
  
  var Script = exports.Script = function NodeScript (code) {
      if (!(this instanceof Script)) return new Script(code);
      this.code = code;
  };
  
  Script.prototype.runInContext = function (context) {
      if (!(context instanceof Context)) {
          throw new TypeError("needs a 'context' argument.");
      }
      
      var iframe = document.createElement('iframe');
      if (!iframe.style) iframe.style = {};
      iframe.style.display = 'none';
      
      document.body.appendChild(iframe);
      
      var win = iframe.contentWindow;
      var wEval = win.eval, wExecScript = win.execScript;
  
      if (!wEval && wExecScript) {
          // win.eval() magically appears when this is called in IE:
          wExecScript.call(win, 'null');
          wEval = win.eval;
      }
      
      forEach(Object_keys(context), function (key) {
          win[key] = context[key];
      });
      forEach(globals, function (key) {
          if (context[key]) {
              win[key] = context[key];
          }
      });
      
      var winKeys = Object_keys(win);
  
      var res = wEval.call(win, this.code);
      
      forEach(Object_keys(win), function (key) {
          // Avoid copying circular objects like `top` and `window` by only
          // updating existing context properties or new properties in the `win`
          // that was only introduced after the eval.
          if (key in context || indexOf(winKeys, key) === -1) {
              context[key] = win[key];
          }
      });
  
      forEach(globals, function (key) {
          if (!(key in context)) {
              defineProp(context, key, win[key]);
          }
      });
      
      document.body.removeChild(iframe);
      
      return res;
  };
  
  Script.prototype.runInThisContext = function () {
      return eval(this.code); // maybe...
  };
  
  Script.prototype.runInNewContext = function (context) {
      var ctx = Script.createContext(context);
      var res = this.runInContext(ctx);
  
      forEach(Object_keys(ctx), function (key) {
          context[key] = ctx[key];
      });
  
      return res;
  };
  
  forEach(Object_keys(Script.prototype), function (name) {
      exports[name] = Script[name] = function (code) {
          var s = Script(code);
          return s[name].apply(s, [].slice.call(arguments, 1));
      };
  });
  
  exports.createScript = function (code) {
      return exports.Script(code);
  };
  
  exports.createContext = Script.createContext = function (context) {
      var copy = new Context();
      if(typeof context === 'object') {
          forEach(Object_keys(context), function (key) {
              copy[key] = context[key];
          });
      }
      return copy;
  };
  
  },{"indexof":179}],335:[function(require,module,exports){
  /*
      This file is part of web3.js.
  
      web3.js is free software: you can redistribute it and/or modify
      it under the terms of the GNU Lesser General Public License as published by
      the Free Software Foundation, either version 3 of the License, or
      (at your option) any later version.
  
      web3.js is distributed in the hope that it will be useful,
      but WITHOUT ANY WARRANTY; without even the implied warranty of
      MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
      GNU Lesser General Public License for more details.
  
      You should have received a copy of the GNU Lesser General Public License
      along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
  */
  /**
   * @file index.js
   * @author Fabian Vogelsteller <fabian@ethereum.org>
   * @date 2017
   */
  
  "use strict";
  
  var _ = require('underscore');
  var swarm = require("swarm-js");
  
  
  var Bzz = function Bzz(provider) {
  
      this.givenProvider = Bzz.givenProvider;
  
      if (provider && provider._requestManager) {
          provider = provider.currentProvider;
      }
  
      // only allow file picker when in browser
      if(typeof document !== 'undefined') {
          this.pick = swarm.pick;
      }
  
      this.setProvider(provider);
  };
  
  // set default ethereum provider
  /* jshint ignore:start */
  Bzz.givenProvider = null;
  if(typeof ethereumProvider !== 'undefined' && ethereumProvider.bzz) {
      Bzz.givenProvider = ethereumProvider.bzz;
  }
  /* jshint ignore:end */
  
  Bzz.prototype.setProvider = function(provider) {
      // is ethereum provider
      if(_.isObject(provider) && _.isString(provider.bzz)) {
          provider = provider.bzz;
      // is no string, set default
      }
      // else if(!_.isString(provider)) {
      //      provider = 'http://swarm-gateways.net'; // default to gateway
      // }
  
  
      if(_.isString(provider)) {
          this.currentProvider = provider;
      } else {
          this.currentProvider = null;
  
          var noProviderError = new Error('No provider set, please set one using bzz.setProvider().');
  
          this.download = this.upload = this.isAvailable = function(){
              throw noProviderError;
          };
  
          return false;
      }
  
      // add functions
      this.download = swarm.at(provider).download;
      this.upload = swarm.at(provider).upload;
      this.isAvailable = swarm.at(provider).isAvailable;
  
      return true;
  };
  
  
  module.exports = Bzz;
  
  
  },{"swarm-js":319,"underscore":325}],336:[function(require,module,exports){
  /*
      This file is part of web3.js.
  
      web3.js is free software: you can redistribute it and/or modify
      it under the terms of the GNU Lesser General Public License as published by
      the Free Software Foundation, either version 3 of the License, or
      (at your option) any later version.
  
      web3.js is distributed in the hope that it will be useful,
      but WITHOUT ANY WARRANTY; without even the implied warranty of
      MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
      GNU Lesser General Public License for more details.
  
      You should have received a copy of the GNU Lesser General Public License
      along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
  */
  /**
   * @file errors.js
   * @author Fabian Vogelsteller <fabian@ethereum.org>
   * @author Marek Kotewicz <marek@parity.io>
   * @date 2017
   */
  
  "use strict";
  
  module.exports = {
      ErrorResponse: function (result) {
          var message = !!result && !!result.error && !!result.error.message ? result.error.message : JSON.stringify(result);
          return new Error('Returned error: ' + message);
      },
      InvalidNumberOfParams: function (got, expected, method) {
          return new Error('Invalid number of parameters for "'+ method +'". Got '+ got +' expected '+ expected +'!');
      },
      InvalidConnection: function (host){
          return new Error('CONNECTION ERROR: Couldn\'t connect to node '+ host +'.');
      },
      InvalidProvider: function () {
          return new Error('Provider not set or invalid');
      },
      InvalidResponse: function (result){
          var message = !!result && !!result.error && !!result.error.message ? result.error.message : 'Invalid JSON RPC response: ' + JSON.stringify(result);
          return new Error(message);
      },
      ConnectionTimeout: function (ms){
          return new Error('CONNECTION TIMEOUT: timeout of ' + ms + ' ms achived');
      }
  };
  
  },{}],337:[function(require,module,exports){
  /*
      This file is part of web3.js.
  
      web3.js is free software: you can redistribute it and/or modify
      it under the terms of the GNU Lesser General Public License as published by
      the Free Software Foundation, either version 3 of the License, or
      (at your option) any later version.
  
      web3.js is distributed in the hope that it will be useful,
      but WITHOUT ANY WARRANTY; without even the implied warranty of
      MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
      GNU Lesser General Public License for more details.
  
      You should have received a copy of the GNU Lesser General Public License
      along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
  */
  /**
   * @file formatters.js
   * @author Fabian Vogelsteller <fabian@ethereum.org>
   * @author Marek Kotewicz <marek@parity.io>
   * @date 2017
   */
  
  "use strict";
  
  
  var _ = require('underscore');
  var utils = require('web3-utils');
  var Iban = require('web3-eth-iban');
  
  /**
   * Should the format output to a big number
   *
   * @method outputBigNumberFormatter
   * @param {String|Number|BigNumber} number
   * @returns {BigNumber} object
   */
  var outputBigNumberFormatter = function (number) {
      return utils.toBN(number).toString(10);
  };
  
  var isPredefinedBlockNumber = function (blockNumber) {
      return blockNumber === 'latest' || blockNumber === 'pending' || blockNumber === 'earliest';
  };
  
  var inputDefaultBlockNumberFormatter = function (blockNumber) {
      if (this && (blockNumber === undefined || blockNumber === null)) {
          return this.defaultBlock;
      }
      if (blockNumber === 'genesis' || blockNumber === 'earliest') {
          return '0x0';
      }
      return inputBlockNumberFormatter(blockNumber);
  };
  
  var inputBlockNumberFormatter = function (blockNumber) {
      if (blockNumber === undefined) {
          return undefined;
      } else if (isPredefinedBlockNumber(blockNumber)) {
          return blockNumber;
      }
      return (utils.isHexStrict(blockNumber)) ? ((_.isString(blockNumber)) ? blockNumber.toLowerCase() : blockNumber) : utils.numberToHex(blockNumber);
  };
  
  /**
   * Formats the input of a transaction and converts all values to HEX
   *
   * @method _txInputFormatter
   * @param {Object} transaction options
   * @returns object
   */
  var _txInputFormatter = function (options){
  
      if (options.to) { // it might be contract creation
          options.to = inputAddressFormatter(options.to);
      }
  
      if (options.data && options.input) {
          throw new Error('You can\'t have "data" and "input" as properties of transactions at the same time, please use either "data" or "input" instead.');
      }
  
      if (!options.data && options.input) {
          options.data = options.input;
          delete options.input;
      }
  
      if(options.data && !utils.isHex(options.data)) {
          throw new Error('The data field must be HEX encoded data.');
      }
  
      // allow both
      if (options.gas || options.gasLimit) {
          options.gas = options.gas || options.gasLimit;
      }
  
      ['gasPrice', 'gas', 'value', 'nonce'].filter(function (key) {
          return options[key] !== undefined;
      }).forEach(function(key){
          options[key] = utils.numberToHex(options[key]);
      });
  
      return options;
  };
  
  /**
   * Formats the input of a transaction and converts all values to HEX
   *
   * @method inputCallFormatter
   * @param {Object} transaction options
   * @returns object
  */
  var inputCallFormatter = function (options){
  
      options = _txInputFormatter(options);
  
      var from = options.from || (this ? this.defaultAccount : null);
  
      if (from) {
          options.from = inputAddressFormatter(from);
      }
  
  
      return options;
  };
  
  /**
   * Formats the input of a transaction and converts all values to HEX
   *
   * @method inputTransactionFormatter
   * @param {Object} options
   * @returns object
  */
  var inputTransactionFormatter = function (options) {
  
      options = _txInputFormatter(options);
  
      // check from, only if not number, or object
      if (!_.isNumber(options.from) && !_.isObject(options.from)) {
          options.from = options.from || (this ? this.defaultAccount : null);
  
          if (!options.from && !_.isNumber(options.from)) {
              throw new Error('The send transactions "from" field must be defined!');
          }
  
          options.from = inputAddressFormatter(options.from);
      }
  
      return options;
  };
  
  /**
   * Hex encodes the data passed to eth_sign and personal_sign
   *
   * @method inputSignFormatter
   * @param {String} data
   * @returns {String}
   */
  var inputSignFormatter = function (data) {
      return (utils.isHexStrict(data)) ? data : utils.utf8ToHex(data);
  };
  
  /**
   * Formats the output of a transaction to its proper values
   *
   * @method outputTransactionFormatter
   * @param {Object} tx
   * @returns {Object}
  */
  var outputTransactionFormatter = function (tx){
      if(tx.blockNumber !== null)
          tx.blockNumber = utils.hexToNumber(tx.blockNumber);
      if(tx.transactionIndex !== null)
          tx.transactionIndex = utils.hexToNumber(tx.transactionIndex);
      tx.nonce = utils.hexToNumber(tx.nonce);
      tx.gas = utils.hexToNumber(tx.gas);
      tx.gasPrice = outputBigNumberFormatter(tx.gasPrice);
      tx.value = outputBigNumberFormatter(tx.value);
  
      if(tx.to && utils.isAddress(tx.to)) { // tx.to could be `0x0` or `null` while contract creation
          tx.to = utils.toChecksumAddress(tx.to);
      } else {
          tx.to = null; // set to `null` if invalid address
      }
  
      if(tx.from) {
          tx.from = utils.toChecksumAddress(tx.from);
      }
  
      return tx;
  };
  
  /**
   * Formats the output of a transaction receipt to its proper values
   *
   * @method outputTransactionReceiptFormatter
   * @param {Object} receipt
   * @returns {Object}
  */
  var outputTransactionReceiptFormatter = function (receipt){
      if(typeof receipt !== 'object') {
          throw new Error('Received receipt is invalid: '+ receipt);
      }
  
      if(receipt.blockNumber !== null)
          receipt.blockNumber = utils.hexToNumber(receipt.blockNumber);
      if(receipt.transactionIndex !== null)
          receipt.transactionIndex = utils.hexToNumber(receipt.transactionIndex);
      receipt.cumulativeGasUsed = utils.hexToNumber(receipt.cumulativeGasUsed);
      receipt.gasUsed = utils.hexToNumber(receipt.gasUsed);
  
      if(_.isArray(receipt.logs)) {
          receipt.logs = receipt.logs.map(outputLogFormatter);
      }
  
      if(receipt.contractAddress) {
          receipt.contractAddress = utils.toChecksumAddress(receipt.contractAddress);
      }
  
      if(typeof receipt.status !== 'undefined') {
          receipt.status = Boolean(parseInt(receipt.status));
      }
  
      return receipt;
  };
  
  /**
   * Formats the output of a block to its proper values
   *
   * @method outputBlockFormatter
   * @param {Object} block
   * @returns {Object}
  */
  var outputBlockFormatter = function(block) {
  
      // transform to number
      block.gasLimit = utils.hexToNumber(block.gasLimit);
      block.gasUsed = utils.hexToNumber(block.gasUsed);
      block.size = utils.hexToNumber(block.size);
      block.timestamp = utils.hexToNumber(block.timestamp);
      if (block.number !== null)
          block.number = utils.hexToNumber(block.number);
  
      if(block.difficulty)
          block.difficulty = outputBigNumberFormatter(block.difficulty);
      if(block.totalDifficulty)
          block.totalDifficulty = outputBigNumberFormatter(block.totalDifficulty);
  
      if (_.isArray(block.transactions)) {
          block.transactions.forEach(function(item){
              if(!_.isString(item))
                  return outputTransactionFormatter(item);
          });
      }
  
      if (block.miner)
          block.miner = utils.toChecksumAddress(block.miner);
  
      return block;
  };
  
  /**
   * Formats the input of a log
   *
   * @method inputLogFormatter
   * @param {Object} log object
   * @returns {Object} log
  */
  var inputLogFormatter = function(options) {
      var toTopic = function(value){
  
          if(value === null || typeof value === 'undefined')
              return null;
  
          value = String(value);
  
          if(value.indexOf('0x') === 0)
              return value;
          else
              return utils.fromUtf8(value);
      };
  
      if (options.fromBlock)
          options.fromBlock = inputBlockNumberFormatter(options.fromBlock);
  
      if (options.toBlock)
          options.toBlock = inputBlockNumberFormatter(options.toBlock);
  
  
      // make sure topics, get converted to hex
      options.topics = options.topics || [];
      options.topics = options.topics.map(function(topic){
          return (_.isArray(topic)) ? topic.map(toTopic) : toTopic(topic);
      });
  
      toTopic = null;
  
      if (options.address) {
          options.address = (_.isArray(options.address)) ? options.address.map(function (addr) {
              return inputAddressFormatter(addr);
          }) : inputAddressFormatter(options.address);
      }
  
      return options;
  };
  
  /**
   * Formats the output of a log
   *
   * @method outputLogFormatter
   * @param {Object} log object
   * @returns {Object} log
  */
  var outputLogFormatter = function(log) {
  
      // generate a custom log id
      if(typeof log.blockHash === 'string' &&
         typeof log.transactionHash === 'string' &&
         typeof log.logIndex === 'string') {
          var shaId = utils.sha3(log.blockHash.replace('0x','') + log.transactionHash.replace('0x','') + log.logIndex.replace('0x',''));
          log.id = 'log_'+ shaId.replace('0x','').substr(0,8);
      } else if(!log.id) {
          log.id = null;
      }
  
      if (log.blockNumber !== null)
          log.blockNumber = utils.hexToNumber(log.blockNumber);
      if (log.transactionIndex !== null)
          log.transactionIndex = utils.hexToNumber(log.transactionIndex);
      if (log.logIndex !== null)
          log.logIndex = utils.hexToNumber(log.logIndex);
  
      if (log.address) {
          log.address = utils.toChecksumAddress(log.address);
      }
  
      return log;
  };
  
  /**
   * Formats the input of a whisper post and converts all values to HEX
   *
   * @method inputPostFormatter
   * @param {Object} transaction object
   * @returns {Object}
  */
  var inputPostFormatter = function(post) {
  
      // post.payload = utils.toHex(post.payload);
  
      if (post.ttl)
          post.ttl = utils.numberToHex(post.ttl);
      if (post.workToProve)
          post.workToProve = utils.numberToHex(post.workToProve);
      if (post.priority)
          post.priority = utils.numberToHex(post.priority);
  
      // fallback
      if (!_.isArray(post.topics)) {
          post.topics = post.topics ? [post.topics] : [];
      }
  
      // format the following options
      post.topics = post.topics.map(function(topic){
          // convert only if not hex
          return (topic.indexOf('0x') === 0) ? topic : utils.fromUtf8(topic);
      });
  
      return post;
  };
  
  /**
   * Formats the output of a received post message
   *
   * @method outputPostFormatter
   * @param {Object}
   * @returns {Object}
   */
  var outputPostFormatter = function(post){
  
      post.expiry = utils.hexToNumber(post.expiry);
      post.sent = utils.hexToNumber(post.sent);
      post.ttl = utils.hexToNumber(post.ttl);
      post.workProved = utils.hexToNumber(post.workProved);
      // post.payloadRaw = post.payload;
      // post.payload = utils.hexToAscii(post.payload);
  
      // if (utils.isJson(post.payload)) {
      //     post.payload = JSON.parse(post.payload);
      // }
  
      // format the following options
      if (!post.topics) {
          post.topics = [];
      }
      post.topics = post.topics.map(function(topic){
          return utils.toUtf8(topic);
      });
  
      return post;
  };
  
  var inputAddressFormatter = function (address) {
      var iban = new Iban(address);
      if (iban.isValid() && iban.isDirect()) {
          return iban.toAddress().toLowerCase();
      } else if (utils.isAddress(address)) {
          return '0x' + address.toLowerCase().replace('0x','');
      }
      throw new Error('Provided address "'+ address +'" is invalid, the capitalization checksum test failed, or its an indirect IBAN address which can\'t be converted.');
  };
  
  
  var outputSyncingFormatter = function(result) {
  
      result.startingBlock = utils.hexToNumber(result.startingBlock);
      result.currentBlock = utils.hexToNumber(result.currentBlock);
      result.highestBlock = utils.hexToNumber(result.highestBlock);
      if (result.knownStates) {
          result.knownStates = utils.hexToNumber(result.knownStates);
          result.pulledStates = utils.hexToNumber(result.pulledStates);
      }
  
      return result;
  };
  
  module.exports = {
      inputDefaultBlockNumberFormatter: inputDefaultBlockNumberFormatter,
      inputBlockNumberFormatter: inputBlockNumberFormatter,
      inputCallFormatter: inputCallFormatter,
      inputTransactionFormatter: inputTransactionFormatter,
      inputAddressFormatter: inputAddressFormatter,
      inputPostFormatter: inputPostFormatter,
      inputLogFormatter: inputLogFormatter,
      inputSignFormatter: inputSignFormatter,
      outputBigNumberFormatter: outputBigNumberFormatter,
      outputTransactionFormatter: outputTransactionFormatter,
      outputTransactionReceiptFormatter: outputTransactionReceiptFormatter,
      outputBlockFormatter: outputBlockFormatter,
      outputLogFormatter: outputLogFormatter,
      outputPostFormatter: outputPostFormatter,
      outputSyncingFormatter: outputSyncingFormatter
  };
  
  
  },{"underscore":325,"web3-eth-iban":368,"web3-utils":403}],338:[function(require,module,exports){
  /*
      This file is part of web3.js.
  
      web3.js is free software: you can redistribute it and/or modify
      it under the terms of the GNU Lesser General Public License as published by
      the Free Software Foundation, either version 3 of the License, or
      (at your option) any later version.
  
      web3.js is distributed in the hope that it will be useful,
      but WITHOUT ANY WARRANTY; without even the implied warranty of
      MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
      GNU Lesser General Public License for more details.
  
      You should have received a copy of the GNU Lesser General Public License
      along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
  */
  /**
   * @file index.js
   * @author Fabian Vogelsteller <fabian@ethereum.org>
   * @date 2017
   */
  
  "use strict";
  
  var errors = require('./errors');
  var formatters = require('./formatters');
  
  module.exports = {
      errors: errors,
      formatters: formatters
  };
  
  
  },{"./errors":336,"./formatters":337}],339:[function(require,module,exports){
  /*
      This file is part of web3.js.
  
      web3.js is free software: you can redistribute it and/or modify
      it under the terms of the GNU Lesser General Public License as published by
      the Free Software Foundation, either version 3 of the License, or
      (at your option) any later version.
  
      web3.js is distributed in the hope that it will be useful,
      but WITHOUT ANY WARRANTY; without even the implied warranty of
      MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
      GNU Lesser General Public License for more details.
  
      You should have received a copy of the GNU Lesser General Public License
      along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
  */
  /**
   * @file index.js
   * @author Fabian Vogelsteller <fabian@ethereum.org>
   * @author Marek Kotewicz <marek@parity.io>
   * @date 2017
   */
  
  "use strict";
  
  var _ = require('underscore');
  var errors = require('web3-core-helpers').errors;
  var formatters = require('web3-core-helpers').formatters;
  var utils = require('web3-utils');
  var promiEvent = require('web3-core-promievent');
  var Subscriptions = require('web3-core-subscriptions').subscriptions;
  
  var TIMEOUTBLOCK = 50;
  var POLLINGTIMEOUT = 15 * TIMEOUTBLOCK; // ~average block time (seconds) * TIMEOUTBLOCK
  var CONFIRMATIONBLOCKS = 24;
  
  var Method = function Method(options) {
  
      if(!options.call || !options.name) {
          throw new Error('When creating a method you need to provide at least the "name" and "call" property.');
      }
  
      this.name = options.name;
      this.call = options.call;
      this.params = options.params || 0;
      this.inputFormatter = options.inputFormatter;
      this.outputFormatter = options.outputFormatter;
      this.transformPayload = options.transformPayload;
      this.extraFormatters = options.extraFormatters;
  
      this.requestManager = options.requestManager;
  
      // reference to eth.accounts
      this.accounts = options.accounts;
  
      this.defaultBlock = options.defaultBlock || 'latest';
      this.defaultAccount = options.defaultAccount || null;
  };
  
  Method.prototype.setRequestManager = function (requestManager, accounts) {
      this.requestManager = requestManager;
  
      // reference to eth.accounts
      if (accounts) {
          this.accounts = accounts;
      }
  
  };
  
  Method.prototype.createFunction = function (requestManager, accounts) {
      var func = this.buildCall();
      func.call = this.call;
  
      this.setRequestManager(requestManager || this.requestManager, accounts || this.accounts);
  
      return func;
  };
  
  Method.prototype.attachToObject = function (obj) {
      var func = this.buildCall();
      func.call = this.call;
      var name = this.name.split('.');
      if (name.length > 1) {
          obj[name[0]] = obj[name[0]] || {};
          obj[name[0]][name[1]] = func;
      } else {
          obj[name[0]] = func;
      }
  };
  
  /**
   * Should be used to determine name of the jsonrpc method based on arguments
   *
   * @method getCall
   * @param {Array} arguments
   * @return {String} name of jsonrpc method
   */
  Method.prototype.getCall = function (args) {
      return _.isFunction(this.call) ? this.call(args) : this.call;
  };
  
  /**
   * Should be used to extract callback from array of arguments. Modifies input param
   *
   * @method extractCallback
   * @param {Array} arguments
   * @return {Function|Null} callback, if exists
   */
  Method.prototype.extractCallback = function (args) {
      if (_.isFunction(args[args.length - 1])) {
          return args.pop(); // modify the args array!
      }
  };
  
  /**
   * Should be called to check if the number of arguments is correct
   *
   * @method validateArgs
   * @param {Array} arguments
   * @throws {Error} if it is not
   */
  Method.prototype.validateArgs = function (args) {
      if (args.length !== this.params) {
          throw errors.InvalidNumberOfParams(args.length, this.params, this.name);
      }
  };
  
  /**
   * Should be called to format input args of method
   *
   * @method formatInput
   * @param {Array}
   * @return {Array}
   */
  Method.prototype.formatInput = function (args) {
      var _this = this;
  
      if (!this.inputFormatter) {
          return args;
      }
  
      return this.inputFormatter.map(function (formatter, index) {
          // bind this for defaultBlock, and defaultAccount
          return formatter ? formatter.call(_this, args[index]) : args[index];
      });
  };
  
  /**
   * Should be called to format output(result) of method
   *
   * @method formatOutput
   * @param {Object}
   * @return {Object}
   */
  Method.prototype.formatOutput = function (result) {
      var _this = this;
  
      if(_.isArray(result)) {
          return result.map(function(res){
              return _this.outputFormatter && res ? _this.outputFormatter(res) : res;
          });
      } else {
          return this.outputFormatter && result ? this.outputFormatter(result) : result;
      }
  };
  
  /**
   * Should create payload from given input args
   *
   * @method toPayload
   * @param {Array} args
   * @return {Object}
   */
  Method.prototype.toPayload = function (args) {
      var call = this.getCall(args);
      var callback = this.extractCallback(args);
      var params = this.formatInput(args);
      this.validateArgs(params);
  
      var payload = {
          method: call,
          params: params,
          callback: callback
      };
  
      if (this.transformPayload) {
          payload = this.transformPayload(payload);
      }
  
      return payload;
  };
  
  
  Method.prototype._confirmTransaction = function (defer, result, payload) {
      var method = this,
          promiseResolved = false,
          canUnsubscribe = true,
          timeoutCount = 0,
          confirmationCount = 0,
          intervalId = null,
          receiptJSON = '',
          gasProvided = (_.isObject(payload.params[0]) && payload.params[0].gas) ? payload.params[0].gas : null,
          isContractDeployment = _.isObject(payload.params[0]) &&
              payload.params[0].data &&
              payload.params[0].from &&
              !payload.params[0].to;
  
      // add custom send Methods
      var _ethereumCalls = [
          new Method({
              name: 'getTransactionReceipt',
              call: 'eth_getTransactionReceipt',
              params: 1,
              inputFormatter: [null],
              outputFormatter: formatters.outputTransactionReceiptFormatter
          }),
          new Method({
              name: 'getCode',
              call: 'eth_getCode',
              params: 2,
              inputFormatter: [formatters.inputAddressFormatter, formatters.inputDefaultBlockNumberFormatter]
          }),
          new Subscriptions({
              name: 'subscribe',
              type: 'eth',
              subscriptions: {
                  'newBlockHeaders': {
                      subscriptionName: 'newHeads', // replace subscription with this name
                      params: 0,
                      outputFormatter: formatters.outputBlockFormatter
                  }
              }
          })
      ];
      // attach methods to this._ethereumCall
      var _ethereumCall = {};
      _.each(_ethereumCalls, function (mthd) {
          mthd.attachToObject(_ethereumCall);
          mthd.requestManager = method.requestManager; // assign rather than call setRequestManager()
      });
  
  
      // fire "receipt" and confirmation events and resolve after
      var checkConfirmation = function (existingReceipt, isPolling, err, blockHeader, sub) {
          if (!err) {
              // create fake unsubscribe
              if (!sub) {
                  sub = {
                      unsubscribe: function () {
                          clearInterval(intervalId);
                      }
                  };
              }
              // if we have a valid receipt we don't need to send a request
              return (existingReceipt ? promiEvent.resolve(existingReceipt) : _ethereumCall.getTransactionReceipt(result))
              // catch error from requesting receipt
              .catch(function (err) {
                  sub.unsubscribe();
                  promiseResolved = true;
                  utils._fireError({message: 'Failed to check for transaction receipt:', data: err}, defer.eventEmitter, defer.reject);
              })
              // if CONFIRMATION listener exists check for confirmations, by setting canUnsubscribe = false
              .then(function(receipt) {
                  if (!receipt || !receipt.blockHash) {
                      throw new Error('Receipt missing or blockHash null');
                  }
  
                  // apply extra formatters
                  if (method.extraFormatters && method.extraFormatters.receiptFormatter) {
                      receipt = method.extraFormatters.receiptFormatter(receipt);
                  }
  
                  // check if confirmation listener exists
                  if (defer.eventEmitter.listeners('confirmation').length > 0) {
  
                      // If there was an immediately retrieved receipt, it's already
                      // been confirmed by the direct call to checkConfirmation needed
                      // for parity instant-seal
                      if (existingReceipt === undefined || confirmationCount !== 0){
                          defer.eventEmitter.emit('confirmation', confirmationCount, receipt);
                      }
  
                      canUnsubscribe = false;
                      confirmationCount++;
  
                      if (confirmationCount === CONFIRMATIONBLOCKS + 1) { // add 1 so we account for conf 0
                          sub.unsubscribe();
                          defer.eventEmitter.removeAllListeners();
                      }
                  }
  
                  return receipt;
              })
              // CHECK for CONTRACT DEPLOYMENT
              .then(function(receipt) {
  
                  if (isContractDeployment && !promiseResolved) {
  
                      if (!receipt.contractAddress) {
  
                          if (canUnsubscribe) {
                              sub.unsubscribe();
                              promiseResolved = true;
                          }
  
                          utils._fireError(new Error('The transaction receipt didn\'t contain a contract address.'), defer.eventEmitter, defer.reject);
                          return;
                      }
  
                      _ethereumCall.getCode(receipt.contractAddress, function (e, code) {
  
                          if (!code) {
                              return;
                          }
  
  
                          if (code.length > 2) {
                              defer.eventEmitter.emit('receipt', receipt);
  
                              // if contract, return instance instead of receipt
                              if (method.extraFormatters && method.extraFormatters.contractDeployFormatter) {
                                  defer.resolve(method.extraFormatters.contractDeployFormatter(receipt));
                              } else {
                                  defer.resolve(receipt);
                              }
  
                              // need to remove listeners, as they aren't removed automatically when successful
                              if (canUnsubscribe) {
                                  defer.eventEmitter.removeAllListeners();
                              }
  
                          } else {
                              utils._fireError(new Error('The contract code couldn\'t be stored, please check your gas limit.'), defer.eventEmitter, defer.reject);
                          }
  
                          if (canUnsubscribe) {
                              sub.unsubscribe();
                          }
                          promiseResolved = true;
                      });
                  }
  
                  return receipt;
              })
              // CHECK for normal tx check for receipt only
              .then(function(receipt) {
  
                  if (!isContractDeployment && !promiseResolved) {
  
                      if(!receipt.outOfGas &&
                          (!gasProvided || gasProvided !== receipt.gasUsed) &&
                          (receipt.status === true || receipt.status === '0x1' || typeof receipt.status === 'undefined')) {
                          defer.eventEmitter.emit('receipt', receipt);
                          defer.resolve(receipt);
  
                          // need to remove listeners, as they aren't removed automatically when successful
                          if (canUnsubscribe) {
                              defer.eventEmitter.removeAllListeners();
                          }
  
                      } else {
                          receiptJSON = JSON.stringify(receipt, null, 2);
                          if (receipt.status === false || receipt.status === '0x0') {
                              utils._fireError(new Error("Transaction has been reverted by the EVM:\n" + receiptJSON),
                                  defer.eventEmitter, defer.reject);
                          } else {
                              utils._fireError(
                                  new Error("Transaction ran out of gas. Please provide more gas:\n" + receiptJSON),
                                  defer.eventEmitter, defer.reject);
                          }
                      }
  
                      if (canUnsubscribe) {
                          sub.unsubscribe();
                      }
                      promiseResolved = true;
                  }
  
              })
              // time out the transaction if not mined after 50 blocks
              .catch(function () {
                  timeoutCount++;
  
                  // check to see if we are http polling
                  if(!!isPolling) {
                      // polling timeout is different than TIMEOUTBLOCK blocks since we are triggering every second
                      if (timeoutCount - 1 >= POLLINGTIMEOUT) {
                          sub.unsubscribe();
                          promiseResolved = true;
                          utils._fireError(new Error('Transaction was not mined within' + POLLINGTIMEOUT + ' seconds, please make sure your transaction was properly sent. Be aware that it might still be mined!'), defer.eventEmitter, defer.reject);
                      }
                  } else {
                      if (timeoutCount - 1 >= TIMEOUTBLOCK) {
                          sub.unsubscribe();
                          promiseResolved = true;
                          utils._fireError(new Error('Transaction was not mined within 50 blocks, please make sure your transaction was properly sent. Be aware that it might still be mined!'), defer.eventEmitter, defer.reject);
                      }
                  }
              });
  
  
          } else {
              sub.unsubscribe();
              promiseResolved = true;
              utils._fireError({message: 'Failed to subscribe to new newBlockHeaders to confirm the transaction receipts.', data: err}, defer.eventEmitter, defer.reject);
          }
      };
  
      // start watching for confirmation depending on the support features of the provider
      var startWatching = function(existingReceipt) {
          // if provider allows PUB/SUB
          if (_.isFunction(this.requestManager.provider.on)) {
              _ethereumCall.subscribe('newBlockHeaders', checkConfirmation.bind(null, existingReceipt, false));
          } else {
              intervalId = setInterval(checkConfirmation.bind(null, existingReceipt, true), 1000);
          }
      }.bind(this);
  
  
      // first check if we already have a confirmed transaction
      _ethereumCall.getTransactionReceipt(result)
      .then(function(receipt) {
          if (receipt && receipt.blockHash) {
              if (defer.eventEmitter.listeners('confirmation').length > 0) {
                  // We must keep on watching for new Blocks, if a confirmation listener is present
                  startWatching(receipt);
              }
              checkConfirmation(receipt, false);
  
          } else if (!promiseResolved) {
              startWatching();
          }
      })
      .catch(function(){
          if (!promiseResolved) startWatching();
      });
  
  };
  
  
  var getWallet = function(from, accounts) {
      var wallet = null;
  
      // is index given
      if (_.isNumber(from)) {
          wallet = accounts.wallet[from];
  
          // is account given
      } else if (_.isObject(from) && from.address && from.privateKey) {
          wallet = from;
  
          // search in wallet for address
      } else {
          wallet = accounts.wallet[from.toLowerCase()];
      }
  
      return wallet;
  };
  
  Method.prototype.buildCall = function() {
      var method = this,
          isSendTx = (method.call === 'eth_sendTransaction' || method.call === 'eth_sendRawTransaction'); // || method.call === 'personal_sendTransaction'
  
      // actual send function
      var send = function () {
          var defer = promiEvent(!isSendTx),
              payload = method.toPayload(Array.prototype.slice.call(arguments));
  
  
          // CALLBACK function
          var sendTxCallback = function (err, result) {
              try {
                  result = method.formatOutput(result);
              } catch(e) {
                  err = e;
              }
  
              if (result instanceof Error) {
                  err = result;
              }
  
              if (!err) {
                  if (payload.callback) {
                      payload.callback(null, result);
                  }
              } else {
                  if(err.error) {
                      err = err.error;
                  }
  
                  return utils._fireError(err, defer.eventEmitter, defer.reject, payload.callback);
              }
  
              // return PROMISE
              if (!isSendTx) {
  
                  if (!err) {
                      defer.resolve(result);
  
                  }
  
                  // return PROMIEVENT
              } else {
                  defer.eventEmitter.emit('transactionHash', result);
  
                  method._confirmTransaction(defer, result, payload);
              }
  
          };
  
          // SENDS the SIGNED SIGNATURE
          var sendSignedTx = function(sign){
  
              var signedPayload = _.extend({}, payload, {
                  method: 'eth_sendRawTransaction',
                  params: [sign.rawTransaction]
              });
  
              method.requestManager.send(signedPayload, sendTxCallback);
          };
  
  
          var sendRequest = function(payload, method) {
  
              if (method && method.accounts && method.accounts.wallet && method.accounts.wallet.length) {
                  var wallet;
  
                  // ETH_SENDTRANSACTION
                  if (payload.method === 'eth_sendTransaction') {
                      var tx = payload.params[0];
                      wallet = getWallet((_.isObject(tx)) ? tx.from : null, method.accounts);
  
  
                      // If wallet was found, sign tx, and send using sendRawTransaction
                      if (wallet && wallet.privateKey) {
                          return method.accounts.signTransaction(_.omit(tx, 'from'), wallet.privateKey).then(sendSignedTx);
                      }
  
                      // ETH_SIGN
                  } else if (payload.method === 'eth_sign') {
                      var data = payload.params[1];
                      wallet = getWallet(payload.params[0], method.accounts);
  
                      // If wallet was found, sign tx, and send using sendRawTransaction
                      if (wallet && wallet.privateKey) {
                          var sign = method.accounts.sign(data, wallet.privateKey);
  
                          if (payload.callback) {
                              payload.callback(null, sign.signature);
                          }
  
                          defer.resolve(sign.signature);
                          return;
                      }
  
  
                  }
              }
  
              return method.requestManager.send(payload, sendTxCallback);
          };
  
          // Send the actual transaction
          if(isSendTx && _.isObject(payload.params[0]) && typeof payload.params[0].gasPrice === 'undefined') {
  
              var getGasPrice = (new Method({
                  name: 'getGasPrice',
                  call: 'eth_gasPrice',
                  params: 0
              })).createFunction(method.requestManager);
  
              getGasPrice(function (err, gasPrice) {
  
                  if (gasPrice) {
                      payload.params[0].gasPrice = gasPrice;
                  }
                  sendRequest(payload, method);
              });
  
          } else {
              sendRequest(payload, method);
          }
  
  
          return defer.eventEmitter;
      };
  
      // necessary to attach things to the method
      send.method = method;
      // necessary for batch requests
      send.request = this.request.bind(this);
      return send;
  };
  
  /**
   * Should be called to create the pure JSONRPC request which can be used in a batch request
   *
   * @method request
   * @return {Object} jsonrpc request
   */
  Method.prototype.request = function () {
      var payload = this.toPayload(Array.prototype.slice.call(arguments));
      payload.format = this.formatOutput.bind(this);
      return payload;
  };
  
  module.exports = Method;
  
  },{"underscore":325,"web3-core-helpers":338,"web3-core-promievent":340,"web3-core-subscriptions":345,"web3-utils":403}],340:[function(require,module,exports){
  /*
   This file is part of web3.js.
  
   web3.js is free software: you can redistribute it and/or modify
   it under the terms of the GNU Lesser General Public License as published by
   the Free Software Foundation, either version 3 of the License, or
   (at your option) any later version.
  
   web3.js is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU Lesser General Public License for more details.
  
   You should have received a copy of the GNU Lesser General Public License
   along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
   */
  /**
   * @file index.js
   * @author Fabian Vogelsteller <fabian@ethereum.org>
   * @date 2016
   */
  
  "use strict";
  
  var EventEmitter = require('eventemitter3');
  var Promise = require("any-promise");
  
  /**
   * This function generates a defer promise and adds eventEmitter functionality to it
   *
   * @method eventifiedPromise
   */
  var PromiEvent = function PromiEvent(justPromise) {
      var resolve, reject,
          eventEmitter = new Promise(function() {
              resolve = arguments[0];
              reject = arguments[1];
          });
  
      if(justPromise) {
          return {
              resolve: resolve,
              reject: reject,
              eventEmitter: eventEmitter
          };
      }
  
      // get eventEmitter
      var emitter = new EventEmitter();
  
      // add eventEmitter to the promise
      eventEmitter._events = emitter._events;
      eventEmitter.emit = emitter.emit;
      eventEmitter.on = emitter.on;
      eventEmitter.once = emitter.once;
      eventEmitter.off = emitter.off;
      eventEmitter.listeners = emitter.listeners;
      eventEmitter.addListener = emitter.addListener;
      eventEmitter.removeListener = emitter.removeListener;
      eventEmitter.removeAllListeners = emitter.removeAllListeners;
  
      return {
          resolve: resolve,
          reject: reject,
          eventEmitter: eventEmitter
      };
  };
  
  PromiEvent.resolve = function(value) {
      var promise = PromiEvent(true);
      promise.resolve(value);
      return promise.eventEmitter;
  };
  
  module.exports = PromiEvent;
  
  },{"any-promise":2,"eventemitter3":156}],341:[function(require,module,exports){
  /*
      This file is part of web3.js.
  
      web3.js is free software: you can redistribute it and/or modify
      it under the terms of the GNU Lesser General Public License as published by
      the Free Software Foundation, either version 3 of the License, or
      (at your option) any later version.
  
      web3.js is distributed in the hope that it will be useful,
      but WITHOUT ANY WARRANTY; without even the implied warranty of
      MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
      GNU Lesser General Public License for more details.
  
      You should have received a copy of the GNU Lesser General Public License
      along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
  */
  /**
   * @file batch.js
   * @author Marek Kotewicz <marek@ethdev.com>
   * @date 2015
   */
  
  "use strict";
  
  var Jsonrpc = require('./jsonrpc');
  var errors = require('web3-core-helpers').errors;
  
  var Batch = function (requestManager) {
      this.requestManager = requestManager;
      this.requests = [];
  };
  
  /**
   * Should be called to add create new request to batch request
   *
   * @method add
   * @param {Object} jsonrpc request object
   */
  Batch.prototype.add = function (request) {
      this.requests.push(request);
  };
  
  /**
   * Should be called to execute batch request
   *
   * @method execute
   */
  Batch.prototype.execute = function () {
      var requests = this.requests;
      this.requestManager.sendBatch(requests, function (err, results) {
          results = results || [];
          requests.map(function (request, index) {
              return results[index] || {};
          }).forEach(function (result, index) {
              if (requests[index].callback) {
                  if (result && result.error) {
                      return requests[index].callback(errors.ErrorResponse(result));
                  }
  
                  if (!Jsonrpc.isValidResponse(result)) {
                      return requests[index].callback(errors.InvalidResponse(result));
                  }
  
                  try {
                      requests[index].callback(null, requests[index].format ? requests[index].format(result.result) : result.result);
                  } catch (err) {
                      requests[index].callback(err);
                  }
              }
          });
      });
  };
  
  module.exports = Batch;
  
  
  },{"./jsonrpc":344,"web3-core-helpers":338}],342:[function(require,module,exports){
  /*
   This file is part of web3.js.
  
   web3.js is free software: you can redistribute it and/or modify
   it under the terms of the GNU Lesser General Public License as published by
   the Free Software Foundation, either version 3 of the License, or
   (at your option) any later version.
  
   web3.js is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU Lesser General Public License for more details.
  
   You should have received a copy of the GNU Lesser General Public License
   along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
   */
  /**
   * @file givenProvider.js
   * @author Fabian Vogelsteller <fabian@ethereum.org>
   * @date 2017
   */
  
  "use strict";
  
  var givenProvider = null;
  
  // ADD GIVEN PROVIDER
  /* jshint ignore:start */
  var global = window;
  // EthereumProvider
  if(typeof global.ethereumProvider !== 'undefined') {
      givenProvider = global.ethereumProvider;
  
  // Legacy web3.currentProvider
  } else if(typeof global.web3 !== 'undefined' && global.web3.currentProvider) {
  
      if(global.web3.currentProvider.sendAsync) {
          global.web3.currentProvider.send = global.web3.currentProvider.sendAsync;
          delete global.web3.currentProvider.sendAsync;
      }
  
      // if connection is 'ipcProviderWrapper', add subscription support
      if(!global.web3.currentProvider.on &&
          global.web3.currentProvider.connection &&
          global.web3.currentProvider.connection.constructor.name === 'ipcProviderWrapper') {
  
          global.web3.currentProvider.on = function (type, callback) {
  
              if(typeof callback !== 'function')
                  throw new Error('The second parameter callback must be a function.');
  
              switch(type){
                  case 'data':
                      this.connection.on('data', function(data) {
                          var result = '';
  
                          data = data.toString();
  
                          try {
                              result = JSON.parse(data);
                          } catch(e) {
                              return callback(new Error('Couldn\'t parse response data'+ data));
                          }
  
                          // notification
                          if(!result.id && result.method.indexOf('_subscription') !== -1) {
                              callback(null, result);
                          }
  
                      });
                      break;
  
                  default:
                      this.connection.on(type, callback);
                      break;
              }
          };
      }
  
      givenProvider = global.web3.currentProvider;
  }
  /* jshint ignore:end */
  
  
  module.exports = givenProvider;
  
  },{}],343:[function(require,module,exports){
  /*
      This file is part of web3.js.
  
      web3.js is free software: you can redistribute it and/or modify
      it under the terms of the GNU Lesser General Public License as published by
      the Free Software Foundation, either version 3 of the License, or
      (at your option) any later version.
  
      web3.js is distributed in the hope that it will be useful,
      but WITHOUT ANY WARRANTY; without even the implied warranty of
      MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
      GNU Lesser General Public License for more details.
  
      You should have received a copy of the GNU Lesser General Public License
      along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
  */
  /**
   * @file index.js
   * @author Fabian Vogelsteller <fabian@ethereum.org>
   * @date 2017
   */
  
  "use strict";
  
  
  var _ = require('underscore');
  var errors = require('web3-core-helpers').errors;
  var Jsonrpc = require('./jsonrpc.js');
  var BatchManager = require('./batch.js');
  var givenProvider = require('./givenProvider.js');
  
  
  
      /**
   * It's responsible for passing messages to providers
   * It's also responsible for polling the ethereum node for incoming messages
   * Default poll timeout is 1 second
   * Singleton
   */
  var RequestManager = function RequestManager(provider) {
      this.provider = null;
      this.providers = RequestManager.providers;
  
      this.setProvider(provider);
      this.subscriptions = {};
  };
  
  
  
  RequestManager.givenProvider = givenProvider;
  
  RequestManager.providers = {
      WebsocketProvider: require('web3-providers-ws'),
      HttpProvider: require('web3-providers-http'),
      IpcProvider: require('web3-providers-ipc')
  };
  
  
  
  /**
   * Should be used to set provider of request manager
   *
   * @method setProvider
   * @param {Object} p
   */
  RequestManager.prototype.setProvider = function (p, net) {
      var _this = this;
  
      // autodetect provider
      if(p && typeof p === 'string' && this.providers) {
  
          // HTTP
          if(/^http(s)?:\/\//i.test(p)) {
              p = new this.providers.HttpProvider(p);
  
              // WS
          } else if(/^ws(s)?:\/\//i.test(p)) {
              p = new this.providers.WebsocketProvider(p);
  
              // IPC
          } else if(p && typeof net === 'object'  && typeof net.connect === 'function') {
              p = new this.providers.IpcProvider(p, net);
  
          } else if(p) {
              throw new Error('Can\'t autodetect provider for "'+ p +'"');
          }
      }
  
      // reset the old one before changing, if still connected
      if(this.provider && this.provider.connected)
          this.clearSubscriptions();
  
  
      this.provider = p || null;
  
      // listen to incoming notifications
      if(this.provider && this.provider.on) {
          this.provider.on('data', function requestManagerNotification(result, deprecatedResult){
              result = result || deprecatedResult; // this is for possible old providers, which may had the error first handler
  
              // check for result.method, to prevent old providers errors to pass as result
              if(result.method && _this.subscriptions[result.params.subscription] && _this.subscriptions[result.params.subscription].callback) {
                  _this.subscriptions[result.params.subscription].callback(null, result.params.result);
              }
          });
          // TODO add error, end, timeout, connect??
          // this.provider.on('error', function requestManagerNotification(result){
          //     Object.keys(_this.subscriptions).forEach(function(id){
          //         if(_this.subscriptions[id].callback)
          //             _this.subscriptions[id].callback(err);
          //     });
          // }
      }
  };
  
  
  /**
   * Should be used to asynchronously send request
   *
   * @method sendAsync
   * @param {Object} data
   * @param {Function} callback
   */
  RequestManager.prototype.send = function (data, callback) {
      callback = callback || function(){};
  
      if (!this.provider) {
          return callback(errors.InvalidProvider());
      }
  
      var payload = Jsonrpc.toPayload(data.method, data.params);
      this.provider[this.provider.sendAsync ? 'sendAsync' : 'send'](payload, function (err, result) {
          if(result && result.id && payload.id !== result.id) return callback(new Error('Wrong response id "'+ result.id +'" (expected: "'+ payload.id +'") in '+ JSON.stringify(payload)));
  
          if (err) {
              return callback(err);
          }
  
          if (result && result.error) {
              return callback(errors.ErrorResponse(result));
          }
  
          if (!Jsonrpc.isValidResponse(result)) {
              return callback(errors.InvalidResponse(result));
          }
  
          callback(null, result.result);
      });
  };
  
  /**
   * Should be called to asynchronously send batch request
   *
   * @method sendBatch
   * @param {Array} batch data
   * @param {Function} callback
   */
  RequestManager.prototype.sendBatch = function (data, callback) {
      if (!this.provider) {
          return callback(errors.InvalidProvider());
      }
  
      var payload = Jsonrpc.toBatchPayload(data);
      this.provider[this.provider.sendAsync ? 'sendAsync' : 'send'](payload, function (err, results) {
          if (err) {
              return callback(err);
          }
  
          if (!_.isArray(results)) {
              return callback(errors.InvalidResponse(results));
          }
  
          callback(null, results);
      });
  };
  
  
  /**
   * Waits for notifications
   *
   * @method addSubscription
   * @param {String} id           the subscription id
   * @param {String} name         the subscription name
   * @param {String} type         the subscription namespace (eth, personal, etc)
   * @param {Function} callback   the callback to call for incoming notifications
   */
  RequestManager.prototype.addSubscription = function (id, name, type, callback) {
      if(this.provider.on) {
          this.subscriptions[id] = {
              callback: callback,
              type: type,
              name: name
          };
  
      } else {
          throw new Error('The provider doesn\'t support subscriptions: '+ this.provider.constructor.name);
      }
  };
  
  /**
   * Waits for notifications
   *
   * @method removeSubscription
   * @param {String} id           the subscription id
   * @param {Function} callback   fired once the subscription is removed
   */
  RequestManager.prototype.removeSubscription = function (id, callback) {
      var _this = this;
  
      if(this.subscriptions[id]) {
  
          this.send({
              method: this.subscriptions[id].type + '_unsubscribe',
              params: [id]
          }, callback);
  
          // remove subscription
          delete _this.subscriptions[id];
      }
  };
  
  /**
   * Should be called to reset the subscriptions
   *
   * @method reset
   */
  RequestManager.prototype.clearSubscriptions = function (keepIsSyncing) {
      var _this = this;
  
  
      // uninstall all subscriptions
      Object.keys(this.subscriptions).forEach(function(id){
          if(!keepIsSyncing || _this.subscriptions[id].name !== 'syncing')
              _this.removeSubscription(id);
      });
  
  
      //  reset notification callbacks etc.
      if(this.provider.reset)
          this.provider.reset();
  };
  
  module.exports = {
      Manager: RequestManager,
      BatchManager: BatchManager
  };
  
  },{"./batch.js":341,"./givenProvider.js":342,"./jsonrpc.js":344,"underscore":325,"web3-core-helpers":338,"web3-providers-http":398,"web3-providers-ipc":399,"web3-providers-ws":400}],344:[function(require,module,exports){
  /*
      This file is part of web3.js.
  
      web3.js is free software: you can redistribute it and/or modify
      it under the terms of the GNU Lesser General Public License as published by
      the Free Software Foundation, either version 3 of the License, or
      (at your option) any later version.
  
      web3.js is distributed in the hope that it will be useful,
      but WITHOUT ANY WARRANTY; without even the implied warranty of
      MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
      GNU Lesser General Public License for more details.
  
      You should have received a copy of the GNU Lesser General Public License
      along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
  */
  /** @file jsonrpc.js
   * @authors:
   *   Fabian Vogelsteller <fabian@ethereum.org>
   *   Marek Kotewicz <marek@ethdev.com>
   *   Aaron Kumavis <aaron@kumavis.me>
   * @date 2015
   */
  
  "use strict";
  
  // Initialize Jsonrpc as a simple object with utility functions.
  var Jsonrpc = {
      messageId: 0
  };
  
  /**
   * Should be called to valid json create payload object
   *
   * @method toPayload
   * @param {Function} method of jsonrpc call, required
   * @param {Array} params, an array of method params, optional
   * @returns {Object} valid jsonrpc payload object
   */
  Jsonrpc.toPayload = function (method, params) {
      if (!method) {
          throw new Error('JSONRPC method should be specified for params: "'+ JSON.stringify(params) +'"!');
      }
  
      // advance message ID
      Jsonrpc.messageId++;
  
      return {
          jsonrpc: '2.0',
          id: Jsonrpc.messageId,
          method: method,
          params: params || []
      };
  };
  
  /**
   * Should be called to check if jsonrpc response is valid
   *
   * @method isValidResponse
   * @param {Object}
   * @returns {Boolean} true if response is valid, otherwise false
   */
  Jsonrpc.isValidResponse = function (response) {
      return Array.isArray(response) ? response.every(validateSingleMessage) : validateSingleMessage(response);
  
      function validateSingleMessage(message){
        return !!message &&
          !message.error &&
          message.jsonrpc === '2.0' &&
          (typeof message.id === 'number' || typeof message.id === 'string') &&
          message.result !== undefined; // only undefined is not valid json object
      }
  };
  
  /**
   * Should be called to create batch payload object
   *
   * @method toBatchPayload
   * @param {Array} messages, an array of objects with method (required) and params (optional) fields
   * @returns {Array} batch payload
   */
  Jsonrpc.toBatchPayload = function (messages) {
      return messages.map(function (message) {
          return Jsonrpc.toPayload(message.method, message.params);
      });
  };
  
  module.exports = Jsonrpc;
  
  
  },{}],345:[function(require,module,exports){
  /*
      This file is part of web3.js.
  
      web3.js is free software: you can redistribute it and/or modify
      it under the terms of the GNU Lesser General Public License as published by
      the Free Software Foundation, either version 3 of the License, or
      (at your option) any later version.
  
      web3.js is distributed in the hope that it will be useful,
      but WITHOUT ANY WARRANTY; without even the implied warranty of
      MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
      GNU Lesser General Public License for more details.
  
      You should have received a copy of the GNU Lesser General Public License
      along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
  */
  /**
   * @file index.js
   * @author Fabian Vogelsteller <fabian@ethereum.org>
   * @date 2017
   */
  
  "use strict";
  
  var Subscription = require('./subscription.js');
  
  
  var Subscriptions = function Subscriptions(options) {
      this.name = options.name;
      this.type = options.type;
      this.subscriptions = options.subscriptions || {};
      this.requestManager = null;
  };
  
  
  Subscriptions.prototype.setRequestManager = function (rm) {
      this.requestManager = rm;
  };
  
  
  Subscriptions.prototype.attachToObject = function (obj) {
      var func = this.buildCall();
      var name = this.name.split('.');
      if (name.length > 1) {
          obj[name[0]] = obj[name[0]] || {};
          obj[name[0]][name[1]] = func;
      } else {
          obj[name[0]] = func;
      }
  };
  
  
  Subscriptions.prototype.buildCall = function() {
      var _this = this;
  
      return function(){
          if(!_this.subscriptions[arguments[0]]) {
              console.warn('Subscription '+ JSON.stringify(arguments[0]) +' doesn\'t exist. Subscribing anyway.');
          }
  
          var subscription = new Subscription({
              subscription: _this.subscriptions[arguments[0]],
              requestManager: _this.requestManager,
              type: _this.type
          });
  
          return subscription.subscribe.apply(subscription, arguments);
      };
  };
  
  
  module.exports = {
      subscriptions: Subscriptions,
      subscription: Subscription
  };
  
  },{"./subscription.js":346}],346:[function(require,module,exports){
  /*
      This file is part of web3.js.
  
      web3.js is free software: you can redistribute it and/or modify
      it under the terms of the GNU Lesser General Public License as published by
      the Free Software Foundation, either version 3 of the License, or
      (at your option) any later version.
  
      web3.js is distributed in the hope that it will be useful,
      but WITHOUT ANY WARRANTY; without even the implied warranty of
      MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
      GNU Lesser General Public License for more details.
  
      You should have received a copy of the GNU Lesser General Public License
      along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
  */
  /**
   * @file subscription.js
   * @author Fabian Vogelsteller <fabian@ethereum.org>
   * @date 2017
   */
  
  "use strict";
  
  var _ = require('underscore');
  var errors = require('web3-core-helpers').errors;
  var EventEmitter = require('eventemitter3');
  
  function Subscription(options) {
      EventEmitter.call(this);
  
      this.id = null;
      this.callback = _.identity;
      this.arguments = null;
      this._reconnectIntervalId = null;
  
      this.options = {
          subscription: options.subscription,
          type: options.type,
          requestManager: options.requestManager
      };
  }
  
  // INHERIT
  Subscription.prototype = Object.create(EventEmitter.prototype);
  Subscription.prototype.constructor = Subscription;
  
  
  /**
   * Should be used to extract callback from array of arguments. Modifies input param
   *
   * @method extractCallback
   * @param {Array} arguments
   * @return {Function|Null} callback, if exists
   */
  
  Subscription.prototype._extractCallback = function (args) {
      if (_.isFunction(args[args.length - 1])) {
          return args.pop(); // modify the args array!
      }
  };
  
  /**
   * Should be called to check if the number of arguments is correct
   *
   * @method validateArgs
   * @param {Array} arguments
   * @throws {Error} if it is not
   */
  
  Subscription.prototype._validateArgs = function (args) {
      var subscription = this.options.subscription;
  
      if(!subscription)
          subscription = {};
  
      if(!subscription.params)
          subscription.params = 0;
  
      if (args.length !== subscription.params) {
          throw errors.InvalidNumberOfParams(args.length, subscription.params + 1, args[0]);
      }
  };
  
  /**
   * Should be called to format input args of method
   *
   * @method formatInput
   * @param {Array}
   * @return {Array}
   */
  
  Subscription.prototype._formatInput = function (args) {
      var subscription = this.options.subscription;
  
      if (!subscription) {
          return args;
      }
  
      if (!subscription.inputFormatter) {
          return args;
      }
  
      var formattedArgs = subscription.inputFormatter.map(function (formatter, index) {
          return formatter ? formatter(args[index]) : args[index];
      });
  
      return formattedArgs;
  };
  
  /**
   * Should be called to format output(result) of method
   *
   * @method formatOutput
   * @param {Object}
   * @return {Object}
   */
  
  Subscription.prototype._formatOutput = function (result) {
      var subscription = this.options.subscription;
  
      return (subscription && subscription.outputFormatter && result) ? subscription.outputFormatter(result) : result;
  };
  
  /**
   * Should create payload from given input args
   *
   * @method toPayload
   * @param {Array} args
   * @return {Object}
   */
  Subscription.prototype._toPayload = function (args) {
      var params = [];
      this.callback = this._extractCallback(args) || _.identity;
  
      if (!this.subscriptionMethod) {
          this.subscriptionMethod = args.shift();
  
          // replace subscription with given name
          if (this.options.subscription.subscriptionName) {
              this.subscriptionMethod = this.options.subscription.subscriptionName;
          }
      }
  
      if (!this.arguments) {
          this.arguments = this._formatInput(args);
          this._validateArgs(this.arguments);
          args = []; // make empty after validation
  
      }
  
      // re-add subscriptionName
      params.push(this.subscriptionMethod);
      params = params.concat(this.arguments);
  
  
      if (args.length) {
          throw new Error('Only a callback is allowed as parameter on an already instantiated subscription.');
      }
  
      return {
          method: this.options.type + '_subscribe',
          params: params
      };
  };
  
  /**
   * Unsubscribes and clears callbacks
   *
   * @method unsubscribe
   * @return {Object}
   */
  Subscription.prototype.unsubscribe = function(callback) {
      this.options.requestManager.removeSubscription(this.id, callback);
      this.id = null;
      this.removeAllListeners();
      clearInterval(this._reconnectIntervalId);
  };
  
  /**
   * Subscribes and watches for changes
   *
   * @method subscribe
   * @param {String} subscription the subscription
   * @param {Object} options the options object with address topics and fromBlock
   * @return {Object}
   */
  Subscription.prototype.subscribe = function() {
      var _this = this;
      var args = Array.prototype.slice.call(arguments);
      var payload = this._toPayload(args);
  
      if(!payload) {
          return this;
      }
  
      if(!this.options.requestManager.provider) {
          var err1 = new Error('No provider set.');
          this.callback(err1, null, this);
          this.emit('error', err1);
          return this;
      }
  
      // throw error, if provider doesnt support subscriptions
      if(!this.options.requestManager.provider.on) {
          var err2 = new Error('The current provider doesn\'t support subscriptions: '+ this.options.requestManager.provider.constructor.name);
          this.callback(err2, null, this);
          this.emit('error', err2);
          return this;
      }
  
      // if id is there unsubscribe first
      if (this.id) {
          this.unsubscribe();
      }
  
      // store the params in the options object
      this.options.params = payload.params[1];
  
      // get past logs, if fromBlock is available
      if(payload.params[0] === 'logs' && _.isObject(payload.params[1]) && payload.params[1].hasOwnProperty('fromBlock') && isFinite(payload.params[1].fromBlock)) {
          // send the subscription request
          this.options.requestManager.send({
              method: 'eth_getLogs',
              params: [payload.params[1]]
          }, function (err, logs) {
              if(!err) {
                  logs.forEach(function(log){
                      var output = _this._formatOutput(log);
                      _this.callback(null, output, _this);
                      _this.emit('data', output);
                  });
  
                  // TODO subscribe here? after the past logs?
  
              } else {
                  _this.callback(err, null, _this);
                  _this.emit('error', err);
              }
          });
      }
  
      // create subscription
      // TODO move to separate function? so that past logs can go first?
  
      if(typeof payload.params[1] === 'object')
          delete payload.params[1].fromBlock;
  
      this.options.requestManager.send(payload, function (err, result) {
          if(!err && result) {
              _this.id = result;
  
              // call callback on notifications
              _this.options.requestManager.addSubscription(_this.id, payload.params[0] , _this.options.type, function(err, result) {
  
                  if (!err) {
                      if (!_.isArray(result)) {
                          result = [result];
                      }
  
                      result.forEach(function(resultItem) {
                          var output = _this._formatOutput(resultItem);
  
                          if (_.isFunction(_this.options.subscription.subscriptionHandler)) {
                              return _this.options.subscription.subscriptionHandler.call(_this, output);
                          } else {
                              _this.emit('data', output);
                          }
  
                          // call the callback, last so that unsubscribe there won't affect the emit above
                          _this.callback(null, output, _this);
                      });
                  } else {
                      // unsubscribe, but keep listeners
                      _this.options.requestManager.removeSubscription(_this.id);
  
                      // re-subscribe, if connection fails
                      if(_this.options.requestManager.provider.once) {
                          _this._reconnectIntervalId = setInterval(function () {
                              // TODO check if that makes sense!
                              if (_this.options.requestManager.provider.reconnect) {
                                  _this.options.requestManager.provider.reconnect();
                              }
                          }, 500);
  
                          _this.options.requestManager.provider.once('connect', function () {
                              clearInterval(_this._reconnectIntervalId);
                              _this.subscribe(_this.callback);
                          });
                      }
                      _this.emit('error', err);
  
                       // call the callback, last so that unsubscribe there won't affect the emit above
                      _this.callback(err, null, _this);
                  }
              });
          } else {
            _this.callback(err, null, _this);
            _this.emit('error', err);
          }
      });
  
      // return an object to cancel the subscription
      return this;
  };
  
  module.exports = Subscription;
  
  },{"eventemitter3":156,"underscore":325,"web3-core-helpers":338}],347:[function(require,module,exports){
  /*
   This file is part of web3.js.
  
   web3.js is free software: you can redistribute it and/or modify
   it under the terms of the GNU Lesser General Public License as published by
   the Free Software Foundation, either version 3 of the License, or
   (at your option) any later version.
  
   web3.js is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU Lesser General Public License for more details.
  
   You should have received a copy of the GNU Lesser General Public License
   along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
   */
  /**
   * @file extend.js
   * @author Fabian Vogelsteller <fabian@ethereum.org>
   * @date 2017
   */
  
  "use strict";
  
  
  var formatters = require('web3-core-helpers').formatters;
  var Method = require('web3-core-method');
  var utils = require('web3-utils');
  
  
  var extend = function (pckg) {
      /* jshint maxcomplexity:5 */
      var ex = function (extension) {
  
          var extendedObject;
          if (extension.property) {
              if (!pckg[extension.property]) {
                  pckg[extension.property] = {};
              }
              extendedObject = pckg[extension.property];
          } else {
              extendedObject = pckg;
          }
  
          if (extension.methods) {
              extension.methods.forEach(function (method) {
                  if(!(method instanceof Method)) {
                      method = new Method(method);
                  }
  
                  method.attachToObject(extendedObject);
                  method.setRequestManager(pckg._requestManager);
              });
          }
  
          return pckg;
      };
  
      ex.formatters = formatters;
      ex.utils = utils;
      ex.Method = Method;
  
      return ex;
  };
  
  
  
  module.exports = extend;
  
  
  },{"web3-core-helpers":338,"web3-core-method":339,"web3-utils":403}],348:[function(require,module,exports){
  /*
      This file is part of web3.js.
  
      web3.js is free software: you can redistribute it and/or modify
      it under the terms of the GNU Lesser General Public License as published by
      the Free Software Foundation, either version 3 of the License, or
      (at your option) any later version.
  
      web3.js is distributed in the hope that it will be useful,
      but WITHOUT ANY WARRANTY; without even the implied warranty of
      MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
      GNU Lesser General Public License for more details.
  
      You should have received a copy of the GNU Lesser General Public License
      along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
  */
  /**
   * @file index.js
   * @author Fabian Vogelsteller <fabian@ethereum.org>
   * @date 2017
   */
  
  "use strict";
  
  
  var requestManager = require('web3-core-requestmanager');
  var extend = require('./extend.js');
  
  module.exports = {
      packageInit: function (pkg, args) {
          args = Array.prototype.slice.call(args);
  
          if (!pkg) {
              throw new Error('You need to instantiate using the "new" keyword.');
          }
  
  
          // make property of pkg._provider, which can properly set providers
          Object.defineProperty(pkg, 'currentProvider', {
              get: function () {
                  return pkg._provider;
              },
              set: function (value) {
                  return pkg.setProvider(value);
              },
              enumerable: true,
              configurable: true
          });
  
          // inherit from web3 umbrella package
          if (args[0] && args[0]._requestManager) {
              pkg._requestManager = new requestManager.Manager(args[0].currentProvider);
  
          // set requestmanager on package
          } else {
              pkg._requestManager = new requestManager.Manager();
              pkg._requestManager.setProvider(args[0], args[1]);
          }
  
          // add givenProvider
          pkg.givenProvider = requestManager.Manager.givenProvider;
          pkg.providers = requestManager.Manager.providers;
  
           pkg._provider =  pkg._requestManager.provider;
  
          // add SETPROVIDER function (don't overwrite if already existing)
          if (!pkg.setProvider) {
              pkg.setProvider = function (provider, net) {
                  pkg._requestManager.setProvider(provider, net);
                  pkg._provider = pkg._requestManager.provider;
                  return true;
              };
          }
  
          // attach batch request creation
          pkg.BatchRequest = requestManager.BatchManager.bind(null, pkg._requestManager);
  
          // attach extend function
          pkg.extend = extend(pkg);
      },
      addProviders: function (pkg) {
          pkg.givenProvider = requestManager.Manager.givenProvider;
          pkg.providers = requestManager.Manager.providers;
      }
  };
  
  
  },{"./extend.js":347,"web3-core-requestmanager":343}],349:[function(require,module,exports){
  /*
   This file is part of web3.js.
  
   web3.js is free software: you can redistribute it and/or modify
   it under the terms of the GNU Lesser General Public License as published by
   the Free Software Foundation, either version 3 of the License, or
   (at your option) any later version.
  
   web3.js is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU Lesser General Public License for more details.
  
   You should have received a copy of the GNU Lesser General Public License
   along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
   */
  /**
   * @file index.js
   * @author Marek Kotewicz <marek@parity.io>
   * @author Fabian Vogelsteller <fabian@frozeman.de>
   * @date 2018
   */
  
  var _ = require('underscore');
  var utils = require('web3-utils');
  
  var EthersAbi = require('ethers/utils/abi-coder').AbiCoder;
  var ethersAbiCoder = new EthersAbi(function (type, value) {
      if (type.match(/^u?int/) && !_.isArray(value) && (!_.isObject(value) || value.constructor.name !== 'BN')) {
          return value.toString();
      }
      return value;
  });
  
  // result method
  function Result() {
  }
  
  /**
   * ABICoder prototype should be used to encode/decode solidity params of any type
   */
  var ABICoder = function () {
  };
  
  /**
   * Encodes the function name to its ABI representation, which are the first 4 bytes of the sha3 of the function name including  types.
   *
   * @method encodeFunctionSignature
   * @param {String|Object} functionName
   * @return {String} encoded function name
   */
  ABICoder.prototype.encodeFunctionSignature = function (functionName) {
      if (_.isObject(functionName)) {
          functionName = utils._jsonInterfaceMethodToString(functionName);
      }
  
      return utils.sha3(functionName).slice(0, 10);
  };
  
  /**
   * Encodes the function name to its ABI representation, which are the first 4 bytes of the sha3 of the function name including  types.
   *
   * @method encodeEventSignature
   * @param {String|Object} functionName
   * @return {String} encoded function name
   */
  ABICoder.prototype.encodeEventSignature = function (functionName) {
      if (_.isObject(functionName)) {
          functionName = utils._jsonInterfaceMethodToString(functionName);
      }
  
      return utils.sha3(functionName);
  };
  
  /**
   * Should be used to encode plain param
   *
   * @method encodeParameter
   * @param {String} type
   * @param {Object} param
   * @return {String} encoded plain param
   */
  ABICoder.prototype.encodeParameter = function (type, param) {
      return this.encodeParameters([type], [param]);
  };
  
  /**
   * Should be used to encode list of params
   *
   * @method encodeParameters
   * @param {Array} types
   * @param {Array} params
   * @return {String} encoded list of params
   */
  ABICoder.prototype.encodeParameters = function (types, params) {
      return ethersAbiCoder.encode(this.mapTypes(types), params);
  };
  
  /**
   * Map types if simplified format is used
   *
   * @method mapTypes
   * @param {Array} types
   * @return {Array}
   */
  ABICoder.prototype.mapTypes = function (types) {
      var self = this;
      var mappedTypes = [];
      types.forEach(function (type) {
          if (self.isSimplifiedStructFormat(type)) {
              var structName = Object.keys(type)[0];
              mappedTypes.push(
                  Object.assign(
                      self.mapStructNameAndType(structName),
                      {
                          components: self.mapStructToCoderFormat(type[structName])
                      }
                  )
              );
  
              return;
          }
  
          mappedTypes.push(type);
      });
  
      return mappedTypes;
  };
  
  /**
   * Check if type is simplified struct format
   *
   * @method isSimplifiedStructFormat
   * @param {string | Object} type
   * @returns {boolean}
   */
  ABICoder.prototype.isSimplifiedStructFormat = function (type) {
      return typeof type === 'object' && typeof type.components === 'undefined' && typeof type.name === 'undefined';
  };
  
  /**
   * Maps the correct tuple type and name when the simplified format in encode/decodeParameter is used
   *
   * @method mapStructNameAndType
   * @param {string} structName
   * @return {{type: string, name: *}}
   */
  ABICoder.prototype.mapStructNameAndType = function (structName) {
      var type = 'tuple';
  
      if (structName.indexOf('[]') > -1) {
          type = 'tuple[]';
          structName = structName.slice(0, -2);
      }
  
      return {type: type, name: structName};
  };
  
  /**
   * Maps the simplified format in to the expected format of the ABICoder
   *
   * @method mapStructToCoderFormat
   * @param {Object} struct
   * @return {Array}
   */
  ABICoder.prototype.mapStructToCoderFormat = function (struct) {
      var self = this;
      var components = [];
      Object.keys(struct).forEach(function (key) {
          if (typeof struct[key] === 'object') {
              components.push(
                  Object.assign(
                      self.mapStructNameAndType(key),
                      {
                          components: self.mapStructToCoderFormat(struct[key])
                      }
                  )
              );
  
              return;
          }
  
          components.push({
              name: key,
              type: struct[key]
          });
      });
  
      return components;
  };
  
  /**
   * Encodes a function call from its json interface and parameters.
   *
   * @method encodeFunctionCall
   * @param {Array} jsonInterface
   * @param {Array} params
   * @return {String} The encoded ABI for this function call
   */
  ABICoder.prototype.encodeFunctionCall = function (jsonInterface, params) {
      return this.encodeFunctionSignature(jsonInterface) + this.encodeParameters(jsonInterface.inputs, params).replace('0x', '');
  };
  
  /**
   * Should be used to decode bytes to plain param
   *
   * @method decodeParameter
   * @param {String} type
   * @param {String} bytes
   * @return {Object} plain param
   */
  ABICoder.prototype.decodeParameter = function (type, bytes) {
      return this.decodeParameters([type], bytes)[0];
  };
  
  /**
   * Should be used to decode list of params
   *
   * @method decodeParameter
   * @param {Array} outputs
   * @param {String} bytes
   * @return {Array} array of plain params
   */
  ABICoder.prototype.decodeParameters = function (outputs, bytes) {
      if (!bytes || bytes === '0x' || bytes === '0X') {
          throw new Error('Returned values aren\'t valid, did it run Out of Gas?');
      }
  
      var res = ethersAbiCoder.decode(this.mapTypes(outputs), '0x' + bytes.replace(/0x/i, ''));
      var returnValue = new Result();
      returnValue.__length__ = 0;
  
      outputs.forEach(function (output, i) {
          var decodedValue = res[returnValue.__length__];
          decodedValue = (decodedValue === '0x') ? null : decodedValue;
  
          returnValue[i] = decodedValue;
  
          if (_.isObject(output) && output.name) {
              returnValue[output.name] = decodedValue;
          }
  
          returnValue.__length__++;
      });
  
      return returnValue;
  };
  
  /**
   * Decodes events non- and indexed parameters.
   *
   * @method decodeLog
   * @param {Object} inputs
   * @param {String} data
   * @param {Array} topics
   * @return {Array} array of plain params
   */
  ABICoder.prototype.decodeLog = function (inputs, data, topics) {
      var _this = this;
      topics = _.isArray(topics) ? topics : [topics];
  
      data = data || '';
  
      var notIndexedInputs = [];
      var indexedParams = [];
      var topicCount = 0;
  
      // TODO check for anonymous logs?
  
      inputs.forEach(function (input, i) {
          if (input.indexed) {
              indexedParams[i] = (['bool', 'int', 'uint', 'address', 'fixed', 'ufixed'].find(function (staticType) {
                  return input.type.indexOf(staticType) !== -1;
              })) ? _this.decodeParameter(input.type, topics[topicCount]) : topics[topicCount];
              topicCount++;
          } else {
              notIndexedInputs[i] = input;
          }
      });
  
  
      var nonIndexedData = data;
      var notIndexedParams = (nonIndexedData) ? this.decodeParameters(notIndexedInputs, nonIndexedData) : [];
  
      var returnValue = new Result();
      returnValue.__length__ = 0;
  
  
      inputs.forEach(function (res, i) {
          returnValue[i] = (res.type === 'string') ? '' : null;
  
          if (typeof notIndexedParams[i] !== 'undefined') {
              returnValue[i] = notIndexedParams[i];
          }
          if (typeof indexedParams[i] !== 'undefined') {
              returnValue[i] = indexedParams[i];
          }
  
          if (res.name) {
              returnValue[res.name] = returnValue[i];
          }
  
          returnValue.__length__++;
      });
  
      return returnValue;
  };
  
  var coder = new ABICoder();
  
  module.exports = coder;
  
  },{"ethers/utils/abi-coder":143,"underscore":325,"web3-utils":403}],350:[function(require,module,exports){
  (function (Buffer){
  var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();
  
  var Bytes = require("./bytes");
  var Nat = require("./nat");
  var elliptic = require("elliptic");
  var rlp = require("./rlp");
  var secp256k1 = new elliptic.ec("secp256k1"); // eslint-disable-line
  
  var _require = require("./hash"),
      keccak256 = _require.keccak256,
      keccak256s = _require.keccak256s;
  
  var create = function create(entropy) {
    var innerHex = keccak256(Bytes.concat(Bytes.random(32), entropy || Bytes.random(32)));
    var middleHex = Bytes.concat(Bytes.concat(Bytes.random(32), innerHex), Bytes.random(32));
    var outerHex = keccak256(middleHex);
    return fromPrivate(outerHex);
  };
  
  var toChecksum = function toChecksum(address) {
    var addressHash = keccak256s(address.slice(2));
    var checksumAddress = "0x";
    for (var i = 0; i < 40; i++) {
      checksumAddress += parseInt(addressHash[i + 2], 16) > 7 ? address[i + 2].toUpperCase() : address[i + 2];
    }return checksumAddress;
  };
  
  var fromPrivate = function fromPrivate(privateKey) {
    var buffer = new Buffer(privateKey.slice(2), "hex");
    var ecKey = secp256k1.keyFromPrivate(buffer);
    var publicKey = "0x" + ecKey.getPublic(false, 'hex').slice(2);
    var publicHash = keccak256(publicKey);
    var address = toChecksum("0x" + publicHash.slice(-40));
    return {
      address: address,
      privateKey: privateKey
    };
  };
  
  var encodeSignature = function encodeSignature(_ref) {
    var _ref2 = _slicedToArray(_ref, 3),
        v = _ref2[0],
        r = Bytes.pad(32, _ref2[1]),
        s = Bytes.pad(32, _ref2[2]);
  
    return Bytes.flatten([r, s, v]);
  };
  
  var decodeSignature = function decodeSignature(hex) {
    return [Bytes.slice(64, Bytes.length(hex), hex), Bytes.slice(0, 32, hex), Bytes.slice(32, 64, hex)];
  };
  
  var makeSigner = function makeSigner(addToV) {
    return function (hash, privateKey) {
      var signature = secp256k1.keyFromPrivate(new Buffer(privateKey.slice(2), "hex")).sign(new Buffer(hash.slice(2), "hex"), { canonical: true });
      return encodeSignature([Nat.fromString(Bytes.fromNumber(addToV + signature.recoveryParam)), Bytes.pad(32, Bytes.fromNat("0x" + signature.r.toString(16))), Bytes.pad(32, Bytes.fromNat("0x" + signature.s.toString(16)))]);
    };
  };
  
  var sign = makeSigner(27); // v=27|28 instead of 0|1...
  
  var recover = function recover(hash, signature) {
    var vals = decodeSignature(signature);
    var vrs = { v: Bytes.toNumber(vals[0]), r: vals[1].slice(2), s: vals[2].slice(2) };
    var ecPublicKey = secp256k1.recoverPubKey(new Buffer(hash.slice(2), "hex"), vrs, vrs.v < 2 ? vrs.v : 1 - vrs.v % 2); // because odd vals mean v=0... sadly that means v=0 means v=1... I hate that
    var publicKey = "0x" + ecPublicKey.encode("hex", false).slice(2);
    var publicHash = keccak256(publicKey);
    var address = toChecksum("0x" + publicHash.slice(-40));
    return address;
  };
  
  module.exports = {
    create: create,
    toChecksum: toChecksum,
    fromPrivate: fromPrivate,
    sign: sign,
    makeSigner: makeSigner,
    recover: recover,
    encodeSignature: encodeSignature,
    decodeSignature: decodeSignature
  };
  }).call(this,require("buffer").Buffer)
  },{"./bytes":352,"./hash":353,"./nat":354,"./rlp":355,"buffer":84,"elliptic":109}],351:[function(require,module,exports){
  arguments[4][132][0].apply(exports,arguments)
  },{"dup":132}],352:[function(require,module,exports){
  arguments[4][133][0].apply(exports,arguments)
  },{"./array.js":351,"dup":133}],353:[function(require,module,exports){
  arguments[4][134][0].apply(exports,arguments)
  },{"dup":134}],354:[function(require,module,exports){
  var BN = require("bn.js");
  var Bytes = require("./bytes");
  
  var fromBN = function fromBN(bn) {
    return "0x" + bn.toString("hex");
  };
  
  var toBN = function toBN(str) {
    return new BN(str.slice(2), 16);
  };
  
  var fromString = function fromString(str) {
    var bn = "0x" + (str.slice(0, 2) === "0x" ? new BN(str.slice(2), 16) : new BN(str, 10)).toString("hex");
    return bn === "0x0" ? "0x" : bn;
  };
  
  var toEther = function toEther(wei) {
    return toNumber(div(wei, fromString("10000000000"))) / 100000000;
  };
  
  var fromEther = function fromEther(eth) {
    return mul(fromNumber(Math.floor(eth * 100000000)), fromString("10000000000"));
  };
  
  var toString = function toString(a) {
    return toBN(a).toString(10);
  };
  
  var fromNumber = function fromNumber(a) {
    return typeof a === "string" ? /^0x/.test(a) ? a : "0x" + a : "0x" + new BN(a).toString("hex");
  };
  
  var toNumber = function toNumber(a) {
    return toBN(a).toNumber();
  };
  
  var toUint256 = function toUint256(a) {
    return Bytes.pad(32, a);
  };
  
  var bin = function bin(method) {
    return function (a, b) {
      return fromBN(toBN(a)[method](toBN(b)));
    };
  };
  
  var add = bin("add");
  var mul = bin("mul");
  var div = bin("div");
  var sub = bin("sub");
  
  module.exports = {
    toString: toString,
    fromString: fromString,
    toNumber: toNumber,
    fromNumber: fromNumber,
    toEther: toEther,
    fromEther: fromEther,
    toUint256: toUint256,
    add: add,
    mul: mul,
    div: div,
    sub: sub
  };
  },{"./bytes":352,"bn.js":53}],355:[function(require,module,exports){
  // The RLP format
  // Serialization and deserialization for the BytesTree type, under the following grammar:
  // | First byte | Meaning                                                                    |
  // | ---------- | -------------------------------------------------------------------------- |
  // | 0   to 127 | HEX(leaf)                                                                  |
  // | 128 to 183 | HEX(length_of_leaf + 128) + HEX(leaf)                                      |
  // | 184 to 191 | HEX(length_of_length_of_leaf + 128 + 55) + HEX(length_of_leaf) + HEX(leaf) |
  // | 192 to 247 | HEX(length_of_node + 192) + HEX(node)                                      |
  // | 248 to 255 | HEX(length_of_length_of_node + 128 + 55) + HEX(length_of_node) + HEX(node) |
  
  var encode = function encode(tree) {
    var padEven = function padEven(str) {
      return str.length % 2 === 0 ? str : "0" + str;
    };
  
    var uint = function uint(num) {
      return padEven(num.toString(16));
    };
  
    var length = function length(len, add) {
      return len < 56 ? uint(add + len) : uint(add + uint(len).length / 2 + 55) + uint(len);
    };
  
    var dataTree = function dataTree(tree) {
      if (typeof tree === "string") {
        var hex = tree.slice(2);
        var pre = hex.length != 2 || hex >= "80" ? length(hex.length / 2, 128) : "";
        return pre + hex;
      } else {
        var _hex = tree.map(dataTree).join("");
        var _pre = length(_hex.length / 2, 192);
        return _pre + _hex;
      }
    };
  
    return "0x" + dataTree(tree);
  };
  
  var decode = function decode(hex) {
    var i = 2;
  
    var parseTree = function parseTree() {
      if (i >= hex.length) throw "";
      var head = hex.slice(i, i + 2);
      return head < "80" ? (i += 2, "0x" + head) : head < "c0" ? parseHex() : parseList();
    };
  
    var parseLength = function parseLength() {
      var len = parseInt(hex.slice(i, i += 2), 16) % 64;
      return len < 56 ? len : parseInt(hex.slice(i, i += (len - 55) * 2), 16);
    };
  
    var parseHex = function parseHex() {
      var len = parseLength();
      return "0x" + hex.slice(i, i += len * 2);
    };
  
    var parseList = function parseList() {
      var lim = parseLength() * 2 + i;
      var list = [];
      while (i < lim) {
        list.push(parseTree());
      }return list;
    };
  
    try {
      return parseTree();
    } catch (e) {
      return [];
    }
  };
  
  module.exports = { encode: encode, decode: decode };
  },{}],356:[function(require,module,exports){
  (function (global){
  
  var rng;
  
  if (global.crypto && crypto.getRandomValues) {
    // WHATWG crypto-based RNG - http://wiki.whatwg.org/wiki/Crypto
    // Moderately fast, high quality
    var _rnds8 = new Uint8Array(16);
    rng = function whatwgRNG() {
      crypto.getRandomValues(_rnds8);
      return _rnds8;
    };
  }
  
  if (!rng) {
    // Math.random()-based (RNG)
    //
    // If all else fails, use Math.random().  It's fast, but is of unspecified
    // quality.
    var  _rnds = new Array(16);
    rng = function() {
      for (var i = 0, r; i < 16; i++) {
        if ((i & 0x03) === 0) r = Math.random() * 0x100000000;
        _rnds[i] = r >>> ((i & 0x03) << 3) & 0xff;
      }
  
      return _rnds;
    };
  }
  
  module.exports = rng;
  
  
  }).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
  },{}],357:[function(require,module,exports){
  //     uuid.js
  //
  //     Copyright (c) 2010-2012 Robert Kieffer
  //     MIT License - http://opensource.org/licenses/mit-license.php
  
  // Unique ID creation requires a high quality random # generator.  We feature
  // detect to determine the best RNG source, normalizing to a function that
  // returns 128-bits of randomness, since that's what's usually required
  var _rng = require('./rng');
  
  // Maps for number <-> hex string conversion
  var _byteToHex = [];
  var _hexToByte = {};
  for (var i = 0; i < 256; i++) {
    _byteToHex[i] = (i + 0x100).toString(16).substr(1);
    _hexToByte[_byteToHex[i]] = i;
  }
  
  // **`parse()` - Parse a UUID into it's component bytes**
  function parse(s, buf, offset) {
    var i = (buf && offset) || 0, ii = 0;
  
    buf = buf || [];
    s.toLowerCase().replace(/[0-9a-f]{2}/g, function(oct) {
      if (ii < 16) { // Don't overflow!
        buf[i + ii++] = _hexToByte[oct];
      }
    });
  
    // Zero out remaining bytes if string was short
    while (ii < 16) {
      buf[i + ii++] = 0;
    }
  
    return buf;
  }
  
  // **`unparse()` - Convert UUID byte array (ala parse()) into a string**
  function unparse(buf, offset) {
    var i = offset || 0, bth = _byteToHex;
    return  bth[buf[i++]] + bth[buf[i++]] +
            bth[buf[i++]] + bth[buf[i++]] + '-' +
            bth[buf[i++]] + bth[buf[i++]] + '-' +
            bth[buf[i++]] + bth[buf[i++]] + '-' +
            bth[buf[i++]] + bth[buf[i++]] + '-' +
            bth[buf[i++]] + bth[buf[i++]] +
            bth[buf[i++]] + bth[buf[i++]] +
            bth[buf[i++]] + bth[buf[i++]];
  }
  
  // **`v1()` - Generate time-based UUID**
  //
  // Inspired by https://github.com/LiosK/UUID.js
  // and http://docs.python.org/library/uuid.html
  
  // random #'s we need to init node and clockseq
  var _seedBytes = _rng();
  
  // Per 4.5, create and 48-bit node id, (47 random bits + multicast bit = 1)
  var _nodeId = [
    _seedBytes[0] | 0x01,
    _seedBytes[1], _seedBytes[2], _seedBytes[3], _seedBytes[4], _seedBytes[5]
  ];
  
  // Per 4.2.2, randomize (14 bit) clockseq
  var _clockseq = (_seedBytes[6] << 8 | _seedBytes[7]) & 0x3fff;
  
  // Previous uuid creation time
  var _lastMSecs = 0, _lastNSecs = 0;
  
  // See https://github.com/broofa/node-uuid for API details
  function v1(options, buf, offset) {
    var i = buf && offset || 0;
    var b = buf || [];
  
    options = options || {};
  
    var clockseq = options.clockseq !== undefined ? options.clockseq : _clockseq;
  
    // UUID timestamps are 100 nano-second units since the Gregorian epoch,
    // (1582-10-15 00:00).  JSNumbers aren't precise enough for this, so
    // time is handled internally as 'msecs' (integer milliseconds) and 'nsecs'
    // (100-nanoseconds offset from msecs) since unix epoch, 1970-01-01 00:00.
    var msecs = options.msecs !== undefined ? options.msecs : new Date().getTime();
  
    // Per 4.2.1.2, use count of uuid's generated during the current clock
    // cycle to simulate higher resolution clock
    var nsecs = options.nsecs !== undefined ? options.nsecs : _lastNSecs + 1;
  
    // Time since last uuid creation (in msecs)
    var dt = (msecs - _lastMSecs) + (nsecs - _lastNSecs)/10000;
  
    // Per 4.2.1.2, Bump clockseq on clock regression
    if (dt < 0 && options.clockseq === undefined) {
      clockseq = clockseq + 1 & 0x3fff;
    }
  
    // Reset nsecs if clock regresses (new clockseq) or we've moved onto a new
    // time interval
    if ((dt < 0 || msecs > _lastMSecs) && options.nsecs === undefined) {
      nsecs = 0;
    }
  
    // Per 4.2.1.2 Throw error if too many uuids are requested
    if (nsecs >= 10000) {
      throw new Error('uuid.v1(): Can\'t create more than 10M uuids/sec');
    }
  
    _lastMSecs = msecs;
    _lastNSecs = nsecs;
    _clockseq = clockseq;
  
    // Per 4.1.4 - Convert from unix epoch to Gregorian epoch
    msecs += 12219292800000;
  
    // `time_low`
    var tl = ((msecs & 0xfffffff) * 10000 + nsecs) % 0x100000000;
    b[i++] = tl >>> 24 & 0xff;
    b[i++] = tl >>> 16 & 0xff;
    b[i++] = tl >>> 8 & 0xff;
    b[i++] = tl & 0xff;
  
    // `time_mid`
    var tmh = (msecs / 0x100000000 * 10000) & 0xfffffff;
    b[i++] = tmh >>> 8 & 0xff;
    b[i++] = tmh & 0xff;
  
    // `time_high_and_version`
    b[i++] = tmh >>> 24 & 0xf | 0x10; // include version
    b[i++] = tmh >>> 16 & 0xff;
  
    // `clock_seq_hi_and_reserved` (Per 4.2.2 - include variant)
    b[i++] = clockseq >>> 8 | 0x80;
  
    // `clock_seq_low`
    b[i++] = clockseq & 0xff;
  
    // `node`
    var node = options.node || _nodeId;
    for (var n = 0; n < 6; n++) {
      b[i + n] = node[n];
    }
  
    return buf ? buf : unparse(b);
  }
  
  // **`v4()` - Generate random UUID**
  
  // See https://github.com/broofa/node-uuid for API details
  function v4(options, buf, offset) {
    // Deprecated - 'format' argument, as supported in v1.2
    var i = buf && offset || 0;
  
    if (typeof(options) == 'string') {
      buf = options == 'binary' ? new Array(16) : null;
      options = null;
    }
    options = options || {};
  
    var rnds = options.random || (options.rng || _rng)();
  
    // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`
    rnds[6] = (rnds[6] & 0x0f) | 0x40;
    rnds[8] = (rnds[8] & 0x3f) | 0x80;
  
    // Copy bytes to buffer, if provided
    if (buf) {
      for (var ii = 0; ii < 16; ii++) {
        buf[i + ii] = rnds[ii];
      }
    }
  
    return buf || unparse(rnds);
  }
  
  // Export public API
  var uuid = v4;
  uuid.v1 = v1;
  uuid.v4 = v4;
  uuid.parse = parse;
  uuid.unparse = unparse;
  
  module.exports = uuid;
  
  },{"./rng":356}],358:[function(require,module,exports){
  (function (global,Buffer){
  /*
   This file is part of web3.js.
  
   web3.js is free software: you can redistribute it and/or modify
   it under the terms of the GNU Lesser General Public License as published by
   the Free Software Foundation, either version 3 of the License, or
   (at your option) any later version.
  
   web3.js is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU Lesser General Public License for more details.
  
   You should have received a copy of the GNU Lesser General Public License
   along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
   */
  /**
   * @file accounts.js
   * @author Fabian Vogelsteller <fabian@ethereum.org>
   * @date 2017
   */
  
  "use strict";
  
  var _ = require("underscore");
  var core = require('web3-core');
  var Method = require('web3-core-method');
  var Promise = require('any-promise');
  var Account = require("eth-lib/lib/account");
  var Hash = require("eth-lib/lib/hash");
  var RLP = require("eth-lib/lib/rlp");
  var Nat = require("eth-lib/lib/nat");
  var Bytes = require("eth-lib/lib/bytes");
  var cryp = (typeof global === 'undefined') ? require('crypto-browserify') : require('crypto');
  var scryptsy = require('scrypt.js');
  var uuid = require('uuid');
  var utils = require('web3-utils');
  var helpers = require('web3-core-helpers');
  
  var isNot = function(value) {
      return (_.isUndefined(value) || _.isNull(value));
  };
  
  var trimLeadingZero = function (hex) {
      while (hex && hex.startsWith('0x0')) {
          hex = '0x' + hex.slice(3);
      }
      return hex;
  };
  
  var makeEven = function (hex) {
      if(hex.length % 2 === 1) {
          hex = hex.replace('0x', '0x0');
      }
      return hex;
  };
  
  
  var Accounts = function Accounts() {
      var _this = this;
  
      // sets _requestmanager
      core.packageInit(this, arguments);
  
      // remove unnecessary core functions
      delete this.BatchRequest;
      delete this.extend;
  
      var _ethereumCall = [
          new Method({
              name: 'getId',
              call: 'net_version',
              params: 0,
              outputFormatter: utils.hexToNumber
          }),
          new Method({
              name: 'getGasPrice',
              call: 'eth_gasPrice',
              params: 0
          }),
          new Method({
              name: 'getTransactionCount',
              call: 'eth_getTransactionCount',
              params: 2,
              inputFormatter: [function (address) {
                  if (utils.isAddress(address)) {
                      return address;
                  } else {
                      throw new Error('Address '+ address +' is not a valid address to get the "transactionCount".');
                  }
              }, function () { return 'latest'; }]
          })
      ];
      // attach methods to this._ethereumCall
      this._ethereumCall = {};
      _.each(_ethereumCall, function (method) {
          method.attachToObject(_this._ethereumCall);
          method.setRequestManager(_this._requestManager);
      });
  
  
      this.wallet = new Wallet(this);
  };
  
  Accounts.prototype._addAccountFunctions = function (account) {
      var _this = this;
  
      // add sign functions
      account.signTransaction = function signTransaction(tx, callback) {
          return _this.signTransaction(tx, account.privateKey, callback);
      };
      account.sign = function sign(data) {
          return _this.sign(data, account.privateKey);
      };
  
      account.encrypt = function encrypt(password, options) {
          return _this.encrypt(account.privateKey, password, options);
      };
  
  
      return account;
  };
  
  Accounts.prototype.create = function create(entropy) {
      return this._addAccountFunctions(Account.create(entropy || utils.randomHex(32)));
  };
  
  Accounts.prototype.privateKeyToAccount = function privateKeyToAccount(privateKey) {
      return this._addAccountFunctions(Account.fromPrivate(privateKey));
  };
  
  Accounts.prototype.signTransaction = function signTransaction(tx, privateKey, callback) {
      var _this = this,
          error = false,
          result;
  
      callback = callback || function () {};
  
      if (!tx) {
          error = new Error('No transaction object given!');
  
          callback(error);
          return Promise.reject(error);
      }
  
      function signed (tx) {
  
          if (!tx.gas && !tx.gasLimit) {
              error = new Error('"gas" is missing');
          }
  
          if (tx.nonce  < 0 ||
              tx.gas  < 0 ||
              tx.gasPrice  < 0 ||
              tx.chainId  < 0) {
              error = new Error('Gas, gasPrice, nonce or chainId is lower than 0');
          }
  
          if (error) {
              callback(error);
              return Promise.reject(error);
          }
  
          try {
              tx = helpers.formatters.inputCallFormatter(tx);
  
              var transaction = tx;
              transaction.to = tx.to || '0x';
              transaction.data = tx.data || '0x';
              transaction.value = tx.value || '0x';
              transaction.chainId = utils.numberToHex(tx.chainId);
  
              var rlpEncoded = RLP.encode([
                  Bytes.fromNat(transaction.nonce),
                  Bytes.fromNat(transaction.gasPrice),
                  Bytes.fromNat(transaction.gas),
                  transaction.to.toLowerCase(),
                  Bytes.fromNat(transaction.value),
                  transaction.data,
                  Bytes.fromNat(transaction.chainId || "0x1"),
                  "0x",
                  "0x"]);
  
  
              var hash = Hash.keccak256(rlpEncoded);
  
              var signature = Account.makeSigner(Nat.toNumber(transaction.chainId || "0x1") * 2 + 35)(Hash.keccak256(rlpEncoded), privateKey);
  
              var rawTx = RLP.decode(rlpEncoded).slice(0, 6).concat(Account.decodeSignature(signature));
  
              rawTx[6] = makeEven(trimLeadingZero(rawTx[6]));
              rawTx[7] = makeEven(trimLeadingZero(rawTx[7]));
              rawTx[8] = makeEven(trimLeadingZero(rawTx[8]));
  
              var rawTransaction = RLP.encode(rawTx);
  
              var values = RLP.decode(rawTransaction);
              result = {
                  messageHash: hash,
                  v: trimLeadingZero(values[6]),
                  r: trimLeadingZero(values[7]),
                  s: trimLeadingZero(values[8]),
                  rawTransaction: rawTransaction
              };
  
          } catch(e) {
              callback(e);
              return Promise.reject(e);
          }
  
          callback(null, result);
          return result;
      }
  
      // Resolve immediately if nonce, chainId and price are provided
      if (tx.nonce !== undefined && tx.chainId !== undefined && tx.gasPrice !== undefined) {
          return Promise.resolve(signed(tx));
      }
  
  
      // Otherwise, get the missing info from the Ethereum Node
      return Promise.all([
          isNot(tx.chainId) ? _this._ethereumCall.getId() : tx.chainId,
          isNot(tx.gasPrice) ? _this._ethereumCall.getGasPrice() : tx.gasPrice,
          isNot(tx.nonce) ? _this._ethereumCall.getTransactionCount(_this.privateKeyToAccount(privateKey).address) : tx.nonce
      ]).then(function (args) {
          if (isNot(args[0]) || isNot(args[1]) || isNot(args[2])) {
              throw new Error('One of the values "chainId", "gasPrice", or "nonce" couldn\'t be fetched: '+ JSON.stringify(args));
          }
          return signed(_.extend(tx, {chainId: args[0], gasPrice: args[1], nonce: args[2]}));
      });
  };
  
  /* jshint ignore:start */
  Accounts.prototype.recoverTransaction = function recoverTransaction(rawTx) {
      var values = RLP.decode(rawTx);
      var signature = Account.encodeSignature(values.slice(6,9));
      var recovery = Bytes.toNumber(values[6]);
      var extraData = recovery < 35 ? [] : [Bytes.fromNumber((recovery - 35) >> 1), "0x", "0x"];
      var signingData = values.slice(0,6).concat(extraData);
      var signingDataHex = RLP.encode(signingData);
      return Account.recover(Hash.keccak256(signingDataHex), signature);
  };
  /* jshint ignore:end */
  
  Accounts.prototype.hashMessage = function hashMessage(data) {
      var message = utils.isHexStrict(data) ? utils.hexToBytes(data) : data;
      var messageBuffer = Buffer.from(message);
      var preamble = "\x19Ethereum Signed Message:\n" + message.length;
      var preambleBuffer = Buffer.from(preamble);
      var ethMessage = Buffer.concat([preambleBuffer, messageBuffer]);
      return Hash.keccak256s(ethMessage);
  };
  
  Accounts.prototype.sign = function sign(data, privateKey) {
      var hash = this.hashMessage(data);
      var signature = Account.sign(hash, privateKey);
      var vrs = Account.decodeSignature(signature);
      return {
          message: data,
          messageHash: hash,
          v: vrs[0],
          r: vrs[1],
          s: vrs[2],
          signature: signature
      };
  };
  
  Accounts.prototype.recover = function recover(message, signature, preFixed) {
      var args = [].slice.apply(arguments);
  
  
      if (_.isObject(message)) {
          return this.recover(message.messageHash, Account.encodeSignature([message.v, message.r, message.s]), true);
      }
  
      if (!preFixed) {
          message = this.hashMessage(message);
      }
  
      if (args.length >= 4) {
          preFixed = args.slice(-1)[0];
          preFixed = _.isBoolean(preFixed) ? !!preFixed : false;
  
          return this.recover(message, Account.encodeSignature(args.slice(1, 4)), preFixed); // v, r, s
      }
      return Account.recover(message, signature);
  };
  
  // Taken from https://github.com/ethereumjs/ethereumjs-wallet
  Accounts.prototype.decrypt = function (v3Keystore, password, nonStrict) {
      /* jshint maxcomplexity: 10 */
  
      if(!_.isString(password)) {
          throw new Error('No password given.');
      }
  
      var json = (_.isObject(v3Keystore)) ? v3Keystore : JSON.parse(nonStrict ? v3Keystore.toLowerCase() : v3Keystore);
  
      if (json.version !== 3) {
          throw new Error('Not a valid V3 wallet');
      }
  
      var derivedKey;
      var kdfparams;
      if (json.crypto.kdf === 'scrypt') {
          kdfparams = json.crypto.kdfparams;
  
          // FIXME: support progress reporting callback
          derivedKey = scryptsy(new Buffer(password), new Buffer(kdfparams.salt, 'hex'), kdfparams.n, kdfparams.r, kdfparams.p, kdfparams.dklen);
      } else if (json.crypto.kdf === 'pbkdf2') {
          kdfparams = json.crypto.kdfparams;
  
          if (kdfparams.prf !== 'hmac-sha256') {
              throw new Error('Unsupported parameters to PBKDF2');
          }
  
          derivedKey = cryp.pbkdf2Sync(new Buffer(password), new Buffer(kdfparams.salt, 'hex'), kdfparams.c, kdfparams.dklen, 'sha256');
      } else {
          throw new Error('Unsupported key derivation scheme');
      }
  
      var ciphertext = new Buffer(json.crypto.ciphertext, 'hex');
  
      var mac = utils.sha3(Buffer.concat([ derivedKey.slice(16, 32), ciphertext ])).replace('0x','');
      if (mac !== json.crypto.mac) {
          throw new Error('Key derivation failed - possibly wrong password');
      }
  
      var decipher = cryp.createDecipheriv(json.crypto.cipher, derivedKey.slice(0, 16), new Buffer(json.crypto.cipherparams.iv, 'hex'));
      var seed = '0x'+ Buffer.concat([ decipher.update(ciphertext), decipher.final() ]).toString('hex');
  
      return this.privateKeyToAccount(seed);
  };
  
  Accounts.prototype.encrypt = function (privateKey, password, options) {
      /* jshint maxcomplexity: 20 */
      var account = this.privateKeyToAccount(privateKey);
  
      options = options || {};
      var salt = options.salt || cryp.randomBytes(32);
      var iv = options.iv || cryp.randomBytes(16);
  
      var derivedKey;
      var kdf = options.kdf || 'scrypt';
      var kdfparams = {
          dklen: options.dklen || 32,
          salt: salt.toString('hex')
      };
  
      if (kdf === 'pbkdf2') {
          kdfparams.c = options.c || 262144;
          kdfparams.prf = 'hmac-sha256';
          derivedKey = cryp.pbkdf2Sync(new Buffer(password), salt, kdfparams.c, kdfparams.dklen, 'sha256');
      } else if (kdf === 'scrypt') {
          // FIXME: support progress reporting callback
          kdfparams.n = options.n || 8192; // 2048 4096 8192 16384
          kdfparams.r = options.r || 8;
          kdfparams.p = options.p || 1;
          derivedKey = scryptsy(new Buffer(password), salt, kdfparams.n, kdfparams.r, kdfparams.p, kdfparams.dklen);
      } else {
          throw new Error('Unsupported kdf');
      }
  
      var cipher = cryp.createCipheriv(options.cipher || 'aes-128-ctr', derivedKey.slice(0, 16), iv);
      if (!cipher) {
          throw new Error('Unsupported cipher');
      }
  
      var ciphertext = Buffer.concat([ cipher.update(new Buffer(account.privateKey.replace('0x',''), 'hex')), cipher.final() ]);
  
      var mac = utils.sha3(Buffer.concat([ derivedKey.slice(16, 32), new Buffer(ciphertext, 'hex') ])).replace('0x','');
  
      return {
          version: 3,
          id: uuid.v4({ random: options.uuid || cryp.randomBytes(16) }),
          address: account.address.toLowerCase().replace('0x',''),
          crypto: {
              ciphertext: ciphertext.toString('hex'),
              cipherparams: {
                  iv: iv.toString('hex')
              },
              cipher: options.cipher || 'aes-128-ctr',
              kdf: kdf,
              kdfparams: kdfparams,
              mac: mac.toString('hex')
          }
      };
  };
  
  
  // Note: this is trying to follow closely the specs on
  // http://web3js.readthedocs.io/en/1.0/web3-eth-accounts.html
  
  function Wallet(accounts) {
      this._accounts = accounts;
      this.length = 0;
      this.defaultKeyName = "web3js_wallet";
  }
  
  Wallet.prototype._findSafeIndex = function (pointer) {
      pointer = pointer || 0;
      if (_.has(this, pointer)) {
          return this._findSafeIndex(pointer + 1);
      } else {
          return pointer;
      }
  };
  
  Wallet.prototype._currentIndexes = function () {
      var keys = Object.keys(this);
      var indexes = keys
          .map(function(key) { return parseInt(key); })
          .filter(function(n) { return (n < 9e20); });
  
      return indexes;
  };
  
  Wallet.prototype.create = function (numberOfAccounts, entropy) {
      for (var i = 0; i < numberOfAccounts; ++i) {
          this.add(this._accounts.create(entropy).privateKey);
      }
      return this;
  };
  
  Wallet.prototype.add = function (account) {
  
      if (_.isString(account)) {
          account = this._accounts.privateKeyToAccount(account);
      }
      if (!this[account.address]) {
          account = this._accounts.privateKeyToAccount(account.privateKey);
          account.index = this._findSafeIndex();
  
          this[account.index] = account;
          this[account.address] = account;
          this[account.address.toLowerCase()] = account;
  
          this.length++;
  
          return account;
      } else {
          return this[account.address];
      }
  };
  
  Wallet.prototype.remove = function (addressOrIndex) {
      var account = this[addressOrIndex];
  
      if (account && account.address) {
          // address
          this[account.address].privateKey = null;
          delete this[account.address];
          // address lowercase
          this[account.address.toLowerCase()].privateKey = null;
          delete this[account.address.toLowerCase()];
          // index
          this[account.index].privateKey = null;
          delete this[account.index];
  
          this.length--;
  
          return true;
      } else {
          return false;
      }
  };
  
  Wallet.prototype.clear = function () {
      var _this = this;
      var indexes = this._currentIndexes();
  
      indexes.forEach(function(index) {
          _this.remove(index);
      });
  
      return this;
  };
  
  Wallet.prototype.encrypt = function (password, options) {
      var _this = this;
      var indexes = this._currentIndexes();
  
      var accounts = indexes.map(function(index) {
          return _this[index].encrypt(password, options);
      });
  
      return accounts;
  };
  
  
  Wallet.prototype.decrypt = function (encryptedWallet, password) {
      var _this = this;
  
      encryptedWallet.forEach(function (keystore) {
          var account = _this._accounts.decrypt(keystore, password);
  
          if (account) {
              _this.add(account);
          } else {
              throw new Error('Couldn\'t decrypt accounts. Password wrong?');
          }
      });
  
      return this;
  };
  
  Wallet.prototype.save = function (password, keyName) {
      localStorage.setItem(keyName || this.defaultKeyName, JSON.stringify(this.encrypt(password)));
  
      return true;
  };
  
  Wallet.prototype.load = function (password, keyName) {
      var keystore = localStorage.getItem(keyName || this.defaultKeyName);
  
      if (keystore) {
          try {
              keystore = JSON.parse(keystore);
          } catch(e) {
  
          }
      }
  
      return this.decrypt(keystore || [], password);
  };
  
  if (typeof localStorage === 'undefined') {
      delete Wallet.prototype.save;
      delete Wallet.prototype.load;
  }
  
  
  module.exports = Accounts;
  
  }).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer)
  },{"any-promise":2,"buffer":84,"crypto":97,"crypto-browserify":97,"eth-lib/lib/account":350,"eth-lib/lib/bytes":352,"eth-lib/lib/hash":353,"eth-lib/lib/nat":354,"eth-lib/lib/rlp":355,"scrypt.js":293,"underscore":325,"uuid":357,"web3-core":348,"web3-core-helpers":338,"web3-core-method":339,"web3-utils":403}],359:[function(require,module,exports){
  /*
      This file is part of web3.js.
  
      web3.js is free software: you can redistribute it and/or modify
      it under the terms of the GNU Lesser General Public License as published by
      the Free Software Foundation, either version 3 of the License, or
      (at your option) any later version.
  
      web3.js is distributed in the hope that it will be useful,
      but WITHOUT ANY WARRANTY; without even the implied warranty of
      MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
      GNU Lesser General Public License for more details.
  
      You should have received a copy of the GNU Lesser General Public License
      along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
  */
  /**
   * @file contract.js
   *
   * To initialize a contract use:
   *
   *  var Contract = require('web3-eth-contract');
   *  Contract.setProvider('ws://localhost:8546');
   *  var contract = new Contract(abi, address, ...);
   *
   * @author Fabian Vogelsteller <fabian@ethereum.org>
   * @date 2017
   */
  
  
  "use strict";
  
  
  var _ = require('underscore');
  var core = require('web3-core');
  var Method = require('web3-core-method');
  var utils = require('web3-utils');
  var Subscription = require('web3-core-subscriptions').subscription;
  var formatters = require('web3-core-helpers').formatters;
  var errors = require('web3-core-helpers').errors;
  var promiEvent = require('web3-core-promievent');
  var abi = require('web3-eth-abi');
  
  
  /**
   * Should be called to create new contract instance
   *
   * @method Contract
   * @constructor
   * @param {Array} jsonInterface
   * @param {String} address
   * @param {Object} options
   */
  var Contract = function Contract(jsonInterface, address, options) {
      var _this = this,
          args = Array.prototype.slice.call(arguments);
  
      if(!(this instanceof Contract)) {
          throw new Error('Please use the "new" keyword to instantiate a web3.eth.contract() object!');
      }
  
      // sets _requestmanager
      core.packageInit(this, [this.constructor.currentProvider]);
  
      this.clearSubscriptions = this._requestManager.clearSubscriptions;
  
  
  
      if(!jsonInterface || !(Array.isArray(jsonInterface))) {
          throw new Error('You must provide the json interface of the contract when instantiating a contract object.');
      }
  
  
  
      // create the options object
      this.options = {};
  
      var lastArg = args[args.length - 1];
      if(_.isObject(lastArg) && !_.isArray(lastArg)) {
          options = lastArg;
  
          this.options = _.extend(this.options, this._getOrSetDefaultOptions(options));
          if(_.isObject(address)) {
              address = null;
          }
      }
  
      // set address
      Object.defineProperty(this.options, 'address', {
          set: function(value){
              if(value) {
                  _this._address = utils.toChecksumAddress(formatters.inputAddressFormatter(value));
              }
          },
          get: function(){
              return _this._address;
          },
          enumerable: true
      });
  
      // add method and event signatures, when the jsonInterface gets set
      Object.defineProperty(this.options, 'jsonInterface', {
          set: function(value){
              _this.methods = {};
              _this.events = {};
  
              _this._jsonInterface = value.map(function(method) {
                  var func,
                      funcName;
  
                  // make constant and payable backwards compatible
                  method.constant = (method.stateMutability === "view" || method.stateMutability === "pure" || method.constant);
                  method.payable = (method.stateMutability === "payable" || method.payable);
  
  
                  if (method.name) {
                      funcName = utils._jsonInterfaceMethodToString(method);
                  }
  
  
                  // function
                  if (method.type === 'function') {
                      method.signature = abi.encodeFunctionSignature(funcName);
                      func = _this._createTxObject.bind({
                          method: method,
                          parent: _this
                      });
  
  
                      // add method only if not one already exists
                      if(!_this.methods[method.name]) {
                          _this.methods[method.name] = func;
                      } else {
                          var cascadeFunc = _this._createTxObject.bind({
                              method: method,
                              parent: _this,
                              nextMethod: _this.methods[method.name]
                          });
                          _this.methods[method.name] = cascadeFunc;
                      }
  
                      // definitely add the method based on its signature
                      _this.methods[method.signature] = func;
  
                      // add method by name
                      _this.methods[funcName] = func;
  
  
                  // event
                  } else if (method.type === 'event') {
                      method.signature = abi.encodeEventSignature(funcName);
                      var event = _this._on.bind(_this, method.signature);
  
                      // add method only if not already exists
                      if(!_this.events[method.name] || _this.events[method.name].name === 'bound ')
                          _this.events[method.name] = event;
  
                      // definitely add the method based on its signature
                      _this.events[method.signature] = event;
  
                      // add event by name
                      _this.events[funcName] = event;
                  }
  
  
                  return method;
              });
  
              // add allEvents
              _this.events.allEvents = _this._on.bind(_this, 'allevents');
  
              return _this._jsonInterface;
          },
          get: function(){
              return _this._jsonInterface;
          },
          enumerable: true
      });
  
      // get default account from the Class
      var defaultAccount = this.constructor.defaultAccount;
      var defaultBlock = this.constructor.defaultBlock || 'latest';
  
      Object.defineProperty(this, 'defaultAccount', {
          get: function () {
              return defaultAccount;
          },
          set: function (val) {
              if(val) {
                  defaultAccount = utils.toChecksumAddress(formatters.inputAddressFormatter(val));
              }
  
              return val;
          },
          enumerable: true
      });
      Object.defineProperty(this, 'defaultBlock', {
          get: function () {
              return defaultBlock;
          },
          set: function (val) {
              defaultBlock = val;
  
              return val;
          },
          enumerable: true
      });
  
      // properties
      this.methods = {};
      this.events = {};
  
      this._address = null;
      this._jsonInterface = [];
  
      // set getter/setter properties
      this.options.address = address;
      this.options.jsonInterface = jsonInterface;
  
  };
  
  Contract.setProvider = function(provider, accounts) {
      // Contract.currentProvider = provider;
      core.packageInit(this, [provider]);
  
      this._ethAccounts = accounts;
  };
  
  
  /**
   * Get the callback and modiufy the array if necessary
   *
   * @method _getCallback
   * @param {Array} args
   * @return {Function} the callback
   */
  Contract.prototype._getCallback = function getCallback(args) {
      if (args && _.isFunction(args[args.length - 1])) {
          return args.pop(); // modify the args array!
      }
  };
  
  /**
   * Checks that no listener with name "newListener" or "removeListener" is added.
   *
   * @method _checkListener
   * @param {String} type
   * @param {String} event
   * @return {Object} the contract instance
   */
  Contract.prototype._checkListener = function(type, event){
      if(event === type) {
          throw new Error('The event "'+ type +'" is a reserved event name, you can\'t use it.');
      }
  };
  
  
  /**
   * Use default values, if options are not available
   *
   * @method _getOrSetDefaultOptions
   * @param {Object} options the options given by the user
   * @return {Object} the options with gaps filled by defaults
   */
  Contract.prototype._getOrSetDefaultOptions = function getOrSetDefaultOptions(options) {
      var gasPrice = options.gasPrice ? String(options.gasPrice): null;
      var from = options.from ? utils.toChecksumAddress(formatters.inputAddressFormatter(options.from)) : null;
  
      options.data = options.data || this.options.data;
  
      options.from = from || this.options.from;
      options.gasPrice = gasPrice || this.options.gasPrice;
      options.gas = options.gas || options.gasLimit || this.options.gas;
  
      // TODO replace with only gasLimit?
      delete options.gasLimit;
  
      return options;
  };
  
  
  /**
   * Should be used to encode indexed params and options to one final object
   *
   * @method _encodeEventABI
   * @param {Object} event
   * @param {Object} options
   * @return {Object} everything combined together and encoded
   */
  Contract.prototype._encodeEventABI = function (event, options) {
      options = options || {};
      var filter = options.filter || {},
          result = {};
  
      ['fromBlock', 'toBlock'].filter(function (f) {
          return options[f] !== undefined;
      }).forEach(function (f) {
          result[f] = formatters.inputBlockNumberFormatter(options[f]);
      });
  
      // use given topics
      if(_.isArray(options.topics)) {
          result.topics = options.topics;
  
      // create topics based on filter
      } else {
  
          result.topics = [];
  
          // add event signature
          if (event && !event.anonymous && event.name !== 'ALLEVENTS') {
              result.topics.push(event.signature);
          }
  
          // add event topics (indexed arguments)
          if (event.name !== 'ALLEVENTS') {
              var indexedTopics = event.inputs.filter(function (i) {
                  return i.indexed === true;
              }).map(function (i) {
                  var value = filter[i.name];
                  if (!value) {
                      return null;
                  }
  
                  // TODO: https://github.com/ethereum/web3.js/issues/344
                  // TODO: deal properly with components
  
                  if (_.isArray(value)) {
                      return value.map(function (v) {
                          return abi.encodeParameter(i.type, v);
                      });
                  }
                  return abi.encodeParameter(i.type, value);
              });
  
              result.topics = result.topics.concat(indexedTopics);
          }
  
          if(!result.topics.length)
              delete result.topics;
      }
  
      if(this.options.address) {
          result.address = this.options.address.toLowerCase();
      }
  
      return result;
  };
  
  /**
   * Should be used to decode indexed params and options
   *
   * @method _decodeEventABI
   * @param {Object} data
   * @return {Object} result object with decoded indexed && not indexed params
   */
  Contract.prototype._decodeEventABI = function (data) {
      var event = this;
  
      data.data = data.data || '';
      data.topics = data.topics || [];
      var result = formatters.outputLogFormatter(data);
  
      // if allEvents get the right event
      if(event.name === 'ALLEVENTS') {
          event = event.jsonInterface.find(function (intf) {
              return (intf.signature === data.topics[0]);
          }) || {anonymous: true};
      }
  
      // create empty inputs if none are present (e.g. anonymous events on allEvents)
      event.inputs = event.inputs || [];
  
  
      var argTopics = event.anonymous ? data.topics : data.topics.slice(1);
  
      result.returnValues = abi.decodeLog(event.inputs, data.data, argTopics);
      delete result.returnValues.__length__;
  
      // add name
      result.event = event.name;
  
      // add signature
      result.signature = (event.anonymous || !data.topics[0]) ? null : data.topics[0];
  
      // move the data and topics to "raw"
      result.raw = {
          data: result.data,
          topics: result.topics
      };
      delete result.data;
      delete result.topics;
  
  
      return result;
  };
  
  /**
   * Encodes an ABI for a method, including signature or the method.
   * Or when constructor encodes only the constructor parameters.
   *
   * @method _encodeMethodABI
   * @param {Mixed} args the arguments to encode
   * @param {String} the encoded ABI
   */
  Contract.prototype._encodeMethodABI = function _encodeMethodABI() {
      var methodSignature = this._method.signature,
          args = this.arguments || [];
  
      var signature = false,
          paramsABI = this._parent.options.jsonInterface.filter(function (json) {
              return ((methodSignature === 'constructor' && json.type === methodSignature) ||
                  ((json.signature === methodSignature || json.signature === methodSignature.replace('0x','') || json.name === methodSignature) && json.type === 'function'));
          }).map(function (json) {
              var inputLength = (_.isArray(json.inputs)) ? json.inputs.length : 0;
  
              if (inputLength !== args.length) {
                  throw new Error('The number of arguments is not matching the methods required number. You need to pass '+ inputLength +' arguments.');
              }
  
              if (json.type === 'function') {
                  signature = json.signature;
              }
              return _.isArray(json.inputs) ? json.inputs : [];
          }).map(function (inputs) {
              return abi.encodeParameters(inputs, args).replace('0x','');
          })[0] || '';
  
      // return constructor
      if(methodSignature === 'constructor') {
          if(!this._deployData)
              throw new Error('The contract has no contract data option set. This is necessary to append the constructor parameters.');
  
          return this._deployData + paramsABI;
  
      // return method
      } else {
  
          var returnValue = (signature) ? signature + paramsABI : paramsABI;
  
          if(!returnValue) {
              throw new Error('Couldn\'t find a matching contract method named "'+ this._method.name +'".');
          } else {
              return returnValue;
          }
      }
  
  };
  
  
  /**
   * Decode method return values
   *
   * @method _decodeMethodReturn
   * @param {Array} outputs
   * @param {String} returnValues
   * @return {Object} decoded output return values
   */
  Contract.prototype._decodeMethodReturn = function (outputs, returnValues) {
      if (!returnValues) {
          return null;
      }
  
      returnValues = returnValues.length >= 2 ? returnValues.slice(2) : returnValues;
      var result = abi.decodeParameters(outputs, returnValues);
  
      if (result.__length__ === 1) {
          return result[0];
      } else {
          delete result.__length__;
          return result;
      }
  };
  
  
  /**
   * Deploys a contract and fire events based on its state: transactionHash, receipt
   *
   * All event listeners will be removed, once the last possible event is fired ("error", or "receipt")
   *
   * @method deploy
   * @param {Object} options
   * @param {Function} callback
   * @return {Object} EventEmitter possible events are "error", "transactionHash" and "receipt"
   */
  Contract.prototype.deploy = function(options, callback){
  
      options = options || {};
  
      options.arguments = options.arguments || [];
      options = this._getOrSetDefaultOptions(options);
  
  
      // return error, if no "data" is specified
      if(!options.data) {
          return utils._fireError(new Error('No "data" specified in neither the given options, nor the default options.'), null, null, callback);
      }
  
      var constructor = _.find(this.options.jsonInterface, function (method) {
          return (method.type === 'constructor');
      }) || {};
      constructor.signature = 'constructor';
  
      return this._createTxObject.apply({
          method: constructor,
          parent: this,
          deployData: options.data,
          _ethAccounts: this.constructor._ethAccounts
      }, options.arguments);
  
  };
  
  /**
   * Gets the event signature and outputformatters
   *
   * @method _generateEventOptions
   * @param {Object} event
   * @param {Object} options
   * @param {Function} callback
   * @return {Object} the event options object
   */
  Contract.prototype._generateEventOptions = function() {
      var args = Array.prototype.slice.call(arguments);
  
      // get the callback
      var callback = this._getCallback(args);
  
      // get the options
      var options = (_.isObject(args[args.length - 1])) ? args.pop() : {};
  
      var event = (_.isString(args[0])) ? args[0] : 'allevents';
      event = (event.toLowerCase() === 'allevents') ? {
              name: 'ALLEVENTS',
              jsonInterface: this.options.jsonInterface
          } : this.options.jsonInterface.find(function (json) {
              return (json.type === 'event' && (json.name === event || json.signature === '0x'+ event.replace('0x','')));
          });
  
      if (!event) {
          throw new Error('Event "' + event.name + '" doesn\'t exist in this contract.');
      }
  
      if (!utils.isAddress(this.options.address)) {
          throw new Error('This contract object doesn\'t have address set yet, please set an address first.');
      }
  
      return {
          params: this._encodeEventABI(event, options),
          event: event,
          callback: callback
      };
  };
  
  /**
   * Adds event listeners and creates a subscription, and remove it once its fired.
   *
   * @method clone
   * @return {Object} the event subscription
   */
  Contract.prototype.clone = function() {
      return new this.constructor(this.options.jsonInterface, this.options.address, this.options);
  };
  
  
  /**
   * Adds event listeners and creates a subscription, and remove it once its fired.
   *
   * @method once
   * @param {String} event
   * @param {Object} options
   * @param {Function} callback
   * @return {Object} the event subscription
   */
  Contract.prototype.once = function(event, options, callback) {
      var args = Array.prototype.slice.call(arguments);
  
      // get the callback
      callback = this._getCallback(args);
  
      if (!callback) {
          throw new Error('Once requires a callback as the second parameter.');
      }
  
      // don't allow fromBlock
      if (options)
          delete options.fromBlock;
  
      // don't return as once shouldn't provide "on"
      this._on(event, options, function (err, res, sub) {
          sub.unsubscribe();
          if(_.isFunction(callback)){
              callback(err, res, sub);
          }
      });
  
      return undefined;
  };
  
  /**
   * Adds event listeners and creates a subscription.
   *
   * @method _on
   * @param {String} event
   * @param {Object} options
   * @param {Function} callback
   * @return {Object} the event subscription
   */
  Contract.prototype._on = function(){
      var subOptions = this._generateEventOptions.apply(this, arguments);
  
  
      // prevent the event "newListener" and "removeListener" from being overwritten
      this._checkListener('newListener', subOptions.event.name, subOptions.callback);
      this._checkListener('removeListener', subOptions.event.name, subOptions.callback);
  
      // TODO check if listener already exists? and reuse subscription if options are the same.
  
      // create new subscription
      var subscription = new Subscription({
          subscription: {
              params: 1,
              inputFormatter: [formatters.inputLogFormatter],
              outputFormatter: this._decodeEventABI.bind(subOptions.event),
              // DUPLICATE, also in web3-eth
              subscriptionHandler: function (output) {
                  if(output.removed) {
                      this.emit('changed', output);
                  } else {
                      this.emit('data', output);
                  }
  
                  if (_.isFunction(this.callback)) {
                      this.callback(null, output, this);
                  }
              }
          },
          type: 'eth',
          requestManager: this._requestManager
      });
      subscription.subscribe('logs', subOptions.params, subOptions.callback || function () {});
  
      return subscription;
  };
  
  /**
   * Get past events from contracts
   *
   * @method getPastEvents
   * @param {String} event
   * @param {Object} options
   * @param {Function} callback
   * @return {Object} the promievent
   */
  Contract.prototype.getPastEvents = function(){
      var subOptions = this._generateEventOptions.apply(this, arguments);
  
      var getPastLogs = new Method({
          name: 'getPastLogs',
          call: 'eth_getLogs',
          params: 1,
          inputFormatter: [formatters.inputLogFormatter],
          outputFormatter: this._decodeEventABI.bind(subOptions.event)
      });
      getPastLogs.setRequestManager(this._requestManager);
      var call = getPastLogs.buildCall();
  
      getPastLogs = null;
  
      return call(subOptions.params, subOptions.callback);
  };
  
  
  /**
   * returns the an object with call, send, estimate functions
   *
   * @method _createTxObject
   * @returns {Object} an object with functions to call the methods
   */
  Contract.prototype._createTxObject =  function _createTxObject(){
      var args = Array.prototype.slice.call(arguments);
      var txObject = {};
  
      if(this.method.type === 'function') {
  
          txObject.call = this.parent._executeMethod.bind(txObject, 'call');
          txObject.call.request = this.parent._executeMethod.bind(txObject, 'call', true); // to make batch requests
  
      }
  
      txObject.send = this.parent._executeMethod.bind(txObject, 'send');
      txObject.send.request = this.parent._executeMethod.bind(txObject, 'send', true); // to make batch requests
      txObject.encodeABI = this.parent._encodeMethodABI.bind(txObject);
      txObject.estimateGas = this.parent._executeMethod.bind(txObject, 'estimate');
  
      if (args && this.method.inputs && args.length !== this.method.inputs.length) {
          if (this.nextMethod) {
              return this.nextMethod.apply(null, args);
          }
          throw errors.InvalidNumberOfParams(args.length, this.method.inputs.length, this.method.name);
      }
  
      txObject.arguments = args || [];
      txObject._method = this.method;
      txObject._parent = this.parent;
      txObject._ethAccounts = this.parent.constructor._ethAccounts || this._ethAccounts;
  
      if(this.deployData) {
          txObject._deployData = this.deployData;
      }
  
      return txObject;
  };
  
  
  /**
   * Generates the options for the execute call
   *
   * @method _processExecuteArguments
   * @param {Array} args
   * @param {Promise} defer
   */
  Contract.prototype._processExecuteArguments = function _processExecuteArguments(args, defer) {
      var processedArgs = {};
  
      processedArgs.type = args.shift();
  
      // get the callback
      processedArgs.callback = this._parent._getCallback(args);
  
      // get block number to use for call
      if(processedArgs.type === 'call' && args[args.length - 1] !== true && (_.isString(args[args.length - 1]) || isFinite(args[args.length - 1])))
          processedArgs.defaultBlock = args.pop();
  
      // get the options
      processedArgs.options = (_.isObject(args[args.length - 1])) ? args.pop() : {};
  
      // get the generateRequest argument for batch requests
      processedArgs.generateRequest = (args[args.length - 1] === true)? args.pop() : false;
  
      processedArgs.options = this._parent._getOrSetDefaultOptions(processedArgs.options);
      processedArgs.options.data = this.encodeABI();
  
      // add contract address
      if(!this._deployData && !utils.isAddress(this._parent.options.address))
          throw new Error('This contract object doesn\'t have address set yet, please set an address first.');
  
      if(!this._deployData)
          processedArgs.options.to = this._parent.options.address;
  
      // return error, if no "data" is specified
      if(!processedArgs.options.data)
          return utils._fireError(new Error('Couldn\'t find a matching contract method, or the number of parameters is wrong.'), defer.eventEmitter, defer.reject, processedArgs.callback);
  
      return processedArgs;
  };
  
  /**
   * Executes a call, transact or estimateGas on a contract function
   *
   * @method _executeMethod
   * @param {String} type the type this execute function should execute
   * @param {Boolean} makeRequest if true, it simply returns the request parameters, rather than executing it
   */
  Contract.prototype._executeMethod = function _executeMethod(){
      var _this = this,
          args = this._parent._processExecuteArguments.call(this, Array.prototype.slice.call(arguments), defer),
          defer = promiEvent((args.type !== 'send')),
          ethAccounts = _this.constructor._ethAccounts || _this._ethAccounts;
  
      // simple return request for batch requests
      if(args.generateRequest) {
  
          var payload = {
              params: [formatters.inputCallFormatter.call(this._parent, args.options)],
              callback: args.callback
          };
  
          if(args.type === 'call') {
              payload.params.push(formatters.inputDefaultBlockNumberFormatter.call(this._parent, args.defaultBlock));
              payload.method = 'eth_call';
              payload.format = this._parent._decodeMethodReturn.bind(null, this._method.outputs);
          } else {
              payload.method = 'eth_sendTransaction';
          }
  
          return payload;
  
      } else {
  
          switch (args.type) {
              case 'estimate':
  
                  var estimateGas = (new Method({
                      name: 'estimateGas',
                      call: 'eth_estimateGas',
                      params: 1,
                      inputFormatter: [formatters.inputCallFormatter],
                      outputFormatter: utils.hexToNumber,
                      requestManager: _this._parent._requestManager,
                      accounts: ethAccounts, // is eth.accounts (necessary for wallet signing)
                      defaultAccount: _this._parent.defaultAccount,
                      defaultBlock: _this._parent.defaultBlock
                  })).createFunction();
  
                  return estimateGas(args.options, args.callback);
  
              case 'call':
  
                  // TODO check errors: missing "from" should give error on deploy and send, call ?
  
                  var call = (new Method({
                      name: 'call',
                      call: 'eth_call',
                      params: 2,
                      inputFormatter: [formatters.inputCallFormatter, formatters.inputDefaultBlockNumberFormatter],
                      // add output formatter for decoding
                      outputFormatter: function (result) {
                          return _this._parent._decodeMethodReturn(_this._method.outputs, result);
                      },
                      requestManager: _this._parent._requestManager,
                      accounts: ethAccounts, // is eth.accounts (necessary for wallet signing)
                      defaultAccount: _this._parent.defaultAccount,
                      defaultBlock: _this._parent.defaultBlock
                  })).createFunction();
  
                  return call(args.options, args.defaultBlock, args.callback);
  
              case 'send':
  
                  // return error, if no "from" is specified
                  if(!utils.isAddress(args.options.from)) {
                      return utils._fireError(new Error('No "from" address specified in neither the given options, nor the default options.'), defer.eventEmitter, defer.reject, args.callback);
                  }
  
                  if (_.isBoolean(this._method.payable) && !this._method.payable && args.options.value && args.options.value > 0) {
                      return utils._fireError(new Error('Can not send value to non-payable contract method or constructor'), defer.eventEmitter, defer.reject, args.callback);
                  }
  
  
                  // make sure receipt logs are decoded
                  var extraFormatters = {
                      receiptFormatter: function (receipt) {
                          if (_.isArray(receipt.logs)) {
  
                              // decode logs
                              var events = _.map(receipt.logs, function(log) {
                                  return _this._parent._decodeEventABI.call({
                                      name: 'ALLEVENTS',
                                      jsonInterface: _this._parent.options.jsonInterface
                                  }, log);
                              });
  
                              // make log names keys
                              receipt.events = {};
                              var count = 0;
                              events.forEach(function (ev) {
                                  if (ev.event) {
                                      // if > 1 of the same event, don't overwrite any existing events
                                      if (receipt.events[ev.event]) {
                                          if (Array.isArray(receipt.events[ ev.event ])) {
                                              receipt.events[ ev.event ].push(ev);
                                          } else {
                                              receipt.events[ev.event] = [receipt.events[ev.event], ev];
                                          }
                                      } else {
                                          receipt.events[ ev.event ] = ev;
                                      }
                                  } else {
                                      receipt.events[count] = ev;
                                      count++;
                                  }
                              });
  
                              delete receipt.logs;
                          }
                          return receipt;
                      },
                      contractDeployFormatter: function (receipt) {
                          var newContract = _this._parent.clone();
                          newContract.options.address = receipt.contractAddress;
                          return newContract;
                      }
                  };
  
                  var sendTransaction = (new Method({
                      name: 'sendTransaction',
                      call: 'eth_sendTransaction',
                      params: 1,
                      inputFormatter: [formatters.inputTransactionFormatter],
                      requestManager: _this._parent._requestManager,
                      accounts: _this.constructor._ethAccounts || _this._ethAccounts, // is eth.accounts (necessary for wallet signing)
                      defaultAccount: _this._parent.defaultAccount,
                      defaultBlock: _this._parent.defaultBlock,
                      extraFormatters: extraFormatters
                  })).createFunction();
  
                  return sendTransaction(args.options, args.callback);
  
          }
  
      }
  
  };
  
  module.exports = Contract;
  
  },{"underscore":325,"web3-core":348,"web3-core-helpers":338,"web3-core-method":339,"web3-core-promievent":340,"web3-core-subscriptions":345,"web3-eth-abi":349,"web3-utils":403}],360:[function(require,module,exports){
  /*
      This file is part of web3.js.
      web3.js is free software: you can redistribute it and/or modify
      it under the terms of the GNU Lesser General Public License as published by
      the Free Software Foundation, either version 3 of the License, or
      (at your option) any later version.
      web3.js is distributed in the hope that it will be useful,
      but WITHOUT ANY WARRANTY; without even the implied warranty of
      MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
      GNU Lesser General Public License for more details.
      You should have received a copy of the GNU Lesser General Public License
      along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
  */
  /**
   * @file ENS.js
   *
   * @author Samuel Furter <samuel@ethereum.org>
   * @date 2018
   */
  
  "use strict";
  
  var config = require('./config');
  var Registry = require('./contracts/Registry');
  var ResolverMethodHandler = require('./lib/ResolverMethodHandler');
  
  /**
   * Constructs a new instance of ENS
   *
   * @method ENS
   * @param {Object} eth
   * @constructor
   */
  function ENS(eth) {
      this.eth = eth;
  }
  
  Object.defineProperty(ENS.prototype, 'registry', {
      get: function () {
          return new Registry(this);
      },
      enumerable: true
  });
  
  Object.defineProperty(ENS.prototype, 'resolverMethodHandler', {
      get: function () {
          return new ResolverMethodHandler(this.registry);
      },
      enumerable: true
  });
  
  /**
   * @param {string} name
   * @returns {Promise<Contract>}
   */
  ENS.prototype.resolver = function (name) {
      return this.registry.resolver(name);
  };
  
  /**
   * Returns the address record associated with a name.
   *
   * @method getAddress
   * @param {string} name
   * @param {function} callback
   * @return {eventifiedPromise}
   */
  ENS.prototype.getAddress = function (name, callback) {
      return this.resolverMethodHandler.method(name, 'addr', []).call(callback);
  };
  
  /**
   * Sets a new address
   *
   * @method setAddress
   * @param {string} name
   * @param {string} address
   * @param {Object} sendOptions
   * @param {function} callback
   * @returns {eventifiedPromise}
   */
  ENS.prototype.setAddress = function (name, address, sendOptions, callback) {
      return this.resolverMethodHandler.method(name, 'setAddr', [address]).send(sendOptions, callback);
  };
  
  /**
   * Returns the public key
   *
   * @method getPubkey
   * @param {string} name
   * @param {function} callback
   * @returns {eventifiedPromise}
   */
  ENS.prototype.getPubkey = function (name, callback) {
      return this.resolverMethodHandler.method(name, 'pubkey', [], callback).call(callback);
  };
  
  /**
   * Set the new public key
   *
   * @method setPubkey
   * @param {string} name
   * @param {string} x
   * @param {string} y
   * @param {Object} sendOptions
   * @param {function} callback
   * @returns {eventifiedPromise}
   */
  ENS.prototype.setPubkey = function (name, x, y, sendOptions, callback) {
      return this.resolverMethodHandler.method(name, 'setPubkey', [x, y]).send(sendOptions, callback);
  };
  
  /**
   * Returns the content
   *
   * @method getContent
   * @param {string} name
   * @param {function} callback
   * @returns {eventifiedPromise}
   */
  ENS.prototype.getContent = function (name, callback) {
      return this.resolverMethodHandler.method(name, 'content', []).call(callback);
  };
  
  /**
   * Set the content
   *
   * @method setContent
   * @param {string} name
   * @param {string} hash
   * @param {function} callback
   * @param {Object} sendOptions
   * @returns {eventifiedPromise}
   */
  ENS.prototype.setContent = function (name, hash, sendOptions, callback) {
      return this.resolverMethodHandler.method(name, 'setContent', [hash]).send(sendOptions, callback);
  };
  
  /**
   * Get the multihash
   *
   * @method getMultihash
   * @param {string} name
   * @param {function} callback
   * @returns {eventifiedPromise}
   */
  ENS.prototype.getMultihash = function (name, callback) {
      return this.resolverMethodHandler.method(name, 'multihash', []).call(callback);
  };
  
  /**
   * Set the multihash
   *
   * @method setMultihash
   * @param {string} name
   * @param {string} hash
   * @param {Object} sendOptions
   * @param {function} callback
   * @returns {eventifiedPromise}
   */
  ENS.prototype.setMultihash = function (name, hash, sendOptions, callback) {
      return this.resolverMethodHandler.method(name, 'multihash', [hash]).send(sendOptions, callback);
  };
  
  /**
   * Checks if the current used network is synced and looks for ENS support there.
   * Throws an error if not.
   *
   * @returns {Promise<Block>}
   */
  ENS.prototype.checkNetwork = function () {
      var self = this;
      return self.eth.getBlock('latest').then(function (block) {
          var headAge = new Date() / 1000 - block.timestamp;
          if (headAge > 3600) {
              throw new Error("Network not synced; last block was " + headAge + " seconds ago");
          }
          return self.eth.net.getNetworkType();
      }).then(function (networkType) {
          var addr = config.addresses[networkType];
          if (typeof addr === 'undefined') {
              throw new Error("ENS is not supported on network " + networkType);
          }
  
          return addr;
      });
  };
  
  module.exports = ENS;
  
  },{"./config":361,"./contracts/Registry":362,"./lib/ResolverMethodHandler":364}],361:[function(require,module,exports){
  "use strict";
  
  var config = {
      addresses: {
          main: "0x314159265dD8dbb310642f98f50C066173C1259b",
          ropsten: "0x112234455c3a32fd11230c42e7bccd4a84e02010",
          rinkeby: "0xe7410170f87102df0055eb195163a03b7f2bff4a"
      },
  };
  
  module.exports = config;
  
  },{}],362:[function(require,module,exports){
  /*
      This file is part of web3.js.
      web3.js is free software: you can redistribute it and/or modify
      it under the terms of the GNU Lesser General Public License as published by
      the Free Software Foundation, either version 3 of the License, or
      (at your option) any later version.
      web3.js is distributed in the hope that it will be useful,
      but WITHOUT ANY WARRANTY; without even the implied warranty of
      MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
      GNU Lesser General Public License for more details.
      You should have received a copy of the GNU Lesser General Public License
      along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
  */
  /**
   * @file Registry.js
   *
   * @author Samuel Furter <samuel@ethereum.org>
   * @date 2018
   */
  
  "use strict";
  
  var _ = require('underscore');
  var Contract = require('web3-eth-contract');
  var namehash = require('eth-ens-namehash');
  var PromiEvent = require('web3-core-promievent');
  var REGISTRY_ABI = require('../resources/ABI/Registry');
  var RESOLVER_ABI = require('../resources/ABI/Resolver');
  
  
  /**
   * A wrapper around the ENS registry contract.
   *
   * @method Registry
   * @param {Ens} ens
   * @constructor
   */
  function Registry(ens) {
      var self = this;
      this.ens = ens;
      this.contract = ens.checkNetwork().then(function (address) {
          var contract = new Contract(REGISTRY_ABI, address);
          contract.setProvider(self.ens.eth.currentProvider);
  
          return contract;
      });
  }
  
  /**
   * Returns the address of the owner of an ENS name.
   *
   * @method owner
   * @param {string} name
   * @param {function} callback
   * @return {Promise<any>}
   */
  Registry.prototype.owner = function (name, callback) {
      var promiEvent = new PromiEvent(true);
  
      this.contract.then(function (contract) {
          contract.methods.owner(namehash.hash(name)).call()
              .then(function (receipt) {
                  promiEvent.resolve(receipt);
  
                  if (_.isFunction(callback)) {
                      callback(receipt);
                  }
              })
              .catch(function (error) {
                  promiEvent.reject(error);
  
                  if (_.isFunction(callback)) {
                      callback(error);
                  }
              });
      });
  
      return promiEvent.eventEmitter;
  };
  
  /**
   * Returns the resolver contract associated with a name.
   *
   * @method resolver
   * @param {string} name
   * @return {Promise<Contract>}
   */
  Registry.prototype.resolver = function (name) {
      var self = this;
  
      return this.contract.then(function (contract) {
          return contract.methods.resolver(namehash.hash(name)).call();
      }).then(function (address) {
          var contract = new Contract(RESOLVER_ABI, address);
          contract.setProvider(self.ens.eth.currentProvider);
          return contract;
      });
  };
  
  module.exports = Registry;
  
  },{"../resources/ABI/Registry":365,"../resources/ABI/Resolver":366,"eth-ens-namehash":127,"underscore":325,"web3-core-promievent":340,"web3-eth-contract":359}],363:[function(require,module,exports){
  /*
      This file is part of web3.js.
      web3.js is free software: you can redistribute it and/or modify
      it under the terms of the GNU Lesser General Public License as published by
      the Free Software Foundation, either version 3 of the License, or
      (at your option) any later version.
      web3.js is distributed in the hope that it will be useful,
      but WITHOUT ANY WARRANTY; without even the implied warranty of
      MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
      GNU Lesser General Public License for more details.
      You should have received a copy of the GNU Lesser General Public License
      along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
  */
  /**
   * @file index.js
   *
   * @author Samuel Furter <samuel@ethereum.org>
   * @date 2018
   */
  
  "use strict";
  
  var ENS = require('./ENS');
  
  module.exports = ENS;
  
  },{"./ENS":360}],364:[function(require,module,exports){
  /*
      This file is part of web3.js.
      web3.js is free software: you can redistribute it and/or modify
      it under the terms of the GNU Lesser General Public License as published by
      the Free Software Foundation, either version 3 of the License, or
      (at your option) any later version.
      web3.js is distributed in the hope that it will be useful,
      but WITHOUT ANY WARRANTY; without even the implied warranty of
      MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
      GNU Lesser General Public License for more details.
      You should have received a copy of the GNU Lesser General Public License
      along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
  */
  /**
   * @file ResolverMethodHandler.js
   *
   * @author Samuel Furter <samuel@ethereum.org>
   * @date 2018
   */
  
  "use strict";
  
  var PromiEvent = require('web3-core-promievent');
  var namehash = require('eth-ens-namehash');
  var _ = require('underscore');
  
  /**
   * @param {Registry} registry
   * @constructor
   */
  function ResolverMethodHandler(registry) {
      this.registry = registry;
  }
  
  /**
   * Executes an resolver method and returns an eventifiedPromise
   *
   * @param {string} ensName
   * @param {string} methodName
   * @param {array} methodArguments
   * @param {function} callback
   * @returns {Object}
   */
  ResolverMethodHandler.prototype.method = function (ensName, methodName, methodArguments, callback) {
      return {
          call: this.call.bind({
              ensName: ensName,
              methodName: methodName,
              methodArguments: methodArguments,
              callback: callback,
              parent: this
          }),
          send: this.send.bind({
              ensName: ensName,
              methodName: methodName,
              methodArguments: methodArguments,
              callback: callback,
              parent: this
          })
      };
  };
  
  /**
   * Executes call
   *
   * @returns {eventifiedPromise}
   */
  ResolverMethodHandler.prototype.call = function (callback) {
      var self = this;
      var promiEvent = new PromiEvent();
      var preparedArguments = this.parent.prepareArguments(this.ensName, this.methodArguments);
  
      this.parent.registry.resolver(this.ensName).then(function (resolver) {
          self.parent.handleCall(promiEvent, resolver.methods[self.methodName], preparedArguments, callback);
      }).catch(function (error) {
          promiEvent.reject(error);
      });
  
      return promiEvent.eventEmitter;
  };
  
  
  /**
   * Executes send
   *
   * @param {Object} sendOptions
   * @param {function} callback
   * @returns {eventifiedPromise}
   */
  ResolverMethodHandler.prototype.send = function (sendOptions, callback) {
      var self = this;
      var promiEvent = new PromiEvent();
      var preparedArguments = this.parent.prepareArguments(this.ensName, this.methodArguments);
  
      this.parent.registry.resolver(this.ensName).then(function (resolver) {
          self.parent.handleSend(promiEvent, resolver.methods[self.methodName], preparedArguments, sendOptions, callback);
      }).catch(function (error) {
          promiEvent.reject(error);
      });
  
      return promiEvent.eventEmitter;
  };
  
  /**
   * Handles a call method
   *
   * @param {eventifiedPromise} promiEvent
   * @param {function} method
   * @param {array} preparedArguments
   * @param {function} callback
   * @returns {eventifiedPromise}
   */
  ResolverMethodHandler.prototype.handleCall = function (promiEvent, method, preparedArguments, callback) {
      method.apply(this, preparedArguments).call()
          .then(function (receipt) {
              promiEvent.resolve(receipt);
  
              if (_.isFunction(callback)) {
                  callback(receipt);
              }
          }).catch(function (error) {
              promiEvent.reject(error);
  
              if (_.isFunction(callback)) {
                  callback(error);
              }
          });
  
      return promiEvent;
  };
  
  /**
   * Handles a send method
   *
   * @param {eventifiedPromise} promiEvent
   * @param {function} method
   * @param {array} preparedArguments
   * @param {Object} sendOptions
   * @param {function} callback
   * @returns {eventifiedPromise}
   */
  ResolverMethodHandler.prototype.handleSend = function (promiEvent, method, preparedArguments, sendOptions, callback) {
      method.apply(this, preparedArguments).send(sendOptions)
          .on('transactionHash', function (hash) {
              promiEvent.eventEmitter.emit('transactionHash', hash);
          })
          .on('confirmation', function (confirmationNumber, receipt) {
              promiEvent.eventEmitter.emit('confirmation', confirmationNumber, receipt);
          })
          .on('receipt', function (receipt) {
              promiEvent.eventEmitter.emit('receipt', receipt);
              promiEvent.resolve(receipt);
  
              if (_.isFunction(callback)) {
                  callback(receipt);
              }
          })
          .on('error', function (error) {
              promiEvent.eventEmitter.emit('error', error);
              promiEvent.reject(error);
  
              if (_.isFunction(callback)) {
                  callback(error);
              }
          });
  
      return promiEvent;
  };
  
  /**
   * Adds the ENS node to the arguments
   *
   * @param {string} name
   * @param {array} methodArguments
   * @returns {array}
   */
  ResolverMethodHandler.prototype.prepareArguments = function (name, methodArguments) {
      var node = namehash.hash(name);
  
      if (methodArguments.length > 0) {
          methodArguments.unshift(node);
  
          return methodArguments;
      }
  
      return [node];
  };
  
  module.exports = ResolverMethodHandler;
  
  },{"eth-ens-namehash":127,"underscore":325,"web3-core-promievent":340}],365:[function(require,module,exports){
  "use strict";
  
  var REGISTRY = [
      {
          "constant": true,
          "inputs": [
              {
                  "name": "node",
                  "type": "bytes32"
              }
          ],
          "name": "resolver",
          "outputs": [
              {
                  "name": "",
                  "type": "address"
              }
          ],
          "payable": false,
          "type": "function"
      },
      {
          "constant": true,
          "inputs": [
              {
                  "name": "node",
                  "type": "bytes32"
              }
          ],
          "name": "owner",
          "outputs": [
              {
                  "name": "",
                  "type": "address"
              }
          ],
          "payable": false,
          "type": "function"
      },
      {
          "constant": false,
          "inputs": [
              {
                  "name": "node",
                  "type": "bytes32"
              },
              {
                  "name": "label",
                  "type": "bytes32"
              },
              {
                  "name": "owner",
                  "type": "address"
              }
          ],
          "name": "setSubnodeOwner",
          "outputs": [],
          "payable": false,
          "type": "function"
      },
      {
          "constant": false,
          "inputs": [
              {
                  "name": "node",
                  "type": "bytes32"
              },
              {
                  "name": "ttl",
                  "type": "uint64"
              }
          ],
          "name": "setTTL",
          "outputs": [],
          "payable": false,
          "type": "function"
      },
      {
          "constant": true,
          "inputs": [
              {
                  "name": "node",
                  "type": "bytes32"
              }
          ],
          "name": "ttl",
          "outputs": [
              {
                  "name": "",
                  "type": "uint64"
              }
          ],
          "payable": false,
          "type": "function"
      },
      {
          "constant": false,
          "inputs": [
              {
                  "name": "node",
                  "type": "bytes32"
              },
              {
                  "name": "resolver",
                  "type": "address"
              }
          ],
          "name": "setResolver",
          "outputs": [],
          "payable": false,
          "type": "function"
      },
      {
          "constant": false,
          "inputs": [
              {
                  "name": "node",
                  "type": "bytes32"
              },
              {
                  "name": "owner",
                  "type": "address"
              }
          ],
          "name": "setOwner",
          "outputs": [],
          "payable": false,
          "type": "function"
      },
      {
          "anonymous": false,
          "inputs": [
              {
                  "indexed": true,
                  "name": "node",
                  "type": "bytes32"
              },
              {
                  "indexed": false,
                  "name": "owner",
                  "type": "address"
              }
          ],
          "name": "Transfer",
          "type": "event"
      },
      {
          "anonymous": false,
          "inputs": [
              {
                  "indexed": true,
                  "name": "node",
                  "type": "bytes32"
              },
              {
                  "indexed": true,
                  "name": "label",
                  "type": "bytes32"
              },
              {
                  "indexed": false,
                  "name": "owner",
                  "type": "address"
              }
          ],
          "name": "NewOwner",
          "type": "event"
      },
      {
          "anonymous": false,
          "inputs": [
              {
                  "indexed": true,
                  "name": "node",
                  "type": "bytes32"
              },
              {
                  "indexed": false,
                  "name": "resolver",
                  "type": "address"
              }
          ],
          "name": "NewResolver",
          "type": "event"
      },
      {
          "anonymous": false,
          "inputs": [
              {
                  "indexed": true,
                  "name": "node",
                  "type": "bytes32"
              },
              {
                  "indexed": false,
                  "name": "ttl",
                  "type": "uint64"
              }
          ],
          "name": "NewTTL",
          "type": "event"
      }
  ];
  
  module.exports = REGISTRY;
  
  },{}],366:[function(require,module,exports){
  "use strict";
  
  var RESOLVER = [
      {
          "constant": true,
          "inputs": [
              {
                  "name": "interfaceID",
                  "type": "bytes4"
              }
          ],
          "name": "supportsInterface",
          "outputs": [
              {
                  "name": "",
                  "type": "bool"
              }
          ],
          "payable": false,
          "type": "function"
      },
      {
          "constant": true,
          "inputs": [
              {
                  "name": "node",
                  "type": "bytes32"
              },
              {
                  "name": "contentTypes",
                  "type": "uint256"
              }
          ],
          "name": "ABI",
          "outputs": [
              {
                  "name": "contentType",
                  "type": "uint256"
              },
              {
                  "name": "data",
                  "type": "bytes"
              }
          ],
          "payable": false,
          "type": "function"
      },
      {
          "constant": false,
          "inputs": [
              {
                  "name": "node",
                  "type": "bytes32"
              },
              {
                  "name": "hash",
                  "type": "bytes"
              }
          ],
          "name": "setMultihash",
          "outputs": [],
          "payable": false,
          "stateMutability": "nonpayable",
          "type": "function"
      },
      {
          "constant": true,
          "inputs": [
              {
                  "name": "node",
                  "type": "bytes32"
              }
          ],
          "name": "multihash",
          "outputs": [
              {
                  "name": "",
                  "type": "bytes"
              }
          ],
          "payable": false,
          "stateMutability": "view",
          "type": "function"
      },
      {
          "constant": false,
          "inputs": [
              {
                  "name": "node",
                  "type": "bytes32"
              },
              {
                  "name": "x",
                  "type": "bytes32"
              },
              {
                  "name": "y",
                  "type": "bytes32"
              }
          ],
          "name": "setPubkey",
          "outputs": [],
          "payable": false,
          "type": "function"
      },
      {
          "constant": true,
          "inputs": [
              {
                  "name": "node",
                  "type": "bytes32"
              }
          ],
          "name": "content",
          "outputs": [
              {
                  "name": "ret",
                  "type": "bytes32"
              }
          ],
          "payable": false,
          "type": "function"
      },
      {
          "constant": true,
          "inputs": [
              {
                  "name": "node",
                  "type": "bytes32"
              }
          ],
          "name": "addr",
          "outputs": [
              {
                  "name": "ret",
                  "type": "address"
              }
          ],
          "payable": false,
          "type": "function"
      },
      {
          "constant": false,
          "inputs": [
              {
                  "name": "node",
                  "type": "bytes32"
              },
              {
                  "name": "contentType",
                  "type": "uint256"
              },
              {
                  "name": "data",
                  "type": "bytes"
              }
          ],
          "name": "setABI",
          "outputs": [],
          "payable": false,
          "type": "function"
      },
      {
          "constant": true,
          "inputs": [
              {
                  "name": "node",
                  "type": "bytes32"
              }
          ],
          "name": "name",
          "outputs": [
              {
                  "name": "ret",
                  "type": "string"
              }
          ],
          "payable": false,
          "type": "function"
      },
      {
          "constant": false,
          "inputs": [
              {
                  "name": "node",
                  "type": "bytes32"
              },
              {
                  "name": "name",
                  "type": "string"
              }
          ],
          "name": "setName",
          "outputs": [],
          "payable": false,
          "type": "function"
      },
      {
          "constant": false,
          "inputs": [
              {
                  "name": "node",
                  "type": "bytes32"
              },
              {
                  "name": "hash",
                  "type": "bytes32"
              }
          ],
          "name": "setContent",
          "outputs": [],
          "payable": false,
          "type": "function"
      },
      {
          "constant": true,
          "inputs": [
              {
                  "name": "node",
                  "type": "bytes32"
              }
          ],
          "name": "pubkey",
          "outputs": [
              {
                  "name": "x",
                  "type": "bytes32"
              },
              {
                  "name": "y",
                  "type": "bytes32"
              }
          ],
          "payable": false,
          "type": "function"
      },
      {
          "constant": false,
          "inputs": [
              {
                  "name": "node",
                  "type": "bytes32"
              },
              {
                  "name": "addr",
                  "type": "address"
              }
          ],
          "name": "setAddr",
          "outputs": [],
          "payable": false,
          "type": "function"
      },
      {
          "inputs": [
              {
                  "name": "ensAddr",
                  "type": "address"
              }
          ],
          "payable": false,
          "type": "constructor"
      },
      {
          "anonymous": false,
          "inputs": [
              {
                  "indexed": true,
                  "name": "node",
                  "type": "bytes32"
              },
              {
                  "indexed": false,
                  "name": "a",
                  "type": "address"
              }
          ],
          "name": "AddrChanged",
          "type": "event"
      },
      {
          "anonymous": false,
          "inputs": [
              {
                  "indexed": true,
                  "name": "node",
                  "type": "bytes32"
              },
              {
                  "indexed": false,
                  "name": "hash",
                  "type": "bytes32"
              }
          ],
          "name": "ContentChanged",
          "type": "event"
      },
      {
          "anonymous": false,
          "inputs": [
              {
                  "indexed": true,
                  "name": "node",
                  "type": "bytes32"
              },
              {
                  "indexed": false,
                  "name": "name",
                  "type": "string"
              }
          ],
          "name": "NameChanged",
          "type": "event"
      },
      {
          "anonymous": false,
          "inputs": [
              {
                  "indexed": true,
                  "name": "node",
                  "type": "bytes32"
              },
              {
                  "indexed": true,
                  "name": "contentType",
                  "type": "uint256"
              }
          ],
          "name": "ABIChanged",
          "type": "event"
      },
      {
          "anonymous": false,
          "inputs": [
              {
                  "indexed": true,
                  "name": "node",
                  "type": "bytes32"
              },
              {
                  "indexed": false,
                  "name": "x",
                  "type": "bytes32"
              },
              {
                  "indexed": false,
                  "name": "y",
                  "type": "bytes32"
              }
          ],
          "name": "PubkeyChanged",
          "type": "event"
      }
  ];
  
  module.exports = RESOLVER;
  
  },{}],367:[function(require,module,exports){
  arguments[4][154][0].apply(exports,arguments)
  },{"dup":154}],368:[function(require,module,exports){
  /*
      This file is part of web3.js.
  
      web3.js is free software: you can redistribute it and/or modify
      it under the terms of the GNU Lesser General Public License as published by
      the Free Software Foundation, either version 3 of the License, or
      (at your option) any later version.
  
      web3.js is distributed in the hope that it will be useful,
      but WITHOUT ANY WARRANTY; without even the implied warranty of
      MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
      GNU Lesser General Public License for more details.
  
      You should have received a copy of the GNU Lesser General Public License
      along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
  */
  /**
   * @file iban.js
   *
   * Details: https://github.com/ethereum/wiki/wiki/ICAP:-Inter-exchange-Client-Address-Protocol
   *
   * @author Marek Kotewicz <marek@parity.io>
   * @date 2015
   */
  
  "use strict";
  
  var utils = require('web3-utils');
  var BigNumber = require('bn.js');
  
  
  var leftPad = function (string, bytes) {
      var result = string;
      while (result.length < bytes * 2) {
          result = '0' + result;
      }
      return result;
  };
  
  /**
   * Prepare an IBAN for mod 97 computation by moving the first 4 chars to the end and transforming the letters to
   * numbers (A = 10, B = 11, ..., Z = 35), as specified in ISO13616.
   *
   * @method iso13616Prepare
   * @param {String} iban the IBAN
   * @returns {String} the prepared IBAN
   */
  var iso13616Prepare = function (iban) {
      var A = 'A'.charCodeAt(0);
      var Z = 'Z'.charCodeAt(0);
  
      iban = iban.toUpperCase();
      iban = iban.substr(4) + iban.substr(0,4);
  
      return iban.split('').map(function(n){
          var code = n.charCodeAt(0);
          if (code >= A && code <= Z){
              // A = 10, B = 11, ... Z = 35
              return code - A + 10;
          } else {
              return n;
          }
      }).join('');
  };
  
  /**
   * Calculates the MOD 97 10 of the passed IBAN as specified in ISO7064.
   *
   * @method mod9710
   * @param {String} iban
   * @returns {Number}
   */
  var mod9710 = function (iban) {
      var remainder = iban,
          block;
  
      while (remainder.length > 2){
          block = remainder.slice(0, 9);
          remainder = parseInt(block, 10) % 97 + remainder.slice(block.length);
      }
  
      return parseInt(remainder, 10) % 97;
  };
  
  /**
   * This prototype should be used to create iban object from iban correct string
   *
   * @param {String} iban
   */
  var Iban = function Iban(iban) {
      this._iban = iban;
  };
  
  /**
   * This method should be used to create an ethereum address from a direct iban address
   *
   * @method toAddress
   * @param {String} iban address
   * @return {String} the ethereum address
   */
  Iban.toAddress = function (ib) {
      ib = new Iban(ib);
  
      if(!ib.isDirect()) {
          throw new Error('IBAN is indirect and can\'t be converted');
      }
  
      return ib.toAddress();
  };
  
  /**
   * This method should be used to create iban address from an ethereum address
   *
   * @method toIban
   * @param {String} address
   * @return {String} the IBAN address
   */
  Iban.toIban = function (address) {
      return Iban.fromAddress(address).toString();
  };
  
  /**
   * This method should be used to create iban object from an ethereum address
   *
   * @method fromAddress
   * @param {String} address
   * @return {Iban} the IBAN object
   */
  Iban.fromAddress = function (address) {
      if(!utils.isAddress(address)){
          throw new Error('Provided address is not a valid address: '+ address);
      }
  
      address = address.replace('0x','').replace('0X','');
  
      var asBn = new BigNumber(address, 16);
      var base36 = asBn.toString(36);
      var padded = leftPad(base36, 15);
      return Iban.fromBban(padded.toUpperCase());
  };
  
  /**
   * Convert the passed BBAN to an IBAN for this country specification.
   * Please note that <i>"generation of the IBAN shall be the exclusive responsibility of the bank/branch servicing the account"</i>.
   * This method implements the preferred algorithm described in http://en.wikipedia.org/wiki/International_Bank_Account_Number#Generating_IBAN_check_digits
   *
   * @method fromBban
   * @param {String} bban the BBAN to convert to IBAN
   * @returns {Iban} the IBAN object
   */
  Iban.fromBban = function (bban) {
      var countryCode = 'XE';
  
      var remainder = mod9710(iso13616Prepare(countryCode + '00' + bban));
      var checkDigit = ('0' + (98 - remainder)).slice(-2);
  
      return new Iban(countryCode + checkDigit + bban);
  };
  
  /**
   * Should be used to create IBAN object for given institution and identifier
   *
   * @method createIndirect
   * @param {Object} options, required options are "institution" and "identifier"
   * @return {Iban} the IBAN object
   */
  Iban.createIndirect = function (options) {
      return Iban.fromBban('ETH' + options.institution + options.identifier);
  };
  
  /**
   * This method should be used to check if given string is valid iban object
   *
   * @method isValid
   * @param {String} iban string
   * @return {Boolean} true if it is valid IBAN
   */
  Iban.isValid = function (iban) {
      var i = new Iban(iban);
      return i.isValid();
  };
  
  /**
   * Should be called to check if iban is correct
   *
   * @method isValid
   * @returns {Boolean} true if it is, otherwise false
   */
  Iban.prototype.isValid = function () {
      return /^XE[0-9]{2}(ETH[0-9A-Z]{13}|[0-9A-Z]{30,31})$/.test(this._iban) &&
          mod9710(iso13616Prepare(this._iban)) === 1;
  };
  
  /**
   * Should be called to check if iban number is direct
   *
   * @method isDirect
   * @returns {Boolean} true if it is, otherwise false
   */
  Iban.prototype.isDirect = function () {
      return this._iban.length === 34 || this._iban.length === 35;
  };
  
  /**
   * Should be called to check if iban number if indirect
   *
   * @method isIndirect
   * @returns {Boolean} true if it is, otherwise false
   */
  Iban.prototype.isIndirect = function () {
      return this._iban.length === 20;
  };
  
  /**
   * Should be called to get iban checksum
   * Uses the mod-97-10 checksumming protocol (ISO/IEC 7064:2003)
   *
   * @method checksum
   * @returns {String} checksum
   */
  Iban.prototype.checksum = function () {
      return this._iban.substr(2, 2);
  };
  
  /**
   * Should be called to get institution identifier
   * eg. XREG
   *
   * @method institution
   * @returns {String} institution identifier
   */
  Iban.prototype.institution = function () {
      return this.isIndirect() ? this._iban.substr(7, 4) : '';
  };
  
  /**
   * Should be called to get client identifier within institution
   * eg. GAVOFYORK
   *
   * @method client
   * @returns {String} client identifier
   */
  Iban.prototype.client = function () {
      return this.isIndirect() ? this._iban.substr(11) : '';
  };
  
  /**
   * Should be called to get client direct address
   *
   * @method toAddress
   * @returns {String} ethereum address
   */
  Iban.prototype.toAddress = function () {
      if (this.isDirect()) {
          var base36 = this._iban.substr(4);
          var asBn = new BigNumber(base36, 36);
          return utils.toChecksumAddress(asBn.toString(16, 20));
      }
  
      return '';
  };
  
  Iban.prototype.toString = function () {
      return this._iban;
  };
  
  module.exports = Iban;
  
  },{"bn.js":367,"web3-utils":403}],369:[function(require,module,exports){
  /*
      This file is part of web3.js.
  
      web3.js is free software: you can redistribute it and/or modify
      it under the terms of the GNU Lesser General Public License as published by
      the Free Software Foundation, either version 3 of the License, or
      (at your option) any later version.
  
      web3.js is distributed in the hope that it will be useful,
      but WITHOUT ANY WARRANTY; without even the implied warranty of
      MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
      GNU Lesser General Public License for more details.
  
      You should have received a copy of the GNU Lesser General Public License
      along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
  */
  /**
   * @file index.js
   * @author Fabian Vogelsteller <fabian@ethereum.org>
   * @date 2017
   */
  
  "use strict";
  
  var core = require('web3-core');
  var Method = require('web3-core-method');
  var utils = require('web3-utils');
  var Net = require('web3-net');
  
  var formatters = require('web3-core-helpers').formatters;
  
  
  var Personal = function Personal() {
      var _this = this;
  
      // sets _requestmanager
      core.packageInit(this, arguments);
  
      this.net = new Net(this.currentProvider);
  
      var defaultAccount = null;
      var defaultBlock = 'latest';
  
      Object.defineProperty(this, 'defaultAccount', {
          get: function () {
              return defaultAccount;
          },
          set: function (val) {
              if(val) {
                  defaultAccount = utils.toChecksumAddress(formatters.inputAddressFormatter(val));
              }
  
              // update defaultBlock
              methods.forEach(function(method) {
                  method.defaultAccount = defaultAccount;
              });
  
              return val;
          },
          enumerable: true
      });
      Object.defineProperty(this, 'defaultBlock', {
          get: function () {
              return defaultBlock;
          },
          set: function (val) {
              defaultBlock = val;
  
              // update defaultBlock
              methods.forEach(function(method) {
                  method.defaultBlock = defaultBlock;
              });
  
              return val;
          },
          enumerable: true
      });
  
  
      var methods = [
          new Method({
              name: 'getAccounts',
              call: 'personal_listAccounts',
              params: 0,
              outputFormatter: utils.toChecksumAddress
          }),
          new Method({
              name: 'newAccount',
              call: 'personal_newAccount',
              params: 1,
              inputFormatter: [null],
              outputFormatter: utils.toChecksumAddress
          }),
          new Method({
              name: 'unlockAccount',
              call: 'personal_unlockAccount',
              params: 3,
              inputFormatter: [formatters.inputAddressFormatter, null, null]
          }),
          new Method({
              name: 'lockAccount',
              call: 'personal_lockAccount',
              params: 1,
              inputFormatter: [formatters.inputAddressFormatter]
          }),
          new Method({
              name: 'importRawKey',
              call: 'personal_importRawKey',
              params: 2
          }),
          new Method({
              name: 'sendTransaction',
              call: 'personal_sendTransaction',
              params: 2,
              inputFormatter: [formatters.inputTransactionFormatter, null]
          }),
          new Method({
              name: 'signTransaction',
              call: 'personal_signTransaction',
              params: 2,
              inputFormatter: [formatters.inputTransactionFormatter, null]
          }),
          new Method({
              name: 'sign',
              call: 'personal_sign',
              params: 3,
              inputFormatter: [formatters.inputSignFormatter, formatters.inputAddressFormatter, null]
          }),
          new Method({
              name: 'ecRecover',
              call: 'personal_ecRecover',
              params: 2,
              inputFormatter: [formatters.inputSignFormatter, null]
          })
      ];
      methods.forEach(function(method) {
          method.attachToObject(_this);
          method.setRequestManager(_this._requestManager);
          method.defaultBlock = _this.defaultBlock;
          method.defaultAccount = _this.defaultAccount;
      });
  };
  
  core.addProviders(Personal);
  
  
  
  module.exports = Personal;
  
  
  
  },{"web3-core":348,"web3-core-helpers":338,"web3-core-method":339,"web3-net":372,"web3-utils":403}],370:[function(require,module,exports){
  /*
   This file is part of web3.js.
  
   web3.js is free software: you can redistribute it and/or modify
   it under the terms of the GNU Lesser General Public License as published by
   the Free Software Foundation, either version 3 of the License, or
   (at your option) any later version.
  
   web3.js is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU Lesser General Public License for more details.
  
   You should have received a copy of the GNU Lesser General Public License
   along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
   */
  /**
   * @file getNetworkType.js
   * @author Fabian Vogelsteller <fabian@ethereum.org>
   * @date 2017
   */
  
  "use strict";
  
  var _ = require('underscore');
  
  var getNetworkType = function (callback) {
      var _this = this,
          id;
  
  
      return this.net.getId()
          .then(function (givenId) {
  
              id = givenId;
  
              return _this.getBlock(0);
          })
          .then(function (genesis) {
              var returnValue = 'private';
  
              if (genesis.hash === '0xd4e56740f876aef8c010b86a40d5f56745a118d0906a34e69aec8c0db1cb8fa3' &&
                  id === 1) {
                  returnValue = 'main';
              }
              if (genesis.hash === '0cd786a2425d16f152c658316c423e6ce1181e15c3295826d7c9904cba9ce303' &&
                  id === 2) {
                  returnValue = 'morden';
              }
              if (genesis.hash === '0x41941023680923e0fe4d74a34bdac8141f2540e3ae90623718e47d66d1ca4a2d' &&
                  id === 3) {
                  returnValue = 'ropsten';
              }
              if (genesis.hash === '0x6341fd3daf94b748c72ced5a5b26028f2474f5f00d824504e4fa37a75767e177' &&
                  id === 4) {
                  returnValue = 'rinkeby';
              }
              if (genesis.hash === '0xa3c565fc15c7478862d50ccd6561e3c06b24cc509bf388941c25ea985ce32cb9' &&
                  id === 42) {
                  returnValue = 'kovan';
              }
  
              if (_.isFunction(callback)) {
                  callback(null, returnValue);
              }
  
              return returnValue;
          })
          .catch(function (err) {
              if (_.isFunction(callback)) {
                  callback(err);
              } else {
                  throw err;
              }
          });
  };
  
  module.exports = getNetworkType;
  
  },{"underscore":325}],371:[function(require,module,exports){
  /*
   This file is part of web3.js.
  
   web3.js is free software: you can redistribute it and/or modify
   it under the terms of the GNU Lesser General Public License as published by
   the Free Software Foundation, either version 3 of the License, or
   (at your option) any later version.
  
   web3.js is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU Lesser General Public License for more details.
  
   You should have received a copy of the GNU Lesser General Public License
   along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
   */
  /**
   * @file index.js
   * @author Fabian Vogelsteller <fabian@ethereum.org>
   * @date 2017
   */
  
  "use strict";
  
  var _ = require('underscore');
  var core = require('web3-core');
  var helpers = require('web3-core-helpers');
  var Subscriptions = require('web3-core-subscriptions').subscriptions;
  var Method = require('web3-core-method');
  var utils = require('web3-utils');
  var Net = require('web3-net');
  
  var ENS = require('web3-eth-ens');
  var Personal = require('web3-eth-personal');
  var BaseContract = require('web3-eth-contract');
  var Iban = require('web3-eth-iban');
  var Accounts = require('web3-eth-accounts');
  var abi = require('web3-eth-abi');
  
  var getNetworkType = require('./getNetworkType.js');
  var formatter = helpers.formatters;
  
  
  var blockCall = function (args) {
      return (_.isString(args[0]) && args[0].indexOf('0x') === 0) ? "eth_getBlockByHash" : "eth_getBlockByNumber";
  };
  
  var transactionFromBlockCall = function (args) {
      return (_.isString(args[0]) && args[0].indexOf('0x') === 0) ? 'eth_getTransactionByBlockHashAndIndex' : 'eth_getTransactionByBlockNumberAndIndex';
  };
  
  var uncleCall = function (args) {
      return (_.isString(args[0]) && args[0].indexOf('0x') === 0) ? 'eth_getUncleByBlockHashAndIndex' : 'eth_getUncleByBlockNumberAndIndex';
  };
  
  var getBlockTransactionCountCall = function (args) {
      return (_.isString(args[0]) && args[0].indexOf('0x') === 0) ? 'eth_getBlockTransactionCountByHash' : 'eth_getBlockTransactionCountByNumber';
  };
  
  var uncleCountCall = function (args) {
      return (_.isString(args[0]) && args[0].indexOf('0x') === 0) ? 'eth_getUncleCountByBlockHash' : 'eth_getUncleCountByBlockNumber';
  };
  
  
  var Eth = function Eth() {
      var _this = this;
  
      // sets _requestmanager
      core.packageInit(this, arguments);
  
      // overwrite setProvider
      var setProvider = this.setProvider;
      this.setProvider = function () {
          setProvider.apply(_this, arguments);
          _this.net.setProvider.apply(_this, arguments);
          _this.personal.setProvider.apply(_this, arguments);
          _this.accounts.setProvider.apply(_this, arguments);
          _this.Contract.setProvider(_this.currentProvider, _this.accounts);
      };
  
  
      var defaultAccount = null;
      var defaultBlock = 'latest';
  
      Object.defineProperty(this, 'defaultAccount', {
          get: function () {
              return defaultAccount;
          },
          set: function (val) {
              if(val) {
                  defaultAccount = utils.toChecksumAddress(formatter.inputAddressFormatter(val));
              }
  
              // also set on the Contract object
              _this.Contract.defaultAccount = defaultAccount;
              _this.personal.defaultAccount = defaultAccount;
  
              // update defaultBlock
              methods.forEach(function(method) {
                  method.defaultAccount = defaultAccount;
              });
  
              return val;
          },
          enumerable: true
      });
      Object.defineProperty(this, 'defaultBlock', {
          get: function () {
              return defaultBlock;
          },
          set: function (val) {
              defaultBlock = val;
              // also set on the Contract object
              _this.Contract.defaultBlock = defaultBlock;
              _this.personal.defaultBlock = defaultBlock;
  
              // update defaultBlock
              methods.forEach(function(method) {
                  method.defaultBlock = defaultBlock;
              });
  
              return val;
          },
          enumerable: true
      });
  
  
      this.clearSubscriptions = _this._requestManager.clearSubscriptions;
  
      // add net
      this.net = new Net(this.currentProvider);
      // add chain detection
      this.net.getNetworkType = getNetworkType.bind(this);
  
      // add accounts
      this.accounts = new Accounts(this.currentProvider);
  
      // add personal
      this.personal = new Personal(this.currentProvider);
      this.personal.defaultAccount = this.defaultAccount;
  
      // create a proxy Contract type for this instance, as a Contract's provider
      // is stored as a class member rather than an instance variable. If we do
      // not create this proxy type, changing the provider in one instance of
      // web3-eth would subsequently change the provider for _all_ contract
      // instances!
      var self = this;
      var Contract = function Contract() {
          BaseContract.apply(this, arguments);
  
          // when Eth.setProvider is called, call packageInit
          // on all contract instances instantiated via this Eth
          // instances. This will update the currentProvider for
          // the contract instances
          var _this = this;
          var setProvider = self.setProvider;
          self.setProvider = function() {
            setProvider.apply(self, arguments);
            core.packageInit(_this, [self.currentProvider]);
          };
      };
  
      Contract.setProvider = function() {
          BaseContract.setProvider.apply(this, arguments);
      };
  
      // make our proxy Contract inherit from web3-eth-contract so that it has all
      // the right functionality and so that instanceof and friends work properly
      Contract.prototype = Object.create(BaseContract.prototype);
      Contract.prototype.constructor = Contract;
  
      // add contract
      this.Contract = Contract;
      this.Contract.defaultAccount = this.defaultAccount;
      this.Contract.defaultBlock = this.defaultBlock;
      this.Contract.setProvider(this.currentProvider, this.accounts);
  
      // add IBAN
      this.Iban = Iban;
  
      // add ABI
      this.abi = abi;
  
      // add ENS
      this.ens = new ENS(this);
  
      var methods = [
          new Method({
              name: 'getNodeInfo',
              call: 'web3_clientVersion'
          }),
          new Method({
              name: 'getProtocolVersion',
              call: 'eth_protocolVersion',
              params: 0
          }),
          new Method({
              name: 'getCoinbase',
              call: 'eth_coinbase',
              params: 0
          }),
          new Method({
              name: 'isMining',
              call: 'eth_mining',
              params: 0
          }),
          new Method({
              name: 'getHashrate',
              call: 'eth_hashrate',
              params: 0,
              outputFormatter: utils.hexToNumber
          }),
          new Method({
              name: 'isSyncing',
              call: 'eth_syncing',
              params: 0,
              outputFormatter: formatter.outputSyncingFormatter
          }),
          new Method({
              name: 'getGasPrice',
              call: 'eth_gasPrice',
              params: 0,
              outputFormatter: formatter.outputBigNumberFormatter
          }),
          new Method({
              name: 'getAccounts',
              call: 'eth_accounts',
              params: 0,
              outputFormatter: utils.toChecksumAddress
          }),
          new Method({
              name: 'getBlockNumber',
              call: 'eth_blockNumber',
              params: 0,
              outputFormatter: utils.hexToNumber
          }),
          new Method({
              name: 'getBalance',
              call: 'eth_getBalance',
              params: 2,
              inputFormatter: [formatter.inputAddressFormatter, formatter.inputDefaultBlockNumberFormatter],
              outputFormatter: formatter.outputBigNumberFormatter
          }),
          new Method({
              name: 'getStorageAt',
              call: 'eth_getStorageAt',
              params: 3,
              inputFormatter: [formatter.inputAddressFormatter, utils.numberToHex, formatter.inputDefaultBlockNumberFormatter]
          }),
          new Method({
              name: 'getCode',
              call: 'eth_getCode',
              params: 2,
              inputFormatter: [formatter.inputAddressFormatter, formatter.inputDefaultBlockNumberFormatter]
          }),
          new Method({
              name: 'getBlock',
              call: blockCall,
              params: 2,
              inputFormatter: [formatter.inputBlockNumberFormatter, function (val) { return !!val; }],
              outputFormatter: formatter.outputBlockFormatter
          }),
          new Method({
              name: 'getUncle',
              call: uncleCall,
              params: 2,
              inputFormatter: [formatter.inputBlockNumberFormatter, utils.numberToHex],
              outputFormatter: formatter.outputBlockFormatter,
  
          }),
          new Method({
              name: 'getBlockTransactionCount',
              call: getBlockTransactionCountCall,
              params: 1,
              inputFormatter: [formatter.inputBlockNumberFormatter],
              outputFormatter: utils.hexToNumber
          }),
          new Method({
              name: 'getBlockUncleCount',
              call: uncleCountCall,
              params: 1,
              inputFormatter: [formatter.inputBlockNumberFormatter],
              outputFormatter: utils.hexToNumber
          }),
          new Method({
              name: 'getTransaction',
              call: 'eth_getTransactionByHash',
              params: 1,
              inputFormatter: [null],
              outputFormatter: formatter.outputTransactionFormatter
          }),
          new Method({
              name: 'getTransactionFromBlock',
              call: transactionFromBlockCall,
              params: 2,
              inputFormatter: [formatter.inputBlockNumberFormatter, utils.numberToHex],
              outputFormatter: formatter.outputTransactionFormatter
          }),
          new Method({
              name: 'getTransactionReceipt',
              call: 'eth_getTransactionReceipt',
              params: 1,
              inputFormatter: [null],
              outputFormatter: formatter.outputTransactionReceiptFormatter
          }),
          new Method({
              name: 'getTransactionCount',
              call: 'eth_getTransactionCount',
              params: 2,
              inputFormatter: [formatter.inputAddressFormatter, formatter.inputDefaultBlockNumberFormatter],
              outputFormatter: utils.hexToNumber
          }),
          new Method({
              name: 'sendSignedTransaction',
              call: 'eth_sendRawTransaction',
              params: 1,
              inputFormatter: [null]
          }),
          new Method({
              name: 'signTransaction',
              call: 'eth_signTransaction',
              params: 1,
              inputFormatter: [formatter.inputTransactionFormatter]
          }),
          new Method({
              name: 'sendTransaction',
              call: 'eth_sendTransaction',
              params: 1,
              inputFormatter: [formatter.inputTransactionFormatter]
          }),
          new Method({
              name: 'sign',
              call: 'eth_sign',
              params: 2,
              inputFormatter: [formatter.inputSignFormatter, formatter.inputAddressFormatter],
              transformPayload: function (payload) {
                  payload.params.reverse();
                  return payload;
              }
          }),
          new Method({
              name: 'call',
              call: 'eth_call',
              params: 2,
              inputFormatter: [formatter.inputCallFormatter, formatter.inputDefaultBlockNumberFormatter]
          }),
          new Method({
              name: 'estimateGas',
              call: 'eth_estimateGas',
              params: 1,
              inputFormatter: [formatter.inputCallFormatter],
              outputFormatter: utils.hexToNumber
          }),
          new Method({
              name: 'submitWork',
              call: 'eth_submitWork',
              params: 3
          }),
          new Method({
              name: 'getWork',
              call: 'eth_getWork',
              params: 0
          }),
          new Method({
              name: 'getPastLogs',
              call: 'eth_getLogs',
              params: 1,
              inputFormatter: [formatter.inputLogFormatter],
              outputFormatter: formatter.outputLogFormatter
          }),
  
          // subscriptions
          new Subscriptions({
              name: 'subscribe',
              type: 'eth',
              subscriptions: {
                  'newBlockHeaders': {
                      // TODO rename on RPC side?
                      subscriptionName: 'newHeads', // replace subscription with this name
                      params: 0,
                      outputFormatter: formatter.outputBlockFormatter
                  },
                  'pendingTransactions': {
                      subscriptionName: 'newPendingTransactions', // replace subscription with this name
                      params: 0
                  },
                  'logs': {
                      params: 1,
                      inputFormatter: [formatter.inputLogFormatter],
                      outputFormatter: formatter.outputLogFormatter,
                      // DUPLICATE, also in web3-eth-contract
                      subscriptionHandler: function (output) {
                          if(output.removed) {
                              this.emit('changed', output);
                          } else {
                              this.emit('data', output);
                          }
  
                          if (_.isFunction(this.callback)) {
                              this.callback(null, output, this);
                          }
                      }
                  },
                  'syncing': {
                      params: 0,
                      outputFormatter: formatter.outputSyncingFormatter,
                      subscriptionHandler: function (output) {
                          var _this = this;
  
                          // fire TRUE at start
                          if(this._isSyncing !== true) {
                              this._isSyncing = true;
                              this.emit('changed', _this._isSyncing);
  
                              if (_.isFunction(this.callback)) {
                                  this.callback(null, _this._isSyncing, this);
                              }
  
                              setTimeout(function () {
                                  _this.emit('data', output);
  
                                  if (_.isFunction(_this.callback)) {
                                      _this.callback(null, output, _this);
                                  }
                              }, 0);
  
                              // fire sync status
                          } else {
                              this.emit('data', output);
                              if (_.isFunction(_this.callback)) {
                                  this.callback(null, output, this);
                              }
  
                              // wait for some time before fireing the FALSE
                              clearTimeout(this._isSyncingTimeout);
                              this._isSyncingTimeout = setTimeout(function () {
                                  if(output.currentBlock > output.highestBlock - 200) {
                                      _this._isSyncing = false;
                                      _this.emit('changed', _this._isSyncing);
  
                                      if (_.isFunction(_this.callback)) {
                                          _this.callback(null, _this._isSyncing, _this);
                                      }
                                  }
                              }, 500);
                          }
                      }
                  }
              }
          })
      ];
  
      methods.forEach(function(method) {
          method.attachToObject(_this);
          method.setRequestManager(_this._requestManager, _this.accounts); // second param means is eth.accounts (necessary for wallet signing)
          method.defaultBlock = _this.defaultBlock;
          method.defaultAccount = _this.defaultAccount;
      });
  
  };
  
  core.addProviders(Eth);
  
  
  module.exports = Eth;
  
  
  },{"./getNetworkType.js":370,"underscore":325,"web3-core":348,"web3-core-helpers":338,"web3-core-method":339,"web3-core-subscriptions":345,"web3-eth-abi":349,"web3-eth-accounts":358,"web3-eth-contract":359,"web3-eth-ens":363,"web3-eth-iban":368,"web3-eth-personal":369,"web3-net":372,"web3-utils":403}],372:[function(require,module,exports){
  /*
      This file is part of web3.js.
  
      web3.js is free software: you can redistribute it and/or modify
      it under the terms of the GNU Lesser General Public License as published by
      the Free Software Foundation, either version 3 of the License, or
      (at your option) any later version.
  
      web3.js is distributed in the hope that it will be useful,
      but WITHOUT ANY WARRANTY; without even the implied warranty of
      MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
      GNU Lesser General Public License for more details.
  
      You should have received a copy of the GNU Lesser General Public License
      along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
  */
  /**
   * @file index.js
   * @author Fabian Vogelsteller <fabian@ethereum.org>
   * @date 2017
   */
  
  "use strict";
  
  var core = require('web3-core');
  var Method = require('web3-core-method');
  var utils = require('web3-utils');
  
  
  var Net = function () {
      var _this = this;
  
      // sets _requestmanager
      core.packageInit(this, arguments);
  
  
      [
          new Method({
              name: 'getId',
              call: 'net_version',
              params: 0,
              outputFormatter: utils.hexToNumber
          }),
          new Method({
              name: 'isListening',
              call: 'net_listening',
              params: 0
          }),
          new Method({
              name: 'getPeerCount',
              call: 'net_peerCount',
              params: 0,
              outputFormatter: utils.hexToNumber
          })
      ].forEach(function(method) {
          method.attachToObject(_this);
          method.setRequestManager(_this._requestManager);
      });
  
  };
  
  core.addProviders(Net);
  
  
  module.exports = Net;
  
  
  
  },{"web3-core":348,"web3-core-method":339,"web3-utils":403}],373:[function(require,module,exports){
  const EventEmitter = require('events').EventEmitter
  const inherits = require('util').inherits
  const ethUtil = require('ethereumjs-util')
  const EthBlockTracker = require('eth-block-tracker')
  const map = require('async/map')
  const eachSeries = require('async/eachSeries')
  const Stoplight = require('./util/stoplight.js')
  const cacheUtils = require('./util/rpc-cache-utils.js')
  const createPayload = require('./util/create-payload.js')
  const noop = function(){}
  
  module.exports = Web3ProviderEngine
  
  
  inherits(Web3ProviderEngine, EventEmitter)
  
  function Web3ProviderEngine(opts) {
    const self = this
    EventEmitter.call(self)
    self.setMaxListeners(30)
    // parse options
    opts = opts || {}
  
    // block polling
    const directProvider = { sendAsync: self._handleAsync.bind(self) }
    const blockTrackerProvider = opts.blockTrackerProvider || directProvider
    self._blockTracker = opts.blockTracker || new EthBlockTracker({
      provider: blockTrackerProvider,
      pollingInterval: opts.pollingInterval || 4000,
    })
  
    // handle new block
    self._blockTracker.on('block', (jsonBlock) => {
      const bufferBlock = toBufferBlock(jsonBlock)
      self._setCurrentBlock(bufferBlock)
    })
  
    // emit block events from the block tracker
    self._blockTracker.on('block', self.emit.bind(self, 'rawBlock'))
    self._blockTracker.on('sync', self.emit.bind(self, 'sync'))
    self._blockTracker.on('latest', self.emit.bind(self, 'latest'))
  
    // set initialization blocker
    self._ready = new Stoplight()
    // unblock initialization after first block
    self._blockTracker.once('block', () => {
      self._ready.go()
    })
    // local state
    self.currentBlock = null
    self._providers = []
  }
  
  // public
  
  Web3ProviderEngine.prototype.start = function(cb = noop){
    const self = this
    // start block polling
    self._blockTracker.start().then(cb).catch(cb)
  }
  
  Web3ProviderEngine.prototype.stop = function(){
    const self = this
    // stop block polling
    self._blockTracker.stop()
  }
  
  Web3ProviderEngine.prototype.addProvider = function(source){
    const self = this
    self._providers.push(source)
    source.setEngine(this)
  }
  
  Web3ProviderEngine.prototype.send = function(payload){
    throw new Error('Web3ProviderEngine does not support synchronous requests.')
  }
  
  Web3ProviderEngine.prototype.sendAsync = function(payload, cb){
    const self = this
    self._ready.await(function(){
  
      if (Array.isArray(payload)) {
        // handle batch
        map(payload, self._handleAsync.bind(self), cb)
      } else {
        // handle single
        self._handleAsync(payload, cb)
      }
  
    })
  }
  
  // private
  
  Web3ProviderEngine.prototype._handleAsync = function(payload, finished) {
    var self = this
    var currentProvider = -1
    var result = null
    var error = null
  
    var stack = []
  
    next()
  
    function next(after) {
      currentProvider += 1
      stack.unshift(after)
  
      // Bubbled down as far as we could go, and the request wasn't
      // handled. Return an error.
      if (currentProvider >= self._providers.length) {
        end(new Error('Request for method "' + payload.method + '" not handled by any subprovider. Please check your subprovider configuration to ensure this method is handled.'))
      } else {
        try {
          var provider = self._providers[currentProvider]
          provider.handleRequest(payload, next, end)
        } catch (e) {
          end(e)
        }
      }
    }
  
    function end(_error, _result) {
      error = _error
      result = _result
  
      eachSeries(stack, function(fn, callback) {
  
        if (fn) {
          fn(error, result, callback)
        } else {
          callback()
        }
      }, function() {
        // console.log('COMPLETED:', payload)
        // console.log('RESULT: ', result)
  
        var resultObj = {
          id: payload.id,
          jsonrpc: payload.jsonrpc,
          result: result
        }
  
        if (error != null) {
          resultObj.error = {
            message: error.stack || error.message || error,
            code: -32000
          }
          // respond with both error formats
          finished(error, resultObj)
        } else {
          finished(null, resultObj)
        }
      })
    }
  }
  
  //
  // from remote-data
  //
  
  Web3ProviderEngine.prototype._setCurrentBlock = function(block){
    const self = this
    self.currentBlock = block
    self.emit('block', block)
  }
  
  // util
  
  function toBufferBlock (jsonBlock) {
    return {
      number:           ethUtil.toBuffer(jsonBlock.number),
      hash:             ethUtil.toBuffer(jsonBlock.hash),
      parentHash:       ethUtil.toBuffer(jsonBlock.parentHash),
      nonce:            ethUtil.toBuffer(jsonBlock.nonce),
      mixHash:          ethUtil.toBuffer(jsonBlock.mixHash),
      sha3Uncles:       ethUtil.toBuffer(jsonBlock.sha3Uncles),
      logsBloom:        ethUtil.toBuffer(jsonBlock.logsBloom),
      transactionsRoot: ethUtil.toBuffer(jsonBlock.transactionsRoot),
      stateRoot:        ethUtil.toBuffer(jsonBlock.stateRoot),
      receiptsRoot:     ethUtil.toBuffer(jsonBlock.receiptRoot || jsonBlock.receiptsRoot),
      miner:            ethUtil.toBuffer(jsonBlock.miner),
      difficulty:       ethUtil.toBuffer(jsonBlock.difficulty),
      totalDifficulty:  ethUtil.toBuffer(jsonBlock.totalDifficulty),
      size:             ethUtil.toBuffer(jsonBlock.size),
      extraData:        ethUtil.toBuffer(jsonBlock.extraData),
      gasLimit:         ethUtil.toBuffer(jsonBlock.gasLimit),
      gasUsed:          ethUtil.toBuffer(jsonBlock.gasUsed),
      timestamp:        ethUtil.toBuffer(jsonBlock.timestamp),
      transactions:     jsonBlock.transactions,
    }
  }
  
  },{"./util/create-payload.js":391,"./util/rpc-cache-utils.js":394,"./util/stoplight.js":396,"async/eachSeries":25,"async/map":41,"eth-block-tracker":126,"ethereumjs-util":141,"events":157,"util":333}],374:[function(require,module,exports){
  var json = typeof JSON !== 'undefined' ? JSON : require('jsonify');
  
  module.exports = function (obj, opts) {
      if (!opts) opts = {};
      if (typeof opts === 'function') opts = { cmp: opts };
      var space = opts.space || '';
      if (typeof space === 'number') space = Array(space+1).join(' ');
      var cycles = (typeof opts.cycles === 'boolean') ? opts.cycles : false;
      var replacer = opts.replacer || function(key, value) { return value; };
  
      var cmp = opts.cmp && (function (f) {
          return function (node) {
              return function (a, b) {
                  var aobj = { key: a, value: node[a] };
                  var bobj = { key: b, value: node[b] };
                  return f(aobj, bobj);
              };
          };
      })(opts.cmp);
  
      var seen = [];
      return (function stringify (parent, key, node, level) {
          var indent = space ? ('\n' + new Array(level + 1).join(space)) : '';
          var colonSeparator = space ? ': ' : ':';
  
          if (node && node.toJSON && typeof node.toJSON === 'function') {
              node = node.toJSON();
          }
  
          node = replacer.call(parent, key, node);
  
          if (node === undefined) {
              return;
          }
          if (typeof node !== 'object' || node === null) {
              return json.stringify(node);
          }
          if (isArray(node)) {
              var out = [];
              for (var i = 0; i < node.length; i++) {
                  var item = stringify(node, i, node[i], level+1) || json.stringify(null);
                  out.push(indent + space + item);
              }
              return '[' + out.join(',') + indent + ']';
          }
          else {
              if (seen.indexOf(node) !== -1) {
                  if (cycles) return json.stringify('__cycle__');
                  throw new TypeError('Converting circular structure to JSON');
              }
              else seen.push(node);
  
              var keys = objectKeys(node).sort(cmp && cmp(node));
              var out = [];
              for (var i = 0; i < keys.length; i++) {
                  var key = keys[i];
                  var value = stringify(node, key, node[key], level+1);
  
                  if(!value) continue;
  
                  var keyValue = json.stringify(key)
                      + colonSeparator
                      + value;
                  ;
                  out.push(indent + space + keyValue);
              }
              seen.splice(seen.indexOf(node), 1);
              return '{' + out.join(',') + indent + '}';
          }
      })({ '': obj }, '', obj, 0);
  };
  
  var isArray = Array.isArray || function (x) {
      return {}.toString.call(x) === '[object Array]';
  };
  
  var objectKeys = Object.keys || function (obj) {
      var has = Object.prototype.hasOwnProperty || function () { return true };
      var keys = [];
      for (var key in obj) {
          if (has.call(obj, key)) keys.push(key);
      }
      return keys;
  };
  
  },{"jsonify":192}],375:[function(require,module,exports){
  module.exports={
    "_from": "web3-provider-engine@14.1.0",
    "_id": "web3-provider-engine@14.1.0",
    "_inBundle": false,
    "_integrity": "sha512-vGZtqhSUzGTiMGhJXNnB/aRDlrPZLhLnBZ2NPArkZtr8XSrwg9m08tw4+PuWg5za0TJuoE/vuPQc501HddZZWw==",
    "_location": "/web3-provider-engine",
    "_phantomChildren": {
      "jsonify": "0.0.0"
    },
    "_requested": {
      "type": "version",
      "registry": true,
      "raw": "web3-provider-engine@14.1.0",
      "name": "web3-provider-engine",
      "escapedName": "web3-provider-engine",
      "rawSpec": "14.1.0",
      "saveSpec": null,
      "fetchSpec": "14.1.0"
    },
    "_requiredBy": [
      "#USER",
      "/"
    ],
    "_resolved": "https://registry.npmjs.org/web3-provider-engine/-/web3-provider-engine-14.1.0.tgz",
    "_shasum": "91590020f8b8c1b65846321310cbfdb039090fc6",
    "_spec": "web3-provider-engine@14.1.0",
    "_where": "/Users/alexvlasov/Blockchain/web3swift/web3swiftJSProxy",
    "author": "",
    "browser": {
      "request": false,
      "ws": false
    },
    "bugs": {
      "url": "https://github.com/MetaMask/provider-engine/issues"
    },
    "bundleDependencies": false,
    "dependencies": {
      "async": "^2.5.0",
      "backoff": "^2.5.0",
      "clone": "^2.0.0",
      "cross-fetch": "^2.1.0",
      "eth-block-tracker": "^3.0.0",
      "eth-json-rpc-infura": "^3.1.0",
      "eth-sig-util": "^1.4.2",
      "ethereumjs-block": "^1.2.2",
      "ethereumjs-tx": "^1.2.0",
      "ethereumjs-util": "^5.1.5",
      "ethereumjs-vm": "^2.3.4",
      "json-rpc-error": "^2.0.0",
      "json-stable-stringify": "^1.0.1",
      "promise-to-callback": "^1.0.0",
      "readable-stream": "^2.2.9",
      "request": "^2.85.0",
      "semaphore": "^1.0.3",
      "ws": "^5.1.1",
      "xhr": "^2.2.0",
      "xtend": "^4.0.1"
    },
    "deprecated": false,
    "description": "[![Greenkeeper badge](https://badges.greenkeeper.io/MetaMask/provider-engine.svg)](https://greenkeeper.io/)",
    "devDependencies": {
      "babel-cli": "^6.26.0",
      "babel-preset-es2015": "^6.24.1",
      "babel-preset-stage-0": "^6.24.1",
      "browserify": "^16.1.1",
      "ethjs": "^0.3.6",
      "tape": "^4.4.0"
    },
    "homepage": "https://github.com/MetaMask/provider-engine#readme",
    "license": "MIT",
    "main": "index.js",
    "name": "web3-provider-engine",
    "repository": {
      "type": "git",
      "url": "git+https://github.com/MetaMask/provider-engine.git"
    },
    "scripts": {
      "build": "babel zero.js index.js -d dist/es5 && babel subproviders -d dist/es5/subproviders && babel util -d dist/es5/util",
      "bundle": "mkdir -p ./dist && npm run bundle-engine && npm run bundle-zero",
      "bundle-engine": "browserify -s ProviderEngine -e index.js -t [ babelify --presets [ es2015 ] ] > dist/ProviderEngine.js",
      "bundle-zero": "browserify -s ZeroClientProvider -e zero.js -t [ babelify --presets [ es2015 ] ] > dist/ZeroClientProvider.js",
      "prepublish": "npm run build && npm run bundle",
      "test": "node test/index.js"
    },
    "version": "14.1.0"
  }
  
  },{}],376:[function(require,module,exports){
  const inherits = require('util').inherits
  const ethUtil = require('ethereumjs-util')
  const BN = ethUtil.BN
  const clone = require('clone')
  const cacheUtils = require('../util/rpc-cache-utils.js')
  const Stoplight = require('../util/stoplight.js')
  const Subprovider = require('./subprovider.js')
  
  module.exports = BlockCacheProvider
  
  inherits(BlockCacheProvider, Subprovider)
  
  function BlockCacheProvider(opts) {
    const self = this
    opts = opts || {}
    // set initialization blocker
    self._ready = new Stoplight()
    self.strategies = {
      perma: new ConditionalPermaCacheStrategy({
        eth_getTransactionByHash: containsBlockhash,
        eth_getTransactionReceipt: containsBlockhash,
      }),
      block: new BlockCacheStrategy(self),
      fork: new BlockCacheStrategy(self),
    }
  }
  
  // setup a block listener on 'setEngine'
  BlockCacheProvider.prototype.setEngine = function(engine) {
    const self = this
    self.engine = engine
    // unblock initialization after first block
    engine.once('block', function(block) {
      self.currentBlock = block
      self._ready.go()
      // from now on, empty old cache every block
      engine.on('block', clearOldCache)
    })
  
    function clearOldCache(newBlock) {
      var previousBlock = self.currentBlock
      self.currentBlock = newBlock
      if (!previousBlock) return
      self.strategies.block.cacheRollOff(previousBlock)
      self.strategies.fork.cacheRollOff(previousBlock)
    }
  }
  
  BlockCacheProvider.prototype.handleRequest = function(payload, next, end){
    const self = this
  
    // skip cache if told to do so
    if (payload.skipCache) {
      // console.log('CACHE SKIP - skip cache if told to do so')
      return next()
    }
  
    // Ignore block polling requests.
    if (payload.method === 'eth_getBlockByNumber' && payload.params[0] === 'latest') {
      // console.log('CACHE SKIP - Ignore block polling requests.')
      return next()
    }
  
    // wait for first block
    self._ready.await(function(){
      // actually handle the request
      self._handleRequest(payload, next, end)
    })
  }
  
  BlockCacheProvider.prototype._handleRequest = function(payload, next, end){
    const self = this
  
    var type = cacheUtils.cacheTypeForPayload(payload)
    var strategy = this.strategies[type]
  
    // If there's no strategy in place, pass it down the chain.
    if (!strategy) {
      return next()
    }
  
    // If the strategy can't cache this request, ignore it.
    if (!strategy.canCache(payload)) {
      return next()
    }
  
    var blockTag = cacheUtils.blockTagForPayload(payload)
    if (!blockTag) blockTag = 'latest'
    var requestedBlockNumber
  
    if (blockTag === 'earliest') {
      requestedBlockNumber = '0x00'
    } else if (blockTag === 'latest') {
      requestedBlockNumber = ethUtil.bufferToHex(self.currentBlock.number)
    } else {
      // We have a hex number
      requestedBlockNumber = blockTag
    }
  
    //console.log('REQUEST at block 0x' + requestedBlockNumber.toString('hex'))
  
    // end on a hit, continue on a miss
    strategy.hitCheck(payload, requestedBlockNumber, end, function() {
      // miss fallthrough to provider chain, caching the result on the way back up.
      next(function(err, result, cb) {
        // err is already handled by engine
        if (err) return cb()
        strategy.cacheResult(payload, result, requestedBlockNumber, cb)
      })
    })
  }
  
  //
  // Cache Strategies
  //
  
  function PermaCacheStrategy() {
    var self = this
    self.cache = {}
    // clear cache every ten minutes
    var timeout = setInterval(function(){
      self.cache = {}
    }, 10 * 60 * 1e3)
    // do not require the Node.js event loop to remain active
    if (timeout.unref) timeout.unref()
  }
  
  PermaCacheStrategy.prototype.hitCheck = function(payload, requestedBlockNumber, hit, miss) {
    var identifier = cacheUtils.cacheIdentifierForPayload(payload)
    var cached = this.cache[identifier]
  
    if (!cached) return miss()
  
    // If the block number we're requesting at is greater than or
    // equal to the block where we cached a previous response,
    // the cache is valid. If it's from earlier than the cache,
    // send it back down to the client (where it will be recached.)
    var cacheIsEarlyEnough = compareHex(requestedBlockNumber, cached.blockNumber) >= 0
    if (cacheIsEarlyEnough) {
      var clonedValue = clone(cached.result)
      return hit(null, clonedValue)
    } else {
      return miss()
    }
  }
  
  PermaCacheStrategy.prototype.cacheResult = function(payload, result, requestedBlockNumber, callback) {
    var identifier = cacheUtils.cacheIdentifierForPayload(payload)
  
    if (result) {
      var clonedValue = clone(result)
      this.cache[identifier] = {
        blockNumber: requestedBlockNumber,
        result: clonedValue,
      }
    }
  
    callback()
  }
  
  PermaCacheStrategy.prototype.canCache = function(payload) {
    return cacheUtils.canCache(payload)
  }
  
  //
  // ConditionalPermaCacheStrategy
  //
  
  function ConditionalPermaCacheStrategy(conditionals) {
    this.strategy = new PermaCacheStrategy()
    this.conditionals = conditionals
  }
  
  ConditionalPermaCacheStrategy.prototype.hitCheck = function(payload, requestedBlockNumber, hit, miss) {
    return this.strategy.hitCheck(payload, requestedBlockNumber, hit, miss)
  }
  
  ConditionalPermaCacheStrategy.prototype.cacheResult = function(payload, result, requestedBlockNumber, callback) {
    var conditional = this.conditionals[payload.method]
  
    if (conditional) {
      if (conditional(result)) {
        this.strategy.cacheResult(payload, result, requestedBlockNumber, callback)
      } else {
        callback()
      }
    } else {
      // Cache all requests that don't have a conditional
      this.strategy.cacheResult(payload, result, requestedBlockNumber, callback)
    }
  }
  
  ConditionalPermaCacheStrategy.prototype.canCache = function(payload) {
    return this.strategy.canCache(payload)
  }
  
  //
  // BlockCacheStrategy
  //
  
  function BlockCacheStrategy() {
    this.cache = {}
  }
  
  BlockCacheStrategy.prototype.getBlockCacheForPayload = function(payload, blockNumberHex) {
    const blockNumber = Number.parseInt(blockNumberHex, 16)
    let blockCache = this.cache[blockNumber]
    // create new cache if necessary
    if (!blockCache) {
      const newCache = {}
      this.cache[blockNumber] = newCache
      blockCache = newCache
    }
    return blockCache
  }
  
  BlockCacheStrategy.prototype.hitCheck = function(payload, requestedBlockNumber, hit, miss) {
    var blockCache = this.getBlockCacheForPayload(payload, requestedBlockNumber)
  
    if (!blockCache) {
      return miss()
    }
  
    var identifier = cacheUtils.cacheIdentifierForPayload(payload)
    var cached = blockCache[identifier]
  
    if (cached) {
      return hit(null, cached)
    } else {
      return miss()
    }
  }
  
  BlockCacheStrategy.prototype.cacheResult = function(payload, result, requestedBlockNumber, callback) {
    if (result) {
      var blockCache = this.getBlockCacheForPayload(payload, requestedBlockNumber)
      var identifier = cacheUtils.cacheIdentifierForPayload(payload)
      blockCache[identifier] = result
    }
    callback()
  }
  
  BlockCacheStrategy.prototype.canCache = function(payload) {
    if (!cacheUtils.canCache(payload)) {
      return false
    }
  
    var blockTag = cacheUtils.blockTagForPayload(payload)
  
    return (blockTag !== 'pending')
  }
  
  // naively removes older block caches
  BlockCacheStrategy.prototype.cacheRollOff = function(previousBlock){
    const self = this
    const previousHex = ethUtil.bufferToHex(previousBlock.number)
    const oldBlockNumber = Number.parseInt(previousHex, 16)
    // clear old caches
    Object.keys(self.cache)
      .map(Number)
      .filter(num => num <= oldBlockNumber)
      .forEach(num => delete self.cache[num])
  }
  
  
  // util
  
  function compareHex(hexA, hexB){
    var numA = parseInt(hexA, 16)
    var numB = parseInt(hexB, 16)
    return numA === numB ? 0 : (numA > numB ? 1 : -1 )
  }
  
  function hexToBN(hex){
    return new BN(ethUtil.toBuffer(hex))
  }
  
  function containsBlockhash(result) {
    if (!result) return false
    if (!result.blockHash) return false
    const hasNonZeroHash = hexToBN(result.blockHash).gt(new BN(0))
    return hasNonZeroHash
  }
  
  },{"../util/rpc-cache-utils.js":394,"../util/stoplight.js":396,"./subprovider.js":387,"clone":87,"ethereumjs-util":141,"util":333}],377:[function(require,module,exports){
  const inherits = require('util').inherits
  const extend = require('xtend')
  const FixtureProvider = require('./fixture.js')
  const version = require('../package.json').version
  
  module.exports = DefaultFixtures
  
  inherits(DefaultFixtures, FixtureProvider)
  
  function DefaultFixtures(opts) {
    const self = this
    opts = opts || {}
    var responses = extend({
      web3_clientVersion: 'ProviderEngine/v'+version+'/javascript',
      net_listening: true,
      eth_hashrate: '0x00',
      eth_mining: false,
    }, opts)
    FixtureProvider.call(self, responses)
  }
  
  },{"../package.json":375,"./fixture.js":380,"util":333,"xtend":423}],378:[function(require,module,exports){
  const fetch = require('cross-fetch')
  const inherits = require('util').inherits
  const retry = require('async/retry')
  const waterfall = require('async/waterfall')
  const asyncify = require('async/asyncify')
  const JsonRpcError = require('json-rpc-error')
  const promiseToCallback = require('promise-to-callback')
  const createPayload = require('../util/create-payload.js')
  const Subprovider = require('./subprovider.js')
  
  const RETRIABLE_ERRORS = [
    // ignore server overload errors
    'Gateway timeout',
    'ETIMEDOUT',
    // ignore server sent html error pages
    // or truncated json responses
    'SyntaxError',
  ]
  
  module.exports = RpcSource
  
  inherits(RpcSource, Subprovider)
  
  function RpcSource (opts) {
    const self = this
    self.rpcUrl = opts.rpcUrl
    self.originHttpHeaderKey = opts.originHttpHeaderKey
  }
  
  RpcSource.prototype.handleRequest = function (payload, next, end) {
    const self = this
    const originDomain = payload.origin
  
    // overwrite id to not conflict with other concurrent users
    const newPayload = createPayload(payload)
    // remove extra parameter from request
    delete newPayload.origin
  
    const reqParams = {
      method: 'POST',
      headers: {
        'Accept': 'application/json',
        'Content-Type': 'application/json'
      },
      body: JSON.stringify(newPayload)
    }
  
    if (self.originHttpHeaderKey && originDomain) {
      reqParams.headers[self.originHttpHeaderKey] = originDomain
    }
  
    retry({
      times: 5,
      interval: 1000,
      errorFilter: isErrorRetriable,
    },
    (cb) => self._submitRequest(reqParams, cb),
    (err, result) => {
      // ends on retriable error
      if (err && isErrorRetriable(err)) {
        const errMsg = `FetchSubprovider - cannot complete request. All retries exhausted.\nOriginal Error:\n${err.toString()}\n\n`
        const retriesExhaustedErr = new Error(errMsg)
        return end(retriesExhaustedErr)
      }
      // otherwise continue normally
      return end(err, result)
    })
  }
  
  RpcSource.prototype._submitRequest = function (reqParams, cb) {
    const self = this
    const targetUrl = self.rpcUrl
  
    promiseToCallback(fetch(targetUrl, reqParams))((err, res) => {
      if (err) return cb(err)
  
      // continue parsing result
      waterfall([
        checkForHttpErrors,
        // buffer body
        (cb) => promiseToCallback(res.text())(cb),
        // parse body
        asyncify((rawBody) => JSON.parse(rawBody)),
        parseResponse
      ], cb)
  
      function checkForHttpErrors (cb) {
        // check for errors
        switch (res.status) {
          case 405:
            return cb(new JsonRpcError.MethodNotFound())
  
          case 418:
            return cb(createRatelimitError())
  
          case 503:
          case 504:
            return cb(createTimeoutError())
  
          default:
            return cb()
        }
      }
  
      function parseResponse (body, cb) {
        // check for error code
        if (res.status !== 200) {
          return cb(new JsonRpcError.InternalError(body))
        }
        // check for rpc error
        if (body.error) return cb(new JsonRpcError.InternalError(body.error))
        // return successful result
        cb(null, body.result)
      }
    })
  }
  
  function isErrorRetriable(err){
    const errMsg = err.toString()
    return RETRIABLE_ERRORS.some(phrase => errMsg.includes(phrase))
  }
  
  function createRatelimitError () {
    let msg = `Request is being rate limited.`
    const err = new Error(msg)
    return new JsonRpcError.InternalError(err)
  }
  
  function createTimeoutError () {
    let msg = `Gateway timeout. The request took too long to process. `
    msg += `This can happen when querying logs over too wide a block range.`
    const err = new Error(msg)
    return new JsonRpcError.InternalError(err)
  }
  
  },{"../util/create-payload.js":391,"./subprovider.js":387,"async/asyncify":20,"async/retry":43,"async/waterfall":44,"cross-fetch":96,"json-rpc-error":189,"promise-to-callback":258,"util":333}],379:[function(require,module,exports){
  const async = require('async')
  const inherits = require('util').inherits
  const ethUtil = require('ethereumjs-util')
  const Subprovider = require('./subprovider.js')
  const Stoplight = require('../util/stoplight.js')
  const EventEmitter = require('events').EventEmitter
  
  module.exports = FilterSubprovider
  
  // handles the following RPC methods:
  //   eth_newBlockFilter
  //   eth_newPendingTransactionFilter
  //   eth_newFilter
  //   eth_getFilterChanges
  //   eth_uninstallFilter
  //   eth_getFilterLogs
  
  inherits(FilterSubprovider, Subprovider)
  
  function FilterSubprovider(opts) {
    opts = opts || {}
    const self = this
    self.filterIndex = 0
    self.filters = {}
    self.filterDestroyHandlers = {}
    self.asyncBlockHandlers = {}
    self.asyncPendingBlockHandlers = {}
    self._ready = new Stoplight()
    self._ready.setMaxListeners(opts.maxFilters || 25)
    self._ready.go()
    self.pendingBlockTimeout = opts.pendingBlockTimeout || 4000
    self.checkForPendingBlocksActive = false
  
    // we dont have engine immediately
    setTimeout(function(){
      // asyncBlockHandlers require locking provider until updates are completed
      self.engine.on('block', function(block){
        // pause processing
        self._ready.stop()
        // update filters
        var updaters = valuesFor(self.asyncBlockHandlers)
        .map(function(fn){ return fn.bind(null, block) })
        async.parallel(updaters, function(err){
          if (err) console.error(err)
          // unpause processing
          self._ready.go()
        })
      })
    })
  
  }
  
  FilterSubprovider.prototype.handleRequest = function(payload, next, end){
    const self = this
    switch(payload.method){
  
      case 'eth_newBlockFilter':
        self.newBlockFilter(end)
        return
  
      case 'eth_newPendingTransactionFilter':
        self.newPendingTransactionFilter(end)
        self.checkForPendingBlocks()
        return
  
      case 'eth_newFilter':
        self.newLogFilter(payload.params[0], end)
        return
  
      case 'eth_getFilterChanges':
        self._ready.await(function(){
          self.getFilterChanges(payload.params[0], end)
        })
        return
  
      case 'eth_getFilterLogs':
        self._ready.await(function(){
          self.getFilterLogs(payload.params[0], end)
        })
        return
  
      case 'eth_uninstallFilter':
        self._ready.await(function(){
          self.uninstallFilter(payload.params[0], end)
        })
        return
  
      default:
        next()
        return
    }
  }
  
  FilterSubprovider.prototype.newBlockFilter = function(cb) {
    const self = this
  
    self._getBlockNumber(function(err, blockNumber){
      if (err) return cb(err)
  
      var filter = new BlockFilter({
        blockNumber: blockNumber,
      })
  
      var newBlockHandler = filter.update.bind(filter)
      self.engine.on('block', newBlockHandler)
      var destroyHandler = function(){
        self.engine.removeListener('block', newBlockHandler)
      }
  
      self.filterIndex++
      self.filters[self.filterIndex] = filter
      self.filterDestroyHandlers[self.filterIndex] = destroyHandler
  
      var hexFilterIndex = intToHex(self.filterIndex)
      cb(null, hexFilterIndex)
    })
  }
  
  FilterSubprovider.prototype.newLogFilter = function(opts, cb) {
    const self = this
  
    self._getBlockNumber(function(err, blockNumber){
      if (err) return cb(err)
  
      var filter = new LogFilter(opts)
      var newLogHandler = filter.update.bind(filter)
      var blockHandler = function(block, cb){
        self._logsForBlock(block, function(err, logs){
          if (err) return cb(err)
          newLogHandler(logs)
          cb()
        })
      }
  
      self.filterIndex++
      self.asyncBlockHandlers[self.filterIndex] = blockHandler
      self.filters[self.filterIndex] = filter
  
      var hexFilterIndex = intToHex(self.filterIndex)
      cb(null, hexFilterIndex)
    })
  }
  
  FilterSubprovider.prototype.newPendingTransactionFilter = function(cb) {
    const self = this
  
    var filter = new PendingTransactionFilter()
    var newTxHandler = filter.update.bind(filter)
    var blockHandler = function(block, cb){
      self._txHashesForBlock(block, function(err, txs){
        if (err) return cb(err)
        newTxHandler(txs)
        cb()
      })
    }
  
    self.filterIndex++
    self.asyncPendingBlockHandlers[self.filterIndex] = blockHandler
    self.filters[self.filterIndex] = filter
  
    var hexFilterIndex = intToHex(self.filterIndex)
    cb(null, hexFilterIndex)
  }
  
  FilterSubprovider.prototype.getFilterChanges = function(hexFilterId, cb) {
    const self = this
  
    var filterId = Number.parseInt(hexFilterId, 16)
    var filter = self.filters[filterId]
    if (!filter) console.warn('FilterSubprovider - no filter with that id:', hexFilterId)
    if (!filter) return cb(null, [])
    var results = filter.getChanges()
    filter.clearChanges()
    cb(null, results)
  }
  
  FilterSubprovider.prototype.getFilterLogs = function(hexFilterId, cb) {
    const self = this
  
    var filterId = Number.parseInt(hexFilterId, 16)
    var filter = self.filters[filterId]
    if (!filter) console.warn('FilterSubprovider - no filter with that id:', hexFilterId)
    if (!filter) return cb(null, [])
    if (filter.type === 'log') {
      self.emitPayload({
        method: 'eth_getLogs',
        params: [{
          fromBlock: filter.fromBlock,
          toBlock: filter.toBlock,
          address: filter.address,
          topics: filter.topics,
        }],
      }, function(err, res){
        if (err) return cb(err)
        cb(null, res.result)
      })
    } else {
      var results = []
      cb(null, results)
    }
  }
  
  FilterSubprovider.prototype.uninstallFilter = function(hexFilterId, cb) {
    const self = this
  
    var filterId = Number.parseInt(hexFilterId, 16)
    var filter = self.filters[filterId]
    if (!filter) {
      cb(null, false)
      return
    }
  
    self.filters[filterId].removeAllListeners()
  
    var destroyHandler = self.filterDestroyHandlers[filterId]
    delete self.filters[filterId]
    delete self.asyncBlockHandlers[filterId]
    delete self.asyncPendingBlockHandlers[filterId]
    delete self.filterDestroyHandlers[filterId]
    if (destroyHandler) destroyHandler()
  
    cb(null, true)
  }
  
  // private
  
  // check for pending blocks
  FilterSubprovider.prototype.checkForPendingBlocks = function(){
    const self = this
    if (self.checkForPendingBlocksActive) return
    var activePendingTxFilters = !!Object.keys(self.asyncPendingBlockHandlers).length
    if (activePendingTxFilters) {
      self.checkForPendingBlocksActive = true
      self.emitPayload({
        method: 'eth_getBlockByNumber',
        params: ['pending', true],
      }, function(err, res){
        if (err) {
          self.checkForPendingBlocksActive = false
          console.error(err)
          return
        }
        self.onNewPendingBlock(res.result, function(err){
          if (err) console.error(err)
          self.checkForPendingBlocksActive = false
          setTimeout(self.checkForPendingBlocks.bind(self), self.pendingBlockTimeout)
        })
      })
    }
  }
  
  FilterSubprovider.prototype.onNewPendingBlock = function(block, cb){
    const self = this
    // update filters
    var updaters = valuesFor(self.asyncPendingBlockHandlers)
    .map(function(fn){ return fn.bind(null, block) })
    async.parallel(updaters, cb)
  }
  
  FilterSubprovider.prototype._getBlockNumber = function(cb) {
    const self = this
    var blockNumber = bufferToNumberHex(self.engine.currentBlock.number)
    cb(null, blockNumber)
  }
  
  FilterSubprovider.prototype._logsForBlock = function(block, cb) {
    const self = this
    var blockNumber = bufferToNumberHex(block.number)
    self.emitPayload({
      method: 'eth_getLogs',
      params: [{
        fromBlock: blockNumber,
        toBlock: blockNumber,
      }],
    }, function(err, response){
      if (err) return cb(err)
      if (response.error) return cb(response.error)
      cb(null, response.result)
    })
  
  }
  
  FilterSubprovider.prototype._txHashesForBlock = function(block, cb) {
    const self = this
    var txs = block.transactions
    // short circuit if empty
    if (txs.length === 0) return cb(null, [])
    // txs are already hashes
    if ('string' === typeof txs[0]) {
      cb(null, txs)
    // txs are obj, need to map to hashes
    } else {
      var results = txs.map((tx) => tx.hash)
      cb(null, results)
    }
  }
  
  //
  // BlockFilter
  //
  
  inherits(BlockFilter, EventEmitter)
  
  function BlockFilter(opts) {
    // console.log('BlockFilter - new')
    const self = this
    EventEmitter.apply(self)
    self.type = 'block'
    self.engine = opts.engine
    self.blockNumber = opts.blockNumber
    self.updates = []
  }
  
  BlockFilter.prototype.update = function(block){
    // console.log('BlockFilter - update')
    const self = this
    var blockHash = bufferToHex(block.hash)
    self.updates.push(blockHash)
    self.emit('data', block)
  }
  
  BlockFilter.prototype.getChanges = function(){
    const self = this
    var results = self.updates
    // console.log('BlockFilter - getChanges:', results.length)
    return results
  }
  
  BlockFilter.prototype.clearChanges = function(){
    // console.log('BlockFilter - clearChanges')
    const self = this
    self.updates = []
  }
  
  //
  // LogFilter
  //
  
  inherits(LogFilter, EventEmitter)
  
  function LogFilter(opts) {
    // console.log('LogFilter - new')
    const self = this
    EventEmitter.apply(self)
    self.type = 'log'
    self.fromBlock = (opts.fromBlock !== undefined) ? opts.fromBlock : 'latest'
    self.toBlock = (opts.toBlock !== undefined) ? opts.toBlock : 'latest'
    var expectedAddress = opts.address && (Array.isArray(opts.address) ? opts.address : [opts.address]);
    self.address = expectedAddress && expectedAddress.map(normalizeHex);
    self.topics = opts.topics || []
    self.updates = []
    self.allResults = []
  }
  
  LogFilter.prototype.validateLog = function(log){
    // console.log('LogFilter - validateLog:', log)
    const self = this
  
    // check if block number in bounds:
    // console.log('LogFilter - validateLog - blockNumber', self.fromBlock, self.toBlock)
    if (blockTagIsNumber(self.fromBlock) && hexToInt(self.fromBlock) >= hexToInt(log.blockNumber)) return false
    if (blockTagIsNumber(self.toBlock) && hexToInt(self.toBlock) <= hexToInt(log.blockNumber)) return false
  
    // address is correct:
    // console.log('LogFilter - validateLog - address', self.address)
    if (self.address && !(self.address.map((a) => a.toLowerCase()).includes(
      log.address.toLowerCase()))) return false
  
    // topics match:
    // topics are position-dependant
    // topics can be nested to represent `or` [[a || b], c]
    // topics can be null, representing a wild card for that position
    // console.log('LogFilter - validateLog - topics', log.topics)
    // console.log('LogFilter - validateLog - against topics', self.topics)
    var topicsMatch = self.topics.reduce(function(previousMatched, topicPattern, index){
      // abort in progress
      if (!previousMatched) return false
      // wild card
      if (!topicPattern) return true
      // pattern is longer than actual topics
      var logTopic = log.topics[index]
      if (!logTopic) return false
      // check each possible matching topic
      var subtopicsToMatch = Array.isArray(topicPattern) ? topicPattern : [topicPattern]
      var topicDoesMatch = subtopicsToMatch.filter(function(subTopic) {
        return logTopic.toLowerCase() === subTopic.toLowerCase()
      }).length > 0
      return topicDoesMatch
    }, true)
  
    // console.log('LogFilter - validateLog - '+(topicsMatch ? 'approved!' : 'denied!')+' ==============')
    return topicsMatch
  }
  
  LogFilter.prototype.update = function(logs){
    // console.log('LogFilter - update')
    const self = this
    // validate filter match
    var validLogs = []
    logs.forEach(function(log) {
      var validated = self.validateLog(log)
      if (!validated) return
      // add to results
      validLogs.push(log)
      self.updates.push(log)
      self.allResults.push(log)
    })
    if (validLogs.length > 0) {
      self.emit('data', validLogs)
    }
  }
  
  LogFilter.prototype.getChanges = function(){
    // console.log('LogFilter - getChanges')
    const self = this
    var results = self.updates
    return results
  }
  
  LogFilter.prototype.getAllResults = function(){
    // console.log('LogFilter - getAllResults')
    const self = this
    var results = self.allResults
    return results
  }
  
  LogFilter.prototype.clearChanges = function(){
    // console.log('LogFilter - clearChanges')
    const self = this
    self.updates = []
  }
  
  //
  // PendingTxFilter
  //
  
  inherits(PendingTransactionFilter, EventEmitter)
  
  function PendingTransactionFilter(){
    // console.log('PendingTransactionFilter - new')
    const self = this
    EventEmitter.apply(self)
    self.type = 'pendingTx'
    self.updates = []
    self.allResults = []
  }
  
  PendingTransactionFilter.prototype.validateUnique = function(tx){
    const self = this
    return self.allResults.indexOf(tx) === -1
  }
  
  PendingTransactionFilter.prototype.update = function(txs){
    // console.log('PendingTransactionFilter - update')
    const self = this
    var validTxs = []
    txs.forEach(function (tx) {
      // validate filter match
      var validated = self.validateUnique(tx)
      if (!validated) return
      // add to results
      validTxs.push(tx)
      self.updates.push(tx)
      self.allResults.push(tx)
    })
    if (validTxs.length > 0) {
      self.emit('data', validTxs)
    }
  }
  
  PendingTransactionFilter.prototype.getChanges = function(){
    // console.log('PendingTransactionFilter - getChanges')
    const self = this
    var results = self.updates
    return results
  }
  
  PendingTransactionFilter.prototype.getAllResults = function(){
    // console.log('PendingTransactionFilter - getAllResults')
    const self = this
    var results = self.allResults
    return results
  }
  
  PendingTransactionFilter.prototype.clearChanges = function(){
    // console.log('PendingTransactionFilter - clearChanges')
    const self = this
    self.updates = []
  }
  
  // util
  
  function normalizeHex(hexString) {
    return hexString.slice(0, 2) === '0x' ? hexString : '0x'+hexString
  }
  
  function intToHex(value) {
    return ethUtil.intToHex(value)
  }
  
  function hexToInt(hexString) {
    return Number(hexString)
  }
  
  function bufferToHex(buffer) {
    return '0x'+buffer.toString('hex')
  }
  
  function bufferToNumberHex(buffer) {
    return stripLeadingZero(buffer.toString('hex'))
  }
  
  function stripLeadingZero(hexNum) {
    let stripped = ethUtil.stripHexPrefix(hexNum)
    while (stripped[0] === '0') {
      stripped = stripped.substr(1)
    }
    return `0x${stripped}`
  }
  
  function blockTagIsNumber(blockTag){
    return blockTag && ['earliest', 'latest', 'pending'].indexOf(blockTag) === -1
  }
  
  function valuesFor(obj){
    return Object.keys(obj).map(function(key){ return obj[key] })
  }
  
  },{"../util/stoplight.js":396,"./subprovider.js":387,"async":21,"ethereumjs-util":141,"events":157,"util":333}],380:[function(require,module,exports){
  const inherits = require('util').inherits
  const Subprovider = require('./subprovider.js')
  
  module.exports = FixtureProvider
  
  inherits(FixtureProvider, Subprovider)
  
  function FixtureProvider(staticResponses){
    const self = this
    staticResponses = staticResponses || {}
    self.staticResponses = staticResponses
  }
  
  FixtureProvider.prototype.handleRequest = function(payload, next, end){
    const self = this
    var staticResponse = self.staticResponses[payload.method]
    // async function
    if ('function' === typeof staticResponse) {
      staticResponse(payload, next, end)
    // static response - null is valid response
    } else if (staticResponse !== undefined) {
      // return result asynchronously
      setTimeout(() => end(null, staticResponse))
    // no prepared response - skip
    } else {
      next()
    }
  }
  
  },{"./subprovider.js":387,"util":333}],381:[function(require,module,exports){
  /*
   * Emulate 'eth_accounts' / 'eth_sendTransaction' using 'eth_sendRawTransaction'
   *
   * The two callbacks a user needs to implement are:
   * - getAccounts() -- array of addresses supported
   * - signTransaction(tx) -- sign a raw transaction object
   */
  
  const waterfall = require('async/waterfall')
  const parallel = require('async/parallel')
  const inherits = require('util').inherits
  const ethUtil = require('ethereumjs-util')
  const sigUtil = require('eth-sig-util')
  const extend = require('xtend')
  const Semaphore = require('semaphore')
  const Subprovider = require('./subprovider.js')
  const estimateGas = require('../util/estimate-gas.js')
  const hexRegex = /^[0-9A-Fa-f]+$/g
  
  module.exports = HookedWalletSubprovider
  
  // handles the following RPC methods:
  //   eth_coinbase
  //   eth_accounts
  //   eth_sendTransaction
  //   eth_sign
  //   eth_signTypedData
  //   personal_sign
  //   personal_ecRecover
  //   parity_postTransaction
  //   parity_checkRequest
  //   parity_defaultAccount
  
  //
  // Tx Signature Flow
  //
  // handleRequest: eth_sendTransaction
  //   validateTransaction (basic validity check)
  //     validateSender (checks that sender is in accounts)
  //   processTransaction (sign tx and submit to network)
  //     approveTransaction (UI approval hook)
  //     checkApproval
  //     finalizeAndSubmitTx (tx signing)
  //       nonceLock.take (bottle neck to ensure atomic nonce)
  //         fillInTxExtras (set fallback gasPrice, nonce, etc)
  //         signTransaction (perform the signature)
  //         publishTransaction (publish signed tx to network)
  //
  
  
  inherits(HookedWalletSubprovider, Subprovider)
  
  function HookedWalletSubprovider(opts){
    const self = this
    // control flow
    self.nonceLock = Semaphore(1)
  
    // data lookup
    if (opts.getAccounts) self.getAccounts = opts.getAccounts
    // high level override
    if (opts.processTransaction) self.processTransaction = opts.processTransaction
    if (opts.processMessage) self.processMessage = opts.processMessage
    if (opts.processPersonalMessage) self.processPersonalMessage = opts.processPersonalMessage
    if (opts.processTypedMessage) self.processTypedMessage = opts.processTypedMessage
    // approval hooks
    self.approveTransaction = opts.approveTransaction || self.autoApprove
    self.approveMessage = opts.approveMessage || self.autoApprove
    self.approvePersonalMessage = opts.approvePersonalMessage || self.autoApprove
    self.approveTypedMessage = opts.approveTypedMessage || self.autoApprove
    // actually perform the signature
    if (opts.signTransaction) self.signTransaction = opts.signTransaction  || mustProvideInConstructor('signTransaction')
    if (opts.signMessage) self.signMessage = opts.signMessage  || mustProvideInConstructor('signMessage')
    if (opts.signPersonalMessage) self.signPersonalMessage = opts.signPersonalMessage  || mustProvideInConstructor('signPersonalMessage')
    if (opts.signTypedMessage) self.signTypedMessage = opts.signTypedMessage  || mustProvideInConstructor('signTypedMessage')
    if (opts.recoverPersonalSignature) self.recoverPersonalSignature = opts.recoverPersonalSignature
    // publish to network
    if (opts.publishTransaction) self.publishTransaction = opts.publishTransaction
  }
  
  HookedWalletSubprovider.prototype.handleRequest = function(payload, next, end){
    const self = this
    self._parityRequests = {}
    self._parityRequestCount = 0
  
    // switch statement is not block scoped
    // sp we cant repeat var declarations
    let txParams, msgParams, extraParams
    let message, address
  
    switch(payload.method) {
  
      case 'eth_coinbase':
        // process normally
        self.getAccounts(function(err, accounts){
          if (err) return end(err)
          let result = accounts[0] || null
          end(null, result)
        })
        return
  
      case 'eth_accounts':
        // process normally
        self.getAccounts(function(err, accounts){
          if (err) return end(err)
          end(null, accounts)
        })
        return
  
      case 'eth_sendTransaction':
        txParams = payload.params[0]
        waterfall([
          (cb) => self.validateTransaction(txParams, cb),
          (cb) => self.processTransaction(txParams, cb),
        ], end)
        return
  
      case 'eth_signTransaction':
        txParams = payload.params[0]
        waterfall([
          (cb) => self.validateTransaction(txParams, cb),
          (cb) => self.processSignTransaction(txParams, cb),
        ], end)
        return
  
      case 'eth_sign':
        // process normally
        address = payload.params[0]
        message = payload.params[1]
        // non-standard "extraParams" to be appended to our "msgParams" obj
        // good place for metadata
        extraParams = payload.params[2] || {}
        msgParams = extend(extraParams, {
          from: address,
          data: message,
        })
        waterfall([
          (cb) => self.validateMessage(msgParams, cb),
          (cb) => self.processMessage(msgParams, cb),
        ], end)
        return
  
      case 'personal_sign':
        // process normally
        const first = payload.params[0]
        const second = payload.params[1]
  
        // We initially incorrectly ordered these parameters.
        // To gracefully respect users who adopted this API early,
        // we are currently gracefully recovering from the wrong param order
        // when it is clearly identifiable.
        //
        // That means when the first param is definitely an address,
        // and the second param is definitely not, but is hex.
        if (resemblesData(second) && resemblesAddress(first)) {
          let warning = `The eth_personalSign method requires params ordered `
          warning += `[message, address]. This was previously handled incorrectly, `
          warning += `and has been corrected automatically. `
          warning += `Please switch this param order for smooth behavior in the future.`
          console.warn(warning)
  
          address = payload.params[0]
          message = payload.params[1]
        } else {
          message = payload.params[0]
          address = payload.params[1]
        }
  
        // non-standard "extraParams" to be appended to our "msgParams" obj
        // good place for metadata
        extraParams = payload.params[2] || {}
        msgParams = extend(extraParams, {
          from: address,
          data: message,
        })
        waterfall([
          (cb) => self.validatePersonalMessage(msgParams, cb),
          (cb) => self.processPersonalMessage(msgParams, cb),
        ], end)
        return
  
      case 'personal_ecRecover':
        message = payload.params[0]
        let signature = payload.params[1]
        // non-standard "extraParams" to be appended to our "msgParams" obj
        // good place for metadata
        extraParams = payload.params[2] || {}
        msgParams = extend(extraParams, {
          sig: signature,
          data: message,
        })
        self.recoverPersonalSignature(msgParams, end)
        return
  
      case 'eth_signTypedData':
        // process normally
        message = payload.params[0]
        address = payload.params[1]
        extraParams = payload.params[2] || {}
        msgParams = extend(extraParams, {
          from: address,
          data: message,
        })
        waterfall([
          (cb) => self.validateTypedMessage(msgParams, cb),
          (cb) => self.processTypedMessage(msgParams, cb),
        ], end)
        return
  
      case 'parity_postTransaction':
        txParams = payload.params[0]
        self.parityPostTransaction(txParams, end)
        return
  
      case 'parity_postSign':
        address = payload.params[0]
        message = payload.params[1]
        self.parityPostSign(address, message, end)
        return
  
      case 'parity_checkRequest':
        const requestId = payload.params[0]
        self.parityCheckRequest(requestId, end)
        return
  
      case 'parity_defaultAccount':
        self.getAccounts(function(err, accounts){
          if (err) return end(err)
          const account = accounts[0] || null
          end(null, account)
        })
        return
  
      default:
        next()
        return
  
    }
  }
  
  //
  // data lookup
  //
  
  HookedWalletSubprovider.prototype.getAccounts = function(cb) {
    cb(null, [])
  }
  
  
  //
  // "process" high level flow
  //
  
  HookedWalletSubprovider.prototype.processTransaction = function(txParams, cb) {
    const self = this
    waterfall([
      (cb) => self.approveTransaction(txParams, cb),
      (didApprove, cb) => self.checkApproval('transaction', didApprove, cb),
      (cb) => self.finalizeAndSubmitTx(txParams, cb),
    ], cb)
  }
  
  
  HookedWalletSubprovider.prototype.processSignTransaction = function(txParams, cb) {
    const self = this
    waterfall([
      (cb) => self.approveTransaction(txParams, cb),
      (didApprove, cb) => self.checkApproval('transaction', didApprove, cb),
      (cb) => self.finalizeTx(txParams, cb),
    ], cb)
  }
  
  HookedWalletSubprovider.prototype.processMessage = function(msgParams, cb) {
    const self = this
    waterfall([
      (cb) => self.approveMessage(msgParams, cb),
      (didApprove, cb) => self.checkApproval('message', didApprove, cb),
      (cb) => self.signMessage(msgParams, cb),
    ], cb)
  }
  
  HookedWalletSubprovider.prototype.processPersonalMessage = function(msgParams, cb) {
    const self = this
    waterfall([
      (cb) => self.approvePersonalMessage(msgParams, cb),
      (didApprove, cb) => self.checkApproval('message', didApprove, cb),
      (cb) => self.signPersonalMessage(msgParams, cb),
    ], cb)
  }
  
  HookedWalletSubprovider.prototype.processTypedMessage = function(msgParams, cb) {
    const self = this
    waterfall([
      (cb) => self.approveTypedMessage(msgParams, cb),
      (didApprove, cb) => self.checkApproval('message', didApprove, cb),
      (cb) => self.signTypedMessage(msgParams, cb),
    ], cb)
  }
  
  //
  // approval
  //
  
  HookedWalletSubprovider.prototype.autoApprove = function(txParams, cb) {
    cb(null, true)
  }
  
  HookedWalletSubprovider.prototype.checkApproval = function(type, didApprove, cb) {
    cb( didApprove ? null : new Error('User denied '+type+' signature.') )
  }
  
  //
  // parity
  //
  
  HookedWalletSubprovider.prototype.parityPostTransaction = function(txParams, cb) {
    const self = this
  
    // get next id
    const count = self._parityRequestCount
    const reqId = `0x${count.toString(16)}`
    self._parityRequestCount++
  
    self.emitPayload({
      method: 'eth_sendTransaction',
      params: [txParams],
    }, function(error, res){
      if (error) {
        self._parityRequests[reqId] = { error }
        return
      }
      const txHash = res.result
      self._parityRequests[reqId] = txHash
    })
  
    cb(null, reqId)
  }
  
  
  HookedWalletSubprovider.prototype.parityPostSign = function(address, message, cb) {
    const self = this
  
    // get next id
    const count = self._parityRequestCount
    const reqId = `0x${count.toString(16)}`
    self._parityRequestCount++
  
    self.emitPayload({
      method: 'eth_sign',
      params: [address, message],
    }, function(error, res){
      if (error) {
        self._parityRequests[reqId] = { error }
        return
      }
      const result = res.result
      self._parityRequests[reqId] = result
    })
  
    cb(null, reqId)
  }
  
  HookedWalletSubprovider.prototype.parityCheckRequest = function(reqId, cb) {
    const self = this
    const result = self._parityRequests[reqId] || null
    // tx not handled yet
    if (!result) return cb(null, null)
    // tx was rejected (or other error)
    if (result.error) return cb(result.error)
    // tx sent
    cb(null, result)
  }
  
  //
  // signature and recovery
  //
  
  HookedWalletSubprovider.prototype.recoverPersonalSignature = function(msgParams, cb) {
    let senderHex
    try {
      senderHex = sigUtil.recoverPersonalSignature(msgParams)
    } catch (err) {
      return cb(err)
    }
    cb(null, senderHex)
  }
  
  //
  // validation
  //
  
  HookedWalletSubprovider.prototype.validateTransaction = function(txParams, cb){
    const self = this
    // shortcut: undefined sender is invalid
    if (txParams.from === undefined) return cb(new Error(`Undefined address - from address required to sign transaction.`))
    self.validateSender(txParams.from, function(err, senderIsValid){
      if (err) return cb(err)
      if (!senderIsValid) return cb(new Error(`Unknown address - unable to sign transaction for this address: "${txParams.from}"`))
      cb()
    })
  }
  
  HookedWalletSubprovider.prototype.validateMessage = function(msgParams, cb){
    const self = this
    if (msgParams.from === undefined) return cb(new Error(`Undefined address - from address required to sign message.`))
    self.validateSender(msgParams.from, function(err, senderIsValid){
      if (err) return cb(err)
      if (!senderIsValid) return cb(new Error(`Unknown address - unable to sign message for this address: "${msgParams.from}"`))
      cb()
    })
  }
  
  HookedWalletSubprovider.prototype.validatePersonalMessage = function(msgParams, cb){
    const self = this
    if (msgParams.from === undefined) return cb(new Error(`Undefined address - from address required to sign personal message.`))
    if (msgParams.data === undefined) return cb(new Error(`Undefined message - message required to sign personal message.`))
    if (!isValidHex(msgParams.data)) return cb(new Error(`HookedWalletSubprovider - validateMessage - message was not encoded as hex.`))
    self.validateSender(msgParams.from, function(err, senderIsValid){
      if (err) return cb(err)
      if (!senderIsValid) return cb(new Error(`Unknown address - unable to sign message for this address: "${msgParams.from}"`))
      cb()
    })
  }
  
  HookedWalletSubprovider.prototype.validateTypedMessage = function(msgParams, cb){
    if (msgParams.from === undefined) return cb(new Error(`Undefined address - from address required to sign typed data.`))
    if (msgParams.data === undefined) return cb(new Error(`Undefined data - message required to sign typed data.`))
    this.validateSender(msgParams.from, function(err, senderIsValid){
      if (err) return cb(err)
      if (!senderIsValid) return cb(new Error(`Unknown address - unable to sign message for this address: "${msgParams.from}"`))
      cb()
    })
  }
  
  HookedWalletSubprovider.prototype.validateSender = function(senderAddress, cb){
    const self = this
    // shortcut: undefined sender is invalid
    if (!senderAddress) return cb(null, false)
    self.getAccounts(function(err, accounts){
      if (err) return cb(err)
      const senderIsValid = (accounts.map(toLowerCase).indexOf(senderAddress.toLowerCase()) !== -1)
      cb(null, senderIsValid)
    })
  }
  
  //
  // tx helpers
  //
  
  HookedWalletSubprovider.prototype.finalizeAndSubmitTx = function(txParams, cb) {
    const self = this
    // can only allow one tx to pass through this flow at a time
    // so we can atomically consume a nonce
    self.nonceLock.take(function(){
      waterfall([
        self.fillInTxExtras.bind(self, txParams),
        self.signTransaction.bind(self),
        self.publishTransaction.bind(self),
      ], function(err, txHash){
        self.nonceLock.leave()
        if (err) return cb(err)
        cb(null, txHash)
      })
    })
  }
  
  HookedWalletSubprovider.prototype.finalizeTx = function(txParams, cb) {
    const self = this
    // can only allow one tx to pass through this flow at a time
    // so we can atomically consume a nonce
    self.nonceLock.take(function(){
      waterfall([
        self.fillInTxExtras.bind(self, txParams),
        self.signTransaction.bind(self),
      ], function(err, signedTx){
        self.nonceLock.leave()
        if (err) return cb(err)
        cb(null, {raw: signedTx, tx: txParams})
      })
    })
  }
  
  HookedWalletSubprovider.prototype.publishTransaction = function(rawTx, cb) {
    const self = this
    self.emitPayload({
      method: 'eth_sendRawTransaction',
      params: [rawTx],
    }, function(err, res){
      if (err) return cb(err)
      cb(null, res.result)
    })
  }
  
  HookedWalletSubprovider.prototype.fillInTxExtras = function(txParams, cb){
    const self = this
    const address = txParams.from
    // console.log('fillInTxExtras - address:', address)
  
    const reqs = {}
  
    if (txParams.gasPrice === undefined) {
      // console.log("need to get gasprice")
      reqs.gasPrice = self.emitPayload.bind(self, { method: 'eth_gasPrice', params: [] })
    }
  
    if (txParams.nonce === undefined) {
      // console.log("need to get nonce")
      reqs.nonce = self.emitPayload.bind(self, { method: 'eth_getTransactionCount', params: [address, 'pending'] })
    }
  
    if (txParams.gas === undefined) {
      // console.log("need to get gas")
      reqs.gas = estimateGas.bind(null, self.engine, cloneTxParams(txParams))
    }
  
    parallel(reqs, function(err, result) {
      if (err) return cb(err)
      // console.log('fillInTxExtras - result:', result)
  
      const res = {}
      if (result.gasPrice) res.gasPrice = result.gasPrice.result
      if (result.nonce) res.nonce = result.nonce.result
      if (result.gas) res.gas = result.gas
  
      cb(null, extend(txParams, res))
    })
  }
  
  // util
  
  // we use this to clean any custom params from the txParams
  function cloneTxParams(txParams){
    return {
      from: txParams.from,
      to: txParams.to,
      value: txParams.value,
      data: txParams.data,
      gas: txParams.gas,
      gasPrice: txParams.gasPrice,
      nonce: txParams.nonce,
    }
  }
  
  function toLowerCase(string){
    return string.toLowerCase()
  }
  
  function resemblesAddress (string) {
    const fixed = ethUtil.addHexPrefix(string)
    const isValid = ethUtil.isValidAddress(fixed)
    return isValid
  }
  
  // Returns true if resembles hex data
  // but definitely not a valid address.
  function resemblesData (string) {
    const fixed = ethUtil.addHexPrefix(string)
    const isValidAddress = ethUtil.isValidAddress(fixed)
    return !isValidAddress && isValidHex(string)
  }
  
  function isValidHex(data) {
    const isString = typeof data === 'string'
    if (!isString) return false
    const isHexPrefixed = data.slice(0,2) === '0x'
    if (!isHexPrefixed) return false
    const nonPrefixed = data.slice(2)
    const isValid = nonPrefixed.match(hexRegex)
    return isValid
  }
  
  function mustProvideInConstructor(methodName) {
    return function(params, cb) {
      cb(new Error('ProviderEngine - HookedWalletSubprovider - Must provide "' + methodName + '" fn in constructor options'))
    }
  }
  
  },{"../util/estimate-gas.js":392,"./subprovider.js":387,"async/parallel":42,"async/waterfall":44,"eth-sig-util":136,"ethereumjs-util":141,"semaphore":301,"util":333,"xtend":423}],382:[function(require,module,exports){
  const cacheIdentifierForPayload = require('../util/rpc-cache-utils.js').cacheIdentifierForPayload
  const Subprovider = require('./subprovider.js')
  
  
  class InflightCacheSubprovider extends Subprovider {
  
    constructor (opts) {
      super()
      this.inflightRequests = {}
    }
  
    addEngine (engine) {
      this.engine = engine
    }
  
    handleRequest (req, next, end) {
      const cacheId = cacheIdentifierForPayload(req, { includeBlockRef: true })
  
      // if not cacheable, skip
      if (!cacheId) return next()
  
      // check for matching requests
      let activeRequestHandlers = this.inflightRequests[cacheId]
  
      if (!activeRequestHandlers) {
        // create inflight cache for cacheId
        activeRequestHandlers = []
        this.inflightRequests[cacheId] = activeRequestHandlers
  
        next((err, result, cb) => {
          // complete inflight for cacheId
          delete this.inflightRequests[cacheId]
          activeRequestHandlers.forEach((handler) => handler(err, result))
          cb(err, result)
        })
  
      } else {
        // hit inflight cache for cacheId
        // setup the response listener
        activeRequestHandlers.push(end)
      }
  
    }
  }
  
  module.exports = InflightCacheSubprovider
  
  
  },{"../util/rpc-cache-utils.js":394,"./subprovider.js":387}],383:[function(require,module,exports){
  const createInfuraProvider = require('eth-json-rpc-infura/src/createProvider')
  const ProviderSubprovider = require('./provider.js')
  
  class InfuraSubprovider extends ProviderSubprovider {
    constructor(opts = {}) {
      const provider = createInfuraProvider(opts)
      super(provider)
    }
  }
  
  module.exports = InfuraSubprovider
  
  },{"./provider.js":385,"eth-json-rpc-infura/src/createProvider":129}],384:[function(require,module,exports){
  (function (Buffer){
  const inherits = require('util').inherits
  const Transaction = require('ethereumjs-tx')
  const ethUtil = require('ethereumjs-util')
  const Subprovider = require('./subprovider.js')
  const blockTagForPayload = require('../util/rpc-cache-utils').blockTagForPayload
  
  module.exports = NonceTrackerSubprovider
  
  // handles the following RPC methods:
  //   eth_getTransactionCount (pending only)
  // observes the following RPC methods:
  //   eth_sendRawTransaction
  
  
  inherits(NonceTrackerSubprovider, Subprovider)
  
  function NonceTrackerSubprovider(opts){
    const self = this
  
    self.nonceCache = {}
  }
  
  NonceTrackerSubprovider.prototype.handleRequest = function(payload, next, end){
    const self = this
  
    switch(payload.method) {
  
      case 'eth_getTransactionCount':
        var blockTag = blockTagForPayload(payload)
        var address = payload.params[0].toLowerCase()
        var cachedResult = self.nonceCache[address]
        // only handle requests against the 'pending' blockTag
        if (blockTag === 'pending') {
          // has a result
          if (cachedResult) {
            end(null, cachedResult)
          // fallthrough then populate cache
          } else {
            next(function(err, result, cb){
              if (err) return cb()
              if (self.nonceCache[address] === undefined) {
                self.nonceCache[address] = result
              }
              cb()
            })
          }
        } else {
          next()
        }
        return
  
      case 'eth_sendRawTransaction':
        // allow the request to continue normally
        next(function(err, result, cb){
          // only update local nonce if tx was submitted correctly
          if (err) return cb()
          // parse raw tx
          var rawTx = payload.params[0]
          var stripped = ethUtil.stripHexPrefix(rawTx)
          var rawData = new Buffer(ethUtil.stripHexPrefix(rawTx), 'hex')
          var tx = new Transaction(new Buffer(ethUtil.stripHexPrefix(rawTx), 'hex'))
          // extract address
          var address = '0x'+tx.getSenderAddress().toString('hex').toLowerCase()
          // extract nonce and increment
          var nonce = ethUtil.bufferToInt(tx.nonce)
          nonce++
          // hexify and normalize
          var hexNonce = nonce.toString(16)
          if (hexNonce.length%2) hexNonce = '0'+hexNonce
          hexNonce = '0x'+hexNonce
          // dont update our record on the nonce until the submit was successful
          // update cache
          self.nonceCache[address] = hexNonce
          cb()
        })
        return
  
      default:
        next()
        return
  
    }
  }
  }).call(this,require("buffer").Buffer)
  },{"../util/rpc-cache-utils":394,"./subprovider.js":387,"buffer":84,"ethereumjs-tx":140,"ethereumjs-util":141,"util":333}],385:[function(require,module,exports){
  const inherits = require('util').inherits
  const Subprovider = require('./subprovider.js')
  
  // wraps a provider in a subprovider interface
  
  module.exports = ProviderSubprovider
  
  inherits(ProviderSubprovider, Subprovider)
  
  function ProviderSubprovider(provider){
    if (!provider) throw new Error('ProviderSubprovider - no provider specified')
    if (!provider.sendAsync) throw new Error('ProviderSubprovider - specified provider does not have a sendAsync method')
    this.provider = provider
  }
  
  ProviderSubprovider.prototype.handleRequest = function(payload, next, end){
    this.provider.sendAsync(payload, function(err, response) {
      if (err) return end(err)
      if (response.error) return end(new Error(response.error.message))
      end(null, response.result)
    })
  }
  
  },{"./subprovider.js":387,"util":333}],386:[function(require,module,exports){
  /* Sanitization Subprovider
   * For Parity compatibility
   * removes irregular keys
   */
  
  const inherits = require('util').inherits
  const Subprovider = require('./subprovider.js')
  const extend = require('xtend')
  const ethUtil = require('ethereumjs-util')
  
  module.exports = SanitizerSubprovider
  
  inherits(SanitizerSubprovider, Subprovider)
  
  function SanitizerSubprovider(opts){
    const self = this
  }
  
  SanitizerSubprovider.prototype.handleRequest = function(payload, next, end){
    var txParams = payload.params[0]
  
    if (typeof txParams === 'object' && !Array.isArray(txParams)) {
      var sanitized = cloneTxParams(txParams)
      payload.params[0] = sanitized
    }
  
    next()
  }
  
  // we use this to clean any custom params from the txParams
  var permitted = [
    'from',
    'to',
    'value',
    'data',
    'gas',
    'gasPrice',
    'nonce',
    'fromBlock',
    'toBlock',
    'address',
    'topics',
  ]
  
  function cloneTxParams(txParams){
    var sanitized  =  permitted.reduce(function(copy, permitted) {
      if (permitted in txParams) {
        if (Array.isArray(txParams[permitted])) {
          copy[permitted] = txParams[permitted]
          .map(function(item) {
            return sanitize(item)
          })
        } else {
          copy[permitted] = sanitize(txParams[permitted])
        }
      }
      return copy
    }, {})
  
    return sanitized
  }
  
  function sanitize(value) {
    switch (value) {
      case 'latest':
        return value
      case 'pending':
        return value
      case 'earliest':
        return value
      default:
        if (typeof value === 'string') {
          return ethUtil.addHexPrefix(value.toLowerCase())
        } else {
          return value
        }
    }
  }
  
  },{"./subprovider.js":387,"ethereumjs-util":141,"util":333,"xtend":423}],387:[function(require,module,exports){
  const createPayload = require('../util/create-payload.js')
  
  module.exports = SubProvider
  
  // this is the base class for a subprovider -- mostly helpers
  
  
  function SubProvider() {
  
  }
  
  SubProvider.prototype.setEngine = function(engine) {
    const self = this
    self.engine = engine
    engine.on('block', function(block) {
      self.currentBlock = block
    })
  }
  
  SubProvider.prototype.handleRequest = function(payload, next, end) {
    throw new Error('Subproviders should override `handleRequest`.')
  }
  
  SubProvider.prototype.emitPayload = function(payload, cb){
    const self = this
    self.engine.sendAsync(createPayload(payload), cb)
  }
  },{"../util/create-payload.js":391}],388:[function(require,module,exports){
  const EventEmitter = require('events').EventEmitter
  const FilterSubprovider = require('./filters.js')
  const from = require('../util/rpc-hex-encoding.js')
  const inherits = require('util').inherits
  const utils = require('ethereumjs-util')
  
  function SubscriptionSubprovider(opts) {
    const self = this
  
    opts = opts || {}
  
    EventEmitter.apply(this, Array.prototype.slice.call(arguments))
    FilterSubprovider.apply(this, [opts])
  
    this.subscriptions = {}
  }
  
  inherits(SubscriptionSubprovider, FilterSubprovider)
  
  // a cheap crack at multiple inheritance
  // I don't really care if `instanceof EventEmitter` passes...
  Object.assign(SubscriptionSubprovider.prototype, EventEmitter.prototype)
  
  // preserve our constructor, though
  SubscriptionSubprovider.prototype.constructor = SubscriptionSubprovider
  
  SubscriptionSubprovider.prototype.eth_subscribe = function(payload, cb) {
    const self = this
    let createSubscriptionFilter = () => {}
    let subscriptionType = payload.params[0]
  
    switch (subscriptionType) {
      case 'logs':
        let options = payload.params[1]
  
        createSubscriptionFilter = self.newLogFilter.bind(self, options)
        break
      case 'newPendingTransactions':
        createSubscriptionFilter = self.newPendingTransactionFilter.bind(self)
        break
      case 'newHeads':
        createSubscriptionFilter = self.newBlockFilter.bind(self)
        break
      case 'syncing':
      default:
        cb(new Error('unsupported subscription type'))
        return
    }
  
    createSubscriptionFilter(function(err, hexId) {
      if (err) return cb(err)
  
      const id = Number.parseInt(hexId, 16)
      self.subscriptions[id] = subscriptionType
  
      self.filters[id].on('data', function(results) {
        if (!Array.isArray(results)) {
          results = [results]
        }
  
        var notificationHandler = self._notificationHandler.bind(self, hexId, subscriptionType)
        results.forEach(notificationHandler)
        self.filters[id].clearChanges()
      })
      if (subscriptionType === 'newPendingTransactions') {
        self.checkForPendingBlocks()
      }
      cb(null, hexId)
    })
  }
  
  SubscriptionSubprovider.prototype.eth_unsubscribe = function(payload, cb) {
    const self = this
    let hexId = payload.params[0]
    const id = Number.parseInt(hexId, 16)
    if (!self.subscriptions[id]) {
      cb(new Error(`Subscription ID ${hexId} not found.`))
    } else {
      let subscriptionType = self.subscriptions[id]
      self.uninstallFilter(hexId, function (err, result) {
        delete self.subscriptions[id]
        cb(err, result)
      })
    }
  }
  
  
  SubscriptionSubprovider.prototype._notificationHandler = function (hexId, subscriptionType, result) {
    const self = this
    if (subscriptionType === 'newHeads') {
      result = self._notificationResultFromBlock(result)
    }
  
    // it seems that web3 doesn't expect there to be a separate error event
    // so we must emit null along with the result object
    self.emit('data', null, {
      jsonrpc: "2.0",
      method: "eth_subscription",
      params: {
        subscription: hexId,
        result: result,
      },
    })
  }
  
  SubscriptionSubprovider.prototype._notificationResultFromBlock = function(block) {
    return {
      hash: utils.bufferToHex(block.hash),
      parentHash: utils.bufferToHex(block.parentHash),
      sha3Uncles: utils.bufferToHex(block.sha3Uncles),
      miner: utils.bufferToHex(block.miner),
      stateRoot: utils.bufferToHex(block.stateRoot),
      transactionsRoot: utils.bufferToHex(block.transactionsRoot),
      receiptsRoot: utils.bufferToHex(block.receiptsRoot),
      logsBloom: utils.bufferToHex(block.logsBloom),
      difficulty: from.intToQuantityHex(utils.bufferToInt(block.difficulty)),
      number: from.intToQuantityHex(utils.bufferToInt(block.number)),
      gasLimit: from.intToQuantityHex(utils.bufferToInt(block.gasLimit)),
      gasUsed: from.intToQuantityHex(utils.bufferToInt(block.gasUsed)),
      nonce: block.nonce ? utils.bufferToHex(block.nonce): null,
      mixHash: utils.bufferToHex(block.mixHash),
      timestamp: from.intToQuantityHex(utils.bufferToInt(block.timestamp)),
      extraData: utils.bufferToHex(block.extraData)
    }
  }
  
  SubscriptionSubprovider.prototype.handleRequest = function(payload, next, end) {
    switch(payload.method){
      case 'eth_subscribe':
        this.eth_subscribe(payload, end)
        break
      case 'eth_unsubscribe':
        this.eth_unsubscribe(payload, end)
        break
      default:
        FilterSubprovider.prototype.handleRequest.apply(this, Array.prototype.slice.call(arguments))
    }
  }
  
  module.exports = SubscriptionSubprovider
  
  },{"../util/rpc-hex-encoding.js":395,"./filters.js":379,"ethereumjs-util":141,"events":157,"util":333}],389:[function(require,module,exports){
  (function (global){
  const Backoff = require('backoff')
  const EventEmitter = require('events')
  const inherits = require('util').inherits
  const WebSocket = global.WebSocket || require('ws')
  const Subprovider = require('./subprovider')
  const createPayload = require('../util/create-payload')
  
  class WebsocketSubprovider
   extends Subprovider {
    constructor({ rpcUrl, debug, origin }) {
      super()
  
      // inherit from EventEmitter
      EventEmitter.call(this)
  
      Object.defineProperties(this, {
        _backoff: {
          value: Backoff.exponential({
            randomisationFactor: 0.2,
            maxDelay: 5000
          })
        },
        _connectTime: {
          value: null,
          writable: true
        },
        _log: {
          value: debug
            ? (...args) => console.info.apply(console, ['[WSProvider]', ...args])
            : () => { }
        },
        _origin: {
          value: origin
        },
        _pendingRequests: {
          value: new Map()
        },
        _socket: {
          value: null,
          writable: true
        },
        _unhandledRequests: {
          value: []
        },
        _url: {
          value: rpcUrl
        }
      })
  
      this._handleSocketClose = this._handleSocketClose.bind(this)
      this._handleSocketMessage = this._handleSocketMessage.bind(this)
      this._handleSocketOpen = this._handleSocketOpen.bind(this)
  
      // Called when a backoff timeout has finished. Time to try reconnecting.
      this._backoff.on('ready', () => {
        this._openSocket()
      })
  
      this._openSocket()
    }
  
    handleRequest(payload, next, end) {
      if (!this._socket || this._socket.readyState !== WebSocket.OPEN) {
        this._unhandledRequests.push(Array.from(arguments))
        this._log('Socket not open. Request queued.')
        return
      }
  
      this._pendingRequests.set(payload.id, [payload, end])
  
      const newPayload = createPayload(payload)
      delete newPayload.origin
  
      this._socket.send(JSON.stringify(newPayload))
      this._log(`Sent: ${newPayload.method} #${newPayload.id}`)
    }
  
    _handleSocketClose({ reason, code }) {
      this._log(`Socket closed, code ${code} (${reason || 'no reason'})`)
      // If the socket has been open for longer than 5 seconds, reset the backoff
      if (this._connectTime && Date.now() - this._connectTime > 5000) {
        this._backoff.reset()
      }
  
      this._socket.removeEventListener('close', this._handleSocketClose)
      this._socket.removeEventListener('message', this._handleSocketMessage)
      this._socket.removeEventListener('open', this._handleSocketOpen)
  
      this._socket = null
      this._backoff.backoff()
    }
  
    _handleSocketMessage(message) {
      let payload
  
      try {
        payload = JSON.parse(message.data)
      } catch (e) {
        this._log('Received a message that is not valid JSON:', payload)
        return
      }
  
      // check if server-sent notification
      if (payload.id === undefined) {
        return this.emit('data', null, payload)
      }
  
      // ignore if missing
      if (!this._pendingRequests.has(payload.id)) {
        return
      }
  
      // retrieve payload + arguments
      const [originalReq, end] = this._pendingRequests.get(payload.id)
      this._pendingRequests.delete(payload.id)
  
      this._log(`Received: ${originalReq.method} #${payload.id}`)
  
      // forward response
      if (payload.error) {
        return end(new Error(payload.error.message))
      }
      end(null, payload.result)
    }
  
    _handleSocketOpen() {
      this._log('Socket open.')
      this._connectTime = Date.now()
  
      // Any pending requests need to be resent because our session was lost
      // and will not get responses for them in our new session.
      this._pendingRequests.forEach(([payload, end]) => {
        this._unhandledRequests.push([payload, null, end])
      })
      this._pendingRequests.clear()
  
      const unhandledRequests = this._unhandledRequests.splice(0, this._unhandledRequests.length)
      unhandledRequests.forEach(request => {
        this.handleRequest.apply(this, request)
      })
    }
  
    _openSocket() {
      this._log('Opening socket...')
      this._socket = new WebSocket(this._url, null, {origin: this._origin})
      this._socket.addEventListener('close', this._handleSocketClose)
      this._socket.addEventListener('message', this._handleSocketMessage)
      this._socket.addEventListener('open', this._handleSocketOpen)
    }
  }
  
  // multiple inheritance
  Object.assign(WebsocketSubprovider.prototype, EventEmitter.prototype)
  
  module.exports = WebsocketSubprovider
  
  }).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
  },{"../util/create-payload":391,"./subprovider":387,"backoff":45,"events":157,"util":333,"ws":55}],390:[function(require,module,exports){
  module.exports = assert
  
  function assert(condition, message) {
      if (!condition) {
          throw message || "Assertion failed";
      }
  }
  
  },{}],391:[function(require,module,exports){
  const getRandomId = require('./random-id.js')
  const extend = require('xtend')
  
  module.exports = createPayload
  
  
  function createPayload(data){
    return extend({
      // defaults
      id: getRandomId(),
      jsonrpc: '2.0',
      params: [],
      // user-specified
    }, data)
  }
  
  },{"./random-id.js":393,"xtend":423}],392:[function(require,module,exports){
  const createPayload = require('./create-payload.js')
  
  module.exports = estimateGas
  
  /*
  
  This is a work around for https://github.com/ethereum/go-ethereum/issues/2577
  
  */
  
  
  function estimateGas(provider, txParams, cb) {
    provider.sendAsync(createPayload({
      method: 'eth_estimateGas',
      params: [txParams]
    }), function(err, res){
      if (err) {
        // handle simple value transfer case
        if (err.message === 'no contract code at given address') {
          return cb(null, '0xcf08')
        } else {
          return cb(err)        
        }
      }
      cb(null, res.result)
    })
  }
  },{"./create-payload.js":391}],393:[function(require,module,exports){
  // gotta keep it within MAX_SAFE_INTEGER
  const extraDigits = 3
  
  module.exports = createRandomId
  
  
  function createRandomId(){
    // 13 time digits
    var datePart = new Date().getTime()*Math.pow(10, extraDigits)
    // 3 random digits
    var extraPart = Math.floor(Math.random()*Math.pow(10, extraDigits))
    // 16 digits
    return datePart+extraPart
  }
  },{}],394:[function(require,module,exports){
  const stringify = require('json-stable-stringify')
  
  module.exports = {
    cacheIdentifierForPayload: cacheIdentifierForPayload,
    canCache: canCache,
    blockTagForPayload: blockTagForPayload,
    paramsWithoutBlockTag: paramsWithoutBlockTag,
    blockTagParamIndex: blockTagParamIndex,
    cacheTypeForPayload: cacheTypeForPayload,
  }
  
  function cacheIdentifierForPayload(payload, opts = {}){
    if (!canCache(payload)) return null
    const { includeBlockRef } = opts
    const params = includeBlockRef ? payload.params : paramsWithoutBlockTag(payload)
    return payload.method + ':' + stringify(params)
  }
  
  function canCache(payload){
    return cacheTypeForPayload(payload) !== 'never'
  }
  
  function blockTagForPayload(payload){
    var index = blockTagParamIndex(payload);
  
    // Block tag param not passed.
    if (index >= payload.params.length) {
      return null;
    }
  
    return payload.params[index];
  }
  
  function paramsWithoutBlockTag(payload){
    var index = blockTagParamIndex(payload);
  
    // Block tag param not passed.
    if (index >= payload.params.length) {
      return payload.params;
    }
  
    // eth_getBlockByNumber has the block tag first, then the optional includeTx? param
    if (payload.method === 'eth_getBlockByNumber') {
      return payload.params.slice(1);
    }
  
    return payload.params.slice(0,index);
  }
  
  function blockTagParamIndex(payload){
    switch(payload.method) {
      // blockTag is third param
      case 'eth_getStorageAt':
        return 2
      // blockTag is second param
      case 'eth_getBalance':
      case 'eth_getCode':
      case 'eth_getTransactionCount':
      case 'eth_call':
      case 'eth_estimateGas':
        return 1
      // blockTag is first param
      case 'eth_getBlockByNumber':
        return 0
      // there is no blockTag
      default:
        return undefined
    }
  }
  
  function cacheTypeForPayload(payload) {
    switch (payload.method) {
      // cache permanently
      case 'web3_clientVersion':
      case 'web3_sha3':
      case 'eth_protocolVersion':
      case 'eth_getBlockTransactionCountByHash':
      case 'eth_getUncleCountByBlockHash':
      case 'eth_getCode':
      case 'eth_getBlockByHash':
      case 'eth_getTransactionByHash':
      case 'eth_getTransactionByBlockHashAndIndex':
      case 'eth_getTransactionReceipt':
      case 'eth_getUncleByBlockHashAndIndex':
      case 'eth_getCompilers':
      case 'eth_compileLLL':
      case 'eth_compileSolidity':
      case 'eth_compileSerpent':
      case 'shh_version':
        return 'perma'
  
      // cache until fork
      case 'eth_getBlockByNumber':
      case 'eth_getBlockTransactionCountByNumber':
      case 'eth_getUncleCountByBlockNumber':
      case 'eth_getTransactionByBlockNumberAndIndex':
      case 'eth_getUncleByBlockNumberAndIndex':
        return 'fork'
  
      // cache for block
      case 'eth_gasPrice':
      case 'eth_blockNumber':
      case 'eth_getBalance':
      case 'eth_getStorageAt':
      case 'eth_getTransactionCount':
      case 'eth_call':
      case 'eth_estimateGas':
      case 'eth_getFilterLogs':
      case 'eth_getLogs':
      case 'net_peerCount':
        return 'block'
  
      // never cache
      case 'net_version':
      case 'net_peerCount':
      case 'net_listening':
      case 'eth_syncing':
      case 'eth_sign':
      case 'eth_coinbase':
      case 'eth_mining':
      case 'eth_hashrate':
      case 'eth_accounts':
      case 'eth_sendTransaction':
      case 'eth_sendRawTransaction':
      case 'eth_newFilter':
      case 'eth_newBlockFilter':
      case 'eth_newPendingTransactionFilter':
      case 'eth_uninstallFilter':
      case 'eth_getFilterChanges':
      case 'eth_getWork':
      case 'eth_submitWork':
      case 'eth_submitHashrate':
      case 'db_putString':
      case 'db_getString':
      case 'db_putHex':
      case 'db_getHex':
      case 'shh_post':
      case 'shh_newIdentity':
      case 'shh_hasIdentity':
      case 'shh_newGroup':
      case 'shh_addToGroup':
      case 'shh_newFilter':
      case 'shh_uninstallFilter':
      case 'shh_getFilterChanges':
      case 'shh_getMessages':
        return 'never'
    }
  }
  
  },{"json-stable-stringify":374}],395:[function(require,module,exports){
  (function (Buffer){
  const ethUtil = require('ethereumjs-util')
  const assert = require('./assert.js')
  
  module.exports = {
    intToQuantityHex: intToQuantityHex,
    quantityHexToInt: quantityHexToInt,
  }
  
  /*
   * As per https://github.com/ethereum/wiki/wiki/JSON-RPC#hex-value-encoding
   * Quanities should be represented by the most compact hex representation possible
   * This means that no leading zeroes are allowed. There helpers make it easy
   * to convert to and from integers and their compact hex representation
   */
  
  function intToQuantityHex(n){
      assert(typeof n === 'number' && n === Math.floor(n), 'intToQuantityHex arg must be an integer')
      var nHex = ethUtil.toBuffer(n).toString('hex')
      if (nHex[0] === '0') {
          nHex = nHex.substring(1)
      }
      return ethUtil.addHexPrefix(nHex)
  }
  
  function quantityHexToInt(prefixedQuantityHex) {
      assert(typeof prefixedQuantityHex === 'string', 'arg to quantityHexToInt must be a string')
      var quantityHex = ethUtil.stripHexPrefix(prefixedQuantityHex)
      var isEven = quantityHex.length % 2 === 0
      if (!isEven) {
          quantityHex = '0' + quantityHex
      }
      var buf = new Buffer(quantityHex, 'hex')
      return ethUtil.bufferToInt(buf)
  }
  
  }).call(this,require("buffer").Buffer)
  },{"./assert.js":390,"buffer":84,"ethereumjs-util":141}],396:[function(require,module,exports){
  const EventEmitter = require('events').EventEmitter
  const inherits = require('util').inherits
  
  module.exports = Stoplight
  
  
  inherits(Stoplight, EventEmitter)
  
  function Stoplight(){
    const self = this
    EventEmitter.call(self)
    self.isLocked = true
  }
  
  Stoplight.prototype.go = function(){
    const self = this
    self.isLocked = false
    self.emit('unlock')
  }
  
  Stoplight.prototype.stop = function(){
    const self = this
    self.isLocked = true
    self.emit('lock')
  }
  
  Stoplight.prototype.await = function(fn){
    const self = this
    if (self.isLocked) {
      self.once('unlock', fn)
    } else {
      setTimeout(fn)
    }
  }
  },{"events":157,"util":333}],397:[function(require,module,exports){
  const ProviderEngine = require('./index.js')
  const DefaultFixture = require('./subproviders/default-fixture.js')
  const NonceTrackerSubprovider = require('./subproviders/nonce-tracker.js')
  const CacheSubprovider = require('./subproviders/cache.js')
  const FilterSubprovider = require('./subproviders/filters.js')
  const SubscriptionSubprovider = require('./subproviders/subscriptions')
  const InflightCacheSubprovider = require('./subproviders/inflight-cache')
  const HookedWalletSubprovider = require('./subproviders/hooked-wallet.js')
  const SanitizingSubprovider = require('./subproviders/sanitizer.js')
  const InfuraSubprovider = require('./subproviders/infura.js')
  const FetchSubprovider = require('./subproviders/fetch.js')
  const WebSocketSubprovider = require('./subproviders/websocket.js')
  
  
  module.exports = ZeroClientProvider
  
  
  function ZeroClientProvider(opts = {}){
    const connectionType = getConnectionType(opts)
  
    const engine = new ProviderEngine(opts.engineParams)
  
    // static
    const staticSubprovider = new DefaultFixture(opts.static)
    engine.addProvider(staticSubprovider)
  
    // nonce tracker
    engine.addProvider(new NonceTrackerSubprovider())
  
    // sanitization
    const sanitizer = new SanitizingSubprovider()
    engine.addProvider(sanitizer)
  
    // cache layer
    const cacheSubprovider = new CacheSubprovider()
    engine.addProvider(cacheSubprovider)
  
    // filters + subscriptions
    // for websockets, only polyfill filters
    if (connectionType === 'ws') {
      const filterSubprovider = new FilterSubprovider()
      engine.addProvider(filterSubprovider)
    // otherwise, polyfill both subscriptions and filters
    } else {
      const filterAndSubsSubprovider = new SubscriptionSubprovider()
      // forward subscription events through provider
      filterAndSubsSubprovider.on('data', (err, notification) => {
        engine.emit('data', err, notification)
      })
      engine.addProvider(filterAndSubsSubprovider)
    }
  
    // inflight cache
    const inflightCache = new InflightCacheSubprovider()
    engine.addProvider(inflightCache)
  
    // id mgmt
    const idmgmtSubprovider = new HookedWalletSubprovider({
      // accounts
      getAccounts: opts.getAccounts,
      // transactions
      processTransaction: opts.processTransaction,
      approveTransaction: opts.approveTransaction,
      signTransaction: opts.signTransaction,
      publishTransaction: opts.publishTransaction,
      // messages
      // old eth_sign
      processMessage: opts.processMessage,
      approveMessage: opts.approveMessage,
      signMessage: opts.signMessage,
      // new personal_sign
      processPersonalMessage: opts.processPersonalMessage,
      processTypedMessage: opts.processTypedMessage,
      approvePersonalMessage: opts.approvePersonalMessage,
      approveTypedMessage: opts.approveTypedMessage,
      signPersonalMessage: opts.signPersonalMessage,
      signTypedMessage: opts.signTypedMessage,
      personalRecoverSigner: opts.personalRecoverSigner,
    })
    engine.addProvider(idmgmtSubprovider)
  
    // data source
    const dataSubprovider = opts.dataSubprovider || createDataSubprovider(connectionType, opts)
    // for websockets, forward subscription events through provider
    if (connectionType === 'ws') {
      dataSubprovider.on('data', (err, notification) => {
        engine.emit('data', err, notification)
      })
    }
    engine.addProvider(dataSubprovider)
  
    // start polling
    if (!opts.stopped) {
      engine.start()
    }
  
    return engine
  
  }
  
  function createDataSubprovider(connectionType, opts) {
    const { rpcUrl, debug } = opts
  
    // default to infura
    if (!connectionType) {
      return new InfuraSubprovider()
    }
    if (connectionType === 'http') {
      return new FetchSubprovider({ rpcUrl, debug })
    }
    if (connectionType === 'ws') {
      return new WebSocketSubprovider({ rpcUrl, debug })
    }
  
    throw new Error(`ProviderEngine - unrecognized connectionType "${connectionType}"`)
  }
  
  function getConnectionType({ rpcUrl }) {
    if (!rpcUrl) return undefined
  
    const protocol = rpcUrl.split(':')[0].toLowerCase()
    switch (protocol) {
      case 'http':
      case 'https':
        return 'http'
      case 'ws':
      case 'wss':
        return 'ws'
      default:
        throw new Error(`ProviderEngine - unrecognized protocol in "${rpcUrl}"`)
    }
  }
  
  },{"./index.js":373,"./subproviders/cache.js":376,"./subproviders/default-fixture.js":377,"./subproviders/fetch.js":378,"./subproviders/filters.js":379,"./subproviders/hooked-wallet.js":381,"./subproviders/inflight-cache":382,"./subproviders/infura.js":383,"./subproviders/nonce-tracker.js":384,"./subproviders/sanitizer.js":386,"./subproviders/subscriptions":388,"./subproviders/websocket.js":389}],398:[function(require,module,exports){
  /*
      This file is part of web3.js.
  
      web3.js is free software: you can redistribute it and/or modify
      it under the terms of the GNU Lesser General Public License as published by
      the Free Software Foundation, either version 3 of the License, or
      (at your option) any later version.
  
      web3.js is distributed in the hope that it will be useful,
      but WITHOUT ANY WARRANTY; without even the implied warranty of
      MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
      GNU Lesser General Public License for more details.
  
      You should have received a copy of the GNU Lesser General Public License
      along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
  */
  /** @file httpprovider.js
   * @authors:
   *   Marek Kotewicz <marek@parity.io>
   *   Marian Oancea
   *   Fabian Vogelsteller <fabian@ethereum.org>
   * @date 2015
   */
  
  var errors = require('web3-core-helpers').errors;
  var XHR2 = require('xhr2-cookies').XMLHttpRequest // jshint ignore: line
  var http = require('http');
  var https = require('https');
  
  
  /**
   * HttpProvider should be used to send rpc calls over http
   */
  var HttpProvider = function HttpProvider(host, options) {
      options = options || {};
      this.host = host || 'http://localhost:8545';
      if (this.host.substring(0,5) === "https"){
          this.httpsAgent = new https.Agent({ keepAlive: true });
      }else{
          this.httpAgent = new http.Agent({ keepAlive: true });
      }
      this.timeout = options.timeout || 0;
      this.headers = options.headers;
      this.connected = false;
  };
  
  HttpProvider.prototype._prepareRequest = function(){
      var request = new XHR2();
      request.nodejsSet({
          httpsAgent:this.httpsAgent,
          httpAgent:this.httpAgent
      });
  
      request.open('POST', this.host, true);
      request.setRequestHeader('Content-Type','application/json');
      request.timeout = this.timeout && this.timeout !== 1 ? this.timeout : 0;
      request.withCredentials = true;
  
      if(this.headers) {
          this.headers.forEach(function(header) {
              request.setRequestHeader(header.name, header.value);
          });
      }
  
      return request;
  };
  
  /**
   * Should be used to make async request
   *
   * @method send
   * @param {Object} payload
   * @param {Function} callback triggered on end with (err, result)
   */
  HttpProvider.prototype.send = function (payload, callback) {
      var _this = this;
      var request = this._prepareRequest();
  
      request.onreadystatechange = function() {
          if (request.readyState === 4 && request.timeout !== 1) {
              var result = request.responseText;
              var error = null;
  
              try {
                  result = JSON.parse(result);
              } catch(e) {
                  error = errors.InvalidResponse(request.responseText);
              }
  
              _this.connected = true;
              callback(error, result);
          }
      };
  
      request.ontimeout = function() {
          _this.connected = false;
          callback(errors.ConnectionTimeout(this.timeout));
      };
  
      try {
          request.send(JSON.stringify(payload));
      } catch(error) {
          this.connected = false;
          callback(errors.InvalidConnection(this.host));
      }
  };
  
  HttpProvider.prototype.disconnect = function () {
      //NO OP
  };
  
  
  module.exports = HttpProvider;
  
  },{"http":312,"https":175,"web3-core-helpers":338,"xhr2-cookies":418}],399:[function(require,module,exports){
  /*
      This file is part of web3.js.
  
      web3.js is free software: you can redistribute it and/or modify
      it under the terms of the GNU Lesser General Public License as published by
      the Free Software Foundation, either version 3 of the License, or
      (at your option) any later version.
  
      web3.js is distributed in the hope that it will be useful,
      but WITHOUT ANY WARRANTY; without even the implied warranty of
      MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
      GNU Lesser General Public License for more details.
  
      You should have received a copy of the GNU Lesser General Public License
      along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
  */
  /** @file index.js
   * @authors:
   *   Fabian Vogelsteller <fabian@ethereum.org>
   * @date 2017
   */
  
  "use strict";
  
  var _ = require('underscore');
  var errors = require('web3-core-helpers').errors;
  var oboe = require('oboe');
  
  
  var IpcProvider = function IpcProvider(path, net) {
      var _this = this;
      this.responseCallbacks = {};
      this.notificationCallbacks = [];
      this.path = path;
      this.connected = false;
  
      this.connection = net.connect({path: this.path});
  
      this.addDefaultEvents();
  
      // LISTEN FOR CONNECTION RESPONSES
      var callback = function(result) {
          /*jshint maxcomplexity: 6 */
  
          var id = null;
  
          // get the id which matches the returned id
          if(_.isArray(result)) {
              result.forEach(function(load){
                  if(_this.responseCallbacks[load.id])
                      id = load.id;
              });
          } else {
              id = result.id;
          }
  
          // notification
          if(!id && result.method.indexOf('_subscription') !== -1) {
              _this.notificationCallbacks.forEach(function(callback){
                  if(_.isFunction(callback))
                      callback(result);
              });
  
              // fire the callback
          } else if(_this.responseCallbacks[id]) {
              _this.responseCallbacks[id](null, result);
              delete _this.responseCallbacks[id];
          }
      };
  
      // use oboe.js for Sockets
      if (net.constructor.name === 'Socket') {
          oboe(this.connection)
          .done(callback);
      } else {
          this.connection.on('data', function(data){
              _this._parseResponse(data.toString()).forEach(callback);
          });
      }
  };
  
  /**
  Will add the error and end event to timeout existing calls
  
  @method addDefaultEvents
  */
  IpcProvider.prototype.addDefaultEvents = function(){
      var _this = this;
  
      this.connection.on('connect', function(){
          _this.connected = true;
      });
  
      this.connection.on('close', function(){
          _this.connected = false;
      });
  
      this.connection.on('error', function(){
          _this._timeout();
      });
  
      this.connection.on('end', function(){
          _this._timeout();
      });
  
      this.connection.on('timeout', function(){
          _this._timeout();
      });
  };
  
  
  /**
   Will parse the response and make an array out of it.
  
   NOTE, this exists for backwards compatibility reasons.
  
   @method _parseResponse
   @param {String} data
   */
  IpcProvider.prototype._parseResponse = function(data) {
      var _this = this,
          returnValues = [];
  
      // DE-CHUNKER
      var dechunkedData = data
          .replace(/\}[\n\r]?\{/g,'}|--|{') // }{
          .replace(/\}\][\n\r]?\[\{/g,'}]|--|[{') // }][{
          .replace(/\}[\n\r]?\[\{/g,'}|--|[{') // }[{
          .replace(/\}\][\n\r]?\{/g,'}]|--|{') // }]{
          .split('|--|');
  
      dechunkedData.forEach(function(data){
  
          // prepend the last chunk
          if(_this.lastChunk)
              data = _this.lastChunk + data;
  
          var result = null;
  
          try {
              result = JSON.parse(data);
  
          } catch(e) {
  
              _this.lastChunk = data;
  
              // start timeout to cancel all requests
              clearTimeout(_this.lastChunkTimeout);
              _this.lastChunkTimeout = setTimeout(function(){
                  _this._timeout();
                  throw errors.InvalidResponse(data);
              }, 1000 * 15);
  
              return;
          }
  
          // cancel timeout and set chunk to null
          clearTimeout(_this.lastChunkTimeout);
          _this.lastChunk = null;
  
          if(result)
              returnValues.push(result);
      });
  
      return returnValues;
  };
  
  
  /**
  Get the adds a callback to the responseCallbacks object,
  which will be called if a response matching the response Id will arrive.
  
  @method _addResponseCallback
  */
  IpcProvider.prototype._addResponseCallback = function(payload, callback) {
      var id = payload.id || payload[0].id;
      var method = payload.method || payload[0].method;
  
      this.responseCallbacks[id] = callback;
      this.responseCallbacks[id].method = method;
  };
  
  /**
  Timeout all requests when the end/error event is fired
  
  @method _timeout
  */
  IpcProvider.prototype._timeout = function() {
      for(var key in this.responseCallbacks) {
          if(this.responseCallbacks.hasOwnProperty(key)){
              this.responseCallbacks[key](errors.InvalidConnection('on IPC'));
              delete this.responseCallbacks[key];
          }
      }
  };
  
  /**
   Try to reconnect
  
   @method reconnect
   */
  IpcProvider.prototype.reconnect = function() {
      this.connection.connect({path: this.path});
  };
  
  
  IpcProvider.prototype.send = function (payload, callback) {
      // try reconnect, when connection is gone
      if(!this.connection.writable)
          this.connection.connect({path: this.path});
  
  
      this.connection.write(JSON.stringify(payload));
      this._addResponseCallback(payload, callback);
  };
  
  /**
  Subscribes to provider events.provider
  
  @method on
  @param {String} type    'notification', 'connect', 'error', 'end' or 'data'
  @param {Function} callback   the callback to call
  */
  IpcProvider.prototype.on = function (type, callback) {
  
      if(typeof callback !== 'function')
          throw new Error('The second parameter callback must be a function.');
  
      switch(type){
          case 'data':
              this.notificationCallbacks.push(callback);
              break;
  
          // adds error, end, timeout, connect
          default:
              this.connection.on(type, callback);
              break;
      }
  };
  
  /**
   Subscribes to provider events.provider
  
   @method on
   @param {String} type    'connect', 'error', 'end' or 'data'
   @param {Function} callback   the callback to call
   */
  IpcProvider.prototype.once = function (type, callback) {
  
      if(typeof callback !== 'function')
          throw new Error('The second parameter callback must be a function.');
  
      this.connection.once(type, callback);
  };
  
  /**
  Removes event listener
  
  @method removeListener
  @param {String} type    'data', 'connect', 'error', 'end' or 'data'
  @param {Function} callback   the callback to call
  */
  IpcProvider.prototype.removeListener = function (type, callback) {
      var _this = this;
  
      switch(type){
          case 'data':
              this.notificationCallbacks.forEach(function(cb, index){
                  if(cb === callback)
                      _this.notificationCallbacks.splice(index, 1);
              });
              break;
  
          default:
              this.connection.removeListener(type, callback);
              break;
      }
  };
  
  /**
  Removes all event listeners
  
  @method removeAllListeners
  @param {String} type    'data', 'connect', 'error', 'end' or 'data'
  */
  IpcProvider.prototype.removeAllListeners = function (type) {
      switch(type){
          case 'data':
              this.notificationCallbacks = [];
              break;
  
          default:
              this.connection.removeAllListeners(type);
              break;
      }
  };
  
  /**
  Resets the providers, clears all callbacks
  
  @method reset
  */
  IpcProvider.prototype.reset = function () {
      this._timeout();
      this.notificationCallbacks = [];
  
      this.connection.removeAllListeners('error');
      this.connection.removeAllListeners('end');
      this.connection.removeAllListeners('timeout');
  
      this.addDefaultEvents();
  };
  
  module.exports = IpcProvider;
  
  
  },{"oboe":239,"underscore":325,"web3-core-helpers":338}],400:[function(require,module,exports){
  (function (Buffer){
  /*
   This file is part of web3.js.
  
   web3.js is free software: you can redistribute it and/or modify
   it under the terms of the GNU Lesser General Public License as published by
   the Free Software Foundation, either version 3 of the License, or
   (at your option) any later version.
  
   web3.js is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU Lesser General Public License for more details.
  
   You should have received a copy of the GNU Lesser General Public License
   along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
   */
  /** @file WebsocketProvider.js
   * @authors:
   *   Fabian Vogelsteller <fabian@ethereum.org>
   * @date 2017
   */
  
  "use strict";
  
  var _ = require('underscore');
  var errors = require('web3-core-helpers').errors;
  
  var Ws = null;
  var _btoa = null;
  var parseURL = null;
  if (typeof window !== 'undefined' && typeof window.WebSocket !== 'undefined') {
      Ws = function(url, protocols) {
        return new window.WebSocket(url, protocols);
      };
      _btoa = btoa;
      parseURL = function(url) {
          return new URL(url);
      };
  } else {
      Ws = require('websocket').w3cwebsocket;
      _btoa = function(str) {
        return Buffer(str).toString('base64');
      };
      var url = require('url');
      if (url.URL) {
          // Use the new Node 6+ API for parsing URLs that supports username/password
          var newURL = url.URL;
          parseURL = function(url) {
              return new newURL(url);
          };
      }
      else {
          // Web3 supports Node.js 5, so fall back to the legacy URL API if necessary
          parseURL = require('url').parse;
      }
  }
  // Default connection ws://localhost:8546
  
  
  
  
  var WebsocketProvider = function WebsocketProvider(url, options)  {
      var _this = this;
      this.responseCallbacks = {};
      this.notificationCallbacks = [];
  
      options = options || {};
      this._customTimeout = options.timeout;
  
      // The w3cwebsocket implementation does not support Basic Auth
      // username/password in the URL. So generate the basic auth header, and
      // pass through with any additional headers supplied in constructor
      var parsedURL = parseURL(url);
      var headers = options.headers || {};
      var protocol = options.protocol || undefined;
      if (parsedURL.username && parsedURL.password) {
          headers.authorization = 'Basic ' + _btoa(parsedURL.username + ':' + parsedURL.password);
      }
  
      // Allow a custom client configuration
      var clientConfig = options.clientConfig || undefined;
  
      // When all node core implementations that do not have the
      // WHATWG compatible URL parser go out of service this line can be removed.
      if (parsedURL.auth) {
          headers.authorization = 'Basic ' + _btoa(parsedURL.auth);
      }
      this.connection = new Ws(url, protocol, undefined, headers, undefined, clientConfig);
  
      this.addDefaultEvents();
  
  
      // LISTEN FOR CONNECTION RESPONSES
      this.connection.onmessage = function(e) {
          /*jshint maxcomplexity: 6 */
          var data = (typeof e.data === 'string') ? e.data : '';
  
          _this._parseResponse(data).forEach(function(result){
  
              var id = null;
  
              // get the id which matches the returned id
              if(_.isArray(result)) {
                  result.forEach(function(load){
                      if(_this.responseCallbacks[load.id])
                          id = load.id;
                  });
              } else {
                  id = result.id;
              }
  
              // notification
              if(!id && result && result.method && result.method.indexOf('_subscription') !== -1) {
                  _this.notificationCallbacks.forEach(function(callback){
                      if(_.isFunction(callback))
                          callback(result);
                  });
  
                  // fire the callback
              } else if(_this.responseCallbacks[id]) {
                  _this.responseCallbacks[id](null, result);
                  delete _this.responseCallbacks[id];
              }
          });
      };
  
      // make property `connected` which will return the current connection status
      Object.defineProperty(this, 'connected', {
        get: function () {
          return this.connection && this.connection.readyState === this.connection.OPEN;
        },
        enumerable: true,
    });
  };
  
  /**
   Will add the error and end event to timeout existing calls
  
   @method addDefaultEvents
   */
  WebsocketProvider.prototype.addDefaultEvents = function(){
      var _this = this;
  
      this.connection.onerror = function(){
          _this._timeout();
      };
  
      this.connection.onclose = function(){
          _this._timeout();
  
          // reset all requests and callbacks
          _this.reset();
      };
  
      // this.connection.on('timeout', function(){
      //     _this._timeout();
      // });
  };
  
  /**
   Will parse the response and make an array out of it.
  
   @method _parseResponse
   @param {String} data
   */
  WebsocketProvider.prototype._parseResponse = function(data) {
      var _this = this,
          returnValues = [];
  
      // DE-CHUNKER
      var dechunkedData = data
          .replace(/\}[\n\r]?\{/g,'}|--|{') // }{
          .replace(/\}\][\n\r]?\[\{/g,'}]|--|[{') // }][{
          .replace(/\}[\n\r]?\[\{/g,'}|--|[{') // }[{
          .replace(/\}\][\n\r]?\{/g,'}]|--|{') // }]{
          .split('|--|');
  
      dechunkedData.forEach(function(data){
  
          // prepend the last chunk
          if(_this.lastChunk)
              data = _this.lastChunk + data;
  
          var result = null;
  
          try {
              result = JSON.parse(data);
  
          } catch(e) {
  
              _this.lastChunk = data;
  
              // start timeout to cancel all requests
              clearTimeout(_this.lastChunkTimeout);
              _this.lastChunkTimeout = setTimeout(function(){
                  _this._timeout();
                  throw errors.InvalidResponse(data);
              }, 1000 * 15);
  
              return;
          }
  
          // cancel timeout and set chunk to null
          clearTimeout(_this.lastChunkTimeout);
          _this.lastChunk = null;
  
          if(result)
              returnValues.push(result);
      });
  
      return returnValues;
  };
  
  
  /**
   Adds a callback to the responseCallbacks object,
   which will be called if a response matching the response Id will arrive.
  
   @method _addResponseCallback
   */
  WebsocketProvider.prototype._addResponseCallback = function(payload, callback) {
      var id = payload.id || payload[0].id;
      var method = payload.method || payload[0].method;
  
      this.responseCallbacks[id] = callback;
      this.responseCallbacks[id].method = method;
  
      var _this = this;
  
      // schedule triggering the error response if a custom timeout is set
      if (this._customTimeout) {
          setTimeout(function () {
              if (_this.responseCallbacks[id]) {
                  _this.responseCallbacks[id](errors.ConnectionTimeout(_this._customTimeout));
                  delete _this.responseCallbacks[id];
              }
          }, this._customTimeout);
      }
  };
  
  /**
   Timeout all requests when the end/error event is fired
  
   @method _timeout
   */
  WebsocketProvider.prototype._timeout = function() {
      for(var key in this.responseCallbacks) {
          if(this.responseCallbacks.hasOwnProperty(key)){
              this.responseCallbacks[key](errors.InvalidConnection('on WS'));
              delete this.responseCallbacks[key];
          }
      }
  };
  
  
  WebsocketProvider.prototype.send = function (payload, callback) {
      var _this = this;
  
      if (this.connection.readyState === this.connection.CONNECTING) {
          setTimeout(function () {
              _this.send(payload, callback);
          }, 10);
          return;
      }
  
      // try reconnect, when connection is gone
      // if(!this.connection.writable)
      //     this.connection.connect({url: this.url});
      if (this.connection.readyState !== this.connection.OPEN) {
          console.error('connection not open on send()');
          if (typeof this.connection.onerror === 'function') {
              this.connection.onerror(new Error('connection not open'));
          } else {
              console.error('no error callback');
          }
          callback(new Error('connection not open'));
          return;
      }
  
      this.connection.send(JSON.stringify(payload));
      this._addResponseCallback(payload, callback);
  };
  
  /**
   Subscribes to provider events.provider
  
   @method on
   @param {String} type    'notifcation', 'connect', 'error', 'end' or 'data'
   @param {Function} callback   the callback to call
   */
  WebsocketProvider.prototype.on = function (type, callback) {
  
      if(typeof callback !== 'function')
          throw new Error('The second parameter callback must be a function.');
  
      switch(type){
          case 'data':
              this.notificationCallbacks.push(callback);
              break;
  
          case 'connect':
              this.connection.onopen = callback;
              break;
  
          case 'end':
              this.connection.onclose = callback;
              break;
  
          case 'error':
              this.connection.onerror = callback;
              break;
  
          // default:
          //     this.connection.on(type, callback);
          //     break;
      }
  };
  
  // TODO add once
  
  /**
   Removes event listener
  
   @method removeListener
   @param {String} type    'notifcation', 'connect', 'error', 'end' or 'data'
   @param {Function} callback   the callback to call
   */
  WebsocketProvider.prototype.removeListener = function (type, callback) {
      var _this = this;
  
      switch(type){
          case 'data':
              this.notificationCallbacks.forEach(function(cb, index){
                  if(cb === callback)
                      _this.notificationCallbacks.splice(index, 1);
              });
              break;
  
          // TODO remvoving connect missing
  
          // default:
          //     this.connection.removeListener(type, callback);
          //     break;
      }
  };
  
  /**
   Removes all event listeners
  
   @method removeAllListeners
   @param {String} type    'notifcation', 'connect', 'error', 'end' or 'data'
   */
  WebsocketProvider.prototype.removeAllListeners = function (type) {
      switch(type){
          case 'data':
              this.notificationCallbacks = [];
              break;
  
          // TODO remvoving connect properly missing
  
          case 'connect':
              this.connection.onopen = null;
              break;
  
          case 'end':
              this.connection.onclose = null;
              break;
  
          case 'error':
              this.connection.onerror = null;
              break;
  
          default:
              // this.connection.removeAllListeners(type);
              break;
      }
  };
  
  /**
   Resets the providers, clears all callbacks
  
   @method reset
   */
  WebsocketProvider.prototype.reset = function () {
      this._timeout();
      this.notificationCallbacks = [];
  
      // this.connection.removeAllListeners('error');
      // this.connection.removeAllListeners('end');
      // this.connection.removeAllListeners('timeout');
  
      this.addDefaultEvents();
  };
  
  WebsocketProvider.prototype.disconnect = function () {
      if (this.connection) {
          this.connection.close();
      }
  };
  
  module.exports = WebsocketProvider;
  
  }).call(this,require("buffer").Buffer)
  },{"buffer":84,"underscore":325,"url":327,"web3-core-helpers":338,"websocket":408}],401:[function(require,module,exports){
  /*
      This file is part of web3.js.
  
      web3.js is free software: you can redistribute it and/or modify
      it under the terms of the GNU Lesser General Public License as published by
      the Free Software Foundation, either version 3 of the License, or
      (at your option) any later version.
  
      web3.js is distributed in the hope that it will be useful,
      but WITHOUT ANY WARRANTY; without even the implied warranty of
      MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
      GNU Lesser General Public License for more details.
  
      You should have received a copy of the GNU Lesser General Public License
      along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
  */
  /**
   * @file index.js
   * @author Fabian Vogelsteller <fabian@ethereum.org>
   * @date 2017
   */
  
  "use strict";
  
  var core = require('web3-core');
  var Subscriptions = require('web3-core-subscriptions').subscriptions;
  var Method = require('web3-core-method');
  // var formatters = require('web3-core-helpers').formatters;
  var Net = require('web3-net');
  
  
  var Shh = function Shh() {
      var _this = this;
  
      // sets _requestmanager
      core.packageInit(this, arguments);
  
      // overwrite setProvider
      var setProvider = this.setProvider;
      this.setProvider = function () {
          setProvider.apply(_this, arguments);
          _this.net.setProvider.apply(_this, arguments);
      };
  
      this.clearSubscriptions = _this._requestManager.clearSubscriptions;
  
      this.net = new Net(this.currentProvider);
  
  
      [
          new Subscriptions({
              name: 'subscribe',
              type: 'shh',
              subscriptions: {
                  'messages': {
                      params: 1
                      // inputFormatter: [formatters.inputPostFormatter],
                      // outputFormatter: formatters.outputPostFormatter
                  }
              }
          }),
  
          new Method({
              name: 'getVersion',
              call: 'shh_version',
              params: 0
          }),
          new Method({
              name: 'getInfo',
              call: 'shh_info',
              params: 0
          }),
          new Method({
              name: 'setMaxMessageSize',
              call: 'shh_setMaxMessageSize',
              params: 1
          }),
          new Method({
              name: 'setMinPoW',
              call: 'shh_setMinPoW',
              params: 1
          }),
          new Method({
              name: 'markTrustedPeer',
              call: 'shh_markTrustedPeer',
              params: 1
          }),
          new Method({
              name: 'newKeyPair',
              call: 'shh_newKeyPair',
              params: 0
          }),
          new Method({
              name: 'addPrivateKey',
              call: 'shh_addPrivateKey',
              params: 1
          }),
          new Method({
              name: 'deleteKeyPair',
              call: 'shh_deleteKeyPair',
              params: 1
          }),
          new Method({
              name: 'hasKeyPair',
              call: 'shh_hasKeyPair',
              params: 1
          }),
          new Method({
              name: 'getPublicKey',
              call: 'shh_getPublicKey',
              params: 1
          }),
          new Method({
              name: 'getPrivateKey',
              call: 'shh_getPrivateKey',
              params: 1
          }),
          new Method({
              name: 'newSymKey',
              call: 'shh_newSymKey',
              params: 0
          }),
          new Method({
              name: 'addSymKey',
              call: 'shh_addSymKey',
              params: 1
          }),
          new Method({
              name: 'generateSymKeyFromPassword',
              call: 'shh_generateSymKeyFromPassword',
              params: 1
          }),
          new Method({
              name: 'hasSymKey',
              call: 'shh_hasSymKey',
              params: 1
          }),
          new Method({
              name: 'getSymKey',
              call: 'shh_getSymKey',
              params: 1
          }),
          new Method({
              name: 'deleteSymKey',
              call: 'shh_deleteSymKey',
              params: 1
          }),
  
          new Method({
              name: 'newMessageFilter',
              call: 'shh_newMessageFilter',
              params: 1
          }),
          new Method({
              name: 'getFilterMessages',
              call: 'shh_getFilterMessages',
              params: 1
          }),
          new Method({
              name: 'deleteMessageFilter',
              call: 'shh_deleteMessageFilter',
              params: 1
          }),
  
          new Method({
              name: 'post',
              call: 'shh_post',
              params: 1,
              inputFormatter: [null]
          }),
  
          new Method({
              name: 'unsubscribe',
              call: 'shh_unsubscribe',
              params: 1
          })
      ].forEach(function(method) {
          method.attachToObject(_this);
          method.setRequestManager(_this._requestManager);
      });
  };
  
  core.addProviders(Shh);
  
  
  
  module.exports = Shh;
  
  
  
  },{"web3-core":348,"web3-core-method":339,"web3-core-subscriptions":345,"web3-net":372}],402:[function(require,module,exports){
  arguments[4][154][0].apply(exports,arguments)
  },{"dup":154}],403:[function(require,module,exports){
  /*
   This file is part of web3.js.
  
   web3.js is free software: you can redistribute it and/or modify
   it under the terms of the GNU Lesser General Public License as published by
   the Free Software Foundation, either version 3 of the License, or
   (at your option) any later version.
  
   web3.js is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU Lesser General Public License for more details.
  
   You should have received a copy of the GNU Lesser General Public License
   along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
   */
  /**
   * @file utils.js
   * @author Marek Kotewicz <marek@parity.io>
   * @author Fabian Vogelsteller <fabian@ethereum.org>
   * @date 2017
   */
  
  
  var _ = require('underscore');
  var ethjsUnit = require('ethjs-unit');
  var utils = require('./utils.js');
  var soliditySha3 = require('./soliditySha3.js');
  var randomHex = require('randomhex');
  
  
  
  /**
   * Fires an error in an event emitter and callback and returns the eventemitter
   *
   * @method _fireError
   * @param {Object} error a string, a error, or an object with {message, data}
   * @param {Object} emitter
   * @param {Function} reject
   * @param {Function} callback
   * @return {Object} the emitter
   */
  var _fireError = function (error, emitter, reject, callback) {
      /*jshint maxcomplexity: 10 */
  
      // add data if given
      if(_.isObject(error) && !(error instanceof Error) &&  error.data) {
          if(_.isObject(error.data) || _.isArray(error.data)) {
              error.data = JSON.stringify(error.data, null, 2);
          }
  
          error = error.message +"\n"+ error.data;
      }
  
      if(_.isString(error)) {
          error = new Error(error);
      }
  
      if (_.isFunction(callback)) {
          callback(error);
      }
      if (_.isFunction(reject)) {
          // suppress uncatched error if an error listener is present
          // OR suppress uncatched error if an callback listener is present
          if (emitter &&
              (_.isFunction(emitter.listeners) &&
              emitter.listeners('error').length) || _.isFunction(callback)) {
              emitter.catch(function(){});
          }
          // reject later, to be able to return emitter
          setTimeout(function () {
              reject(error);
          }, 1);
      }
  
      if(emitter && _.isFunction(emitter.emit)) {
          // emit later, to be able to return emitter
          setTimeout(function () {
              emitter.emit('error', error);
              emitter.removeAllListeners();
          }, 1);
      }
  
      return emitter;
  };
  
  /**
   * Should be used to create full function/event name from json abi
   *
   * @method _jsonInterfaceMethodToString
   * @param {Object} json
   * @return {String} full function/event name
   */
  var _jsonInterfaceMethodToString = function (json) {
      if (_.isObject(json) && json.name && json.name.indexOf('(') !== -1) {
          return json.name;
      }
  
      return json.name + '(' + _flattenTypes(false, json.inputs).join(',') + ')';
  };
  
  
  /**
   * Should be used to flatten json abi inputs/outputs into an array of type-representing-strings
   *
   * @method _flattenTypes
   * @param {bool} includeTuple
   * @param {Object} puts
   * @return {Array} parameters as strings
   */
  var _flattenTypes = function(includeTuple, puts)
  {
      // console.log("entered _flattenTypes. inputs/outputs: " + puts)
      var types = [];
  
      puts.forEach(function(param) {
          if (typeof param.components === 'object') {
              if (param.type.substring(0, 5) !== 'tuple') {
                  throw new Error('components found but type is not tuple; report on GitHub');
              }
              var suffix = '';
              var arrayBracket = param.type.indexOf('[');
              if (arrayBracket >= 0) { suffix = param.type.substring(arrayBracket); }
              var result = _flattenTypes(includeTuple, param.components);
              // console.log("result should have things: " + result)
              if(_.isArray(result) && includeTuple) {
                  // console.log("include tuple word, and its an array. joining...: " + result.types)
                  types.push('tuple(' + result.join(',') + ')' + suffix);
              }
              else if(!includeTuple) {
                  // console.log("don't include tuple, but its an array. joining...: " + result)
                  types.push('(' + result.join(',') + ')' + suffix);
              }
              else {
                  // console.log("its a single type within a tuple: " + result.types)
                  types.push('(' + result + ')');
              }
          } else {
              // console.log("its a type and not directly in a tuple: " + param.type)
              types.push(param.type);
          }
      });
  
      return types;
  };
  
  
  /**
   * Should be called to get ascii from it's hex representation
   *
   * @method hexToAscii
   * @param {String} hex
   * @returns {String} ascii string representation of hex value
   */
  var hexToAscii = function(hex) {
      if (!utils.isHexStrict(hex))
          throw new Error('The parameter must be a valid HEX string.');
  
      var str = "";
      var i = 0, l = hex.length;
      if (hex.substring(0, 2) === '0x') {
          i = 2;
      }
      for (; i < l; i+=2) {
          var code = parseInt(hex.substr(i, 2), 16);
          str += String.fromCharCode(code);
      }
  
      return str;
  };
  
  /**
   * Should be called to get hex representation (prefixed by 0x) of ascii string
   *
   * @method asciiToHex
   * @param {String} str
   * @returns {String} hex representation of input string
   */
  var asciiToHex = function(str) {
      if(!str)
          return "0x00";
      var hex = "";
      for(var i = 0; i < str.length; i++) {
          var code = str.charCodeAt(i);
          var n = code.toString(16);
          hex += n.length < 2 ? '0' + n : n;
      }
  
      return "0x" + hex;
  };
  
  
  
  /**
   * Returns value of unit in Wei
   *
   * @method getUnitValue
   * @param {String} unit the unit to convert to, default ether
   * @returns {BN} value of the unit (in Wei)
   * @throws error if the unit is not correct:w
   */
  var getUnitValue = function (unit) {
      unit = unit ? unit.toLowerCase() : 'ether';
      if (!ethjsUnit.unitMap[unit]) {
          throw new Error('This unit "'+ unit +'" doesn\'t exist, please use the one of the following units' + JSON.stringify(ethjsUnit.unitMap, null, 2));
      }
      return unit;
  };
  
  /**
   * Takes a number of wei and converts it to any other ether unit.
   *
   * Possible units are:
   *   SI Short   SI Full        Effigy       Other
   * - kwei       femtoether     babbage
   * - mwei       picoether      lovelace
   * - gwei       nanoether      shannon      nano
   * - --         microether     szabo        micro
   * - --         milliether     finney       milli
   * - ether      --             --
   * - kether                    --           grand
   * - mether
   * - gether
   * - tether
   *
   * @method fromWei
   * @param {Number|String} number can be a number, number string or a HEX of a decimal
   * @param {String} unit the unit to convert to, default ether
   * @return {String|Object} When given a BN object it returns one as well, otherwise a number
   */
  var fromWei = function(number, unit) {
      unit = getUnitValue(unit);
  
      if(!utils.isBN(number) && !_.isString(number)) {
          throw new Error('Please pass numbers as strings or BigNumber objects to avoid precision errors.');
      }
  
      return utils.isBN(number) ? ethjsUnit.fromWei(number, unit) : ethjsUnit.fromWei(number, unit).toString(10);
  };
  
  /**
   * Takes a number of a unit and converts it to wei.
   *
   * Possible units are:
   *   SI Short   SI Full        Effigy       Other
   * - kwei       femtoether     babbage
   * - mwei       picoether      lovelace
   * - gwei       nanoether      shannon      nano
   * - --         microether     szabo        micro
   * - --         microether     szabo        micro
   * - --         milliether     finney       milli
   * - ether      --             --
   * - kether                    --           grand
   * - mether
   * - gether
   * - tether
   *
   * @method toWei
   * @param {Number|String|BN} number can be a number, number string or a HEX of a decimal
   * @param {String} unit the unit to convert from, default ether
   * @return {String|Object} When given a BN object it returns one as well, otherwise a number
   */
  var toWei = function(number, unit) {
      unit = getUnitValue(unit);
  
      if(!utils.isBN(number) && !_.isString(number)) {
          throw new Error('Please pass numbers as strings or BigNumber objects to avoid precision errors.');
      }
  
      return utils.isBN(number) ? ethjsUnit.toWei(number, unit) : ethjsUnit.toWei(number, unit).toString(10);
  };
  
  
  
  
  /**
   * Converts to a checksum address
   *
   * @method toChecksumAddress
   * @param {String} address the given HEX address
   * @return {String}
   */
  var toChecksumAddress = function (address) {
      if (typeof address === 'undefined') return '';
  
      if(!/^(0x)?[0-9a-f]{40}$/i.test(address))
          throw new Error('Given address "'+ address +'" is not a valid Ethereum address.');
  
  
  
      address = address.toLowerCase().replace(/^0x/i,'');
      var addressHash = utils.sha3(address).replace(/^0x/i,'');
      var checksumAddress = '0x';
  
      for (var i = 0; i < address.length; i++ ) {
          // If ith character is 9 to f then make it uppercase
          if (parseInt(addressHash[i], 16) > 7) {
              checksumAddress += address[i].toUpperCase();
          } else {
              checksumAddress += address[i];
          }
      }
      return checksumAddress;
  };
  
  
  
  module.exports = {
      _fireError: _fireError,
      _jsonInterfaceMethodToString: _jsonInterfaceMethodToString,
      _flattenTypes: _flattenTypes,
      // extractDisplayName: extractDisplayName,
      // extractTypeName: extractTypeName,
      randomHex: randomHex,
      _: _,
      BN: utils.BN,
      isBN: utils.isBN,
      isBigNumber: utils.isBigNumber,
      isHex: utils.isHex,
      isHexStrict: utils.isHexStrict,
      sha3: utils.sha3,
      keccak256: utils.sha3,
      soliditySha3: soliditySha3,
      isAddress: utils.isAddress,
      checkAddressChecksum: utils.checkAddressChecksum,
      toChecksumAddress: toChecksumAddress,
      toHex: utils.toHex,
      toBN: utils.toBN,
  
      bytesToHex: utils.bytesToHex,
      hexToBytes: utils.hexToBytes,
  
      hexToNumberString: utils.hexToNumberString,
  
      hexToNumber: utils.hexToNumber,
      toDecimal: utils.hexToNumber, // alias
  
      numberToHex: utils.numberToHex,
      fromDecimal: utils.numberToHex, // alias
  
      hexToUtf8: utils.hexToUtf8,
      hexToString: utils.hexToUtf8,
      toUtf8: utils.hexToUtf8,
  
      utf8ToHex: utils.utf8ToHex,
      stringToHex: utils.utf8ToHex,
      fromUtf8: utils.utf8ToHex,
  
      hexToAscii: hexToAscii,
      toAscii: hexToAscii,
      asciiToHex: asciiToHex,
      fromAscii: asciiToHex,
  
      unitMap: ethjsUnit.unitMap,
      toWei: toWei,
      fromWei: fromWei,
  
      padLeft: utils.leftPad,
      leftPad: utils.leftPad,
      padRight: utils.rightPad,
      rightPad: utils.rightPad,
      toTwosComplement: utils.toTwosComplement
  };
  
  
  },{"./soliditySha3.js":404,"./utils.js":405,"ethjs-unit":153,"randomhex":274,"underscore":325}],404:[function(require,module,exports){
  /*
   This file is part of web3.js.
  
   web3.js is free software: you can redistribute it and/or modify
   it under the terms of the GNU Lesser General Public License as published by
   the Free Software Foundation, either version 3 of the License, or
   (at your option) any later version.
  
   web3.js is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU Lesser General Public License for more details.
  
   You should have received a copy of the GNU Lesser General Public License
   along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
   */
  /**
   * @file soliditySha3.js
   * @author Fabian Vogelsteller <fabian@ethereum.org>
   * @date 2017
   */
  
  var _ = require('underscore');
  var BN = require('bn.js');
  var utils = require('./utils.js');
  
  
  var _elementaryName = function (name) {
      /*jshint maxcomplexity:false */
  
      if (name.startsWith('int[')) {
          return 'int256' + name.slice(3);
      } else if (name === 'int') {
          return 'int256';
      } else if (name.startsWith('uint[')) {
          return 'uint256' + name.slice(4);
      } else if (name === 'uint') {
          return 'uint256';
      } else if (name.startsWith('fixed[')) {
          return 'fixed128x128' + name.slice(5);
      } else if (name === 'fixed') {
          return 'fixed128x128';
      } else if (name.startsWith('ufixed[')) {
          return 'ufixed128x128' + name.slice(6);
      } else if (name === 'ufixed') {
          return 'ufixed128x128';
      }
      return name;
  };
  
  // Parse N from type<N>
  var _parseTypeN = function (type) {
      var typesize = /^\D+(\d+).*$/.exec(type);
      return typesize ? parseInt(typesize[1], 10) : null;
  };
  
  // Parse N from type[<N>]
  var _parseTypeNArray = function (type) {
      var arraySize = /^\D+\d*\[(\d+)\]$/.exec(type);
      return arraySize ? parseInt(arraySize[1], 10) : null;
  };
  
  var _parseNumber = function (arg) {
      var type = typeof arg;
      if (type === 'string') {
          if (utils.isHexStrict(arg)) {
              return new BN(arg.replace(/0x/i,''), 16);
          } else {
              return new BN(arg, 10);
          }
      } else if (type === 'number') {
          return new BN(arg);
      } else if (utils.isBigNumber(arg)) {
          return new BN(arg.toString(10));
      } else if (utils.isBN(arg)) {
          return arg;
      } else {
          throw new Error(arg +' is not a number');
      }
  };
  
  var _solidityPack = function (type, value, arraySize) {
      /*jshint maxcomplexity:false */
  
      var size, num;
      type = _elementaryName(type);
  
  
      if (type === 'bytes') {
  
          if (value.replace(/^0x/i,'').length % 2 !== 0) {
              throw new Error('Invalid bytes characters '+ value.length);
          }
  
          return value;
      } else if (type === 'string') {
          return utils.utf8ToHex(value);
      } else if (type === 'bool') {
          return value ? '01' : '00';
      } else if (type.startsWith('address')) {
          if(arraySize) {
              size = 64;
          } else {
              size = 40;
          }
  
          if(!utils.isAddress(value)) {
              throw new Error(value +' is not a valid address, or the checksum is invalid.');
          }
  
          return utils.leftPad(value.toLowerCase(), size);
      }
  
      size = _parseTypeN(type);
  
      if (type.startsWith('bytes')) {
  
          if(!size) {
              throw new Error('bytes[] not yet supported in solidity');
          }
  
          // must be 32 byte slices when in an array
          if(arraySize) {
              size = 32;
          }
  
          if (size < 1 || size > 32 || size < value.replace(/^0x/i,'').length / 2 ) {
              throw new Error('Invalid bytes' + size +' for '+ value);
          }
  
          return utils.rightPad(value, size * 2);
      } else if (type.startsWith('uint')) {
  
          if ((size % 8) || (size < 8) || (size > 256)) {
              throw new Error('Invalid uint'+size+' size');
          }
  
          num = _parseNumber(value);
          if (num.bitLength() > size) {
              throw new Error('Supplied uint exceeds width: ' + size + ' vs ' + num.bitLength());
          }
  
          if(num.lt(new BN(0))) {
              throw new Error('Supplied uint '+ num.toString() +' is negative');
          }
  
          return size ? utils.leftPad(num.toString('hex'), size/8 * 2) : num;
      } else if (type.startsWith('int')) {
  
          if ((size % 8) || (size < 8) || (size > 256)) {
              throw new Error('Invalid int'+size+' size');
          }
  
          num = _parseNumber(value);
          if (num.bitLength() > size) {
              throw new Error('Supplied int exceeds width: ' + size + ' vs ' + num.bitLength());
          }
  
          if(num.lt(new BN(0))) {
              return num.toTwos(size).toString('hex');
          } else {
              return size ? utils.leftPad(num.toString('hex'), size/8 * 2) : num;
          }
  
      } else {
          // FIXME: support all other types
          throw new Error('Unsupported or invalid type: ' + type);
      }
  };
  
  
  var _processSoliditySha3Args = function (arg) {
      /*jshint maxcomplexity:false */
  
      if(_.isArray(arg)) {
          throw new Error('Autodetection of array types is not supported.');
      }
  
      var type, value = '';
      var hexArg, arraySize;
  
      // if type is given
      if (_.isObject(arg) && (arg.hasOwnProperty('v') || arg.hasOwnProperty('t') || arg.hasOwnProperty('value') || arg.hasOwnProperty('type'))) {
          type = arg.hasOwnProperty('t') ? arg.t : arg.type;
          value = arg.hasOwnProperty('v') ? arg.v : arg.value;
  
      // otherwise try to guess the type
      } else {
  
          type = utils.toHex(arg, true);
          value = utils.toHex(arg);
  
          if (!type.startsWith('int') && !type.startsWith('uint')) {
              type = 'bytes';
          }
      }
  
      if ((type.startsWith('int') || type.startsWith('uint')) &&  typeof value === 'string' && !/^(-)?0x/i.test(value)) {
          value = new BN(value);
      }
  
      // get the array size
      if(_.isArray(value)) {
          arraySize = _parseTypeNArray(type);
          if(arraySize && value.length !== arraySize) {
              throw new Error(type +' is not matching the given array '+ JSON.stringify(value));
          } else {
              arraySize = value.length;
          }
      }
  
  
      if (_.isArray(value)) {
          hexArg = value.map(function (val) {
              return _solidityPack(type, val, arraySize).toString('hex').replace('0x','');
          });
          return hexArg.join('');
      } else {
          hexArg = _solidityPack(type, value, arraySize);
          return hexArg.toString('hex').replace('0x','');
      }
  
  };
  
  /**
   * Hashes solidity values to a sha3 hash using keccak 256
   *
   * @method soliditySha3
   * @return {Object} the sha3
   */
  var soliditySha3 = function () {
      /*jshint maxcomplexity:false */
  
      var args = Array.prototype.slice.call(arguments);
  
      var hexArgs = _.map(args, _processSoliditySha3Args);
  
      // console.log(args, hexArgs);
      // console.log('0x'+ hexArgs.join(''));
  
      return utils.sha3('0x'+ hexArgs.join(''));
  };
  
  
  module.exports = soliditySha3;
  
  },{"./utils.js":405,"bn.js":402,"underscore":325}],405:[function(require,module,exports){
  /*
   This file is part of web3.js.
  
   web3.js is free software: you can redistribute it and/or modify
   it under the terms of the GNU Lesser General Public License as published by
   the Free Software Foundation, either version 3 of the License, or
   (at your option) any later version.
  
   web3.js is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU Lesser General Public License for more details.
  
   You should have received a copy of the GNU Lesser General Public License
   along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
   */
  /**
   * @file utils.js
   * @author Fabian Vogelsteller <fabian@ethereum.org>
   * @date 2017
   */
  
  var _ = require('underscore');
  var BN = require('bn.js');
  var numberToBN = require('number-to-bn');
  var utf8 = require('utf8');
  var Hash = require("eth-lib/lib/hash");
  
  
  /**
   * Returns true if object is BN, otherwise false
   *
   * @method isBN
   * @param {Object} object
   * @return {Boolean}
   */
  var isBN = function (object) {
      return object instanceof BN ||
          (object && object.constructor && object.constructor.name === 'BN');
  };
  
  /**
   * Returns true if object is BigNumber, otherwise false
   *
   * @method isBigNumber
   * @param {Object} object
   * @return {Boolean}
   */
  var isBigNumber = function (object) {
      return object && object.constructor && object.constructor.name === 'BigNumber';
  };
  
  /**
   * Takes an input and transforms it into an BN
   *
   * @method toBN
   * @param {Number|String|BN} number, string, HEX string or BN
   * @return {BN} BN
   */
  var toBN = function(number){
      try {
          return numberToBN.apply(null, arguments);
      } catch(e) {
          throw new Error(e + ' Given value: "'+ number +'"');
      }
  };
  
  
  /**
   * Takes and input transforms it into BN and if it is negative value, into two's complement
   *
   * @method toTwosComplement
   * @param {Number|String|BN} number
   * @return {String}
   */
  var toTwosComplement = function (number) {
      return '0x'+ toBN(number).toTwos(256).toString(16, 64);
  };
  
  /**
   * Checks if the given string is an address
   *
   * @method isAddress
   * @param {String} address the given HEX address
   * @return {Boolean}
   */
  var isAddress = function (address) {
      // check if it has the basic requirements of an address
      if (!/^(0x)?[0-9a-f]{40}$/i.test(address)) {
          return false;
          // If it's ALL lowercase or ALL upppercase
      } else if (/^(0x|0X)?[0-9a-f]{40}$/.test(address) || /^(0x|0X)?[0-9A-F]{40}$/.test(address)) {
          return true;
          // Otherwise check each case
      } else {
          return checkAddressChecksum(address);
      }
  };
  
  
  
  /**
   * Checks if the given string is a checksummed address
   *
   * @method checkAddressChecksum
   * @param {String} address the given HEX address
   * @return {Boolean}
   */
  var checkAddressChecksum = function (address) {
      // Check each case
      address = address.replace(/^0x/i,'');
      var addressHash = sha3(address.toLowerCase()).replace(/^0x/i,'');
  
      for (var i = 0; i < 40; i++ ) {
          // the nth letter should be uppercase if the nth digit of casemap is 1
          if ((parseInt(addressHash[i], 16) > 7 && address[i].toUpperCase() !== address[i]) || (parseInt(addressHash[i], 16) <= 7 && address[i].toLowerCase() !== address[i])) {
              return false;
          }
      }
      return true;
  };
  
  /**
   * Should be called to pad string to expected length
   *
   * @method leftPad
   * @param {String} string to be padded
   * @param {Number} chars that result string should have
   * @param {String} sign, by default 0
   * @returns {String} right aligned string
   */
  var leftPad = function (string, chars, sign) {
      var hasPrefix = /^0x/i.test(string) || typeof string === 'number';
      string = string.toString(16).replace(/^0x/i,'');
  
      var padding = (chars - string.length + 1 >= 0) ? chars - string.length + 1 : 0;
  
      return (hasPrefix ? '0x' : '') + new Array(padding).join(sign ? sign : "0") + string;
  };
  
  /**
   * Should be called to pad string to expected length
   *
   * @method rightPad
   * @param {String} string to be padded
   * @param {Number} chars that result string should have
   * @param {String} sign, by default 0
   * @returns {String} right aligned string
   */
  var rightPad = function (string, chars, sign) {
      var hasPrefix = /^0x/i.test(string) || typeof string === 'number';
      string = string.toString(16).replace(/^0x/i,'');
  
      var padding = (chars - string.length + 1 >= 0) ? chars - string.length + 1 : 0;
  
      return (hasPrefix ? '0x' : '') + string + (new Array(padding).join(sign ? sign : "0"));
  };
  
  
  /**
   * Should be called to get hex representation (prefixed by 0x) of utf8 string
   *
   * @method utf8ToHex
   * @param {String} str
   * @returns {String} hex representation of input string
   */
  var utf8ToHex = function(str) {
      str = utf8.encode(str);
      var hex = "";
  
      // remove \u0000 padding from either side
      str = str.replace(/^(?:\u0000)*/,'');
      str = str.split("").reverse().join("");
      str = str.replace(/^(?:\u0000)*/,'');
      str = str.split("").reverse().join("");
  
      for(var i = 0; i < str.length; i++) {
          var code = str.charCodeAt(i);
          // if (code !== 0) {
          var n = code.toString(16);
          hex += n.length < 2 ? '0' + n : n;
          // }
      }
  
      return "0x" + hex;
  };
  
  /**
   * Should be called to get utf8 from it's hex representation
   *
   * @method hexToUtf8
   * @param {String} hex
   * @returns {String} ascii string representation of hex value
   */
  var hexToUtf8 = function(hex) {
      if (!isHexStrict(hex))
          throw new Error('The parameter "'+ hex +'" must be a valid HEX string.');
  
      var str = "";
      var code = 0;
      hex = hex.replace(/^0x/i,'');
  
      // remove 00 padding from either side
      hex = hex.replace(/^(?:00)*/,'');
      hex = hex.split("").reverse().join("");
      hex = hex.replace(/^(?:00)*/,'');
      hex = hex.split("").reverse().join("");
  
      var l = hex.length;
  
      for (var i=0; i < l; i+=2) {
          code = parseInt(hex.substr(i, 2), 16);
          // if (code !== 0) {
          str += String.fromCharCode(code);
          // }
      }
  
      return utf8.decode(str);
  };
  
  
  /**
   * Converts value to it's number representation
   *
   * @method hexToNumber
   * @param {String|Number|BN} value
   * @return {String}
   */
  var hexToNumber = function (value) {
      if (!value) {
          return value;
      }
  
      return toBN(value).toNumber();
  };
  
  /**
   * Converts value to it's decimal representation in string
   *
   * @method hexToNumberString
   * @param {String|Number|BN} value
   * @return {String}
   */
  var hexToNumberString = function (value) {
      if (!value) return value;
  
      return toBN(value).toString(10);
  };
  
  
  /**
   * Converts value to it's hex representation
   *
   * @method numberToHex
   * @param {String|Number|BN} value
   * @return {String}
   */
  var numberToHex = function (value) {
      if (_.isNull(value) || _.isUndefined(value)) {
          return value;
      }
  
      if (!isFinite(value) && !isHexStrict(value)) {
          throw new Error('Given input "'+value+'" is not a number.');
      }
  
      var number = toBN(value);
      var result = number.toString(16);
  
      return number.lt(new BN(0)) ? '-0x' + result.substr(1) : '0x' + result;
  };
  
  
  /**
   * Convert a byte array to a hex string
   *
   * Note: Implementation from crypto-js
   *
   * @method bytesToHex
   * @param {Array} bytes
   * @return {String} the hex string
   */
  var bytesToHex = function(bytes) {
      for (var hex = [], i = 0; i < bytes.length; i++) {
          /* jshint ignore:start */
          hex.push((bytes[i] >>> 4).toString(16));
          hex.push((bytes[i] & 0xF).toString(16));
          /* jshint ignore:end */
      }
      return '0x'+ hex.join("");
  };
  
  /**
   * Convert a hex string to a byte array
   *
   * Note: Implementation from crypto-js
   *
   * @method hexToBytes
   * @param {string} hex
   * @return {Array} the byte array
   */
  var hexToBytes = function(hex) {
      hex = hex.toString(16);
  
      if (!isHexStrict(hex)) {
          throw new Error('Given value "'+ hex +'" is not a valid hex string.');
      }
  
      hex = hex.replace(/^0x/i,'');
  
      for (var bytes = [], c = 0; c < hex.length; c += 2)
          bytes.push(parseInt(hex.substr(c, 2), 16));
      return bytes;
  };
  
  /**
   * Auto converts any given value into it's hex representation.
   *
   * And even stringifys objects before.
   *
   * @method toHex
   * @param {String|Number|BN|Object} value
   * @param {Boolean} returnType
   * @return {String}
   */
  var toHex = function (value, returnType) {
      /*jshint maxcomplexity: false */
  
      if (isAddress(value)) {
          return returnType ? 'address' : '0x'+ value.toLowerCase().replace(/^0x/i,'');
      }
  
      if (_.isBoolean(value)) {
          return returnType ? 'bool' : value ? '0x01' : '0x00';
      }
  
  
      if (_.isObject(value) && !isBigNumber(value) && !isBN(value)) {
          return returnType ? 'string' : utf8ToHex(JSON.stringify(value));
      }
  
      // if its a negative number, pass it through numberToHex
      if (_.isString(value)) {
          if (value.indexOf('-0x') === 0 || value.indexOf('-0X') === 0) {
              return returnType ? 'int256' : numberToHex(value);
          } else if(value.indexOf('0x') === 0 || value.indexOf('0X') === 0) {
              return returnType ? 'bytes' : value;
          } else if (!isFinite(value)) {
              return returnType ? 'string' : utf8ToHex(value);
          }
      }
  
      return returnType ? (value < 0 ? 'int256' : 'uint256') : numberToHex(value);
  };
  
  
  /**
   * Check if string is HEX, requires a 0x in front
   *
   * @method isHexStrict
   * @param {String} hex to be checked
   * @returns {Boolean}
   */
  var isHexStrict = function (hex) {
      return ((_.isString(hex) || _.isNumber(hex)) && /^(-)?0x[0-9a-f]*$/i.test(hex));
  };
  
  /**
   * Check if string is HEX
   *
   * @method isHex
   * @param {String} hex to be checked
   * @returns {Boolean}
   */
  var isHex = function (hex) {
      return ((_.isString(hex) || _.isNumber(hex)) && /^(-0x|0x)?[0-9a-f]*$/i.test(hex));
  };
  
  
  /**
   * Returns true if given string is a valid Ethereum block header bloom.
   *
   * TODO UNDOCUMENTED
   *
   * @method isBloom
   * @param {String} hex encoded bloom filter
   * @return {Boolean}
   */
  var isBloom = function (bloom) {
      if (!/^(0x)?[0-9a-f]{512}$/i.test(bloom)) {
          return false;
      } else if (/^(0x)?[0-9a-f]{512}$/.test(bloom) || /^(0x)?[0-9A-F]{512}$/.test(bloom)) {
          return true;
      }
      return false;
  };
  
  /**
   * Returns true if given string is a valid log topic.
   *
   * TODO UNDOCUMENTED
   *
   * @method isTopic
   * @param {String} hex encoded topic
   * @return {Boolean}
   */
  var isTopic = function (topic) {
      if (!/^(0x)?[0-9a-f]{64}$/i.test(topic)) {
          return false;
      } else if (/^(0x)?[0-9a-f]{64}$/.test(topic) || /^(0x)?[0-9A-F]{64}$/.test(topic)) {
          return true;
      }
      return false;
  };
  
  
  /**
   * Hashes values to a sha3 hash using keccak 256
   *
   * To hash a HEX string the hex must have 0x in front.
   *
   * @method sha3
   * @return {String} the sha3 string
   */
  var SHA3_NULL_S = '0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470';
  
  var sha3 = function (value) {
      if (isHexStrict(value) && /^0x/i.test((value).toString())) {
          value = hexToBytes(value);
      }
  
      var returnValue = Hash.keccak256(value); // jshint ignore:line
  
      if(returnValue === SHA3_NULL_S) {
          return null;
      } else {
          return returnValue;
      }
  };
  // expose the under the hood keccak256
  sha3._Hash = Hash;
  
  
  module.exports = {
      BN: BN,
      isBN: isBN,
      isBigNumber: isBigNumber,
      toBN: toBN,
      isAddress: isAddress,
      isBloom: isBloom, // TODO UNDOCUMENTED
      isTopic: isTopic, // TODO UNDOCUMENTED
      checkAddressChecksum: checkAddressChecksum,
      utf8ToHex: utf8ToHex,
      hexToUtf8: hexToUtf8,
      hexToNumber: hexToNumber,
      hexToNumberString: hexToNumberString,
      numberToHex: numberToHex,
      toHex: toHex,
      hexToBytes: hexToBytes,
      bytesToHex: bytesToHex,
      isHex: isHex,
      isHexStrict: isHexStrict,
      leftPad: leftPad,
      rightPad: rightPad,
      toTwosComplement: toTwosComplement,
      sha3: sha3
  };
  
  },{"bn.js":402,"eth-lib/lib/hash":134,"number-to-bn":237,"underscore":325,"utf8":329}],406:[function(require,module,exports){
  module.exports={
    "_from": "web3@1.0.0-beta.36",
    "_id": "web3@1.0.0-beta.36",
    "_inBundle": false,
    "_integrity": "sha512-fZDunw1V0AQS27r5pUN3eOVP7u8YAvyo6vOapdgVRolAu5LgaweP7jncYyLINqIX9ZgWdS5A090bt+ymgaYHsw==",
    "_location": "/web3",
    "_phantomChildren": {},
    "_requested": {
      "type": "version",
      "registry": true,
      "raw": "web3@1.0.0-beta.36",
      "name": "web3",
      "escapedName": "web3",
      "rawSpec": "1.0.0-beta.36",
      "saveSpec": null,
      "fetchSpec": "1.0.0-beta.36"
    },
    "_requiredBy": [
      "#USER",
      "/"
    ],
    "_resolved": "https://registry.npmjs.org/web3/-/web3-1.0.0-beta.36.tgz",
    "_shasum": "2954da9e431124c88396025510d840ba731c8373",
    "_spec": "web3@1.0.0-beta.36",
    "_where": "/Users/alexvlasov/Blockchain/web3swift/web3swiftJSProxy",
    "author": {
      "name": "ethereum.org"
    },
    "authors": [
      {
        "name": "Fabian Vogelsteller",
        "email": "fabian@ethereum.org",
        "homepage": "http://frozeman.de"
      },
      {
        "name": "Marek Kotewicz",
        "email": "marek@parity.io",
        "url": "https://github.com/debris"
      },
      {
        "name": "Marian Oancea",
        "url": "https://github.com/cubedro"
      },
      {
        "name": "Gav Wood",
        "email": "g@parity.io",
        "homepage": "http://gavwood.com"
      },
      {
        "name": "Jeffery Wilcke",
        "email": "jeffrey.wilcke@ethereum.org",
        "url": "https://github.com/obscuren"
      }
    ],
    "bugs": {
      "url": "https://github.com/ethereum/web3.js/issues"
    },
    "bundleDependencies": false,
    "dependencies": {
      "web3-bzz": "1.0.0-beta.36",
      "web3-core": "1.0.0-beta.36",
      "web3-eth": "1.0.0-beta.36",
      "web3-eth-personal": "1.0.0-beta.36",
      "web3-net": "1.0.0-beta.36",
      "web3-shh": "1.0.0-beta.36",
      "web3-utils": "1.0.0-beta.36"
    },
    "deprecated": false,
    "description": "Ethereum JavaScript API",
    "keywords": [
      "Ethereum",
      "JavaScript",
      "API"
    ],
    "license": "LGPL-3.0",
    "main": "src/index.js",
    "name": "web3",
    "namespace": "ethereum",
    "repository": {
      "type": "git",
      "url": "https://github.com/ethereum/web3.js/tree/master/packages/web3"
    },
    "version": "1.0.0-beta.36"
  }
  
  },{}],407:[function(require,module,exports){
  /*
      This file is part of web3.js.
  
      web3.js is free software: you can redistribute it and/or modify
      it under the terms of the GNU Lesser General Public License as published by
      the Free Software Foundation, either version 3 of the License, or
      (at your option) any later version.
  
      web3.js is distributed in the hope that it will be useful,
      but WITHOUT ANY WARRANTY; without even the implied warranty of
      MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
      GNU Lesser General Public License for more details.
  
      You should have received a copy of the GNU Lesser General Public License
      along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
  */
  /**
   * @file index.js
   * @authors:
   *   Fabian Vogelsteller <fabian@ethereum.org>
   *   Gav Wood <gav@parity.io>
   *   Jeffrey Wilcke <jeffrey.wilcke@ethereum.org>
   *   Marek Kotewicz <marek@parity.io>
   *   Marian Oancea <marian@ethereum.org>
   * @date 2017
   */
  
  "use strict";
  
  
  var version = require('../package.json').version;
  var core = require('web3-core');
  var Eth = require('web3-eth');
  var Net = require('web3-net');
  var Personal = require('web3-eth-personal');
  var Shh = require('web3-shh');
  var Bzz = require('web3-bzz');
  var utils = require('web3-utils');
  
  var Web3 = function Web3() {
      var _this = this;
  
      // sets _requestmanager etc
      core.packageInit(this, arguments);
  
      this.version = version;
      this.utils = utils;
  
      this.eth = new Eth(this);
      this.shh = new Shh(this);
      this.bzz = new Bzz(this);
  
      // overwrite package setProvider
      var setProvider = this.setProvider;
      this.setProvider = function (provider, net) {
          setProvider.apply(_this, arguments);
  
          this.eth.setProvider(provider, net);
          this.shh.setProvider(provider, net);
          this.bzz.setProvider(provider);
  
          return true;
      };
  };
  
  Web3.version = version;
  Web3.utils = utils;
  Web3.modules = {
      Eth: Eth,
      Net: Net,
      Personal: Personal,
      Shh: Shh,
      Bzz: Bzz
  };
  
  core.addProviders(Web3);
  
  module.exports = Web3;
  
  
  },{"../package.json":406,"web3-bzz":335,"web3-core":348,"web3-eth":371,"web3-eth-personal":369,"web3-net":372,"web3-shh":401,"web3-utils":403}],408:[function(require,module,exports){
  var _global = (function() { return this || {}; })();
  var NativeWebSocket = _global.WebSocket || _global.MozWebSocket;
  var websocket_version = require('./version');
  
  
  /**
   * Expose a W3C WebSocket class with just one or two arguments.
   */
  function W3CWebSocket(uri, protocols) {
    var native_instance;
  
    if (protocols) {
      native_instance = new NativeWebSocket(uri, protocols);
    }
    else {
      native_instance = new NativeWebSocket(uri);
    }
  
    /**
     * 'native_instance' is an instance of nativeWebSocket (the browser's WebSocket
     * class). Since it is an Object it will be returned as it is when creating an
     * instance of W3CWebSocket via 'new W3CWebSocket()'.
     *
     * ECMAScript 5: http://bclary.com/2004/11/07/#a-13.2.2
     */
    return native_instance;
  }
  if (NativeWebSocket) {
    ['CONNECTING', 'OPEN', 'CLOSING', 'CLOSED'].forEach(function(prop) {
      Object.defineProperty(W3CWebSocket, prop, {
        get: function() { return NativeWebSocket[prop]; }
      });
    });
  }
  
  /**
   * Module exports.
   */
  module.exports = {
      'w3cwebsocket' : NativeWebSocket ? W3CWebSocket : null,
      'version'      : websocket_version
  };
  
  },{"./version":409}],409:[function(require,module,exports){
  module.exports = require('../package.json').version;
  
  },{"../package.json":410}],410:[function(require,module,exports){
  module.exports={
    "_from": "git://github.com/frozeman/WebSocket-Node.git#browserifyCompatible",
    "_id": "websocket@1.0.26",
    "_inBundle": false,
    "_integrity": "",
    "_location": "/websocket",
    "_phantomChildren": {},
    "_requested": {
      "type": "git",
      "raw": "websocket@git://github.com/frozeman/WebSocket-Node.git#browserifyCompatible",
      "name": "websocket",
      "escapedName": "websocket",
      "rawSpec": "git://github.com/frozeman/WebSocket-Node.git#browserifyCompatible",
      "saveSpec": "git://github.com/frozeman/WebSocket-Node.git#browserifyCompatible",
      "fetchSpec": "git://github.com/frozeman/WebSocket-Node.git",
      "gitCommittish": "browserifyCompatible"
    },
    "_requiredBy": [
      "/web3-providers-ws"
    ],
    "_resolved": "git://github.com/frozeman/WebSocket-Node.git#6c72925e3f8aaaea8dc8450f97627e85263999f2",
    "_spec": "websocket@git://github.com/frozeman/WebSocket-Node.git#browserifyCompatible",
    "_where": "/Users/alexvlasov/Blockchain/web3swift/web3swiftJSProxy/node_modules/web3-providers-ws",
    "author": {
      "name": "Brian McKelvey",
      "email": "brian@worlize.com",
      "url": "https://www.worlize.com/"
    },
    "browser": "lib/browser.js",
    "bugs": {
      "url": "https://github.com/theturtle32/WebSocket-Node/issues"
    },
    "bundleDependencies": false,
    "config": {
      "verbose": false
    },
    "contributors": [
      {
        "name": "IÃ±aki Baz Castillo",
        "email": "ibc@aliax.net",
        "url": "http://dev.sipdoc.net"
      }
    ],
    "dependencies": {
      "debug": "^2.2.0",
      "nan": "^2.3.3",
      "typedarray-to-buffer": "^3.1.2",
      "yaeti": "^0.0.6"
    },
    "deprecated": false,
    "description": "Websocket Client & Server Library implementing the WebSocket protocol as specified in RFC 6455.",
    "devDependencies": {
      "buffer-equal": "^1.0.0",
      "faucet": "^0.0.1",
      "gulp": "git+https://github.com/gulpjs/gulp.git#4.0",
      "gulp-jshint": "^2.0.4",
      "jshint": "^2.0.0",
      "jshint-stylish": "^2.2.1",
      "tape": "^4.0.1"
    },
    "directories": {
      "lib": "./lib"
    },
    "engines": {
      "node": ">=0.10.0"
    },
    "homepage": "https://github.com/theturtle32/WebSocket-Node",
    "keywords": [
      "websocket",
      "websockets",
      "socket",
      "networking",
      "comet",
      "push",
      "RFC-6455",
      "realtime",
      "server",
      "client"
    ],
    "license": "Apache-2.0",
    "main": "index",
    "name": "websocket",
    "repository": {
      "type": "git",
      "url": "git+https://github.com/theturtle32/WebSocket-Node.git"
    },
    "scripts": {
      "gulp": "gulp",
      "install": "(node-gyp rebuild 2> builderror.log) || (exit 0)",
      "test": "faucet test/unit"
    },
    "version": "1.0.26"
  }
  
  },{}],411:[function(require,module,exports){
  var request = require('xhr-request')
  
  module.exports = function (url, options) {
    return new Promise(function (resolve, reject) {
      request(url, options, function (err, data) {
        if (err) reject(err);
        else resolve(data);
      });
    });
  };
  
  },{"xhr-request":412}],412:[function(require,module,exports){
  var queryString = require('query-string')
  var setQuery = require('url-set-query')
  var assign = require('object-assign')
  var ensureHeader = require('./lib/ensure-header.js')
  
  // this is replaced in the browser
  var request = require('./lib/request.js')
  
  var mimeTypeJson = 'application/json'
  var noop = function () {}
  
  module.exports = xhrRequest
  function xhrRequest (url, opt, cb) {
    if (!url || typeof url !== 'string') {
      throw new TypeError('must specify a URL')
    }
    if (typeof opt === 'function') {
      cb = opt
      opt = {}
    }
    if (cb && typeof cb !== 'function') {
      throw new TypeError('expected cb to be undefined or a function')
    }
  
    cb = cb || noop
    opt = opt || {}
  
    var defaultResponse = opt.json ? 'json' : 'text'
    opt = assign({ responseType: defaultResponse }, opt)
  
    var headers = opt.headers || {}
    var method = (opt.method || 'GET').toUpperCase()
    var query = opt.query
    if (query) {
      if (typeof query !== 'string') {
        query = queryString.stringify(query)
      }
      url = setQuery(url, query)
    }
  
    // allow json response
    if (opt.responseType === 'json') {
      ensureHeader(headers, 'Accept', mimeTypeJson)
    }
  
    // if body content is json
    if (opt.json && method !== 'GET' && method !== 'HEAD') {
      ensureHeader(headers, 'Content-Type', mimeTypeJson)
      opt.body = JSON.stringify(opt.body)
    }
  
    opt.method = method
    opt.url = url
    opt.headers = headers
    delete opt.query
    delete opt.json
  
    return request(opt, cb)
  }
  
  },{"./lib/ensure-header.js":413,"./lib/request.js":415,"object-assign":238,"query-string":266,"url-set-query":326}],413:[function(require,module,exports){
  module.exports = ensureHeader
  function ensureHeader (headers, key, value) {
    var lower = key.toLowerCase()
    if (!headers[key] && !headers[lower]) {
      headers[key] = value
    }
  }
  
  },{}],414:[function(require,module,exports){
  module.exports = getResponse
  function getResponse (opt, resp) {
    if (!resp) return null
    return {
      statusCode: resp.statusCode,
      headers: resp.headers,
      method: opt.method,
      url: opt.url,
      // the XHR object in browser, http response in Node
      rawRequest: resp.rawRequest ? resp.rawRequest : resp
    }
  }
  
  },{}],415:[function(require,module,exports){
  var xhr = require('xhr')
  var normalize = require('./normalize-response')
  var noop = function () {}
  
  module.exports = xhrRequest
  function xhrRequest (opt, cb) {
    delete opt.uri
  
    // for better JSON.parse error handling than xhr module
    var useJson = false
    if (opt.responseType === 'json') {
      opt.responseType = 'text'
      useJson = true
    }
  
    var req = xhr(opt, function xhrRequestResult (err, resp, body) {
      if (useJson && !err) {
        try {
          var text = resp.rawRequest.responseText
          body = JSON.parse(text)
        } catch (e) {
          err = e
        }
      }
  
      resp = normalize(opt, resp)
      if (err) cb(err, null, resp)
      else cb(err, body, resp)
      cb = noop
    })
  
    // Patch abort() so that it also calls the callback, but with an error
    var onabort = req.onabort
    req.onabort = function () {
      var ret = onabort.apply(req, Array.prototype.slice.call(arguments))
      cb(new Error('XHR Aborted'))
      cb = noop
      return ret
    }
  
    return req
  }
  
  },{"./normalize-response":414,"xhr":416}],416:[function(require,module,exports){
  "use strict";
  var window = require("global/window")
  var isFunction = require("is-function")
  var parseHeaders = require("parse-headers")
  var xtend = require("xtend")
  
  module.exports = createXHR
  // Allow use of default import syntax in TypeScript
  module.exports.default = createXHR;
  createXHR.XMLHttpRequest = window.XMLHttpRequest || noop
  createXHR.XDomainRequest = "withCredentials" in (new createXHR.XMLHttpRequest()) ? createXHR.XMLHttpRequest : window.XDomainRequest
  
  forEachArray(["get", "put", "post", "patch", "head", "delete"], function(method) {
      createXHR[method === "delete" ? "del" : method] = function(uri, options, callback) {
          options = initParams(uri, options, callback)
          options.method = method.toUpperCase()
          return _createXHR(options)
      }
  })
  
  function forEachArray(array, iterator) {
      for (var i = 0; i < array.length; i++) {
          iterator(array[i])
      }
  }
  
  function isEmpty(obj){
      for(var i in obj){
          if(obj.hasOwnProperty(i)) return false
      }
      return true
  }
  
  function initParams(uri, options, callback) {
      var params = uri
  
      if (isFunction(options)) {
          callback = options
          if (typeof uri === "string") {
              params = {uri:uri}
          }
      } else {
          params = xtend(options, {uri: uri})
      }
  
      params.callback = callback
      return params
  }
  
  function createXHR(uri, options, callback) {
      options = initParams(uri, options, callback)
      return _createXHR(options)
  }
  
  function _createXHR(options) {
      if(typeof options.callback === "undefined"){
          throw new Error("callback argument missing")
      }
  
      var called = false
      var callback = function cbOnce(err, response, body){
          if(!called){
              called = true
              options.callback(err, response, body)
          }
      }
  
      function readystatechange() {
          if (xhr.readyState === 4) {
              setTimeout(loadFunc, 0)
          }
      }
  
      function getBody() {
          // Chrome with requestType=blob throws errors around when even testing access to responseText
          var body = undefined
  
          if (xhr.response) {
              body = xhr.response
          } else {
              body = xhr.responseText || getXml(xhr)
          }
  
          if (isJson) {
              try {
                  body = JSON.parse(body)
              } catch (e) {}
          }
  
          return body
      }
  
      function errorFunc(evt) {
          clearTimeout(timeoutTimer)
          if(!(evt instanceof Error)){
              evt = new Error("" + (evt || "Unknown XMLHttpRequest Error") )
          }
          evt.statusCode = 0
          return callback(evt, failureResponse)
      }
  
      // will load the data & process the response in a special response object
      function loadFunc() {
          if (aborted) return
          var status
          clearTimeout(timeoutTimer)
          if(options.useXDR && xhr.status===undefined) {
              //IE8 CORS GET successful response doesn't have a status field, but body is fine
              status = 200
          } else {
              status = (xhr.status === 1223 ? 204 : xhr.status)
          }
          var response = failureResponse
          var err = null
  
          if (status !== 0){
              response = {
                  body: getBody(),
                  statusCode: status,
                  method: method,
                  headers: {},
                  url: uri,
                  rawRequest: xhr
              }
              if(xhr.getAllResponseHeaders){ //remember xhr can in fact be XDR for CORS in IE
                  response.headers = parseHeaders(xhr.getAllResponseHeaders())
              }
          } else {
              err = new Error("Internal XMLHttpRequest Error")
          }
          return callback(err, response, response.body)
      }
  
      var xhr = options.xhr || null
  
      if (!xhr) {
          if (options.cors || options.useXDR) {
              xhr = new createXHR.XDomainRequest()
          }else{
              xhr = new createXHR.XMLHttpRequest()
          }
      }
  
      var key
      var aborted
      var uri = xhr.url = options.uri || options.url
      var method = xhr.method = options.method || "GET"
      var body = options.body || options.data
      var headers = xhr.headers = options.headers || {}
      var sync = !!options.sync
      var isJson = false
      var timeoutTimer
      var failureResponse = {
          body: undefined,
          headers: {},
          statusCode: 0,
          method: method,
          url: uri,
          rawRequest: xhr
      }
  
      if ("json" in options && options.json !== false) {
          isJson = true
          headers["accept"] || headers["Accept"] || (headers["Accept"] = "application/json") //Don't override existing accept header declared by user
          if (method !== "GET" && method !== "HEAD") {
              headers["content-type"] || headers["Content-Type"] || (headers["Content-Type"] = "application/json") //Don't override existing accept header declared by user
              body = JSON.stringify(options.json === true ? body : options.json)
          }
      }
  
      xhr.onreadystatechange = readystatechange
      xhr.onload = loadFunc
      xhr.onerror = errorFunc
      // IE9 must have onprogress be set to a unique function.
      xhr.onprogress = function () {
          // IE must die
      }
      xhr.onabort = function(){
          aborted = true;
      }
      xhr.ontimeout = errorFunc
      xhr.open(method, uri, !sync, options.username, options.password)
      //has to be after open
      if(!sync) {
          xhr.withCredentials = !!options.withCredentials
      }
      // Cannot set timeout with sync request
      // not setting timeout on the xhr object, because of old webkits etc. not handling that correctly
      // both npm's request and jquery 1.x use this kind of timeout, so this is being consistent
      if (!sync && options.timeout > 0 ) {
          timeoutTimer = setTimeout(function(){
              if (aborted) return
              aborted = true//IE9 may still call readystatechange
              xhr.abort("timeout")
              var e = new Error("XMLHttpRequest timeout")
              e.code = "ETIMEDOUT"
              errorFunc(e)
          }, options.timeout )
      }
  
      if (xhr.setRequestHeader) {
          for(key in headers){
              if(headers.hasOwnProperty(key)){
                  xhr.setRequestHeader(key, headers[key])
              }
          }
      } else if (options.headers && !isEmpty(options.headers)) {
          throw new Error("Headers cannot be set on an XDomainRequest object")
      }
  
      if ("responseType" in options) {
          xhr.responseType = options.responseType
      }
  
      if ("beforeSend" in options &&
          typeof options.beforeSend === "function"
      ) {
          options.beforeSend(xhr)
      }
  
      // Microsoft Edge browser sends "undefined" when send is called with undefined value.
      // XMLHttpRequest spec says to pass null as body to indicate no body
      // See https://github.com/naugtur/xhr/issues/100.
      xhr.send(body || null)
  
      return xhr
  
  
  }
  
  function getXml(xhr) {
      // xhr.responseXML will throw Exception "InvalidStateError" or "DOMException"
      // See https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/responseXML.
      try {
          if (xhr.responseType === "document") {
              return xhr.responseXML
          }
          var firefoxBugTakenEffect = xhr.responseXML && xhr.responseXML.documentElement.nodeName === "parsererror"
          if (xhr.responseType === "" && !firefoxBugTakenEffect) {
              return xhr.responseXML
          }
      } catch (e) {}
  
      return null
  }
  
  function noop() {}
  
  },{"global/window":160,"is-function":184,"parse-headers":246,"xtend":423}],417:[function(require,module,exports){
  "use strict";
  var __extends = (this && this.__extends) || (function () {
      var extendStatics = Object.setPrototypeOf ||
          ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
          function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
      return function (d, b) {
          extendStatics(d, b);
          function __() { this.constructor = d; }
          d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
  })();
  Object.defineProperty(exports, "__esModule", { value: true });
  var SecurityError = /** @class */ (function (_super) {
      __extends(SecurityError, _super);
      function SecurityError() {
          return _super !== null && _super.apply(this, arguments) || this;
      }
      return SecurityError;
  }(Error));
  exports.SecurityError = SecurityError;
  var InvalidStateError = /** @class */ (function (_super) {
      __extends(InvalidStateError, _super);
      function InvalidStateError() {
          return _super !== null && _super.apply(this, arguments) || this;
      }
      return InvalidStateError;
  }(Error));
  exports.InvalidStateError = InvalidStateError;
  var NetworkError = /** @class */ (function (_super) {
      __extends(NetworkError, _super);
      function NetworkError() {
          return _super !== null && _super.apply(this, arguments) || this;
      }
      return NetworkError;
  }(Error));
  exports.NetworkError = NetworkError;
  var SyntaxError = /** @class */ (function (_super) {
      __extends(SyntaxError, _super);
      function SyntaxError() {
          return _super !== null && _super.apply(this, arguments) || this;
      }
      return SyntaxError;
  }(Error));
  exports.SyntaxError = SyntaxError;
  
  },{}],418:[function(require,module,exports){
  "use strict";
  function __export(m) {
      for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
  }
  Object.defineProperty(exports, "__esModule", { value: true });
  __export(require("./xml-http-request"));
  var xml_http_request_event_target_1 = require("./xml-http-request-event-target");
  exports.XMLHttpRequestEventTarget = xml_http_request_event_target_1.XMLHttpRequestEventTarget;
  
  },{"./xml-http-request":422,"./xml-http-request-event-target":420}],419:[function(require,module,exports){
  "use strict";
  Object.defineProperty(exports, "__esModule", { value: true });
  var ProgressEvent = /** @class */ (function () {
      function ProgressEvent(type) {
          this.type = type;
          this.bubbles = false;
          this.cancelable = false;
          this.loaded = 0;
          this.lengthComputable = false;
          this.total = 0;
      }
      return ProgressEvent;
  }());
  exports.ProgressEvent = ProgressEvent;
  
  },{}],420:[function(require,module,exports){
  "use strict";
  Object.defineProperty(exports, "__esModule", { value: true });
  var XMLHttpRequestEventTarget = /** @class */ (function () {
      function XMLHttpRequestEventTarget() {
          this.listeners = {};
      }
      XMLHttpRequestEventTarget.prototype.addEventListener = function (eventType, listener) {
          eventType = eventType.toLowerCase();
          this.listeners[eventType] = this.listeners[eventType] || [];
          this.listeners[eventType].push(listener.handleEvent || listener);
      };
      XMLHttpRequestEventTarget.prototype.removeEventListener = function (eventType, listener) {
          eventType = eventType.toLowerCase();
          if (!this.listeners[eventType]) {
              return;
          }
          var index = this.listeners[eventType].indexOf(listener.handleEvent || listener);
          if (index < 0) {
              return;
          }
          this.listeners[eventType].splice(index, 1);
      };
      XMLHttpRequestEventTarget.prototype.dispatchEvent = function (event) {
          var eventType = event.type.toLowerCase();
          event.target = this; // TODO: set event.currentTarget?
          if (this.listeners[eventType]) {
              for (var _i = 0, _a = this.listeners[eventType]; _i < _a.length; _i++) {
                  var listener_1 = _a[_i];
                  listener_1.call(this, event);
              }
          }
          var listener = this["on" + eventType];
          if (listener) {
              listener.call(this, event);
          }
          return true;
      };
      return XMLHttpRequestEventTarget;
  }());
  exports.XMLHttpRequestEventTarget = XMLHttpRequestEventTarget;
  
  },{}],421:[function(require,module,exports){
  (function (Buffer){
  "use strict";
  var __extends = (this && this.__extends) || (function () {
      var extendStatics = Object.setPrototypeOf ||
          ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
          function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
      return function (d, b) {
          extendStatics(d, b);
          function __() { this.constructor = d; }
          d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
  })();
  Object.defineProperty(exports, "__esModule", { value: true });
  var xml_http_request_event_target_1 = require("./xml-http-request-event-target");
  var XMLHttpRequestUpload = /** @class */ (function (_super) {
      __extends(XMLHttpRequestUpload, _super);
      function XMLHttpRequestUpload() {
          var _this = _super.call(this) || this;
          _this._contentType = null;
          _this._body = null;
          _this._reset();
          return _this;
      }
      XMLHttpRequestUpload.prototype._reset = function () {
          this._contentType = null;
          this._body = null;
      };
      XMLHttpRequestUpload.prototype._setData = function (data) {
          if (data == null) {
              return;
          }
          if (typeof data === 'string') {
              if (data.length !== 0) {
                  this._contentType = 'text/plain;charset=UTF-8';
              }
              this._body = new Buffer(data, 'utf-8');
          }
          else if (Buffer.isBuffer(data)) {
              this._body = data;
          }
          else if (data instanceof ArrayBuffer) {
              var body = new Buffer(data.byteLength);
              var view = new Uint8Array(data);
              for (var i = 0; i < data.byteLength; i++) {
                  body[i] = view[i];
              }
              this._body = body;
          }
          else if (data.buffer && data.buffer instanceof ArrayBuffer) {
              var body = new Buffer(data.byteLength);
              var offset = data.byteOffset;
              var view = new Uint8Array(data.buffer);
              for (var i = 0; i < data.byteLength; i++) {
                  body[i] = view[i + offset];
              }
              this._body = body;
          }
          else {
              throw new Error("Unsupported send() data " + data);
          }
      };
      XMLHttpRequestUpload.prototype._finalizeHeaders = function (headers, loweredHeaders) {
          if (this._contentType && !loweredHeaders['content-type']) {
              headers['Content-Type'] = this._contentType;
          }
          if (this._body) {
              headers['Content-Length'] = this._body.length.toString();
          }
      };
      XMLHttpRequestUpload.prototype._startUpload = function (request) {
          if (this._body) {
              request.write(this._body);
          }
          request.end();
      };
      return XMLHttpRequestUpload;
  }(xml_http_request_event_target_1.XMLHttpRequestEventTarget));
  exports.XMLHttpRequestUpload = XMLHttpRequestUpload;
  
  }).call(this,require("buffer").Buffer)
  },{"./xml-http-request-event-target":420,"buffer":84}],422:[function(require,module,exports){
  (function (process,Buffer){
  "use strict";
  var __extends = (this && this.__extends) || (function () {
      var extendStatics = Object.setPrototypeOf ||
          ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
          function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
      return function (d, b) {
          extendStatics(d, b);
          function __() { this.constructor = d; }
          d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
  })();
  var __assign = (this && this.__assign) || Object.assign || function(t) {
      for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];
          for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
              t[p] = s[p];
      }
      return t;
  };
  Object.defineProperty(exports, "__esModule", { value: true });
  var http = require("http");
  var https = require("https");
  var os = require("os");
  var url = require("url");
  var progress_event_1 = require("./progress-event");
  var errors_1 = require("./errors");
  var xml_http_request_event_target_1 = require("./xml-http-request-event-target");
  var xml_http_request_upload_1 = require("./xml-http-request-upload");
  var Cookie = require("cookiejar");
  var XMLHttpRequest = /** @class */ (function (_super) {
      __extends(XMLHttpRequest, _super);
      function XMLHttpRequest(options) {
          if (options === void 0) { options = {}; }
          var _this = _super.call(this) || this;
          _this.UNSENT = XMLHttpRequest.UNSENT;
          _this.OPENED = XMLHttpRequest.OPENED;
          _this.HEADERS_RECEIVED = XMLHttpRequest.HEADERS_RECEIVED;
          _this.LOADING = XMLHttpRequest.LOADING;
          _this.DONE = XMLHttpRequest.DONE;
          _this.onreadystatechange = null;
          _this.readyState = XMLHttpRequest.UNSENT;
          _this.response = null;
          _this.responseText = '';
          _this.responseType = '';
          _this.status = 0; // TODO: UNSENT?
          _this.statusText = '';
          _this.timeout = 0;
          _this.upload = new xml_http_request_upload_1.XMLHttpRequestUpload();
          _this.responseUrl = '';
          _this.withCredentials = false;
          _this._method = null;
          _this._url = null;
          _this._sync = false;
          _this._headers = {};
          _this._loweredHeaders = {};
          _this._mimeOverride = null; // TODO: is type right?
          _this._request = null;
          _this._response = null;
          _this._responseParts = null;
          _this._responseHeaders = null;
          _this._aborting = null; // TODO: type?
          _this._error = null; // TODO: type?
          _this._loadedBytes = 0;
          _this._totalBytes = 0;
          _this._lengthComputable = false;
          _this._restrictedMethods = { CONNECT: true, TRACE: true, TRACK: true };
          _this._restrictedHeaders = {
              'accept-charset': true,
              'accept-encoding': true,
              'access-control-request-headers': true,
              'access-control-request-method': true,
              connection: true,
              'content-length': true,
              cookie: true,
              cookie2: true,
              date: true,
              dnt: true,
              expect: true,
              host: true,
              'keep-alive': true,
              origin: true,
              referer: true,
              te: true,
              trailer: true,
              'transfer-encoding': true,
              upgrade: true,
              'user-agent': true,
              via: true
          };
          _this._privateHeaders = { 'set-cookie': true, 'set-cookie2': true };
          _this._userAgent = "Mozilla/5.0 (" + os.type() + " " + os.arch() + ") node.js/" + process.versions.node + " v8/" + process.versions.v8;
          _this._anonymous = options.anon || false;
          return _this;
      }
      XMLHttpRequest.prototype.open = function (method, url, async, user, password) {
          if (async === void 0) { async = true; }
          method = method.toUpperCase();
          if (this._restrictedMethods[method]) {
              throw new XMLHttpRequest.SecurityError("HTTP method " + method + " is not allowed in XHR");
          }
          ;
          var xhrUrl = this._parseUrl(url, user, password);
          if (this.readyState === XMLHttpRequest.HEADERS_RECEIVED || this.readyState === XMLHttpRequest.LOADING) {
              // TODO(pwnall): terminate abort(), terminate send()
          }
          this._method = method;
          this._url = xhrUrl;
          this._sync = !async;
          this._headers = {};
          this._loweredHeaders = {};
          this._mimeOverride = null;
          this._setReadyState(XMLHttpRequest.OPENED);
          this._request = null;
          this._response = null;
          this.status = 0;
          this.statusText = '';
          this._responseParts = [];
          this._responseHeaders = null;
          this._loadedBytes = 0;
          this._totalBytes = 0;
          this._lengthComputable = false;
      };
      XMLHttpRequest.prototype.setRequestHeader = function (name, value) {
          if (this.readyState !== XMLHttpRequest.OPENED) {
              throw new XMLHttpRequest.InvalidStateError('XHR readyState must be OPENED');
          }
          var loweredName = name.toLowerCase();
          if (this._restrictedHeaders[loweredName] || /^sec-/.test(loweredName) || /^proxy-/.test(loweredName)) {
              console.warn("Refused to set unsafe header \"" + name + "\"");
              return;
          }
          value = value.toString();
          if (this._loweredHeaders[loweredName] != null) {
              name = this._loweredHeaders[loweredName];
              this._headers[name] = this._headers[name] + ", " + value;
          }
          else {
              this._loweredHeaders[loweredName] = name;
              this._headers[name] = value;
          }
      };
      XMLHttpRequest.prototype.send = function (data) {
          if (this.readyState !== XMLHttpRequest.OPENED) {
              throw new XMLHttpRequest.InvalidStateError('XHR readyState must be OPENED');
          }
          if (this._request) {
              throw new XMLHttpRequest.InvalidStateError('send() already called');
          }
          switch (this._url.protocol) {
              case 'file:':
                  return this._sendFile(data);
              case 'http:':
              case 'https:':
                  return this._sendHttp(data);
              default:
                  throw new XMLHttpRequest.NetworkError("Unsupported protocol " + this._url.protocol);
          }
      };
      XMLHttpRequest.prototype.abort = function () {
          if (this._request == null) {
              return;
          }
          this._request.abort();
          this._setError();
          this._dispatchProgress('abort');
          this._dispatchProgress('loadend');
      };
      XMLHttpRequest.prototype.getResponseHeader = function (name) {
          if (this._responseHeaders == null || name == null) {
              return null;
          }
          var loweredName = name.toLowerCase();
          return this._responseHeaders.hasOwnProperty(loweredName)
              ? this._responseHeaders[name.toLowerCase()]
              : null;
      };
      XMLHttpRequest.prototype.getAllResponseHeaders = function () {
          var _this = this;
          if (this._responseHeaders == null) {
              return '';
          }
          return Object.keys(this._responseHeaders).map(function (key) { return key + ": " + _this._responseHeaders[key]; }).join('\r\n');
      };
      XMLHttpRequest.prototype.overrideMimeType = function (mimeType) {
          if (this.readyState === XMLHttpRequest.LOADING || this.readyState === XMLHttpRequest.DONE) {
              throw new XMLHttpRequest.InvalidStateError('overrideMimeType() not allowed in LOADING or DONE');
          }
          this._mimeOverride = mimeType.toLowerCase();
      };
      XMLHttpRequest.prototype.nodejsSet = function (options) {
          this.nodejsHttpAgent = options.httpAgent || this.nodejsHttpAgent;
          this.nodejsHttpsAgent = options.httpsAgent || this.nodejsHttpsAgent;
          if (options.hasOwnProperty('baseUrl')) {
              if (options.baseUrl != null) {
                  var parsedUrl = url.parse(options.baseUrl, false, true);
                  if (!parsedUrl.protocol) {
                      throw new XMLHttpRequest.SyntaxError("baseUrl must be an absolute URL");
                  }
              }
              this.nodejsBaseUrl = options.baseUrl;
          }
      };
      XMLHttpRequest.nodejsSet = function (options) {
          XMLHttpRequest.prototype.nodejsSet(options);
      };
      XMLHttpRequest.prototype._setReadyState = function (readyState) {
          this.readyState = readyState;
          this.dispatchEvent(new progress_event_1.ProgressEvent('readystatechange'));
      };
      XMLHttpRequest.prototype._sendFile = function (data) {
          // TODO
          throw new Error('Protocol file: not implemented');
      };
      XMLHttpRequest.prototype._sendHttp = function (data) {
          if (this._sync) {
              throw new Error('Synchronous XHR processing not implemented');
          }
          if (data && (this._method === 'GET' || this._method === 'HEAD')) {
              console.warn("Discarding entity body for " + this._method + " requests");
              data = null;
          }
          else {
              data = data || '';
          }
          this.upload._setData(data);
          this._finalizeHeaders();
          this._sendHxxpRequest();
      };
      XMLHttpRequest.prototype._sendHxxpRequest = function () {
          var _this = this;
          if (this.withCredentials) {
              var cookie = XMLHttpRequest.cookieJar
                  .getCookies(Cookie.CookieAccessInfo(this._url.hostname, this._url.pathname, this._url.protocol === 'https:')).toValueString();
              this._headers.cookie = this._headers.cookie2 = cookie;
          }
          var _a = this._url.protocol === 'http:' ? [http, this.nodejsHttpAgent] : [https, this.nodejsHttpsAgent], hxxp = _a[0], agent = _a[1];
          var requestMethod = hxxp.request.bind(hxxp);
          var request = requestMethod({
              hostname: this._url.hostname,
              port: +this._url.port,
              path: this._url.path,
              auth: this._url.auth,
              method: this._method,
              headers: this._headers,
              agent: agent
          });
          this._request = request;
          if (this.timeout) {
              request.setTimeout(this.timeout, function () { return _this._onHttpTimeout(request); });
          }
          request.on('response', function (response) { return _this._onHttpResponse(request, response); });
          request.on('error', function (error) { return _this._onHttpRequestError(request, error); });
          this.upload._startUpload(request);
          if (this._request === request) {
              this._dispatchProgress('loadstart');
          }
      };
      XMLHttpRequest.prototype._finalizeHeaders = function () {
          this._headers = __assign({}, this._headers, { Connection: 'keep-alive', Host: this._url.host, 'User-Agent': this._userAgent }, this._anonymous ? { Referer: 'about:blank' } : {});
          this.upload._finalizeHeaders(this._headers, this._loweredHeaders);
      };
      XMLHttpRequest.prototype._onHttpResponse = function (request, response) {
          var _this = this;
          if (this._request !== request) {
              return;
          }
          if (this.withCredentials && (response.headers['set-cookie'] || response.headers['set-cookie2'])) {
              XMLHttpRequest.cookieJar
                  .setCookies(response.headers['set-cookie'] || response.headers['set-cookie2']);
          }
          if ([301, 302, 303, 307, 308].indexOf(response.statusCode) >= 0) {
              this._url = this._parseUrl(response.headers.location);
              this._method = 'GET';
              if (this._loweredHeaders['content-type']) {
                  delete this._headers[this._loweredHeaders['content-type']];
                  delete this._loweredHeaders['content-type'];
              }
              if (this._headers['Content-Type'] != null) {
                  delete this._headers['Content-Type'];
              }
              delete this._headers['Content-Length'];
              this.upload._reset();
              this._finalizeHeaders();
              this._sendHxxpRequest();
              return;
          }
          this._response = response;
          this._response.on('data', function (data) { return _this._onHttpResponseData(response, data); });
          this._response.on('end', function () { return _this._onHttpResponseEnd(response); });
          this._response.on('close', function () { return _this._onHttpResponseClose(response); });
          this.responseUrl = this._url.href.split('#')[0];
          this.status = response.statusCode;
          this.statusText = http.STATUS_CODES[this.status];
          this._parseResponseHeaders(response);
          var lengthString = this._responseHeaders['content-length'] || '';
          this._totalBytes = +lengthString;
          this._lengthComputable = !!lengthString;
          this._setReadyState(XMLHttpRequest.HEADERS_RECEIVED);
      };
      XMLHttpRequest.prototype._onHttpResponseData = function (response, data) {
          if (this._response !== response) {
              return;
          }
          this._responseParts.push(new Buffer(data));
          this._loadedBytes += data.length;
          if (this.readyState !== XMLHttpRequest.LOADING) {
              this._setReadyState(XMLHttpRequest.LOADING);
          }
          this._dispatchProgress('progress');
      };
      XMLHttpRequest.prototype._onHttpResponseEnd = function (response) {
          if (this._response !== response) {
              return;
          }
          this._parseResponse();
          this._request = null;
          this._response = null;
          this._setReadyState(XMLHttpRequest.DONE);
          this._dispatchProgress('load');
          this._dispatchProgress('loadend');
      };
      XMLHttpRequest.prototype._onHttpResponseClose = function (response) {
          if (this._response !== response) {
              return;
          }
          var request = this._request;
          this._setError();
          request.abort();
          this._setReadyState(XMLHttpRequest.DONE);
          this._dispatchProgress('error');
          this._dispatchProgress('loadend');
      };
      XMLHttpRequest.prototype._onHttpTimeout = function (request) {
          if (this._request !== request) {
              return;
          }
          this._setError();
          request.abort();
          this._setReadyState(XMLHttpRequest.DONE);
          this._dispatchProgress('timeout');
          this._dispatchProgress('loadend');
      };
      XMLHttpRequest.prototype._onHttpRequestError = function (request, error) {
          if (this._request !== request) {
              return;
          }
          this._setError();
          request.abort();
          this._setReadyState(XMLHttpRequest.DONE);
          this._dispatchProgress('error');
          this._dispatchProgress('loadend');
      };
      XMLHttpRequest.prototype._dispatchProgress = function (eventType) {
          var event = new XMLHttpRequest.ProgressEvent(eventType);
          event.lengthComputable = this._lengthComputable;
          event.loaded = this._loadedBytes;
          event.total = this._totalBytes;
          this.dispatchEvent(event);
      };
      XMLHttpRequest.prototype._setError = function () {
          this._request = null;
          this._response = null;
          this._responseHeaders = null;
          this._responseParts = null;
      };
      XMLHttpRequest.prototype._parseUrl = function (urlString, user, password) {
          var absoluteUrl = this.nodejsBaseUrl == null ? urlString : url.resolve(this.nodejsBaseUrl, urlString);
          var xhrUrl = url.parse(absoluteUrl, false, true);
          xhrUrl.hash = null;
          var _a = (xhrUrl.auth || '').split(':'), xhrUser = _a[0], xhrPassword = _a[1];
          if (xhrUser || xhrPassword || user || password) {
              xhrUrl.auth = (user || xhrUser || '') + ":" + (password || xhrPassword || '');
          }
          return xhrUrl;
      };
      XMLHttpRequest.prototype._parseResponseHeaders = function (response) {
          this._responseHeaders = {};
          for (var name_1 in response.headers) {
              var loweredName = name_1.toLowerCase();
              if (this._privateHeaders[loweredName]) {
                  continue;
              }
              this._responseHeaders[loweredName] = response.headers[name_1];
          }
          if (this._mimeOverride != null) {
              this._responseHeaders['content-type'] = this._mimeOverride;
          }
      };
      XMLHttpRequest.prototype._parseResponse = function () {
          var buffer = Buffer.concat(this._responseParts);
          this._responseParts = null;
          switch (this.responseType) {
              case 'json':
                  this.responseText = null;
                  try {
                      this.response = JSON.parse(buffer.toString('utf-8'));
                  }
                  catch (_a) {
                      this.response = null;
                  }
                  return;
              case 'buffer':
                  this.responseText = null;
                  this.response = buffer;
                  return;
              case 'arraybuffer':
                  this.responseText = null;
                  var arrayBuffer = new ArrayBuffer(buffer.length);
                  var view = new Uint8Array(arrayBuffer);
                  for (var i = 0; i < buffer.length; i++) {
                      view[i] = buffer[i];
                  }
                  this.response = arrayBuffer;
                  return;
              case 'text':
              default:
                  try {
                      this.responseText = buffer.toString(this._parseResponseEncoding());
                  }
                  catch (_b) {
                      this.responseText = buffer.toString('binary');
                  }
                  this.response = this.responseText;
          }
      };
      XMLHttpRequest.prototype._parseResponseEncoding = function () {
          return /;\s*charset=(.*)$/.exec(this._responseHeaders['content-type'] || '')[1] || 'utf-8';
      };
      XMLHttpRequest.ProgressEvent = progress_event_1.ProgressEvent;
      XMLHttpRequest.InvalidStateError = errors_1.InvalidStateError;
      XMLHttpRequest.NetworkError = errors_1.NetworkError;
      XMLHttpRequest.SecurityError = errors_1.SecurityError;
      XMLHttpRequest.SyntaxError = errors_1.SyntaxError;
      XMLHttpRequest.XMLHttpRequestUpload = xml_http_request_upload_1.XMLHttpRequestUpload;
      XMLHttpRequest.UNSENT = 0;
      XMLHttpRequest.OPENED = 1;
      XMLHttpRequest.HEADERS_RECEIVED = 2;
      XMLHttpRequest.LOADING = 3;
      XMLHttpRequest.DONE = 4;
      XMLHttpRequest.cookieJar = Cookie.CookieJar();
      return XMLHttpRequest;
  }(xml_http_request_event_target_1.XMLHttpRequestEventTarget));
  exports.XMLHttpRequest = XMLHttpRequest;
  XMLHttpRequest.prototype.nodejsHttpAgent = http.globalAgent;
  XMLHttpRequest.prototype.nodejsHttpsAgent = https.globalAgent;
  XMLHttpRequest.prototype.nodejsBaseUrl = null;
  
  }).call(this,require('_process'),require("buffer").Buffer)
  },{"./errors":417,"./progress-event":419,"./xml-http-request-event-target":420,"./xml-http-request-upload":421,"_process":257,"buffer":84,"cookiejar":88,"http":312,"https":175,"os":240,"url":327}],423:[function(require,module,exports){
  module.exports = extend
  
  var hasOwnProperty = Object.prototype.hasOwnProperty;
  
  function extend() {
      var target = {}
  
      for (var i = 0; i < arguments.length; i++) {
          var source = arguments[i]
  
          for (var key in source) {
              if (hasOwnProperty.call(source, key)) {
                  target[key] = source[key]
              }
          }
      }
  
      return target
  }
  
  },{}],424:[function(require,module,exports){
  "use strict";
  (function() {
    if (window.isIOS) {
      return;
    }
    window.isIOS = function() {
      return navigator && navigator.userAgent && (/(iPhone|iPad|iPod|iOS)/i.test(navigator.userAgent));
    };
  }());
  (function() {
    if (window.bridge) {
      return;
    }
    window.bridge = function() {
      var callbacks = [],
          callbackID = 0,
          registerHandlers = [];
      document.addEventListener('PacificDidReceiveNativeCallback', function(e) {
        if (e.detail) {
          var detail = e.detail;
          var id = isNaN(parseInt(detail.id)) ? -1 : parseInt(detail.id);
          if (id != -1) {
            callbacks[id] && callbacks[id](detail.parameters, detail.error);
            delete callbacks[id];
          }
        }
      }, false);
      document.addEventListener('PacificDidReceiveNativeBroadcast', function(e) {
        if (e.detail) {
          var detail = e.detail;
          var name = detail.name;
          if (name !== undefined && registerHandlers[name]) {
            var namedListeners = registerHandlers[name];
            if (namedListeners instanceof Array) {
              var parameters = detail.parameters;
              namedListeners.forEach(function(handler) {
                handler(parameters);
              });
            }
          }
        }
      }, false);
      return {
        'post': function(action, parameters, callback, print) {
          var id = callbackID++;
          callbacks[id] = callback;
          if (window.webkit && window.webkit.messageHandlers && window.webkit.messageHandlers.pacific) {
            window.webkit.messageHandlers.pacific.postMessage({
              'action': action,
              'parameters': parameters,
              'callback': id,
              'print': print || 0
            });
          }
        },
        'on': function(name, callback) {
          var namedListeners = registerHandlers[name];
          if (!namedListeners) {
            registerHandlers[name] = namedListeners = [];
          }
          namedListeners.push(callback);
          return function() {
            namedListeners[indexOf(namedListeners, callback)] = null;
          };
        },
        'off': function(name) {
          delete registerHandlers[name];
        }
      };
    }();
  }());
  
  //# sourceURL=/Users/alexvlasov/Blockchain/web3swift/web3swiftJSProxy/wk.bridge.js
  },{}]},{},[1]);
  