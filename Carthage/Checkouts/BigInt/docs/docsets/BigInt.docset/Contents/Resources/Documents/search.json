{"Structs/BigInt/Words.html#/s:Sl7IndicesQa":{"name":"Indices","parent_name":"Words"},"Structs/BigInt/Words.html#/s:Sl5countSivp":{"name":"count","parent_name":"Words"},"Structs/BigInt/Words.html#/s:Sk7indices7IndicesQzvp":{"name":"indices","parent_name":"Words"},"Structs/BigInt/Words.html#/s:Sl10startIndex0B0Qzvp":{"name":"startIndex","parent_name":"Words"},"Structs/BigInt/Words.html#/s:Sl8endIndex0B0Qzvp":{"name":"endIndex","parent_name":"Words"},"Structs/BigInt/Words.html#/s:Sly7ElementQz5IndexQzcip":{"name":"subscript(_:)","parent_name":"Words"},"Structs/BigInt/Sign.html#/s:6BigIntAAV4SignO4plusyA2DmF":{"name":"plus","abstract":"<p>Undocumented</p>","parent_name":"Sign"},"Structs/BigInt/Sign.html#/s:6BigIntAAV4SignO5minusyA2DmF":{"name":"minus","abstract":"<p>Undocumented</p>","parent_name":"Sign"},"Structs/BigInt/Sign.html":{"name":"Sign","abstract":"<p>Undocumented</p>","parent_name":"BigInt"},"Structs/BigInt.html#/s:Sj9MagnitudeQa":{"name":"Magnitude","parent_name":"BigInt"},"Structs/BigInt.html#/s:6BigIntAAV4Worda":{"name":"Word","abstract":"<p>The type representing a digit in <code>BigInt</code>&lsquo;s underlying number system.</p>","parent_name":"BigInt"},"Structs/BigInt.html#/s:Sz8isSignedSbvpZ":{"name":"isSigned","parent_name":"BigInt"},"Structs/BigInt.html#/s:6BigIntAAV9magnitudeAA0A4UIntVvp":{"name":"magnitude","abstract":"<p>The absolute value of this integer.</p>","parent_name":"BigInt"},"Structs/BigInt.html#/s:6BigIntAAV4signAB4SignOvp":{"name":"sign","abstract":"<p>True iff the value of this integer is negative.</p>","parent_name":"BigInt"},"Structs/BigInt.html#/s:6BigIntAAV4sign9magnitudeA2B4SignO_AA0A4UIntVtcfc":{"name":"init(sign:magnitude:)","abstract":"<p>Initializes a new big integer with the provided absolute number and sign flag.</p>","parent_name":"BigInt"},"Structs/BigInt.html#/s:6BigIntAAV6isZeroSbvp":{"name":"isZero","abstract":"<p>Return true iff this integer is zero.</p>","parent_name":"BigInt"},"Structs/BigInt.html#/s:6BigIntAAV6signumAByF":{"name":"signum()","abstract":"<p>Returns <code>-1</code> if this value is negative and <code>1</code> if itâ€™s positive; otherwise, <code>0</code>.</p>","parent_name":"BigInt"},"Structs/BigInt.html#/s:6BigIntAAV1poiyA2B_ABtFZ":{"name":"+(_:_:)","abstract":"<p>Add <code>a</code> to <code>b</code> and return the result.</p>","parent_name":"BigInt"},"Structs/BigInt.html#/s:6BigIntAAV2peoiyyABz_ABtFZ":{"name":"+=(_:_:)","abstract":"<p>Add <code>b</code> to <code>a</code> in place.</p>","parent_name":"BigInt"},"Structs/BigInt.html#/s:6BigIntAAV1topyA2BFZ":{"name":"~(_:)","abstract":"<p>Undocumented</p>","parent_name":"BigInt"},"Structs/BigInt.html#/s:6BigIntAAV1aoiyA2Bz_ABtFZ":{"name":"&(_:_:)","abstract":"<p>Undocumented</p>","parent_name":"BigInt"},"Structs/BigInt.html#/s:6BigIntAAV1ooiyA2Bz_ABtFZ":{"name":"|(_:_:)","abstract":"<p>Undocumented</p>","parent_name":"BigInt"},"Structs/BigInt.html#/s:6BigIntAAV1xoiyA2Bz_ABtFZ":{"name":"^(_:_:)","abstract":"<p>Undocumented</p>","parent_name":"BigInt"},"Structs/BigInt.html#/s:6BigIntAAV2aeoiyyABz_ABtFZ":{"name":"&=(_:_:)","abstract":"<p>Undocumented</p>","parent_name":"BigInt"},"Structs/BigInt.html#/s:6BigIntAAV2oeoiyyABz_ABtFZ":{"name":"|=(_:_:)","abstract":"<p>Undocumented</p>","parent_name":"BigInt"},"Structs/BigInt.html#/s:6BigIntAAV2xeoiyyABz_ABtFZ":{"name":"^=(_:_:)","abstract":"<p>Undocumented</p>","parent_name":"BigInt"},"Structs/BigInt.html#/s:Se4fromxs7Decoder_p_tKcfc":{"name":"init(from:)","parent_name":"BigInt"},"Structs/BigInt.html#/s:SE6encode2toys7Encoder_p_tKF":{"name":"encode(to:)","parent_name":"BigInt"},"Structs/BigInt.html#/s:6BigIntAAV2eeoiySbAB_ABtFZ":{"name":"==(_:_:)","abstract":"<p>Return true iff <code>a</code> is equal to <code>b</code>.</p>","parent_name":"BigInt"},"Structs/BigInt.html#/s:6BigIntAAV1loiySbAB_ABtFZ":{"name":"<(_:_:)","abstract":"<p>Return true iff <code>a</code> is less than <code>b</code>.</p>","parent_name":"BigInt"},"Structs/BigInt.html#/s:6BigIntAAVyABSWcfc":{"name":"init(_:)","abstract":"<p>Initialize a BigInt from bytes accessed from an UnsafeRawBufferPointer,","parent_name":"BigInt"},"Structs/BigInt.html#/s:6BigIntAAVyAB10Foundation4DataVcfc":{"name":"init(_:)","abstract":"<p>Initializes an integer from the bits stored inside a piece of <code>Data</code>.","parent_name":"BigInt"},"Structs/BigInt.html#/s:6BigIntAAV9serialize10Foundation4DataVyF":{"name":"serialize()","abstract":"<p>Return a <code>Data</code> value that contains the base-256 representation of this integer, in network (big-endian) byte order and a prepended byte to indicate the sign (0 for positive, 1 for negative)</p>","parent_name":"BigInt"},"Structs/BigInt.html#/s:6BigIntAAV20quotientAndRemainder10dividingByAB0C0_AB9remaindertAB_tF":{"name":"quotientAndRemainder(dividingBy:)","abstract":"<p>Divide this integer by <code>y</code> and return the resulting quotient and remainder.</p>","parent_name":"BigInt"},"Structs/BigInt.html#/s:6BigIntAAV1doiyA2B_ABtFZ":{"name":"/(_:_:)","abstract":"<p>Divide <code>a</code> by <code>b</code> and return the quotient. Traps if <code>b</code> is zero.</p>","parent_name":"BigInt"},"Structs/BigInt.html#/s:6BigIntAAV1roiyA2B_ABtFZ":{"name":"%(_:_:)","abstract":"<p>Divide <code>a</code> by <code>b</code> and return the remainder. The result has the same sign as <code>a</code>.</p>","parent_name":"BigInt"},"Structs/BigInt.html#/s:6BigIntAAV7modulusyA2BF":{"name":"modulus(_:)","abstract":"<p>Return the result of <code>a</code> mod <code>b</code>. The result is always a nonnegative integer that is less than the absolute value of <code>b</code>.</p>","parent_name":"BigInt"},"Structs/BigInt.html#/s:6BigIntAAV2deoiyyABz_ABtFZ":{"name":"/=(_:_:)","abstract":"<p>Divide <code>a</code> by <code>b</code> storing the quotient in <code>a</code>.</p>","parent_name":"BigInt"},"Structs/BigInt.html#/s:6BigIntAAV2reoiyyABz_ABtFZ":{"name":"%=(_:_:)","abstract":"<p>Divide <code>a</code> by <code>b</code> storing the remainder in <code>a</code>.</p>","parent_name":"BigInt"},"Structs/BigInt.html#/s:6BigIntAAV5poweryABSiF":{"name":"power(_:)","abstract":"<p>Returns this integer raised to the power <code>exponent</code>.</p>","parent_name":"BigInt"},"Structs/BigInt.html#/s:6BigIntAAV5power_7modulusA2B_ABtF":{"name":"power(_:modulus:)","abstract":"<p>Returns the remainder of this integer raised to the power <code>exponent</code> in modulo arithmetic under <code>modulus</code>.</p>","parent_name":"BigInt"},"Structs/BigInt.html#/s:Sz7exactlyxSgqd___tcSBRd__lufc":{"name":"init(exactly:)","parent_name":"BigInt"},"Structs/BigInt.html#/s:Szyxqd__cSBRd__lufc":{"name":"init(_:)","parent_name":"BigInt"},"Structs/BigInt.html#/s:6BigIntAAV21greatestCommonDivisor4withA2B_tF":{"name":"greatestCommonDivisor(with:)","abstract":"<p>Returns the greatest common divisor of <code>a</code> and <code>b</code>.</p>","parent_name":"BigInt"},"Structs/BigInt.html#/s:6BigIntAAV7inverseyABSgABF":{"name":"inverse(_:)","abstract":"<p>Returns the <a href=\"https://en.wikipedia.org/wiki/Extended_Euclidean_algorithm#Modular_integers\">multiplicative inverse of this integer in modulo <code>modulus</code> arithmetic</a>,","parent_name":"BigInt"},"Structs/BigInt.html#/s:6BigIntAAV4hash4intoys6HasherVz_tF":{"name":"hash(into:)","abstract":"<p>Append this <code>BigInt</code> to the specified hasher.</p>","parent_name":"BigInt"},"Structs/BigInt.html#/s:6BigIntAAVABycfc":{"name":"init()","abstract":"<p>Undocumented</p>","parent_name":"BigInt"},"Structs/BigInt.html#/s:6BigIntAAVyAbA0A4UIntVcfc":{"name":"init(_:)","abstract":"<p>Initializes a new signed big integer with the same value as the specified unsigned big integer.</p>","parent_name":"BigInt"},"Structs/BigInt.html#/s:Szyxqd__cSzRd__lufc":{"name":"init(_:)","parent_name":"BigInt"},"Structs/BigInt.html#/s:Sj7exactlyxSgqd___tcSzRd__lufc":{"name":"init(exactly:)","parent_name":"BigInt"},"Structs/BigInt.html#/s:Sz8clampingxqd___tcSzRd__lufc":{"name":"init(clamping:)","parent_name":"BigInt"},"Structs/BigInt.html#/s:Sz18truncatingIfNeededxqd___tcSzRd__lufc":{"name":"init(truncatingIfNeeded:)","parent_name":"BigInt"},"Structs/BigInt.html#/s:6BigIntAAV14integerLiteralABs5Int64V_tcfc":{"name":"init(integerLiteral:)","abstract":"<p>Initialize a new big integer from an integer literal.</p>","parent_name":"BigInt"},"Structs/BigInt.html#/s:6BigIntAAV1moiyA2B_ABtFZ":{"name":"*(_:_:)","abstract":"<p>Multiply <code>a</code> with <code>b</code> and return the result.</p>","parent_name":"BigInt"},"Structs/BigInt.html#/s:6BigIntAAV2meoiyyABz_ABtFZ":{"name":"*=(_:_:)","abstract":"<p>Multiply <code>a</code> with <code>b</code> in place.</p>","parent_name":"BigInt"},"Structs/BigInt.html#/s:6BigIntAAV21isStrongProbablePrimeySbABF":{"name":"isStrongProbablePrime(_:)","abstract":"<p>Returns true iff this integer passes the <a href=\"https://en.wikipedia.org/wiki/Probable_prime\">strong probable prime test</a> for the specified base.</p>","parent_name":"BigInt"},"Structs/BigInt.html#/s:6BigIntAAV7isPrime6roundsSbSi_tF":{"name":"isPrime(rounds:)","abstract":"<p>Returns true if this integer is probably prime. Returns false if this integer is definitely not prime.</p>","parent_name":"BigInt"},"Structs/BigInt.html#/s:6BigIntAAV3alloiyA2B_ABtFZ":{"name":"&<<(_:_:)","abstract":"<p>Undocumented</p>","parent_name":"BigInt"},"Structs/BigInt.html#/s:6BigIntAAV4alleoiyyABz_ABtFZ":{"name":"&<<=(_:_:)","abstract":"<p>Undocumented</p>","parent_name":"BigInt"},"Structs/BigInt.html#/s:6BigIntAAV3aggoiyA2B_ABtFZ":{"name":"&>>(_:_:)","abstract":"<p>Undocumented</p>","parent_name":"BigInt"},"Structs/BigInt.html#/s:6BigIntAAV4aggeoiyyABz_ABtFZ":{"name":"&>>=(_:_:)","abstract":"<p>Undocumented</p>","parent_name":"BigInt"},"Structs/BigInt.html#/s:6BigIntAAV2lloiyA2B_xtSzRzlFZ":{"name":"<<(_:_:)","abstract":"<p>Undocumented</p>","parent_name":"BigInt"},"Structs/BigInt.html#/s:6BigIntAAV3lleoiyyABz_xtSzRzlFZ":{"name":"<<=(_:_:)","abstract":"<p>Undocumented</p>","parent_name":"BigInt"},"Structs/BigInt.html#/s:6BigIntAAV2ggoiyA2B_xtSzRzlFZ":{"name":">>(_:_:)","abstract":"<p>Undocumented</p>","parent_name":"BigInt"},"Structs/BigInt.html#/s:6BigIntAAV3ggeoiyyABz_xtSzRzlFZ":{"name":">>=(_:_:)","abstract":"<p>Undocumented</p>","parent_name":"BigInt"},"Structs/BigInt.html#/s:6BigIntAAV10squareRootAByF":{"name":"squareRoot()","abstract":"<p>Returns the integer square root of a big integer; i.e., the largest integer whose square isn&rsquo;t greater than <code>value</code>.</p>","parent_name":"BigInt"},"Structs/BigInt.html#/s:Sx6StrideQa":{"name":"Stride","parent_name":"BigInt"},"Structs/BigInt.html#/s:6BigIntAAV8advanced2byA2B_tF":{"name":"advanced(by:)","abstract":"<p>Returns <code>self + n</code>.</p>","parent_name":"BigInt"},"Structs/BigInt.html#/s:6BigIntAAV8distance2toA2B_tF":{"name":"distance(to:)","abstract":"<p>Returns <code>other - self</code>.</p>","parent_name":"BigInt"},"Structs/BigInt.html#/s:6BigIntAAV_5radixABSgx_SitcSyRzlufc":{"name":"init(_:radix:)","abstract":"<p>Initialize a big integer from an ASCII representation in a given radix. Numerals above <code>9</code> are represented by","parent_name":"BigInt"},"Structs/BigInt.html#/s:6BigIntAAV20unicodeScalarLiteralABs7UnicodeO0D0V_tcfc":{"name":"init(unicodeScalarLiteral:)","abstract":"<p>Initialize a new big integer from a Unicode scalar.","parent_name":"BigInt"},"Structs/BigInt.html#/s:6BigIntAAV30extendedGraphemeClusterLiteralABSS_tcfc":{"name":"init(extendedGraphemeClusterLiteral:)","abstract":"<p>Initialize a new big integer from an extended grapheme cluster.","parent_name":"BigInt"},"Structs/BigInt.html#/s:6BigIntAAV13stringLiteralABSS_tcfc":{"name":"init(stringLiteral:)","abstract":"<p>Initialize a new big integer from a decimal number represented by a string literal of arbitrary length.","parent_name":"BigInt"},"Structs/BigInt.html#/s:6BigIntAAV11descriptionSSvp":{"name":"description","abstract":"<p>Return the decimal representation of this integer.</p>","parent_name":"BigInt"},"Structs/BigInt.html#/s:6BigIntAAV21playgroundDescriptionypvp":{"name":"playgroundDescription","abstract":"<p>Return the playground quick look representation of this integer.</p>","parent_name":"BigInt"},"Structs/BigInt.html#/s:6BigIntAAV6negateyyF":{"name":"negate()","abstract":"<p>Undocumented</p>","parent_name":"BigInt"},"Structs/BigInt.html#/s:6BigIntAAV1soiyA2B_ABtFZ":{"name":"-(_:_:)","abstract":"<p>Subtract <code>b</code> from <code>a</code> and return the result.</p>","parent_name":"BigInt"},"Structs/BigInt.html#/s:6BigIntAAV2seoiyyABz_ABtFZ":{"name":"-=(_:_:)","abstract":"<p>Subtract <code>b</code> from <code>a</code> in place.</p>","parent_name":"BigInt"},"Structs/BigInt.html#/s:6BigIntAAV8bitWidthSivp":{"name":"bitWidth","abstract":"<p>Undocumented</p>","parent_name":"BigInt"},"Structs/BigInt.html#/s:6BigIntAAV20trailingZeroBitCountSivp":{"name":"trailingZeroBitCount","abstract":"<p>Undocumented</p>","parent_name":"BigInt"},"Structs/BigInt/Words.html":{"name":"Words","parent_name":"BigInt"},"Structs/BigInt.html#/s:6BigIntAAV5wordsAB5WordsVvp":{"name":"words","abstract":"<p>Undocumented</p>","parent_name":"BigInt"},"Structs/BigInt.html#/s:6BigIntAAV5wordsABx_tcSTRzSu7ElementRtzlufc":{"name":"init(words:)","abstract":"<p>Undocumented</p>","parent_name":"BigInt"},"Structs/BigUInt/Words.html#/s:Sl10startIndex0B0Qzvp":{"name":"startIndex","parent_name":"Words"},"Structs/BigUInt/Words.html#/s:Sl8endIndex0B0Qzvp":{"name":"endIndex","parent_name":"Words"},"Structs/BigUInt/Words.html#/s:Sly7ElementQz5IndexQzcip":{"name":"subscript(_:)","parent_name":"Words"},"Structs/BigUInt.html#/s:6BigInt0A4UIntV4Worda":{"name":"Word","abstract":"<p>The type representing a digit in <code>BigUInt</code>&lsquo;s underlying number system.</p>","parent_name":"BigUInt"},"Structs/BigUInt.html#/s:6BigInt0A4UIntVACycfc":{"name":"init()","abstract":"<p>Initializes a new BigUInt with value 0.</p>","parent_name":"BigUInt"},"Structs/BigUInt.html#/s:6BigInt0A4UIntV5wordsACSaySuG_tcfc":{"name":"init(words:)","abstract":"<p>Initializes a new BigUInt with the specified digits. The digits are ordered from least to most significant.</p>","parent_name":"BigUInt"},"Structs/BigUInt.html#/s:6BigInt0A4UIntV1poiyA2C_ACtFZ":{"name":"+(_:_:)","abstract":"<p>Add <code>a</code> and <code>b</code> together and return the result.</p>","parent_name":"BigUInt"},"Structs/BigUInt.html#/s:6BigInt0A4UIntV2peoiyyACz_ACtFZ":{"name":"+=(_:_:)","abstract":"<p>Add <code>a</code> and <code>b</code> together, and store the sum in <code>a</code>.</p>","parent_name":"BigUInt"},"Structs/BigUInt.html#/s:Sz8isSignedSbvpZ":{"name":"isSigned","parent_name":"BigUInt"},"Structs/BigUInt.html#/s:6BigInt0A4UIntV6signumACyF":{"name":"signum()","abstract":"<p>Returns <code>1</code> if this value is, positive; otherwise, <code>0</code>.</p>","parent_name":"BigUInt"},"Structs/BigUInt.html#/s:6BigInt0A4UIntV1topyA2CFZ":{"name":"~(_:)","abstract":"<p>Return the ones&rsquo; complement of <code>a</code>.</p>","parent_name":"BigUInt"},"Structs/BigUInt.html#/s:6BigInt0A4UIntV2oeoiyyACz_ACtFZ":{"name":"|=(_:_:)","abstract":"<p>Calculate the bitwise OR of <code>a</code> and <code>b</code>, and store the result in <code>a</code>.</p>","parent_name":"BigUInt"},"Structs/BigUInt.html#/s:6BigInt0A4UIntV2aeoiyyACz_ACtFZ":{"name":"&=(_:_:)","abstract":"<p>Calculate the bitwise AND of <code>a</code> and <code>b</code> and return the result.</p>","parent_name":"BigUInt"},"Structs/BigUInt.html#/s:6BigInt0A4UIntV2xeoiyyACz_ACtFZ":{"name":"^=(_:_:)","abstract":"<p>Calculate the bitwise XOR of <code>a</code> and <code>b</code> and return the result.</p>","parent_name":"BigUInt"},"Structs/BigUInt.html#/s:Se4fromxs7Decoder_p_tKcfc":{"name":"init(from:)","parent_name":"BigUInt"},"Structs/BigUInt.html#/s:SE6encode2toys7Encoder_p_tKF":{"name":"encode(to:)","parent_name":"BigUInt"},"Structs/BigUInt.html#/s:6BigInt0A4UIntV7compareySo18NSComparisonResultVAC_ACtFZ":{"name":"compare(_:_:)","abstract":"<p>Compare <code>a</code> to <code>b</code> and return an <code>NSComparisonResult</code> indicating their order.</p>","parent_name":"BigUInt"},"Structs/BigUInt.html#/s:6BigInt0A4UIntV2eeoiySbAC_ACtFZ":{"name":"==(_:_:)","abstract":"<p>Return true iff <code>a</code> is equal to <code>b</code>.</p>","parent_name":"BigUInt"},"Structs/BigUInt.html#/s:6BigInt0A4UIntV1loiySbAC_ACtFZ":{"name":"<(_:_:)","abstract":"<p>Return true iff <code>a</code> is less than <code>b</code>.</p>","parent_name":"BigUInt"},"Structs/BigUInt.html#/s:6BigInt0A4UIntVyACSWcfc":{"name":"init(_:)","abstract":"<p>Initialize a BigInt from bytes accessed from an UnsafeRawBufferPointer</p>","parent_name":"BigUInt"},"Structs/BigUInt.html#/s:6BigInt0A4UIntVyAC10Foundation4DataVcfc":{"name":"init(_:)","abstract":"<p>Initializes an integer from the bits stored inside a piece of <code>Data</code>.","parent_name":"BigUInt"},"Structs/BigUInt.html#/s:6BigInt0A4UIntV9serialize10Foundation4DataVyF":{"name":"serialize()","abstract":"<p>Return a <code>Data</code> value that contains the base-256 representation of this integer, in network (big-endian) byte order.</p>","parent_name":"BigUInt"},"Structs/BigUInt.html#/s:6BigInt0A4UIntV20quotientAndRemainder10dividingByAC0D0_AC9remaindertAC_tF":{"name":"quotientAndRemainder(dividingBy:)","abstract":"<p>Divide this integer by <code>y</code> and return the resulting quotient and remainder.</p>","parent_name":"BigUInt"},"Structs/BigUInt.html#/s:6BigInt0A4UIntV1doiyA2C_ACtFZ":{"name":"/(_:_:)","abstract":"<p>Divide <code>x</code> by <code>y</code> and return the quotient.</p>","parent_name":"BigUInt"},"Structs/BigUInt.html#/s:6BigInt0A4UIntV1roiyA2C_ACtFZ":{"name":"%(_:_:)","abstract":"<p>Divide <code>x</code> by <code>y</code> and return the remainder.</p>","parent_name":"BigUInt"},"Structs/BigUInt.html#/s:6BigInt0A4UIntV2deoiyyACz_ACtFZ":{"name":"/=(_:_:)","abstract":"<p>Divide <code>x</code> by <code>y</code> and store the quotient in <code>x</code>.</p>","parent_name":"BigUInt"},"Structs/BigUInt.html#/s:6BigInt0A4UIntV2reoiyyACz_ACtFZ":{"name":"%=(_:_:)","abstract":"<p>Divide <code>x</code> by <code>y</code> and store the remainder in <code>x</code>.</p>","parent_name":"BigUInt"},"Structs/BigUInt.html#/s:6BigInt0A4UIntV5poweryACSiF":{"name":"power(_:)","abstract":"<p>Returns this integer raised to the power <code>exponent</code>.</p>","parent_name":"BigUInt"},"Structs/BigUInt.html#/s:6BigInt0A4UIntV5power_7modulusA2C_ACtF":{"name":"power(_:modulus:)","abstract":"<p>Returns the remainder of this integer raised to the power <code>exponent</code> in modulo arithmetic under <code>modulus</code>.</p>","parent_name":"BigUInt"},"Structs/BigUInt.html#/s:Sz7exactlyxSgqd___tcSBRd__lufc":{"name":"init(exactly:)","parent_name":"BigUInt"},"Structs/BigUInt.html#/s:Szyxqd__cSBRd__lufc":{"name":"init(_:)","parent_name":"BigUInt"},"Structs/BigUInt.html#/s:6BigInt0A4UIntV21greatestCommonDivisor4withA2C_tF":{"name":"greatestCommonDivisor(with:)","abstract":"<p>Returns the greatest common divisor of <code>self</code> and <code>b</code>.</p>","parent_name":"BigUInt"},"Structs/BigUInt.html#/s:6BigInt0A4UIntV7inverseyACSgACF":{"name":"inverse(_:)","abstract":"<p>Returns the <a href=\"https://en.wikipedia.org/wiki/Extended_Euclidean_algorithm#Modular_integers\">multiplicative inverse of this integer in modulo <code>modulus</code> arithmetic</a>,","parent_name":"BigUInt"},"Structs/BigUInt.html#/s:6BigInt0A4UIntV4hash4intoys6HasherVz_tF":{"name":"hash(into:)","abstract":"<p>Append this <code>BigUInt</code> to the specified hasher.</p>","parent_name":"BigUInt"},"Structs/BigUInt.html#/s:Sj7exactlyxSgqd___tcSzRd__lufc":{"name":"init(exactly:)","parent_name":"BigUInt"},"Structs/BigUInt.html#/s:Szyxqd__cSzRd__lufc":{"name":"init(_:)","parent_name":"BigUInt"},"Structs/BigUInt.html#/s:Sz18truncatingIfNeededxqd___tcSzRd__lufc":{"name":"init(truncatingIfNeeded:)","parent_name":"BigUInt"},"Structs/BigUInt.html#/s:Sz8clampingxqd___tcSzRd__lufc":{"name":"init(clamping:)","parent_name":"BigUInt"},"Structs/BigUInt.html#/s:6BigInt0A4UIntV14integerLiteralACs6UInt64V_tcfc":{"name":"init(integerLiteral:)","abstract":"<p>Initialize a new big integer from an integer literal.</p>","parent_name":"BigUInt"},"Structs/BigUInt.html#/s:6BigInt0A4UIntV8multiply6byWordySu_tF":{"name":"multiply(byWord:)","abstract":"<p>Multiply this big integer by a single word, and store the result in place of the original big integer.</p>","parent_name":"BigUInt"},"Structs/BigUInt.html#/s:6BigInt0A4UIntV10multiplied6byWordACSu_tF":{"name":"multiplied(byWord:)","abstract":"<p>Multiply this big integer by a single Word, and return the result.</p>","parent_name":"BigUInt"},"Structs/BigUInt.html#/s:6BigInt0A4UIntV14multiplyAndAdd__9shiftedByyAC_SuSitF":{"name":"multiplyAndAdd(_:_:shiftedBy:)","abstract":"<p>Multiply <code>x</code> by <code>y</code>, and add the result to this integer, optionally shifted <code>shift</code> words to the left.</p>","parent_name":"BigUInt"},"Structs/BigUInt.html#/s:6BigInt0A4UIntV10multiplied2byA2C_tF":{"name":"multiplied(by:)","abstract":"<p>Multiply this integer by <code>y</code> and return the result.</p>","parent_name":"BigUInt"},"Structs/BigUInt.html#/s:6BigInt0A4UIntV25directMultiplicationLimitSivpZ":{"name":"directMultiplicationLimit","abstract":"<p>Multiplication switches to an asymptotically better recursive algorithm when arguments have more words than this limit.</p>","parent_name":"BigUInt"},"Structs/BigUInt.html#/s:6BigInt0A4UIntV1moiyA2C_ACtFZ":{"name":"*(_:_:)","abstract":"<p>Multiply <code>a</code> by <code>b</code> and return the result.</p>","parent_name":"BigUInt"},"Structs/BigUInt.html#/s:6BigInt0A4UIntV2meoiyyACz_ACtFZ":{"name":"*=(_:_:)","abstract":"<p>Multiply <code>a</code> by <code>b</code> and store the result in <code>a</code>.</p>","parent_name":"BigUInt"},"Structs/BigUInt.html#/s:6BigInt0A4UIntV21isStrongProbablePrimeySbACF":{"name":"isStrongProbablePrime(_:)","abstract":"<p>Returns true iff this integer passes the <a href=\"https://en.wikipedia.org/wiki/Probable_prime\">strong probable prime test</a> for the specified base.</p>","parent_name":"BigUInt"},"Structs/BigUInt.html#/s:6BigInt0A4UIntV7isPrime6roundsSbSi_tF":{"name":"isPrime(rounds:)","abstract":"<p>Returns true if this integer is probably prime. Returns false if this integer is definitely not prime.</p>","parent_name":"BigUInt"},"Structs/BigUInt.html#/s:6BigInt0A4UIntV13randomInteger16withMaximumWidth5usingACSi_xztSGRzlFZ":{"name":"randomInteger(withMaximumWidth:using:)","abstract":"<p>Create a big unsigned integer consisting of <code>width</code> uniformly distributed random bits.</p>","parent_name":"BigUInt"},"Structs/BigUInt.html#/s:6BigInt0A4UIntV13randomInteger16withMaximumWidthACSi_tFZ":{"name":"randomInteger(withMaximumWidth:)","abstract":"<p>Create a big unsigned integer consisting of <code>width</code> uniformly distributed random bits.</p>","parent_name":"BigUInt"},"Structs/BigUInt.html#/s:6BigInt0A4UIntV13randomInteger14withExactWidth5usingACSi_xztSGRzlFZ":{"name":"randomInteger(withExactWidth:using:)","abstract":"<p>Create a big unsigned integer consisting of <code>width-1</code> uniformly distributed random bits followed by a one bit.</p>","parent_name":"BigUInt"},"Structs/BigUInt.html#/s:6BigInt0A4UIntV13randomInteger14withExactWidthACSi_tFZ":{"name":"randomInteger(withExactWidth:)","abstract":"<p>Create a big unsigned integer consisting of <code>width-1</code> uniformly distributed random bits followed by a one bit.</p>","parent_name":"BigUInt"},"Structs/BigUInt.html#/s:6BigInt0A4UIntV13randomInteger8lessThan5usingA2C_xztSGRzlFZ":{"name":"randomInteger(lessThan:using:)","abstract":"<p>Create a uniformly distributed random unsigned integer that&rsquo;s less than the specified limit.</p>","parent_name":"BigUInt"},"Structs/BigUInt.html#/s:6BigInt0A4UIntV13randomInteger8lessThanA2C_tFZ":{"name":"randomInteger(lessThan:)","abstract":"<p>Create a uniformly distributed random unsigned integer that&rsquo;s less than the specified limit.</p>","parent_name":"BigUInt"},"Structs/BigUInt.html#/s:6BigInt0A4UIntV3ggeoiyyACz_xtSzRzlFZ":{"name":">>=(_:_:)","abstract":"<p>Undocumented</p>","parent_name":"BigUInt"},"Structs/BigUInt.html#/s:6BigInt0A4UIntV3lleoiyyACz_xtSzRzlFZ":{"name":"<<=(_:_:)","abstract":"<p>Undocumented</p>","parent_name":"BigUInt"},"Structs/BigUInt.html#/s:6BigInt0A4UIntV2ggoiyA2C_xtSzRzlFZ":{"name":">>(_:_:)","abstract":"<p>Undocumented</p>","parent_name":"BigUInt"},"Structs/BigUInt.html#/s:6BigInt0A4UIntV2lloiyA2C_xtSzRzlFZ":{"name":"<<(_:_:)","abstract":"<p>Undocumented</p>","parent_name":"BigUInt"},"Structs/BigUInt.html#/s:6BigInt0A4UIntV10squareRootACyF":{"name":"squareRoot()","abstract":"<p>Returns the integer square root of a big integer; i.e., the largest integer whose square isn&rsquo;t greater than <code>value</code>.</p>","parent_name":"BigUInt"},"Structs/BigUInt.html#/s:6BigInt0A4UIntV6Stridea":{"name":"Stride","abstract":"<p>A type that can represent the distance between two values ofa <code>BigUInt</code>.</p>","parent_name":"BigUInt"},"Structs/BigUInt.html#/s:6BigInt0A4UIntV8advanced2byAc2AV_tF":{"name":"advanced(by:)","abstract":"<p>Adds <code>n</code> to <code>self</code> and returns the result. Traps if the result would be less than zero.</p>","parent_name":"BigUInt"},"Structs/BigUInt.html#/s:6BigInt0A4UIntV8distance2toA2AVAC_tF":{"name":"distance(to:)","abstract":"<p>Returns the (potentially negative) difference between <code>self</code> and <code>other</code> as a <code><a href=\"36f8f5912051ae747ef441d6511ca4cbStructs/BigInt.html\">BigInt</a></code>. Never traps.</p>","parent_name":"BigUInt"},"Structs/BigUInt.html#/s:6BigInt0A4UIntV_5radixACSgx_SitcSyRzlufc":{"name":"init(_:radix:)","abstract":"<p>Initialize a big integer from an ASCII representation in a given radix. Numerals above <code>9</code> are represented by","parent_name":"BigUInt"},"Structs/BigUInt.html#/s:6BigInt0A4UIntV20unicodeScalarLiteralACs7UnicodeO0E0V_tcfc":{"name":"init(unicodeScalarLiteral:)","abstract":"<p>Initialize a new big integer from a Unicode scalar.","parent_name":"BigUInt"},"Structs/BigUInt.html#/s:6BigInt0A4UIntV30extendedGraphemeClusterLiteralACSS_tcfc":{"name":"init(extendedGraphemeClusterLiteral:)","abstract":"<p>Initialize a new big integer from an extended grapheme cluster.","parent_name":"BigUInt"},"Structs/BigUInt.html#/s:6BigInt0A4UIntV13stringLiteralACSS_tcfc":{"name":"init(stringLiteral:)","abstract":"<p>Initialize a new big integer from a decimal number represented by a string literal of arbitrary length.","parent_name":"BigUInt"},"Structs/BigUInt.html#/s:6BigInt0A4UIntV11descriptionSSvp":{"name":"description","abstract":"<p>Return the decimal representation of this integer.</p>","parent_name":"BigUInt"},"Structs/BigUInt.html#/s:6BigInt0A4UIntV21playgroundDescriptionypvp":{"name":"playgroundDescription","abstract":"<p>Return the playground quick look representation of this integer.</p>","parent_name":"BigUInt"},"Structs/BigUInt.html#/s:6BigInt0A4UIntV25subtractReportingOverflow_9shiftedBySbAC_SitF":{"name":"subtractReportingOverflow(_:shiftedBy:)","abstract":"<p>Subtract <code>other</code> from this integer in place, and return a flag indicating if the operation caused an","parent_name":"BigUInt"},"Structs/BigUInt.html#/s:6BigInt0A4UIntV28subtractingReportingOverflow_9shiftedByAC12partialValue_Sb8overflowtAC_SitF":{"name":"subtractingReportingOverflow(_:shiftedBy:)","abstract":"<p>Subtract <code>other</code> from this integer, returning the difference and a flag indicating arithmetic overflow.","parent_name":"BigUInt"},"Structs/BigUInt.html#/s:6BigInt0A4UIntV28subtractingReportingOverflowyAC12partialValue_Sb8overflowtACF":{"name":"subtractingReportingOverflow(_:)","abstract":"<p>Subtracts <code>other</code> from <code>self</code>, returning the result and a flag indicating arithmetic overflow.</p>","parent_name":"BigUInt"},"Structs/BigUInt.html#/s:6BigInt0A4UIntV8subtract_9shiftedByyAC_SitF":{"name":"subtract(_:shiftedBy:)","abstract":"<p>Subtract <code>other</code> from this integer in place.","parent_name":"BigUInt"},"Structs/BigUInt.html#/s:6BigInt0A4UIntV11subtracting_9shiftedByA2C_SitF":{"name":"subtracting(_:shiftedBy:)","abstract":"<p>Subtract <code>b</code> from this integer, and return the difference.","parent_name":"BigUInt"},"Structs/BigUInt.html#/s:6BigInt0A4UIntV9decrement9shiftedByySi_tF":{"name":"decrement(shiftedBy:)","abstract":"<p>Decrement this integer by one.</p>","parent_name":"BigUInt"},"Structs/BigUInt.html#/s:6BigInt0A4UIntV1soiyA2C_ACtFZ":{"name":"-(_:_:)","abstract":"<p>Subtract <code>b</code> from <code>a</code> and return the result.</p>","parent_name":"BigUInt"},"Structs/BigUInt.html#/s:6BigInt0A4UIntV2seoiyyACz_ACtFZ":{"name":"-=(_:_:)","abstract":"<p>Subtract <code>b</code> from <code>a</code> and store the result in <code>a</code>.</p>","parent_name":"BigUInt"},"Structs/BigUInt.html#/s:6BigInt0A4UIntV5bitAtSbSi_tcip":{"name":"subscript(bitAt:)","abstract":"<p>Undocumented</p>","parent_name":"BigUInt"},"Structs/BigUInt.html#/s:6BigInt0A4UIntV8bitWidthSivp":{"name":"bitWidth","abstract":"<p>The minimum number of bits required to represent this integer in binary.</p>","parent_name":"BigUInt"},"Structs/BigUInt.html#/s:6BigInt0A4UIntV19leadingZeroBitCountSivp":{"name":"leadingZeroBitCount","abstract":"<p>The number of leading zero bits in the binary representation of this integer in base <code>2^(Word.bitWidth)</code>.","parent_name":"BigUInt"},"Structs/BigUInt.html#/s:6BigInt0A4UIntV20trailingZeroBitCountSivp":{"name":"trailingZeroBitCount","abstract":"<p>The number of trailing zero bits in the binary representation of this integer.</p>","parent_name":"BigUInt"},"Structs/BigUInt/Words.html":{"name":"Words","parent_name":"BigUInt"},"Structs/BigUInt.html#/s:Sz5words5WordsQzvp":{"name":"words","parent_name":"BigUInt"},"Structs/BigUInt.html#/s:6BigInt0A4UIntV5wordsACx_tcSTRzSu7ElementRtzlufc":{"name":"init(words:)","abstract":"<p>Undocumented</p>","parent_name":"BigUInt"},"Structs/BigUInt.html":{"name":"BigUInt","abstract":"<p>An arbitary precision unsigned integer type, also known as a &ldquo;big integer&rdquo;.</p>"},"Structs/BigInt.html":{"name":"BigInt","abstract":"<p>An arbitary precision signed integer type, also known as a &ldquo;big integer&rdquo;.</p>"},"Extensions/String.html#/s:SS6BigIntEySSAA0A4UIntVcfc":{"name":"init(_:)","abstract":"<p>Initialize a new string with the base-10 representation of an unsigned big integer.</p>","parent_name":"String"},"Extensions/String.html#/s:SS6BigIntE_5radix9uppercaseSSAA0A4UIntV_SiSbtcfc":{"name":"init(_:radix:uppercase:)","abstract":"<p>Initialize a new string representing an unsigned big integer in the given radix (base).</p>","parent_name":"String"},"Extensions/String.html#/s:SS6BigIntE_5radix9uppercaseSSA2AV_SiSbtcfc":{"name":"init(_:radix:uppercase:)","abstract":"<p>Initialize a new string representing a signed big integer in the given radix (base).</p>","parent_name":"String"},"Extensions/BinaryFloatingPoint.html#/s:SB6BigInts17FixedWidthInteger11RawExponentRpzsAB0F11SignificandRpzrlEyxA2AVcfc":{"name":"init(_:)","abstract":"<p>Undocumented</p>","parent_name":"BinaryFloatingPoint"},"Extensions/BinaryFloatingPoint.html#/s:SB6BigInts17FixedWidthInteger11RawExponentRpzsAB0F11SignificandRpzrlEyxAA0A4UIntVcfc":{"name":"init(_:)","abstract":"<p>Undocumented</p>","parent_name":"BinaryFloatingPoint"},"Extensions/BinaryFloatingPoint.html":{"name":"BinaryFloatingPoint"},"Extensions/String.html":{"name":"String"},"Extensions.html":{"name":"Extensions","abstract":"<p>The following extensions are available globally.</p>"},"Structs.html":{"name":"Structures","abstract":"<p>The following structures are available globally.</p>"}}